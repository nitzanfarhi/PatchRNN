commit 4a2c4da1250d09c1477eff8e14a82b2573481f32
Author: Christoffer Dall <christoffer.dall@linaro.org>
Date:   Sun Oct 29 02:04:55 2017 +0100

    arm/arm64: KVM: Load the timer state when enabling the timer
    
    After being lazy with saving/restoring the timer state, we defer that
    work to vcpu_load and vcpu_put, which ensure that the timer state is
    loaded on the hardware timers whenever the VCPU runs.
    
    Unfortunately, we are failing to do that the first time vcpu_load()
    runs, because the timer has not yet been enabled at that time.  As long
    as the initialized timer state matches what happens to be in the
    hardware (a disabled timer, because we never leave the timer screaming),
    this does not show up as a problem, but is nevertheless incorrect.
    
    The solution is simple; disable preemption while setting the timer to be
    enabled, and call the timer load function when first enabling the timer.
    
    Acked-by: Marc Zyngier <marc.zyngier@arm.com>
    Signed-off-by: Christoffer Dall <christoffer.dall@linaro.org>

diff --git a/virt/kvm/arm/arch_timer.c b/virt/kvm/arm/arch_timer.c
index 2035cf251701..4db54ff08d9e 100644
--- a/virt/kvm/arm/arch_timer.c
+++ b/virt/kvm/arm/arch_timer.c
@@ -861,7 +861,11 @@ int kvm_timer_enable(struct kvm_vcpu *vcpu)
 		return ret;
 
 no_vgic:
+	preempt_disable();
 	timer->enabled = 1;
+	kvm_timer_vcpu_load_vgic(vcpu);
+	preempt_enable();
+
 	return 0;
 }
 

