commit e5157e313cd9c2d57f28873318d0bb29c77a9b1a
Author: Greg Kurz <gkurz@linux.vnet.ibm.com>
Date:   Fri Feb 5 11:46:18 2016 +0100

    virtio: optimize virtio_access_is_big_endian() for little-endian targets
    
    When adding cross-endian support, we introduced the TARGET_IS_BIENDIAN macro
    and the virtio_access_is_big_endian() helper to have a branchless fast path
    in the virtio memory accessors for targets that don't switch endian.
    
    This was considered as a strong requirement at the time.
    
    Now we have added a runtime check for virtio 1.0, which ruins the benefit
    of the virtio_access_is_big_endian() helper for always little-endian targets.
    
    With this patch, always little-endian targets stop checking for virtio 1.0,
    since the result is little-endian in all cases.
    
    Reviewed-by: Cornelia Huck <cornelia.huck@de.ibm.com>
    Reviewed-by: Laurent Vivier <lvivier@redhat.com>
    Signed-off-by: Greg Kurz <gkurz@linux.vnet.ibm.com>
    Reviewed-by: Michael S. Tsirkin <mst@redhat.com>
    Signed-off-by: Michael S. Tsirkin <mst@redhat.com>
    Reviewed-by: Laurent Vivier <lvivier@redhat.com>

diff --git a/include/hw/virtio/virtio-access.h b/include/hw/virtio/virtio-access.h
index f1f12afe90..8dc84f5203 100644
--- a/include/hw/virtio/virtio-access.h
+++ b/include/hw/virtio/virtio-access.h
@@ -19,13 +19,13 @@
 
 static inline bool virtio_access_is_big_endian(VirtIODevice *vdev)
 {
+#if defined(TARGET_IS_BIENDIAN)
+    return virtio_is_big_endian(vdev);
+#elif defined(TARGET_WORDS_BIGENDIAN)
     if (virtio_vdev_has_feature(vdev, VIRTIO_F_VERSION_1)) {
         /* Devices conforming to VIRTIO 1.0 or later are always LE. */
         return false;
     }
-#if defined(TARGET_IS_BIENDIAN)
-    return virtio_is_big_endian(vdev);
-#elif defined(TARGET_WORDS_BIGENDIAN)
     return true;
 #else
     return false;

