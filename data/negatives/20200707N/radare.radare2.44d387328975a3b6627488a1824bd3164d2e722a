commit 44d387328975a3b6627488a1824bd3164d2e722a
Author: Adrian Studer <github@adrianstuder.com>
Date:   Wed Jan 31 14:44:04 2018 -0800

    8051: allocate mapped memory

diff --git a/libr/anal/p/anal_8051.c b/libr/anal/p/anal_8051.c
index 16cfe6ade..bebdd24f3 100644
--- a/libr/anal/p/anal_8051.c
+++ b/libr/anal/p/anal_8051.c
@@ -21,16 +21,16 @@ static i8051_cpu_model cpu_models[] = {
 	{
 		.name = "8051-generic",
 		.map_code	= 0,
-		.map_idata	= 0x00010000,
-		.map_sfr	= 0x00010000,
-		.map_xdata	= 0x00010100,
+		.map_idata	= 0x10000000,
+		.map_sfr	= 0x10000100,
+		.map_xdata	= 0x20000000,
 		.map_pdata	= 0x00000000
 	},
 	{
 		.name = "8051-shared-code-xdata",
 		.map_code	= 0,
-		.map_idata	= 0x00010000,
-		.map_sfr	= 0x00010000,
+		.map_idata	= 0x10000000,
+		.map_sfr	= 0x10000100,
 		.map_xdata	= 0x00000000,
 		.map_pdata	= 0x00000000
 	},
@@ -63,6 +63,33 @@ static ut32 i8051_reg_read (RReg *reg, const char *regname) {
 	return 0;
 }
 
+static RIODesc *mem_idata = 0;
+static RIODesc *mem_sfr = 0;
+static RIODesc *mem_xdata = 0;
+
+static RIODesc* cpu_memory_map (RIO *io, RIODesc *desc, ut32 addr, ut32 size) {
+	RList *maps = 0;
+	RIOMap *map = 0;
+	char *mstr = r_str_newf ("malloc://%d", size);
+
+	if (desc) {
+		maps = r_io_map_get_for_fd (io, desc->fd);
+		if (maps) {
+			map = r_list_get_n (maps, 0);
+		}
+	}
+
+	if (map) {
+		r_io_map_remap (io, map->id, addr);
+	} else {
+		desc = r_io_open_at (io, mstr, R_IO_READ | R_IO_WRITE, 0, addr);
+	}
+
+	if (maps) r_list_free (maps);
+	r_str_free (mstr);
+	return desc;
+}
+
 static void set_cpu_model(RAnal *anal, bool force) {
 	if (!anal->reg) {
 		return;
@@ -83,9 +110,13 @@ static void set_cpu_model(RAnal *anal, bool force) {
 		}
 		cpu_curr_model = &cpu_models[i];
 
-		// TODO: Allocate new memory (r_io sections?) as needed
-		// TODO: Add flags as needed
-		// TODO: Rearrange above gracefully when switching cpu
+		// (Re)allocate memory as needed.
+		// We assume that code is already allocated with firmware image
+		mem_idata = cpu_memory_map (anal->iob.io, mem_idata, cpu_models[i].map_idata, 0x100);
+		mem_sfr = cpu_memory_map (anal->iob.io, mem_sfr, cpu_models[i].map_sfr, 0x100);
+		mem_xdata = cpu_memory_map (anal->iob.io, mem_xdata, cpu_models[i].map_xdata, 0x10000);
+
+		// TODO: Add flags as needed - seek using pseudo registers works w/o flags
 
 		// set memory map registers
 		i8051_reg_write (anal->reg, "_code", cpu_models[i].map_code);

