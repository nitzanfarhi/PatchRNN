commit a516cb8dd1e29cad4e5a63a469cf33d835ff9011
Author: Jason Rassi <rassi@10gen.com>
Date:   Fri Apr 29 12:56:49 2016 -0400

    SERVER-22371 Rewrite ICU locale validation in CollatorFactoryICU
    
    This removes the dependency of ICU locale validation on
    uloc_getDisplayName() (which relies on data we will not be packaging),
    and fixes a few outstanding issues in locale validation (adds checks
    for "root" fallback, locale containing null byte, bogus locale).

diff --git a/src/mongo/db/query/collation/collator_factory_icu.cpp b/src/mongo/db/query/collation/collator_factory_icu.cpp
index a6943a59f1..395c6300a8 100644
--- a/src/mongo/db/query/collation/collator_factory_icu.cpp
+++ b/src/mongo/db/query/collation/collator_factory_icu.cpp
@@ -42,6 +42,8 @@ namespace mongo {
 
 namespace {
 
+const char kFallbackLocaleName[] = "root";
+
 // Helper methods for converting between ICU attributes and types used by CollationSpec.
 
 UColAttributeValue boolToAttribute(bool value) {
@@ -529,20 +531,6 @@ StatusWith<CollationSpec> parseToCollationSpec(const BSONObj& spec,
     return parsedSpec;
 }
 
-// Checks if localeID is recognized by ICU.
-// TODO: Determine if there is a better way to validate the locale string.
-bool isValidLocale(const std::string& localeID) {
-    size_t bufferSize = 100;
-    UErrorCode status = U_BUFFER_OVERFLOW_ERROR;
-    while (status == U_BUFFER_OVERFLOW_ERROR) {
-        status = U_ZERO_ERROR;
-        UChar buffer[bufferSize];
-        uloc_getDisplayName(localeID.c_str(), NULL, &buffer[0], bufferSize, &status);
-        bufferSize = 10 * bufferSize;
-    }
-    return !U_FAILURE(status) && status != U_USING_DEFAULT_WARNING;
-}
-
 // Extracts the localeID from 'spec', if present.
 StatusWith<std::string> parseLocaleID(const BSONObj& spec) {
     std::string localeID;
@@ -550,6 +538,11 @@ StatusWith<std::string> parseLocaleID(const BSONObj& spec) {
     if (!status.isOK()) {
         return status;
     }
+    if (localeID.find('\0') != std::string::npos) {
+        return {ErrorCodes::BadValue,
+                str::stream() << "Field '" << CollationSpec::kLocaleField
+                              << "' cannot contain null byte. Collation spec: " << spec};
+    }
     return localeID;
 }
 
@@ -568,25 +561,24 @@ StatusWith<std::unique_ptr<CollatorInterface>> CollatorFactoryICU::makeFromBSON(
     if (parsedLocaleID.getValue() == CollationSpec::kSimpleBinaryComparison) {
         if (spec.nFields() > 1) {
             return {ErrorCodes::FailedToParse,
-                    str::stream() << "If locale=default, no other fields should be present in: "
-                                  << spec};
+                    str::stream() << "If " << CollationSpec::kLocaleField << "="
+                                  << CollationSpec::kSimpleBinaryComparison
+                                  << ", no other fields should be present in: " << spec};
         }
         return {nullptr};
     }
 
-    // Check that the locale ID is recognizable by ICU.
-    if (!isValidLocale(parsedLocaleID.getValue())) {
+    // Construct an icu::Locale.
+    auto userLocale = icu::Locale::createFromName(parsedLocaleID.getValue().c_str());
+    if (userLocale.isBogus()) {
         return {ErrorCodes::BadValue,
                 str::stream() << "Field '" << CollationSpec::kLocaleField
-                              << "' is not a valid ICU locale in: " << spec};
+                              << "' is not valid in: " << spec};
     }
 
-    // Construct an icu::Locale.
-    auto locale = icu::Locale::createFromName(parsedLocaleID.getValue().c_str());
-
     // Construct an icu::Collator.
     UErrorCode status = U_ZERO_ERROR;
-    std::unique_ptr<icu::Collator> icuCollator(icu::Collator::createInstance(locale, status));
+    std::unique_ptr<icu::Collator> icuCollator(icu::Collator::createInstance(userLocale, status));
     if (U_FAILURE(status)) {
         icu::ErrorCode icuError;
         icuError.set(status);
@@ -595,9 +587,27 @@ StatusWith<std::unique_ptr<CollatorInterface>> CollatorFactoryICU::makeFromBSON(
                               << ". Collation spec: " << spec};
     }
 
+    // Check that the locale ID is recognized by ICU. Constructing an icu::Collator from an
+    // unrecognized locale will cause the collator to fall back on the default locale.
+    icu::Locale collatorLocale = icuCollator->getLocale(ULOC_VALID_LOCALE, status);
+    if (U_FAILURE(status)) {
+        icu::ErrorCode icuError;
+        icuError.set(status);
+        return {ErrorCodes::OperationFailed,
+                str::stream() << "Failed to get locale from icu::Collator: " << icuError.errorName()
+                              << ". Collation spec: " << spec};
+    }
+    const char* collatorLocaleBaseName = collatorLocale.getBaseName();
+    if (str::equals("", collatorLocaleBaseName) ||
+        str::equals(kFallbackLocaleName, collatorLocaleBaseName)) {
+        return {ErrorCodes::BadValue,
+                str::stream() << "Field '" << CollationSpec::kLocaleField
+                              << "' is not a recognized ICU locale in: " << spec};
+    }
+
     // Construct a CollationSpec using the options provided in spec or the defaults in icuCollator.
-    // Use locale.getName() for the localeID, since it is canonicalized and includes options.
-    auto parsedSpec = parseToCollationSpec(spec, locale.getName(), icuCollator.get());
+    // Use userLocale.getName() for the localeID, since it is canonicalized and includes options.
+    auto parsedSpec = parseToCollationSpec(spec, userLocale.getName(), icuCollator.get());
     if (!parsedSpec.isOK()) {
         return parsedSpec.getStatus();
     }
diff --git a/src/mongo/db/query/collation/collator_factory_icu_test.cpp b/src/mongo/db/query/collation/collator_factory_icu_test.cpp
index 771077b595..a25ab85966 100644
--- a/src/mongo/db/query/collation/collator_factory_icu_test.cpp
+++ b/src/mongo/db/query/collation/collator_factory_icu_test.cpp
@@ -53,16 +53,6 @@ TEST(CollatorFactoryICUTest, LocaleStringCanonicalizesSuccessfully) {
     ASSERT_EQ("en_US", collator.getValue()->getSpec().localeID);
 }
 
-TEST(CollatorFactoryICUTest, LocaleKeywordsParseSuccessfully) {
-    CollatorFactoryICU factory;
-    auto collator = factory.makeFromBSON(
-        BSON("locale"
-             << "en_US@calendar=islamic;collation=phonebook;currency=IEP;numbers=arab"));
-    ASSERT_OK(collator.getStatus());
-    ASSERT_EQ("en_US@calendar=islamic;collation=phonebook;currency=IEP;numbers=arab",
-              collator.getValue()->getSpec().localeID);
-}
-
 TEST(CollatorFactoryICUTest, SimpleLocaleReturnsNullPointer) {
     CollatorFactoryICU factory;
     auto collator = factory.makeFromBSON(BSON("locale"
@@ -87,7 +77,7 @@ TEST(CollatorFactoryICUTest, LocaleFieldNotAStringFailsToParse) {
     ASSERT_EQ(collator.getStatus(), ErrorCodes::TypeMismatch);
 }
 
-TEST(CollatorFactoryICUTest, InvalidLocaleFieldFailsToParse) {
+TEST(CollatorFactoryICUTest, UnrecognizedLocaleFieldFailsToParse) {
     CollatorFactoryICU factory;
     auto collator = factory.makeFromBSON(BSON("locale"
                                               << "garbage"));
@@ -95,18 +85,50 @@ TEST(CollatorFactoryICUTest, InvalidLocaleFieldFailsToParse) {
     ASSERT_EQ(collator.getStatus(), ErrorCodes::BadValue);
 }
 
-TEST(CollatorFactoryICUTest, InvalidLocaleKeywordFailsToParse) {
+TEST(CollatorFactoryICUTest, LocaleEmptyStringDisallowed) {
+    CollatorFactoryICU factory;
+    auto collator = factory.makeFromBSON(BSON("locale"
+                                              << ""));
+    ASSERT_NOT_OK(collator.getStatus());
+    ASSERT_EQ(collator.getStatus(), ErrorCodes::BadValue);
+}
+
+TEST(CollatorFactoryICUTest, LongLocaleFieldDisallowed) {
     CollatorFactoryICU factory;
     auto collator = factory.makeFromBSON(BSON("locale"
-                                              << "en_US@invalid=phonebook"));
+                                              << "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"));
     ASSERT_NOT_OK(collator.getStatus());
     ASSERT_EQ(collator.getStatus(), ErrorCodes::BadValue);
 }
 
-TEST(CollatorFactoryICUTest, InvalidLocaleKeywordValueFailsToParse) {
+TEST(CollatorFactoryICUTest, LongLocaleFieldWithKeywordsDisallowed) {
     CollatorFactoryICU factory;
     auto collator = factory.makeFromBSON(BSON("locale"
-                                              << "en_US@calendar=invalid"));
+                                              << "en_US@xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx=y"));
+    ASSERT_NOT_OK(collator.getStatus());
+    ASSERT_EQ(collator.getStatus(), ErrorCodes::BadValue);
+}
+
+TEST(CollatorFactoryICUTest, LocaleRootDisallowed) {
+    CollatorFactoryICU factory;
+    auto collator = factory.makeFromBSON(BSON("locale"
+                                              << "root"));
+    ASSERT_NOT_OK(collator.getStatus());
+    ASSERT_EQ(collator.getStatus(), ErrorCodes::BadValue);
+}
+
+TEST(CollatorFactoryICUTest, LocaleRootCanonicalizedDisallowed) {
+    CollatorFactoryICU factory;
+    auto collator = factory.makeFromBSON(BSON("locale"
+                                              << "ROOT@collation=search"));
+    ASSERT_NOT_OK(collator.getStatus());
+    ASSERT_EQ(collator.getStatus(), ErrorCodes::BadValue);
+}
+
+TEST(CollatorFactoryICUTest, LocaleStringCannotContainNullByte) {
+    CollatorFactoryICU factory;
+    auto collator =
+        factory.makeFromBSON(BSON("locale" << StringData("en_US\0", StringData::LiteralTag())));
     ASSERT_NOT_OK(collator.getStatus());
     ASSERT_EQ(collator.getStatus(), ErrorCodes::BadValue);
 }
@@ -998,4 +1020,22 @@ TEST(CollatorFactoryICUTest, FactoryInitializationSucceedsWithVietnameseLocale)
                                         << "vi")).getStatus());
 }
 
+TEST(CollatorFactoryICUTest, FactoryInitializationFailsWithAfrikaansLocale) {
+    CollatorFactoryICU factory;
+    ASSERT_NOT_OK(factory.makeFromBSON(BSON("locale"
+                                            << "af")).getStatus());
+}
+
+TEST(CollatorFactoryICUTest, FactoryInitializationFailsWithEsperantoLocale) {
+    CollatorFactoryICU factory;
+    ASSERT_NOT_OK(factory.makeFromBSON(BSON("locale"
+                                            << "eo")).getStatus());
+}
+
+TEST(CollatorFactoryICUTest, FactoryInitializationFailsWithSwahiliLocale) {
+    CollatorFactoryICU factory;
+    ASSERT_NOT_OK(factory.makeFromBSON(BSON("locale"
+                                            << "sw")).getStatus());
+}
+
 }  // namespace

