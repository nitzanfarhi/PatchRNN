commit 7d2b4daa67379960477568abda62b8ba9ee3a8aa
Author: Chris Mason <chris.mason@oracle.com>
Date:   Tue Aug 5 10:13:57 2008 -0400

    Btrfs: Fix the multi-bio code to save the original bio for completion
    
    The multi-bio code is responsible for duplicating blocks in raid1 and
    single spindle duplication.  It has counters to make sure all of
    the locations for a given extent are properly written before io completion
    is returned to the higher layers.
    
    But, it didn't always complete the same bio it was given, sometimes a
    clone was completed instead.  This lead to problems with the async
    work queues because they saved a pointer to the bio in a struct off
    bi_private.
    
    The fix is to remember the original bio and only complete that one.
    
    Signed-off-by: Chris Mason <chris.mason@oracle.com>

diff --git a/fs/btrfs/volumes.c b/fs/btrfs/volumes.c
index 0de51e37e789..09311b3066df 100644
--- a/fs/btrfs/volumes.c
+++ b/fs/btrfs/volumes.c
@@ -2070,6 +2070,7 @@ static int end_bio_multi_stripe(struct bio *bio,
 #endif
 {
 	struct btrfs_multi_bio *multi = bio->bi_private;
+	int is_orig_bio = 0;
 
 #if LINUX_VERSION_CODE <= KERNEL_VERSION(2,6,23)
 	if (bio->bi_size)
@@ -2078,7 +2079,14 @@ static int end_bio_multi_stripe(struct bio *bio,
 	if (err)
 		atomic_inc(&multi->error);
 
+	if (bio == multi->orig_bio)
+		is_orig_bio = 1;
+
 	if (atomic_dec_and_test(&multi->stripes_pending)) {
+		if (!is_orig_bio) {
+			bio_put(bio);
+			bio = multi->orig_bio;
+		}
 		bio->bi_private = multi->private;
 		bio->bi_end_io = multi->end_io;
 		/* only send an error to the higher layers if it is
@@ -2101,7 +2109,7 @@ static int end_bio_multi_stripe(struct bio *bio,
 #else
 		bio_endio(bio, err);
 #endif
-	} else {
+	} else if (!is_orig_bio) {
 		bio_put(bio);
 	}
 #if LINUX_VERSION_CODE <= KERNEL_VERSION(2,6,23)
@@ -2196,6 +2204,7 @@ int btrfs_map_bio(struct btrfs_root *root, int rw, struct bio *bio,
 	}
 	multi->end_io = first_bio->bi_end_io;
 	multi->private = first_bio->bi_private;
+	multi->orig_bio = first_bio;
 	atomic_set(&multi->stripes_pending, multi->num_stripes);
 
 	while(dev_nr < total_devs) {
diff --git a/fs/btrfs/volumes.h b/fs/btrfs/volumes.h
index 48a44f7a9385..c50e50580b51 100644
--- a/fs/btrfs/volumes.h
+++ b/fs/btrfs/volumes.h
@@ -95,6 +95,7 @@ struct btrfs_bio_stripe {
 struct btrfs_multi_bio {
 	atomic_t stripes_pending;
 	bio_end_io_t *end_io;
+	struct bio *orig_bio;
 	void *private;
 	atomic_t error;
 	int max_errors;

