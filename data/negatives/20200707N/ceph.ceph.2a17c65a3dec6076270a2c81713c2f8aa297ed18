commit 2a17c65a3dec6076270a2c81713c2f8aa297ed18
Author: Kefu Chai <kchai@redhat.com>
Date:   Sun Jul 22 11:02:02 2018 +0800

    msg/async/dpdk: fix FTBFS
    
    partially reverts 39ffec28
    
    Signed-off-by: Kefu Chai <kchai@redhat.com>

diff --git a/src/msg/async/dpdk/DPDKStack.h b/src/msg/async/dpdk/DPDKStack.h
index 6953dce11c..843975d056 100644
--- a/src/msg/async/dpdk/DPDKStack.h
+++ b/src/msg/async/dpdk/DPDKStack.h
@@ -183,7 +183,7 @@ class NativeConnectedSocketImpl : public ConnectedSocketImpl {
 template <typename Protocol>
 DPDKServerSocketImpl<Protocol>::DPDKServerSocketImpl(
   Protocol& proto, uint16_t port, const SocketOptions &opt, int type)
-  : ServerSocketImpl<Protocol>(type), _listener(proto.listen(port)) {}
+  : ServerSocketImpl(type), _listener(proto.listen(port)) {}
 
 template <typename Protocol>
 int DPDKServerSocketImpl<Protocol>::accept(ConnectedSocket *s, const SocketOptions &options, entity_addr_t *out, Worker *w) {
diff --git a/src/msg/async/dpdk/ethernet.h b/src/msg/async/dpdk/ethernet.h
index 4efd9416cf..5f3dec9ef1 100644
--- a/src/msg/async/dpdk/ethernet.h
+++ b/src/msg/async/dpdk/ethernet.h
@@ -32,11 +32,11 @@
 struct ethernet_address {
   ethernet_address() {}
 
-  explicit ethernet_address(const uint8_t *eaddr) {
+  ethernet_address(const uint8_t *eaddr) {
     std::copy(eaddr, eaddr + 6, mac.begin());
   }
 
-  explicit ethernet_address(std::initializer_list<uint8_t> eaddr) {
+  ethernet_address(std::initializer_list<uint8_t> eaddr) {
     assert(eaddr.size() == mac.size());
     std::copy(eaddr.begin(), eaddr.end(), mac.begin());
   }
@@ -58,7 +58,7 @@ std::ostream& operator<<(std::ostream& os, const ethernet_address& ea);
 struct ethernet {
   using address = ethernet_address;
   static address broadcast_address() {
-      return  {0xff, 0xff, 0xff, 0xff, 0xff, 0xff};
+      return {0xff, 0xff, 0xff, 0xff, 0xff, 0xff};
   }
   static constexpr uint16_t arp_hardware_type() { return 1; }
 };
diff --git a/src/msg/async/dpdk/net.cc b/src/msg/async/dpdk/net.cc
index 85e82d61ee..8b5c970e06 100644
--- a/src/msg/async/dpdk/net.cc
+++ b/src/msg/async/dpdk/net.cc
@@ -64,7 +64,7 @@ interface::interface(CephContext *cct, std::shared_ptr<DPDKDevice> dev, EventCen
         eh->src_mac = _hw_address;
         eh->eth_proto = uint16_t(l3pv.proto_num);
         *eh = eh->hton();
-        ldout(cct, 10) << "=== tx === proto " << std::hex << uint16_t(l3pv.proto_num)
+        ldout(this->cct, 10) << "=== tx === proto " << std::hex << uint16_t(l3pv.proto_num)
                        << " " << _hw_address << " -> " << l3pv.to
                        << " length " << std::dec << l3pv.p.len() << dendl;
         p = std::move(l3pv.p);
diff --git a/src/msg/async/dpdk/shared_ptr.h b/src/msg/async/dpdk/shared_ptr.h
index 382cda6b2d..d078063b33 100644
--- a/src/msg/async/dpdk/shared_ptr.h
+++ b/src/msg/async/dpdk/shared_ptr.h
@@ -115,9 +115,9 @@ public:
     template <typename X>
     friend class lw_shared_ptr;
     template <typename X>
-    friend class internal::lw_shared_ptr_accessors_esft;
+    friend class ::internal::lw_shared_ptr_accessors_esft;
     template <typename X, class Y>
-    friend class internal::lw_shared_ptr_accessors;
+    friend class ::internal::lw_shared_ptr_accessors;
 };
 
 template <typename T>
@@ -133,9 +133,9 @@ struct shared_ptr_no_esft : private lw_shared_ptr_counter_base {
     template <typename X>
     friend class lw_shared_ptr;
     template <typename X>
-    friend class internal::lw_shared_ptr_accessors_no_esft;
+    friend class ::internal::lw_shared_ptr_accessors_no_esft;
     template <typename X, class Y>
-    friend class internal::lw_shared_ptr_accessors;
+    friend class ::internal::lw_shared_ptr_accessors;
 };
 
 
@@ -209,7 +209,7 @@ struct lw_shared_ptr_accessors<T, std::void_t<decltype(lw_shared_ptr_deleter<T>{
 
 template <typename T>
 class lw_shared_ptr {
-    using accessors = internal::lw_shared_ptr_accessors<std::remove_const_t<T>>;
+    using accessors = ::internal::lw_shared_ptr_accessors<std::remove_const_t<T>>;
     using concrete_type = typename accessors::concrete_type;
     mutable lw_shared_ptr_counter_base* _p = nullptr;
 private:

