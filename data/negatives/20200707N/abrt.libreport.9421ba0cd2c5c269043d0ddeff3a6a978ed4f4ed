commit 9421ba0cd2c5c269043d0ddeff3a6a978ed4f4ed
Author: Matej Habrnal <mhabrnal@redhat.com>
Date:   Fri Sep 16 16:00:28 2016 +0200

    problem_report: make generate report configurable
    
    Make possible to configure max_frames count and max bt size in
    append_short_backtrace().
    
    Signed-off-by: Matej Habrnal <mhabrnal@redhat.com>

diff --git a/src/include/problem_report.h b/src/include/problem_report.h
index 8796d665..94319fde 100644
--- a/src/include/problem_report.h
+++ b/src/include/problem_report.h
@@ -161,6 +161,18 @@ extern "C" {
 struct problem_report;
 typedef struct problem_report problem_report_t;
 
+/*
+ * The problem report settings structure contains advance settings
+ * for report generating
+ */
+struct problem_report_settings
+{
+    int prs_shortbt_max_frames;       ///< generate only max top frames in %short_backtrace
+    size_t prs_shortbt_max_text_size; ///< short bt only if it is bigger then this
+};
+
+typedef struct problem_report_settings problem_report_settings_t;
+
 /*
  * Helpers for easily switching between FILE and struct strbuf
  */
@@ -333,6 +345,22 @@ int problem_formatter_load_file(problem_formatter_t* self, const char *path);
  */
 int problem_formatter_generate_report(const problem_formatter_t *self, problem_data_t *data, problem_report_t **report);
 
+/*
+ * Returns problem report settings from given formatter
+ *
+ * @param self Problem formatter
+ * @return problem report settings
+ */
+problem_report_settings_t problem_formatter_get_settings(const problem_formatter_t *self);
+
+/*
+ * Sets problem report settings to given formatter
+ *
+ * @param self Problem formatter
+ * @param settings Problem report settings
+ */
+void problem_formatter_set_settings(problem_formatter_t *self, problem_report_settings_t settings);
+
 #ifdef __cplusplus
 }
 #endif
diff --git a/src/lib/problem_report.c b/src/lib/problem_report.c
index 16d79688..ae395ea4 100644
--- a/src/lib/problem_report.c
+++ b/src/lib/problem_report.c
@@ -436,7 +436,7 @@ append_text(struct strbuf *result, const char *item_name, const char *content, b
 }
 
 static int
-append_short_backtrace(struct strbuf *result, problem_data_t *problem_data, size_t max_text_size, bool print_item_name)
+append_short_backtrace(struct strbuf *result, problem_data_t *problem_data, bool print_item_name, problem_report_settings_t *settings)
 {
     const problem_item *backtrace_item = problem_data_get_item_or_NULL(problem_data,
                                                                        FILENAME_BACKTRACE);
@@ -454,7 +454,7 @@ append_short_backtrace(struct strbuf *result, problem_data_t *problem_data, size
 
     char *truncated = NULL;
 
-    if (core_stacktrace_item || strlen(backtrace_item->content) >= max_text_size)
+    if (core_stacktrace_item || strlen(backtrace_item->content) >= settings->prs_shortbt_max_text_size)
     {
         log_debug("'backtrace' exceeds the text file size, going to append its short version");
 
@@ -487,8 +487,8 @@ append_short_backtrace(struct strbuf *result, problem_data_t *problem_data, size
             return 0;
         }
 
-        /* Get optimized thread stack trace for 10 top most frames */
-        truncated = sr_stacktrace_to_short_text(backtrace, 10);
+        /* Get optimized thread stack trace for max_frames top most frames */
+        truncated = sr_stacktrace_to_short_text(backtrace, settings->prs_shortbt_max_frames);
         sr_stacktrace_free(backtrace);
 
         if (!truncated)
@@ -513,7 +513,7 @@ append_short_backtrace(struct strbuf *result, problem_data_t *problem_data, size
 }
 
 static int
-append_item(struct strbuf *result, const char *item_name, problem_data_t *pd, GList *comment_fmt_spec)
+append_item(struct strbuf *result, const char *item_name, problem_data_t *pd, GList *comment_fmt_spec, problem_report_settings_t *settings)
 {
     bool print_item_name = (strncmp(item_name, "%bare_", strlen("%bare_")) != 0);
     if (!print_item_name)
@@ -538,7 +538,7 @@ append_item(struct strbuf *result, const char *item_name, problem_data_t *pd, GL
 
     /* Compat with previously-existed ad-hockery: %short_backtrace */
     if (strcmp(item_name, "%short_backtrace") == 0)
-        return append_short_backtrace(result, pd, CD_TEXT_ATT_SIZE_BZ, print_item_name);
+        return append_short_backtrace(result, pd, print_item_name, settings);
 
     /* Compat with previously-existed ad-hockery: %reporter */
     if (strcmp(item_name, "%reporter") == 0)
@@ -609,7 +609,7 @@ append_item(struct strbuf *result, const char *item_name, problem_data_t *pd, GL
     } while (0)
 
 static void
-format_section(section_t *section, problem_data_t *pd, GList *comment_fmt_spec, FILE *result)
+format_section(section_t *section, problem_data_t *pd, GList *comment_fmt_spec, FILE *result, problem_report_settings_t *settings)
 {
     int empty_lines = -1;
 
@@ -627,7 +627,7 @@ format_section(section_t *section, problem_data_t *pd, GList *comment_fmt_spec,
                 item = item->next;
                 if (str[0] == '-') /* "-name", ignore it */
                     continue;
-                append_item(output, str, pd, comment_fmt_spec);
+                append_item(output, str, pd, comment_fmt_spec, settings);
             }
 
             if (output->len != 0)
@@ -1030,14 +1030,37 @@ struct problem_formatter
     GList *pf_sections;         ///< parsed sections (struct section_t)
     GList *pf_extra_sections;   ///< user configured sections (struct extra_section)
     char  *pf_default_summary;  ///< default summary format
+    problem_report_settings_t pf_settings; ///< settings for report generating
 };
 
+static problem_report_settings_t
+problem_report_settings_init(void)
+{
+    problem_report_settings_t settings = {
+        .prs_shortbt_max_frames = 10,
+        .prs_shortbt_max_text_size = CD_TEXT_ATT_SIZE_BZ,
+    };
+
+    return settings;
+}
+
+problem_report_settings_t problem_formatter_get_settings(const problem_formatter_t *self)
+{
+    return self->pf_settings;
+}
+
+void problem_formatter_set_settings(problem_formatter_t *self, problem_report_settings_t settings)
+{
+    self->pf_settings = settings;
+}
+
 problem_formatter_t *
 problem_formatter_new(void)
 {
     problem_formatter_t *self = xzalloc(sizeof(*self));
 
     self->pf_default_summary = xstrdup("%reason%");
+    self->pf_settings = problem_report_settings_init();
 
     return self;
 }
@@ -1170,6 +1193,8 @@ problem_formatter_load_file(problem_formatter_t *self, const char *path)
 int
 problem_formatter_generate_report(const problem_formatter_t *self, problem_data_t *data, problem_report_t **report)
 {
+    problem_report_settings_t settings = problem_formatter_get_settings(self);
+
     problem_report_t *pr = problem_report_new();
 
     for (GList *iter = self->pf_extra_sections; iter; iter = g_list_next(iter))
@@ -1199,7 +1224,7 @@ problem_formatter_generate_report(const problem_formatter_t *self, problem_data_
             if (buffer != NULL)
             {
                 log_debug("Formatting section : '%s'", section->name);
-                format_section(section, data, self->pf_sections, buffer);
+                format_section(section, data, self->pf_sections, buffer, &settings);
             }
             else
                 log_warning("Unsupported section '%s'", section->name);

