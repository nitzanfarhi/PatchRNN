commit f36b36f8e26e9551c1f7ed1e750b5e6ee4e30b77
Author: millert <millert@openbsd.org>
Date:   Thu Sep 11 05:26:10 1997 +0000

    Fix {KERNFS,NULLFS,UMAPFS,UNION}_DIAGNOSTIC kernel compilation errors.
    From Alan Barrett <apb@iafrica.com> with some changes.

diff --git a/sys/miscfs/kernfs/kernfs_vfsops.c b/sys/miscfs/kernfs/kernfs_vfsops.c
index 147b75eeb65..dbbb12817c3 100644
--- a/sys/miscfs/kernfs/kernfs_vfsops.c
+++ b/sys/miscfs/kernfs/kernfs_vfsops.c
@@ -1,4 +1,4 @@
-/*	$OpenBSD: kernfs_vfsops.c,v 1.4 1996/06/20 14:30:08 mickey Exp $	*/
+/*	$OpenBSD: kernfs_vfsops.c,v 1.5 1997/09/11 05:26:10 millert Exp $	*/
 /*	$NetBSD: kernfs_vfsops.c,v 1.26 1996/04/22 01:42:27 christos Exp $	*/
 
 /*
@@ -121,7 +121,7 @@ kernfs_mount(mp, path, data, ndp, p)
 	struct vnode *rvp;
 
 #ifdef KERNFS_DIAGNOSTIC
-	printf("kernfs_mount(mp = %x)\n", mp);
+	printf("kernfs_mount(mp = %p)\n", mp);
 #endif
 
 	/*
@@ -139,7 +139,7 @@ kernfs_mount(mp, path, data, ndp, p)
 	rvp->v_type = VDIR;
 	rvp->v_flag |= VROOT;
 #ifdef KERNFS_DIAGNOSTIC
-	printf("kernfs_mount: root vp = %x\n", rvp);
+	printf("kernfs_mount: root vp = %p\n", rvp);
 #endif
 	fmp->kf_root = rvp;
 	mp->mnt_flag |= MNT_LOCAL;
@@ -180,7 +180,7 @@ kernfs_unmount(mp, mntflags, p)
 	struct vnode *rootvp = VFSTOKERNFS(mp)->kf_root;
 
 #ifdef KERNFS_DIAGNOSTIC
-	printf("kernfs_unmount(mp = %x)\n", mp);
+	printf("kernfs_unmount(mp = %p)\n", mp);
 #endif
 
 	if (mntflags & MNT_FORCE) {
@@ -227,7 +227,7 @@ kernfs_root(mp, vpp)
 	struct vnode *vp;
 
 #ifdef KERNFS_DIAGNOSTIC
-	printf("kernfs_root(mp = %x)\n", mp);
+	printf("kernfs_root(mp = %p)\n", mp);
 #endif
 
 	/*
@@ -261,7 +261,7 @@ kernfs_statfs(mp, sbp, p)
 	extern long numvnodes; /* XXX */
 
 #ifdef KERNFS_DIAGNOSTIC
-	printf("kernfs_statfs(mp = %x)\n", mp);
+	printf("kernfs_statfs(mp = %p)\n", mp);
 #endif
 
 #ifdef COMPAT_09
diff --git a/sys/miscfs/kernfs/kernfs_vnops.c b/sys/miscfs/kernfs/kernfs_vnops.c
index 6dd8ca16353..785a531f855 100644
--- a/sys/miscfs/kernfs/kernfs_vnops.c
+++ b/sys/miscfs/kernfs/kernfs_vnops.c
@@ -1,4 +1,4 @@
-/*	$OpenBSD: kernfs_vnops.c,v 1.9 1997/04/26 12:10:00 kstailey Exp $	*/
+/*	$OpenBSD: kernfs_vnops.c,v 1.10 1997/09/11 05:26:11 millert Exp $	*/
 /*	$NetBSD: kernfs_vnops.c,v 1.43 1996/03/16 23:52:47 christos Exp $	*/
 
 /*
@@ -360,8 +360,8 @@ kernfs_lookup(v)
 	int error, i;
 
 #ifdef KERNFS_DIAGNOSTIC
-	printf("kernfs_lookup(%x)\n", ap);
-	printf("kernfs_lookup(dp = %x, vpp = %x, cnp = %x)\n", dvp, vpp, ap->a_cnp);
+	printf("kernfs_lookup(%p)\n", ap);
+	printf("kernfs_lookup(dp = %p, vpp = %p, cnp = %p)\n", dvp, vpp, ap->a_cnp);
 	printf("kernfs_lookup(%s)\n", pname);
 #endif
 
@@ -424,7 +424,7 @@ found:
 	*vpp = fvp;
 
 #ifdef KERNFS_DIAGNOSTIC
-	printf("kernfs_lookup: newvp = %x\n", fvp);
+	printf("kernfs_lookup: newvp = %p\n", fvp);
 #endif
 	return (0);
 }
@@ -681,7 +681,7 @@ kernfs_inactive(v)
 	struct vnode *vp = ap->a_vp;
 
 #ifdef KERNFS_DIAGNOSTIC
-	printf("kernfs_inactive(%x)\n", vp);
+	printf("kernfs_inactive(%p)\n", vp);
 #endif
 	/*
 	 * Clear out the v_type field to avoid
@@ -701,7 +701,7 @@ kernfs_reclaim(v)
 	struct vnode *vp = ap->a_vp;
 
 #ifdef KERNFS_DIAGNOSTIC
-	printf("kernfs_reclaim(%x)\n", vp);
+	printf("kernfs_reclaim(%p)\n", vp);
 #endif
 	if (vp->v_data) {
 		FREE(vp->v_data, M_TEMP);
diff --git a/sys/miscfs/nullfs/null_subr.c b/sys/miscfs/nullfs/null_subr.c
index ceb0b3e3c38..8c77df2348d 100644
--- a/sys/miscfs/nullfs/null_subr.c
+++ b/sys/miscfs/nullfs/null_subr.c
@@ -1,4 +1,4 @@
-/*	$OpenBSD: null_subr.c,v 1.3 1996/05/22 12:04:35 deraadt Exp $	*/
+/*	$OpenBSD: null_subr.c,v 1.4 1997/09/11 05:26:12 millert Exp $	*/
 /*	$NetBSD: null_subr.c,v 1.6 1996/05/10 22:50:52 jtk Exp $	*/
 
 /*
@@ -303,8 +303,8 @@ null_node_create(mp, lowervp, newvpp, takelock)
 	return (0);
 }
 
-#ifdef notyet
 #ifdef NULLFS_DIAGNOSTIC
+int null_checkvp_barrier = 1;
 struct vnode *
 null_checkvp(vp, fil, lno)
 	struct vnode *vp;
@@ -326,9 +326,9 @@ null_checkvp(vp, fil, lno)
 	if (a->null_lowervp == NULL) {
 		/* Should never happen */
 		int i; u_long *p;
-		printf("vp = %x, ZERO ptr\n", vp);
+		printf("vp = %p, ZERO ptr\n", vp);
 		for (p = (u_long *) a, i = 0; i < 8; i++)
-			printf(" %x", p[i]);
+			printf(" %lx", p[i]);
 		printf("\n");
 		/* wait for debugger */
 		while (null_checkvp_barrier) /*WAIT*/ ;
@@ -336,16 +336,16 @@ null_checkvp(vp, fil, lno)
 	}
 	if (a->null_lowervp->v_usecount < 1) {
 		int i; u_long *p;
-		printf("vp = %x, unref'ed lowervp\n", vp);
+		printf("vp = %p, unref'ed lowervp\n", vp);
 		for (p = (u_long *) a, i = 0; i < 8; i++)
-			printf(" %x", p[i]);
+			printf(" %lx", p[i]);
 		printf("\n");
 		/* wait for debugger */
 		while (null_checkvp_barrier) /*WAIT*/ ;
 		panic ("null with unref'ed lowervp");
 	};
 #ifdef notyet
-	printf("null %x/%d -> %x/%d [%s, %d]\n",
+	printf("null %p/%d -> %p/%d [%s, %d]\n",
 	        NULLTOV(a), NULLTOV(a)->v_usecount,
 		a->null_lowervp, a->null_lowervp->v_usecount,
 		fil, lno);
@@ -353,4 +353,3 @@ null_checkvp(vp, fil, lno)
 	return a->null_lowervp;
 }
 #endif
-#endif
diff --git a/sys/miscfs/nullfs/null_vfsops.c b/sys/miscfs/nullfs/null_vfsops.c
index e8a6b4d249a..c27f3f28923 100644
--- a/sys/miscfs/nullfs/null_vfsops.c
+++ b/sys/miscfs/nullfs/null_vfsops.c
@@ -1,4 +1,4 @@
-/*	$OpenBSD: null_vfsops.c,v 1.3 1996/05/22 12:04:36 deraadt Exp $	*/
+/*	$OpenBSD: null_vfsops.c,v 1.4 1997/09/11 05:26:12 millert Exp $	*/
 /*	$NetBSD: null_vfsops.c,v 1.11 1996/05/10 22:50:56 jtk Exp $	*/
 
 /*
@@ -88,7 +88,7 @@ nullfs_mount(mp, path, data, ndp, p)
 	size_t size;
 
 #ifdef NULLFS_DIAGNOSTIC
-	printf("nullfs_mount(mp = %x)\n", mp);
+	printf("nullfs_mount(mp = %p)\n", mp);
 #endif
 
 	/*
@@ -203,7 +203,7 @@ nullfs_unmount(mp, mntflags, p)
 	extern int doforce;
 
 #ifdef NULLFS_DIAGNOSTIC
-	printf("nullfs_unmount(mp = %x)\n", mp);
+	printf("nullfs_unmount(mp = %p)\n", mp);
 #endif
 
 	if (mntflags & MNT_FORCE) {
@@ -255,7 +255,7 @@ nullfs_root(mp, vpp)
 	struct vnode *vp;
 
 #ifdef NULLFS_DIAGNOSTIC
-	printf("nullfs_root(mp = %x, vp = %x->%x)\n", mp,
+	printf("nullfs_root(mp = %p, vp = %p->%p)\n", mp,
 			MOUNTTONULLMOUNT(mp)->nullm_rootvp,
 			NULLVPTOLOWERVP(MOUNTTONULLMOUNT(mp)->nullm_rootvp)
 			);
@@ -293,7 +293,7 @@ nullfs_statfs(mp, sbp, p)
 	struct statfs mstat;
 
 #ifdef NULLFS_DIAGNOSTIC
-	printf("nullfs_statfs(mp = %x, vp = %x->%x)\n", mp,
+	printf("nullfs_statfs(mp = %p, vp = %p->%p)\n", mp,
 			MOUNTTONULLMOUNT(mp)->nullm_rootvp,
 			NULLVPTOLOWERVP(MOUNTTONULLMOUNT(mp)->nullm_rootvp)
 			);
diff --git a/sys/miscfs/nullfs/null_vnops.c b/sys/miscfs/nullfs/null_vnops.c
index 05a67aecab1..ca7c6ce0b86 100644
--- a/sys/miscfs/nullfs/null_vnops.c
+++ b/sys/miscfs/nullfs/null_vnops.c
@@ -1,4 +1,4 @@
-/*	$OpenBSD: null_vnops.c,v 1.4 1996/05/22 12:04:36 deraadt Exp $	*/
+/*	$OpenBSD: null_vnops.c,v 1.5 1997/09/11 05:26:13 millert Exp $	*/
 /*	$NetBSD: null_vnops.c,v 1.7 1996/05/10 22:51:01 jtk Exp $	*/
 
 /*
@@ -513,7 +513,7 @@ null_lock(v)
 
 #ifdef NULLFS_DIAGNOSTIC
 	vprint("null_lock_e", ap->a_vp);
-	printf("retpc=%lx, retretpc=%lx\n",
+	printf("retpc=%p, retretpc=%p\n",
 	       RETURN_PC(0),
 	       RETURN_PC(1));
 #endif
@@ -625,7 +625,7 @@ null_lookup(v)
 	int flags = ap->a_cnp->cn_flags;
 
 #ifdef NULLFS_DIAGNOSTIC
-	printf("null_lookup: dvp=%lx, name='%s'\n",
+	printf("null_lookup: dvp=%p, name='%s'\n",
 	       ap->a_dvp, ap->a_cnp->cn_nameptr);
 #endif
 	/*
diff --git a/sys/miscfs/procfs/procfs_mem.c b/sys/miscfs/procfs/procfs_mem.c
index 5d069511fe2..733c8e02753 100644
--- a/sys/miscfs/procfs/procfs_mem.c
+++ b/sys/miscfs/procfs/procfs_mem.c
@@ -1,4 +1,4 @@
-/*	$OpenBSD: procfs_mem.c,v 1.6 1997/08/29 04:24:38 millert Exp $	*/
+/*	$OpenBSD: procfs_mem.c,v 1.7 1997/09/11 05:26:14 millert Exp $	*/
 /*	$NetBSD: procfs_mem.c,v 1.8 1996/02/09 22:40:50 christos Exp $	*/
 
 /*
@@ -315,7 +315,7 @@ procfs_findtextvp(p)
 
 			printf("procfs: found vm object\n");
 			vm_map_lookup_done(map, out_entry);
-			printf("procfs: vm object = %x\n", object);
+			printf("procfs: vm object = %p\n", object);
 
 			/*
 			 * At this point, assuming no errors, object
@@ -325,7 +325,7 @@ procfs_findtextvp(p)
 			 */
 
 			pager = object->pager;
-			printf("procfs: pager = %x\n", pager);
+			printf("procfs: pager = %p\n", pager);
 			if (pager)
 				printf("procfs: found pager, type = %d\n",
 				    pager->pg_type);
@@ -333,7 +333,7 @@ procfs_findtextvp(p)
 				struct vnode *vp;
 
 				vp = (struct vnode *) pager->pg_handle;
-				printf("procfs: vp = 0x%x\n", vp);
+				printf("procfs: vp = %p\n", vp);
 				return (vp);
 			}
 		}
diff --git a/sys/miscfs/umapfs/umap_subr.c b/sys/miscfs/umapfs/umap_subr.c
index d2023df85f0..e8ab5c8010f 100644
--- a/sys/miscfs/umapfs/umap_subr.c
+++ b/sys/miscfs/umapfs/umap_subr.c
@@ -1,4 +1,4 @@
-/*	$OpenBSD: umap_subr.c,v 1.7 1996/04/19 16:09:57 niklas Exp $	*/
+/*	$OpenBSD: umap_subr.c,v 1.8 1997/09/11 05:26:14 millert Exp $	*/
 /*	$NetBSD: umap_subr.c,v 1.8 1996/03/05 02:35:39 thorpej Exp $	*/
 
 /*
@@ -146,7 +146,7 @@ umap_node_find(mp, targetvp)
 	struct vnode *vp;
 
 #ifdef UMAPFS_DIAGNOSTIC
-	printf("umap_node_find(mp = %x, target = %x)\n", mp, targetvp);
+	printf("umap_node_find(mp = %p, target = %p)\n", mp, targetvp);
 #endif
 
 	/*
@@ -177,7 +177,7 @@ loop:
 	}
 
 #ifdef UMAPFS_DIAGNOSTIC
-	printf("umap_node_find(%x, %x): NOT found\n", mp, targetvp);
+	printf("umap_node_find(%p, %p): NOT found\n", mp, targetvp);
 #endif
 
 	return (0);
@@ -304,7 +304,7 @@ umap_node_create(mp, targetvp, newvpp)
 		 * Take another reference to the alias vnode
 		 */
 #ifdef UMAPFS_DIAGNOSTIC
-		vprint("umap_node_create: exists", ap->umap_vnode);
+		vprint("umap_node_create: exists", aliasvp);
 #endif
 		/* VREF(aliasvp); */
 	} else {
@@ -347,7 +347,7 @@ umap_checkvp(vp, fil, lno)
 	int lno;
 {
 	struct umap_node *a = VTOUMAP(vp);
-#if 0
+#ifdef notyet
 	/*
 	 * Can't do this check because vop_reclaim runs
 	 * with funny vop vector.
@@ -361,9 +361,9 @@ umap_checkvp(vp, fil, lno)
 	if (a->umap_lowervp == NULL) {
 		/* Should never happen */
 		int i; u_long *p;
-		printf("vp = %x, ZERO ptr\n", vp);
+		printf("vp = %p, ZERO ptr\n", vp);
 		for (p = (u_long *) a, i = 0; i < 8; i++)
-			printf(" %x", p[i]);
+			printf(" %lx", p[i]);
 		printf("\n");
 		/* wait for debugger */
 		while (umap_checkvp_barrier) /*WAIT*/ ;
@@ -371,16 +371,16 @@ umap_checkvp(vp, fil, lno)
 	}
 	if (a->umap_lowervp->v_usecount < 1) {
 		int i; u_long *p;
-		printf("vp = %x, unref'ed lowervp\n", vp);
+		printf("vp = %p, unref'ed lowervp\n", vp);
 		for (p = (u_long *) a, i = 0; i < 8; i++)
-			printf(" %x", p[i]);
+			printf(" %lx", p[i]);
 		printf("\n");
 		/* wait for debugger */
 		while (umap_checkvp_barrier) /*WAIT*/ ;
 		panic ("umap with unref'ed lowervp");
 	}
-#if 0
-	printf("umap %x/%d -> %x/%d [%s, %d]\n",
+#ifdef notyet
+	printf("umap %p/%d -> %p/%d [%s, %d]\n",
 	        a->umap_vnode, a->umap_vnode->v_usecount,
 		a->umap_lowervp, a->umap_lowervp->v_usecount,
 		fil, lno);
diff --git a/sys/miscfs/umapfs/umap_vfsops.c b/sys/miscfs/umapfs/umap_vfsops.c
index 24fac53a49f..750dbe11d66 100644
--- a/sys/miscfs/umapfs/umap_vfsops.c
+++ b/sys/miscfs/umapfs/umap_vfsops.c
@@ -1,4 +1,4 @@
-/*	$OpenBSD: umap_vfsops.c,v 1.7 1996/06/02 16:35:48 niklas Exp $	*/
+/*	$OpenBSD: umap_vfsops.c,v 1.8 1997/09/11 05:26:15 millert Exp $	*/
 /*	$NetBSD: umap_vfsops.c,v 1.9 1996/02/09 22:41:05 christos Exp $	*/
 
 /*
@@ -89,7 +89,7 @@ umapfs_mount(mp, path, data, ndp, p)
 #ifdef UMAPFS_DIAGNOSTIC
 	int i;
 
-	printf("umapfs_mount(mp = %x)\n", mp);
+	printf("umapfs_mount(mp = %p)\n", mp);
 #endif
 
 	/*
@@ -120,7 +120,7 @@ umapfs_mount(mp, path, data, ndp, p)
 	 */
 	lowerrootvp = ndp->ni_vp;
 #ifdef UMAPFS_DIAGNOSTIC
-	printf("vp = %x, check for VDIR...\n", lowerrootvp);
+	printf("vp = %p, check for VDIR...\n", lowerrootvp);
 #endif
 	vrele(ndp->ni_dvp);
 	ndp->ni_dvp = 0;
@@ -131,7 +131,7 @@ umapfs_mount(mp, path, data, ndp, p)
 	}
 
 #ifdef UMAPFS_DIAGNOSTIC
-	printf("mp = %x\n", mp);
+	printf("mp = %p\n", mp);
 #endif
 
 	amp = (struct umap_mount *) malloc(sizeof(struct umap_mount),
@@ -154,7 +154,7 @@ umapfs_mount(mp, path, data, ndp, p)
 
 #ifdef UMAPFS_DIAGNOSTIC
 	printf("umap_mount:unentries %d\n",args.unentries);
-	for (i = 0; i < args.nentries; i++)
+	for (i = 0; i < args.unentries; i++)
 		printf("   %d maps to %d\n", amp->info_umapdata[i][0],
 	 	    amp->info_umapdata[i][1]);
 #endif
@@ -245,7 +245,7 @@ umapfs_unmount(mp, mntflags, p)
 	extern int doforce;
 
 #ifdef UMAPFS_DIAGNOSTIC
-	printf("umapfs_unmount(mp = %x)\n", mp);
+	printf("umapfs_unmount(mp = %p)\n", mp);
 #endif
 
 	if (mntflags & MNT_FORCE) {
@@ -297,7 +297,7 @@ umapfs_root(mp, vpp)
 	struct vnode *vp;
 
 #ifdef UMAPFS_DIAGNOSTIC
-	printf("umapfs_root(mp = %x, vp = %x->%x)\n", mp,
+	printf("umapfs_root(mp = %p, vp = %p->%p)\n", mp,
 			MOUNTTOUMAPMOUNT(mp)->umapm_rootvp,
 			UMAPVPTOLOWERVP(MOUNTTOUMAPMOUNT(mp)->umapm_rootvp)
 			);
@@ -334,7 +334,7 @@ umapfs_statfs(mp, sbp, p)
 	struct statfs mstat;
 
 #ifdef UMAPFS_DIAGNOSTIC
-	printf("umapfs_statfs(mp = %x, vp = %x->%x)\n", mp,
+	printf("umapfs_statfs(mp = %p, vp = %p->%p)\n", mp,
 			MOUNTTOUMAPMOUNT(mp)->umapm_rootvp,
 			UMAPVPTOLOWERVP(MOUNTTOUMAPMOUNT(mp)->umapm_rootvp)
 			);
diff --git a/sys/miscfs/union/union_vfsops.c b/sys/miscfs/union/union_vfsops.c
index 12873edf1cd..3c3fb439545 100644
--- a/sys/miscfs/union/union_vfsops.c
+++ b/sys/miscfs/union/union_vfsops.c
@@ -1,4 +1,4 @@
-/*	$OpenBSD: union_vfsops.c,v 1.3 1997/08/01 05:58:58 millert Exp $	*/
+/*	$OpenBSD: union_vfsops.c,v 1.4 1997/09/11 05:26:16 millert Exp $	*/
 /*	$NetBSD: union_vfsops.c,v 1.10 1995/06/18 14:47:47 cgd Exp $	*/
 
 /*
@@ -94,7 +94,7 @@ union_mount(mp, path, data, ndp, p)
 	size_t size;
 
 #ifdef UNION_DIAGNOSTIC
-	printf("union_mount(mp = %x)\n", mp);
+	printf("union_mount(mp = %p)\n", mp);
 #endif
 
 	/*
@@ -296,7 +296,7 @@ union_unmount(mp, mntflags, p)
 	extern int doforce;
 
 #ifdef UNION_DIAGNOSTIC
-	printf("union_unmount(mp = %x)\n", mp);
+	printf("union_unmount(mp = %p)\n", mp);
 #endif
 
 	if (mntflags & MNT_FORCE) {
@@ -437,7 +437,7 @@ union_statfs(mp, sbp, p)
 	int lbsize;
 
 #ifdef UNION_DIAGNOSTIC
-	printf("union_statfs(mp = %x, lvp = %x, uvp = %x)\n", mp,
+	printf("union_statfs(mp = %p, lvp = %p, uvp = %p)\n", mp,
 			um->um_lowervp,
 	       		um->um_uppervp);
 #endif

