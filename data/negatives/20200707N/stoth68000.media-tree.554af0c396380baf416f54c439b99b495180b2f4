commit 554af0c396380baf416f54c439b99b495180b2f4
Author: James Hogan <james.hogan@imgtec.com>
Date:   Wed Sep 7 13:37:01 2016 +0100

    MIPS: vDSO: Fix Malta EVA mapping to vDSO page structs
    
    The page structures associated with the vDSO pages in the kernel image
    are calculated using virt_to_page(), which uses __pa() under the hood to
    find the pfn associated with the virtual address. The vDSO data pointers
    however point to kernel symbols, so __pa_symbol() should really be used
    instead.
    
    Since there is no equivalent to virt_to_page() which uses __pa_symbol(),
    fix init_vdso_image() to work directly with pfns, calculated with
    __phys_to_pfn(__pa_symbol(...)).
    
    This issue broke the Malta Enhanced Virtual Addressing (EVA)
    configuration which has a non-default implementation of __pa_symbol().
    This is because it uses a physical alias so that the kernel executes
    from KSeg0 (VA 0x80000000 -> PA 0x00000000), while RAM is provided to
    the kernel in the KUSeg range (VA 0x00000000 -> PA 0x80000000) which
    uses the same underlying RAM.
    
    Since there are no page structures associated with the low physical
    address region, some arbitrary kernel memory would be interpreted as a
    page structure for the vDSO pages and badness ensues.
    
    Fixes: ebb5e78cc634 ("MIPS: Initial implementation of a VDSO")
    Signed-off-by: James Hogan <james.hogan@imgtec.com>
    Cc: Leonid Yegoshin <leonid.yegoshin@imgtec.com>
    Cc: linux-mips@linux-mips.org
    Cc: <stable@vger.kernel.org> # 4.4.x-
    Patchwork: https://patchwork.linux-mips.org/patch/14229/
    Signed-off-by: Ralf Baechle <ralf@linux-mips.org>

diff --git a/arch/mips/kernel/vdso.c b/arch/mips/kernel/vdso.c
index 9abe447a4b48..f9dbfb14af33 100644
--- a/arch/mips/kernel/vdso.c
+++ b/arch/mips/kernel/vdso.c
@@ -39,16 +39,16 @@ static struct vm_special_mapping vdso_vvar_mapping = {
 static void __init init_vdso_image(struct mips_vdso_image *image)
 {
 	unsigned long num_pages, i;
+	unsigned long data_pfn;
 
 	BUG_ON(!PAGE_ALIGNED(image->data));
 	BUG_ON(!PAGE_ALIGNED(image->size));
 
 	num_pages = image->size / PAGE_SIZE;
 
-	for (i = 0; i < num_pages; i++) {
-		image->mapping.pages[i] =
-			virt_to_page(image->data + (i * PAGE_SIZE));
-	}
+	data_pfn = __phys_to_pfn(__pa_symbol(image->data));
+	for (i = 0; i < num_pages; i++)
+		image->mapping.pages[i] = pfn_to_page(data_pfn + i);
 }
 
 static int __init init_vdso(void)

