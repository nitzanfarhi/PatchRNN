commit 13fbcb731220341537131b32cf01b1e70df7206d
Author: Oleg Nesterov <oleg@tv-sign.ru>
Date:   Tue Oct 16 23:27:24 2007 -0700

    do_sigaction: don't worry about signal_pending()
    
    do_sigaction() returns -ERESTARTNOINTR if signal_pending(). The comment says:
    
            * If there might be a fatal signal pending on multiple
            * threads, make sure we take it before changing the action.
    
    I think this is not needed. We should only worry about SIGNAL_GROUP_EXIT case,
    bit it implies a pending SIGKILL which can't be cleared by do_sigaction.
    
    Kill this special case.
    
    Signed-off-by: Oleg Nesterov <oleg@tv-sign.ru>
    Acked-by: Roland McGrath <roland@redhat.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

diff --git a/kernel/signal.c b/kernel/signal.c
index 90e2efad33ae..2124ffadcfde 100644
--- a/kernel/signal.c
+++ b/kernel/signal.c
@@ -2294,15 +2294,6 @@ int do_sigaction(int sig, struct k_sigaction *act, struct k_sigaction *oact)
 	k = &current->sighand->action[sig-1];
 
 	spin_lock_irq(&current->sighand->siglock);
-	if (signal_pending(current)) {
-		/*
-		 * If there might be a fatal signal pending on multiple
-		 * threads, make sure we take it before changing the action.
-		 */
-		spin_unlock_irq(&current->sighand->siglock);
-		return -ERESTARTNOINTR;
-	}
-
 	if (oact)
 		*oact = *k;
 

