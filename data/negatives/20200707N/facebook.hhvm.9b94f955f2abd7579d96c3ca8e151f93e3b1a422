commit 9b94f955f2abd7579d96c3ca8e151f93e3b1a422
Author: Edwin Smith <smith@fb.com>
Date:   Tue May 17 10:58:31 2016 -0700

    Keep the type-scan visited map trimmed.
    
    Summary:
    If the hashmap gets big, all future clear() operations get
    expensive. In some cases this map gets over 15K entries.
    This quick hack keeps it under control.
    
    Differential Revision: D3306731
    
    fbshipit-source-id: 4ad910fb608b937c998b68565560327a2ea2f277

diff --git a/hphp/util/type-scan.h b/hphp/util/type-scan.h
index 44e78616a8..ccacdea318 100644
--- a/hphp/util/type-scan.h
+++ b/hphp/util/type-scan.h
@@ -286,7 +286,12 @@ struct Scanner {
   // callback. Afterwards, all the state is cleared. The Scanner can be re-used
   // after this.
   template <typename F1, typename F2> void finish(F1&& f1, F2&& f2) {
-    m_visited.clear();
+    if (m_visited.bucket_count() < 500) {
+      m_visited.clear();
+    } else {
+      // TODO: #11247510 tune this better
+      m_visited = std::unordered_set<const void*>();
+    }
     for (const auto& p : m_ptrs) if (p) { f1(p); }
     for (const auto& p : m_conservative) f2(p.first, p.second);
     m_ptrs.clear();

