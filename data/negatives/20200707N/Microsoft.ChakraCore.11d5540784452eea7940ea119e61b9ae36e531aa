commit 11d5540784452eea7940ea119e61b9ae36e531aa
Author: Michael Ferris <micfer@microsoft.com>
Date:   Mon Sep 26 18:48:32 2016 -0700

    On x86 Keep a map from int64 reg to a pair of int32 regs and apply operations on these 2.
    Correctly jit first simple int64 function

diff --git a/lib/Backend/Lower.cpp b/lib/Backend/Lower.cpp
index c1c627f9c..8963f8d6e 100644
--- a/lib/Backend/Lower.cpp
+++ b/lib/Backend/Lower.cpp
@@ -1749,9 +1749,15 @@ Lowerer::LowerRange(IR::Instr *instrStart, IR::Instr *instrEnd, bool defaultDoFa
                 }
             }
             // Fallthrough
-        case Js::OpCode::Ld_A:
         case Js::OpCode::Ld_I4:
+        case Js::OpCode::Ld_A:
         case Js::OpCode::InitConst:
+            if (instr->GetDst() && instr->GetDst()->IsInt64())
+            {
+                instrPrev = m_lowererMD.LowerInt64Assign(instr);
+                break;
+            }
+
             if (instr->IsJitProfilingInstr() && instr->AsJitProfilingInstr()->isBeginSwitch) {
                 LowerProfiledBeginSwitch(instr->AsJitProfilingInstr());
                 break;
@@ -8931,6 +8937,32 @@ Lowerer::GenerateFastBrBReturn(IR::Instr * instr)
     // $after
 }
 
+#ifndef _M_X64
+void Lowerer::EnsureInt64RegPairMap()
+{
+    if (!m_int64RegPairMap)
+    {
+        m_int64RegPairMap = Anew(m_alloc, Int64RegPairMap, m_alloc);
+    }
+}
+
+Int64RegPair Lowerer::FindOrCreateInt64Pair(IR::RegOpnd* reg)
+{
+    Assert(IRType_IsInt64(reg->GetType()));
+    EnsureInt64RegPairMap();
+    Int64RegPair pair;
+    if (m_int64RegPairMap->TryGetValue(reg->m_sym->m_id, &pair))
+    {
+        return pair;
+    }
+    IRType type = reg->GetType() == TyInt64 ? TyInt32 : TyUint32;
+    pair.high = IR::RegOpnd::New(type, this->m_func);
+    pair.low = IR::RegOpnd::New(type, this->m_func);
+    m_int64RegPairMap->Add(reg->m_sym->m_id, pair);
+    return pair;
+}
+#endif
+
 ///----------------------------------------------------------------------------
 ///
 /// Lowerer::LowerBrB - lower 1-operand (boolean) conditional branch
diff --git a/lib/Backend/Lower.h b/lib/Backend/Lower.h
index 860585eb2..24cadb76a 100644
--- a/lib/Backend/Lower.h
+++ b/lib/Backend/Lower.h
@@ -19,6 +19,13 @@ enum RoundMode : BYTE {
     RoundModeHalfToEven = 2
 };
 
+struct Int64RegPair
+{
+    IR::RegOpnd* high;
+    IR::RegOpnd* low;
+    Int64RegPair(): high(nullptr), low(nullptr) {}
+};
+
 #if defined(_M_IX86) || defined(_M_AMD64)
 #include "LowerMDShared.h"
 #elif defined(_M_ARM) || defined(_M_ARM64)
@@ -46,6 +53,9 @@ class Lowerer
 public:
     Lowerer(Func * func) : m_func(func), m_lowererMD(func), nextStackFunctionOpnd(nullptr), outerMostLoopLabel(nullptr),
         initializedTempSym(nullptr), addToLiveOnBackEdgeSyms(nullptr), currentRegion(nullptr)
+#ifndef _M_X64
+        , m_int64RegPairMap(nullptr)
+#endif
     {
     }
 
@@ -298,6 +308,11 @@ class Lowerer
     void            InsertBitTestBranch(IR::Opnd * bitMaskOpnd, IR::Opnd * bitIndex, bool jumpIfBitOn, IR::LabelInstr * targetLabel, IR::Instr * insertBeforeInstr);
     void            GenerateGetSingleCharString(IR::RegOpnd * charCodeOpnd, IR::Opnd * resultOpnd, IR::LabelInstr * labelHelper, IR::LabelInstr * doneLabel, IR::Instr * instr, bool isCodePoint);
     void            GenerateFastBrBReturn(IR::Instr * instr);
+
+#ifndef _M_X64
+    void            EnsureInt64RegPairMap();
+    Int64RegPair    FindOrCreateInt64Pair(IR::RegOpnd*);
+#endif
 public:
     static IR::LabelInstr *     InsertLabel(const bool isHelper, IR::Instr *const insertBeforeInstr);
 
@@ -600,5 +615,8 @@ class Lowerer
     BVSparse<JitArenaAllocator> * initializedTempSym;
     BVSparse<JitArenaAllocator> * addToLiveOnBackEdgeSyms;
     Region *        currentRegion;
-
+#ifndef _M_X64
+    typedef BaseDictionary<SymID, Int64RegPair, JitArenaAllocator> Int64RegPairMap;
+    Int64RegPairMap* m_int64RegPairMap;
+#endif
 };
diff --git a/lib/Backend/LowerMDShared.cpp b/lib/Backend/LowerMDShared.cpp
index 9f3890853..6abeaddaa 100644
--- a/lib/Backend/LowerMDShared.cpp
+++ b/lib/Backend/LowerMDShared.cpp
@@ -1871,7 +1871,9 @@ void LowererMD::LegalizeDst(IR::Instr *const instr, const uint forms)
 
     IR::Opnd *dst = instr->GetDst();
     Assert(dst);
-
+#ifndef _M_X64
+    AssertMsg(!dst->IsInt64(), "Int64 supported only on x64");
+#endif
     switch(dst->GetKind())
     {
         case IR::OpndKindReg:
@@ -1950,7 +1952,9 @@ void LowererMD::LegalizeSrc(IR::Instr *const instr, IR::Opnd *src, const uint fo
     Assert(src);
     Assert(src == instr->GetSrc1() || src == instr->GetSrc2());
     Assert(forms);
-
+#ifndef _M_X64
+    AssertMsg(!src->IsInt64(), "Int64 supported only on x64");
+#endif
     switch(src->GetKind())
     {
         case IR::OpndKindReg:
@@ -2968,6 +2972,19 @@ void LowererMD::GenerateFastCmXx(IR::Instr *instr)
 
     Assert(src1->IsRegOpnd());
 
+#ifndef _M_X64
+    Int64RegPair src1Pair, src2Pair;
+    if (isInt64Src)
+    {
+        Assert(src1->IsRegOpnd());
+        Assert(src2->IsRegOpnd());
+        src1Pair = this->m_lowerer->FindOrCreateInt64Pair(src1->AsRegOpnd());
+        src2Pair = this->m_lowerer->FindOrCreateInt64Pair(src2->AsRegOpnd());
+        src1 = src1Pair.high;
+        src2 = src2Pair.high;
+    }
+#endif
+
     IR::Instr * done;
     if (isFloatSrc)
     {
@@ -3028,6 +3045,21 @@ void LowererMD::GenerateFastCmXx(IR::Instr *instr)
         done->InsertBefore(newInstr);
     }
 
+#ifndef _M_X64
+    if (isInt64Src)
+    {
+        IR::LabelInstr* skipLow = IR::LabelInstr::New(Js::OpCode::Label, m_func);
+        newInstr = IR::BranchInstr::New(Js::OpCode::JNE, skipLow, this->m_func);
+        done->InsertBefore(newInstr);
+
+        newInstr = IR::Instr::New(cmpOp, this->m_func);
+        newInstr->SetSrc1(src1Pair.low);
+        newInstr->SetSrc2(src2Pair.low);
+        done->InsertBefore(newInstr);
+        done->InsertBefore(skipLow);
+    }
+#endif
+
     if (!isIntDst)
     {
         opnd = this->m_lowerer->LoadLibraryValueOpnd(instr, LibraryValue::ValueFalse);
@@ -8536,6 +8568,12 @@ LowererMD::LowerReinterpretPrimitive(IR::Instr* instr)
     return instr;
 }
 
+IR::Instr *
+LowererMD::LowerInt64Assign(IR::Instr * instr)
+{
+    return this->lowererMDArch.LowerInt64Assign(instr);
+}
+
 IR::Instr *
 LowererMD::LowerToFloat(IR::Instr *instr)
 {
diff --git a/lib/Backend/LowerMDShared.h b/lib/Backend/LowerMDShared.h
index 0047eb078..9d3026119 100644
--- a/lib/Backend/LowerMDShared.h
+++ b/lib/Backend/LowerMDShared.h
@@ -262,6 +262,7 @@ class LowererMD
             IR::Instr *         LoadNewScObjFirstArg(IR::Instr * instr, IR::Opnd * dst, ushort extraArgs = 0);
             IR::Instr *         LowerToFloat(IR::Instr *instr);
             IR::Instr *         LowerReinterpretPrimitive(IR::Instr* instr);
+            IR::Instr *         LowerInt64Assign(IR::Instr * instr);
      static IR::BranchInstr *   LowerFloatCondBranch(IR::BranchInstr *instrBranch, bool ignoreNan = false);
 
      static Js::OpCode          GetLoadOp(IRType type) { return LowererMDArch::GetAssignOp(type); }
diff --git a/lib/Backend/Opnd.h b/lib/Backend/Opnd.h
index a4aba02a7..b10263b68 100644
--- a/lib/Backend/Opnd.h
+++ b/lib/Backend/Opnd.h
@@ -186,7 +186,7 @@ class Opnd
     bool                IsSigned() const { return IRType_IsSignedInt(this->m_type); }
     bool                IsUnsigned() const { return IRType_IsUnsignedInt(this->m_type); }
     int                 GetSize() const { return TySize[this->m_type]; }
-    bool                IsInt64() const { return this->m_type == TyInt64; }
+    bool                IsInt64() const { return IRType_IsInt64(this->m_type); }
     bool                IsInt32() const { return this->m_type == TyInt32; }
     bool                IsUInt32() const { return this->m_type == TyUint32; }
     bool                IsFloat32() const { return this->m_type == TyFloat32; }
diff --git a/lib/Backend/amd64/LowererMDArch.cpp b/lib/Backend/amd64/LowererMDArch.cpp
index 68a2e5441..85d77c614 100644
--- a/lib/Backend/amd64/LowererMDArch.cpp
+++ b/lib/Backend/amd64/LowererMDArch.cpp
@@ -1953,6 +1953,13 @@ LowererMDArch::LowerExitInstrAsmJs(IR::ExitInstr * exitInstr)
     return LowerExitInstr(exitInstr);
 }
 
+IR::Instr *
+LowererMDArch::LowerInt64Assign(IR::Instr * instr)
+{
+    this->lowererMD->ChangeToAssign(instr);
+    return instr;
+}
+
 void
 LowererMDArch::EmitPtrInstr(IR::Instr *instr)
 {
diff --git a/lib/Backend/amd64/LowererMDArch.h b/lib/Backend/amd64/LowererMDArch.h
index 07c5d5725..8feb3f834 100644
--- a/lib/Backend/amd64/LowererMDArch.h
+++ b/lib/Backend/amd64/LowererMDArch.h
@@ -87,6 +87,7 @@ class LowererMDArch
     IR::Instr *         LowerExitInstr(IR::ExitInstr * exitInstr);
     IR::Instr *         LowerEntryInstrAsmJs(IR::EntryInstr * entryInstr);
     IR::Instr *         LowerExitInstrAsmJs(IR::ExitInstr * exitInstr);
+    IR::Instr *         LowerInt64Assign(IR::Instr * instr);
     static void         EmitInt4Instr(IR::Instr *instr, bool signExtend = false);
     static void         EmitPtrInstr(IR::Instr *instr);
     void                EmitLoadVar(IR::Instr *instrLoad, bool isFromUint32 = false, bool isHelper = false);
diff --git a/lib/Backend/i386/LowererMDArch.cpp b/lib/Backend/i386/LowererMDArch.cpp
index 6a0363ac6..2d59c0998 100644
--- a/lib/Backend/i386/LowererMDArch.cpp
+++ b/lib/Backend/i386/LowererMDArch.cpp
@@ -24,17 +24,13 @@ LowererMDArch::GetRegShiftCount()
 RegNum
 LowererMDArch::GetRegReturn(IRType type)
 {
-    return ( IRType_IsFloat(type) || IRType_IsSimd128(type) ) ? RegNOREG : RegEAX;
+    return ( IRType_IsFloat(type) || IRType_IsSimd128(type) || IRType_IsInt64(type) ) ? RegNOREG : RegEAX;
 }
 
 RegNum
 LowererMDArch::GetRegReturnAsmJs(IRType type)
 {
-    if (IRType_IsFloat(type))
-    {
-        return RegXMM0;
-    }
-    else if (IRType_IsSimd128(type))
+    if (IRType_IsFloat(type) || IRType_IsSimd128(type) || IRType_IsInt64(type))
     {
         return RegXMM0;
     }
@@ -892,12 +888,29 @@ LowererMDArch::LowerAsmJsCallI(IR::Instr * callInstr)
     if (callInstr->GetDst())
     {
         IRType dstType = callInstr->GetDst()->GetType();
-        IR::Instr * movInstr = callInstr->SinkDst(GetAssignOp(dstType));
-
-        RegNum returnReg = GetRegReturn(dstType);
-        callInstr->GetDst()->AsRegOpnd()->SetReg(returnReg);
-        movInstr->GetSrc1()->AsRegOpnd()->SetReg(returnReg);
-        retInstr = movInstr;
+        RegNum returnReg = GetRegReturnAsmJs(dstType);
+        IR::Instr * movInstr;
+        if (IRType_IsInt64(dstType))
+        {
+            Assert(returnReg == RegXMM0);
+            Int64RegPair dstPair = lowererMD->m_lowerer->FindOrCreateInt64Pair(callInstr->GetDst()->AsRegOpnd());
+            callInstr->GetDst()->SetType(TyFloat64);
+            movInstr = callInstr->SinkDst(Js::OpCode::MOVD, returnReg);
+            movInstr->UnlinkDst();
+            movInstr->SetDst(dstPair.low);
+
+            // Move the bits 63:32 to 31:0 (~equivalent to shift right by 32)
+            IR::Instr* shiftInstr = IR::Instr::New(Js::OpCode::SHUFPS, callInstr->GetDst(), callInstr->GetDst(), IR::IntConstOpnd::New(1, TyInt8, this->m_func), this->m_func);
+            movInstr->InsertAfter(shiftInstr);
+            IR::Instr* mov2Instr = IR::Instr::New(Js::OpCode::MOVD, dstPair.high, callInstr->GetDst(), this->m_func);
+            shiftInstr->InsertAfter(mov2Instr);
+            retInstr = mov2Instr;
+        }
+        else
+        {
+            movInstr = callInstr->SinkDst(GetAssignOp(dstType), returnReg);
+            retInstr = movInstr;
+        }
     }
 
     return retInstr;
@@ -1904,6 +1917,43 @@ LowererMDArch::LowerExitInstrCommon(IR::ExitInstr * exitInstr)
     return exitInstr;
 }
 
+IR::Instr *
+LowererMDArch::LowerInt64Assign(IR::Instr * instr)
+{
+    IR::Opnd* dst = instr->GetDst();
+    IR::Opnd* src1 = instr->GetSrc1();
+    if (dst && dst->IsRegOpnd() && src1)
+    {
+        Int64RegPair dstPair = lowererMD->m_lowerer->FindOrCreateInt64Pair(dst->AsRegOpnd());
+        IR::Instr* lowLoadInstr = nullptr, *highLoadInstr = nullptr;
+        if (src1->IsImmediateOpnd())
+        {
+            int64 value = src1->GetImmediateValue();
+            lowLoadInstr = IR::Instr::New(Js::OpCode::Ld_I4, dstPair.low, IR::IntConstOpnd::New((int32)value, TyInt32, this->m_func), this->m_func);
+            highLoadInstr = IR::Instr::New(Js::OpCode::Ld_I4, dstPair.high, IR::IntConstOpnd::New(value >> 32, TyInt32, this->m_func), this->m_func);
+        }
+        else if (src1->IsRegOpnd())
+        {
+            Int64RegPair src1Pair = lowererMD->m_lowerer->FindOrCreateInt64Pair(src1->AsRegOpnd());
+            lowLoadInstr = IR::Instr::New(Js::OpCode::Ld_I4, dstPair.low, src1Pair.low, this->m_func);
+            highLoadInstr = IR::Instr::New(Js::OpCode::Ld_I4, dstPair.high, src1Pair.high, this->m_func);
+        }
+        else
+        {
+            Assert(UNREACHED);
+            return instr;
+        }
+
+        lowererMD->ChangeToAssign(lowLoadInstr);
+        lowererMD->ChangeToAssign(highLoadInstr);
+        instr->InsertBefore(lowLoadInstr);
+        instr->InsertBefore(highLoadInstr);
+        instr->Remove();
+        return highLoadInstr;
+    }
+    return instr;
+}
+
 void
 LowererMDArch::EmitPtrInstr(IR::Instr *instr)
 {
diff --git a/lib/Backend/i386/LowererMDArch.h b/lib/Backend/i386/LowererMDArch.h
index f50eb9f98..5b7d1a670 100644
--- a/lib/Backend/i386/LowererMDArch.h
+++ b/lib/Backend/i386/LowererMDArch.h
@@ -71,6 +71,7 @@ class LowererMDArch
             IR::Instr *         LowerEntryInstrAsmJs(IR::EntryInstr * entryInstr);
             IR::Instr *         LowerExitInstrAsmJs(IR::ExitInstr * exitInstr);
             IR::ExitInstr *     LowerExitInstrCommon(IR::ExitInstr * exitInstr);
+            IR::Instr *         LowerInt64Assign(IR::Instr * instr);
             void                GeneratePrologueStackProbe(IR::Instr *entryInstr, size_t frameSize);
             static void         EmitInt4Instr(IR::Instr *instr);
             static void         EmitPtrInstr(IR::Instr *instr);

