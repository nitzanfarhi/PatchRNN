commit bc25799bbeaee8e6133804ffa6fece31e8a62236
Author: Andreas Nilsson <andreas.nilsson@10gen.com>
Date:   Tue Jan 14 14:32:31 2014 -0500

    SERVER-12049 Redact sensitive data from slowms output

diff --git a/src/mongo/db/client.cpp b/src/mongo/db/client.cpp
index 2c4fd5b885..485f795194 100644
--- a/src/mongo/db/client.cpp
+++ b/src/mongo/db/client.cpp
@@ -40,6 +40,7 @@
 #include <vector>
 
 #include "mongo/base/status.h"
+#include "mongo/bson/mutable/document.h"
 #include "mongo/db/auth/action_set.h"
 #include "mongo/db/auth/action_type.h"
 #include "mongo/db/auth/authorization_manager_global.h"
@@ -595,11 +596,24 @@ namespace mongo {
         s << ns.toString();
 
         if ( ! query.isEmpty() ) {
-            if ( iscommand )
+            if ( iscommand ) {
                 s << " command: ";
-            else
+                
+                Command* curCommand = curop.getCommand();
+                if (curCommand) {
+                    mutablebson::Document cmdToLog(curop.query(), 
+                            mutablebson::Document::kInPlaceDisabled);
+                    curCommand->redactForLogging(&cmdToLog);
+                    s << cmdToLog.toString();
+                } 
+                else { // Should not happen but we need to handle curCommand == NULL gracefully
+                    s << query.toString();
+                }
+            }
+            else {
                 s << " query: ";
-            s << query.toString();
+                s << query.toString();
+            }
         }
         
         if ( ! updateobj.isEmpty() ) {
diff --git a/src/mongo/db/curop.cpp b/src/mongo/db/curop.cpp
index b7581d3c33..7419f36652 100644
--- a/src/mongo/db/curop.cpp
+++ b/src/mongo/db/curop.cpp
@@ -64,6 +64,7 @@ namespace mongo {
         _reset();
         _op = 0;
         _opNum = _nextOpNum++;
+        _command = NULL;
         // These addresses should never be written to again.  The zeroes are
         // placed here as a precaution because currentOp may be accessed
         // without the db mutex.
@@ -72,7 +73,7 @@ namespace mongo {
 
     void CurOp::_reset() {
         _suppressFromCurop = false;
-        _command = false;
+        _isCommand = false;
         _dbprofile = 0;
         _end = 0;
         _maxTimeMicros = 0;
@@ -206,7 +207,7 @@ namespace mongo {
         if ( _client ) {
             const LockState& ls = _client->lockState();
             verify( ls.threadState() );
-            Top::global.record( _ns , _op , ls.hasAnyWriteLock() ? 1 : -1 , micros , _command );
+            Top::global.record( _ns , _op , ls.hasAnyWriteLock() ? 1 : -1 , micros , _isCommand );
         }
     }
 
diff --git a/src/mongo/db/curop.h b/src/mongo/db/curop.h
index 3af7962c71..dd3daebbff 100644
--- a/src/mongo/db/curop.h
+++ b/src/mongo/db/curop.h
@@ -196,7 +196,7 @@ namespace mongo {
         void leave( Client::Context * context );
         void reset();
         void reset( const HostAndPort& remote, int op );
-        void markCommand() { _command = true; }
+        void markCommand() { _isCommand = true; }
         OpDebug& debug()           { return _debug; }
         int profileLevel() const   { return _dbprofile; }
         const char * getNS() const { return _ns; }
@@ -274,7 +274,10 @@ namespace mongo {
 
         void setQuery(const BSONObj& query) { _query.set( query ); }
         Client * getClient() const { return _client; }
-
+        
+        Command * getCommand() const { return _command; }
+        void setCommand(Command* command) { _command = command; }
+        
         BSONObj info();
 
         // Fetches less information than "info()"; used to search for ops with certain criteria
@@ -327,12 +330,13 @@ namespace mongo {
         static AtomicUInt _nextOpNum;
         Client * _client;
         CurOp * _wrapped;
+        Command * _command;
         unsigned long long _start;
         unsigned long long _end;
         bool _active;
         bool _suppressFromCurop; // unless $all is set
         int _op;
-        bool _command;
+        bool _isCommand;
         int _dbprofile;                  // 0=off, 1=slow, 2=all
         AtomicUInt _opNum;               // todo: simple being "unsigned" may make more sense here
         char _ns[Namespace::MaxNsLen+2];
diff --git a/src/mongo/db/dbcommands.cpp b/src/mongo/db/dbcommands.cpp
index e658cf8d51..eb7154c62f 100644
--- a/src/mongo/db/dbcommands.cpp
+++ b/src/mongo/db/dbcommands.cpp
@@ -1436,6 +1436,8 @@ namespace mongo {
             LOG( 2 ) << "command: " << cmdObj << endl;
         }
 
+        client.curop()->setCommand(c);
+
         if (c->maintenanceMode() && theReplSet) {
             mmSetter.reset(new MaintenanceModeSetter());
         }

