commit 2835d402502a92553c2d8b10305fd53e545b54f2
Author: Yehuda Sadeh <yehuda@hq.newdream.net>
Date:   Tue Jan 24 12:57:00 2012 -0800

    rgw: rgw_acl_s3.* compiles
    
    very much wip
    
    Signed-off-by: Yehuda Sadeh <yehuda@hq.newdream.net>

diff --git a/src/rgw/rgw_acl.cc b/src/rgw/rgw_acl.cc
index 19f8f60c2c..74d6187ace 100644
--- a/src/rgw/rgw_acl.cc
+++ b/src/rgw/rgw_acl.cc
@@ -13,7 +13,7 @@
 using namespace std;
 
 
-void RGWAccessControlList::add_grant(ACLGrant *grant)
+void RGWAccessControlList::_add_grant(ACLGrant *grant)
 {
   ACLPermission& perm = grant->get_permission();
   ACLGranteeType& type = grant->get_type();
@@ -25,6 +25,15 @@ void RGWAccessControlList::add_grant(ACLGrant *grant)
   }
 }
 
+void RGWAccessControlList::add_grant(ACLGrant *grant)
+{
+  string id = grant->get_id();
+  if (id.size() > 0) {
+    grant_map.insert(pair<string, ACLGrant>(id, *grant));
+  }
+  _add_grant(grant);
+}
+
 int RGWAccessControlList::get_perm(string& id, int perm_mask) {
   dout(5) << "Searching permissions for uid=" << id << " mask=" << perm_mask << dendl;
   map<string, int>::iterator iter = acl_user_map.find(id);
diff --git a/src/rgw/rgw_acl.h b/src/rgw/rgw_acl.h
index d5930e7871..f313bb798e 100644
--- a/src/rgw/rgw_acl.h
+++ b/src/rgw/rgw_acl.h
@@ -34,6 +34,7 @@ enum ACLGroupTypeEnum {
 
 class ACLPermission
 {
+protected:
   int flags;
 public:
   ACLPermission() : flags(0) {}
@@ -90,7 +91,6 @@ class ACLGrant
 {
 protected:
   ACLGranteeType type;
-
   string id;
   string uri;
   string email;
@@ -154,8 +154,11 @@ WRITE_CLASS_ENCODER(ACLGrant)
 
 class RGWAccessControlList
 {
+protected:
   map<string, int> acl_user_map;
   map<uint32_t, int> acl_group_map;
+  multimap<string, ACLGrant> grant_map;
+  void _add_grant(ACLGrant *grant);
 public:
   RGWAccessControlList() {}
 
@@ -169,8 +172,7 @@ public:
     bool maps_initialized = true;
     ::encode(maps_initialized, bl);
     ::encode(acl_user_map, bl);
-    multimap<string, ACLGrant> placeholder; // for v1 decoders
-    ::encode(placeholder, bl);
+    ::encode(grant_map, bl);
     ::encode(acl_group_map, bl);
   }
   void decode(bufferlist::iterator& bl) {
@@ -179,7 +181,6 @@ public:
     bool maps_initialized;
     ::decode(maps_initialized, bl);
     ::decode(acl_user_map, bl);
-    multimap<string, ACLGrant> grant_map; // for v1 decoders
     ::decode(grant_map, bl);
     if (struct_v >= 2) {
       ::decode(acl_group_map, bl);
@@ -187,7 +188,7 @@ public:
       multimap<string, ACLGrant>::iterator iter;
       for (iter = grant_map.begin(); iter != grant_map.end(); ++iter) {
         ACLGrant& grant = iter->second;
-        add_grant(&grant);
+        _add_grant(&grant);
       }
     }
   }
@@ -235,6 +236,7 @@ WRITE_CLASS_ENCODER(ACLOwner)
 
 class RGWAccessControlPolicy
 {
+protected:
   RGWAccessControlList acl;
   ACLOwner owner;
 
@@ -279,7 +281,7 @@ public:
     return acl;
   }
 
-  virtual bool compare_group_name(string& id, ACLGroupTypeEnum group) = 0;
+  virtual bool compare_group_name(string& id, ACLGroupTypeEnum group) { return false; }
 };
 WRITE_CLASS_ENCODER(RGWAccessControlPolicy)
 
diff --git a/src/rgw/rgw_acl_s3.cc b/src/rgw/rgw_acl_s3.cc
index f334b4f2cd..c43d6b093b 100644
--- a/src/rgw/rgw_acl_s3.cc
+++ b/src/rgw/rgw_acl_s3.cc
@@ -19,8 +19,7 @@ using namespace std;
 static string rgw_uri_all_users = RGW_URI_ALL_USERS;
 static string rgw_uri_auth_users = RGW_URI_AUTH_USERS;
 
-void ACLPermission_S3::
-to_xml(ostream& out)
+void ACLPermission_S3::to_xml(ostream& out)
 {
   if ((flags & RGW_PERM_FULL_CONTROL) == RGW_PERM_FULL_CONTROL) {
    out << "<Permission>FULL_CONTROL</Permission>";
@@ -59,58 +58,58 @@ xml_end(const char *el)
   return false;
 }
 
-const char *ACLGranteeType_S3::
-to_string()
-{
-  switch (type) {
-  case ACL_TYPE_CANON_USER:
-    return "CanonicalUser";
-  case ACL_TYPE_EMAIL_USER:
-    return "AmazonCustomerByEmail";
-  case ACL_TYPE_GROUP:
-    return "Group";
-   default:
-    return "unknown";
+
+class ACLGranteeType_S3 {
+public:
+  static const char *to_string(ACLGranteeType& type) {
+    switch (type.get_type()) {
+    case ACL_TYPE_CANON_USER:
+      return "CanonicalUser";
+    case ACL_TYPE_EMAIL_USER:
+      return "AmazonCustomerByEmail";
+    case ACL_TYPE_GROUP:
+      return "Group";
+     default:
+      return "unknown";
+    }
   }
-}
 
-void ACLGranteeType_S3::
-set(const char *s)
-{
-  if (!s) {
-    type = ACL_TYPE_UNKNOWN;
-    return;
+  static void set(const char *s, ACLGranteeType& type) {
+    if (!s) {
+      type.set(ACL_TYPE_UNKNOWN);
+      return;
+    }
+    if (strcmp(s, "CanonicalUser") == 0)
+      type.set(ACL_TYPE_CANON_USER);
+    else if (strcmp(s, "AmazonCustomerByEmail") == 0)
+      type.set(ACL_TYPE_EMAIL_USER);
+    else if (strcmp(s, "Group") == 0)
+      type.set(ACL_TYPE_GROUP);
+    else
+      type.set(ACL_TYPE_UNKNOWN);
   }
-  if (strcmp(s, "CanonicalUser") == 0)
-    type = ACL_TYPE_CANON_USER;
-  else if (strcmp(s, "AmazonCustomerByEmail") == 0)
-    type = ACL_TYPE_EMAIL_USER;
-  else if (strcmp(s, "Group") == 0)
-    type = ACL_TYPE_GROUP;
-  else
-    type = ACL_TYPE_UNKNOWN;
-}
+};
 
-class ACLID : public XMLObj
+class ACLID_S3 : public XMLObj
 {
 public:
-  ACLID() {}
-  ~ACLID() {}
+  ACLID_S3() {}
+  ~ACLID_S3() {}
   string& to_str() { return data; }
 };
 
-class ACLURI : public XMLObj
+class ACLURI_S3 : public XMLObj
 {
 public:
-  ACLURI() {}
-  ~ACLURI() {}
+  ACLURI_S3() {}
+  ~ACLURI_S3() {}
 };
 
-class ACLEmail : public XMLObj
+class ACLEmail_S3 : public XMLObj
 {
 public:
-  ACLEmail() {}
-  ~ACLEmail() {}
+  ACLEmail_S3() {}
+  ~ACLEmail_S3() {}
 };
 
 class ACLDisplayName_S3 : public XMLObj
@@ -121,8 +120,8 @@ public:
 };
 
 bool ACLOwner_S3::xml_end(const char *el) {
-  ACLID *acl_id = (ACLID *)find_first("ID");
-  ACLID *acl_name = (ACLID *)find_first("DisplayName");
+  ACLID_S3 *acl_id = (ACLID_S3 *)find_first("ID");
+  ACLID_S3 *acl_name = (ACLID_S3 *)find_first("DisplayName");
 
   // ID is mandatory
   if (!acl_id)
@@ -139,24 +138,27 @@ bool ACLOwner_S3::xml_end(const char *el) {
 }
 
 bool ACLGrant_S3::xml_end(const char *el) {
-  ACLGrantee *acl_grantee;
-  ACLID *acl_id;
-  ACLURI *acl_uri;
-  ACLEmail *acl_email;
+  ACLGrantee_S3 *acl_grantee;
+  ACLID_S3 *acl_id;
+  ACLURI_S3 *acl_uri;
+  ACLEmail_S3 *acl_email;
   ACLPermission_S3 *acl_permission;
-  ACLDisplayName *acl_name;
+  ACLDisplayName_S3 *acl_name;
 
-  acl_grantee = (ACLGrantee *)find_first("Grantee");
+  acl_grantee = (ACLGrantee_S3 *)find_first("Grantee");
   if (!acl_grantee)
     return false;
   string type_str;
   if (!acl_grantee->get_attr("xsi:type", type_str))
     return false;
-  type.set(type_str.c_str());
-  permission = (ACLPermission_S3 *)find_first("Permission");
-  if (!permission)
+  ACLGranteeType_S3::set(type_str.c_str(), type);
+  
+  acl_permission = (ACLPermission_S3 *)find_first("Permission");
+  if (!acl_permission)
     return false;
 
+  permission = *acl_permission;
+
   id.clear();
   name.clear();
   uri.clear();
@@ -164,22 +166,22 @@ bool ACLGrant_S3::xml_end(const char *el) {
 
   switch (type.get_type()) {
   case ACL_TYPE_CANON_USER:
-    acl_id = (ACLID *)acl_grantee->find_first("ID");
+    acl_id = (ACLID_S3 *)acl_grantee->find_first("ID");
     if (!acl_id)
       return false;
     id = acl_id->to_str();
-    acl_name = (ACLDisplayName *)acl_grantee->find_first("DisplayName");
+    acl_name = (ACLDisplayName_S3 *)acl_grantee->find_first("DisplayName");
     if (acl_name)
       name = acl_name->get_data();
     break;
   case ACL_TYPE_GROUP:
-    acl_uri = (ACLURI *)acl_grantee->find_first("URI");
+    acl_uri = (ACLURI_S3 *)acl_grantee->find_first("URI");
     if (!acl_uri)
       return false;
     uri = acl_uri->get_data();
     break;
   case ACL_TYPE_EMAIL_USER:
-    acl_email = (ACLEmail *)acl_grantee->find_first("EmailAddress");
+    acl_email = (ACLEmail_S3 *)acl_grantee->find_first("EmailAddress");
     if (!acl_email)
       return false;
     email = acl_email->get_data();
@@ -191,6 +193,29 @@ bool ACLGrant_S3::xml_end(const char *el) {
   return true;
 }
 
+void ACLGrant_S3::to_xml(ostream& out) {
+  out << "<Grant>" <<
+         "<Grantee xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:type=\"" << ACLGranteeType_S3::to_string(type) << "\">";
+  switch (type.get_type()) {
+  case ACL_TYPE_CANON_USER:
+    out << "<ID>" << id << "</ID>" <<
+           "<DisplayName>" << name << "</DisplayName>";
+    break;
+  case ACL_TYPE_EMAIL_USER:
+    out << "<EmailAddress>" << email << "</EmailAddress>";
+    break;
+  case ACL_TYPE_GROUP:
+     out << "<URI>" << uri << "</URI>";
+    break;
+  default:
+    break;
+  }
+  out << "</Grantee>";
+  ACLPermission_S3& perm = static_cast<ACLPermission_S3 &>(permission);
+  perm.to_xml(out);
+  out << "</Grant>";
+}
+
 bool RGWAccessControlList_S3::xml_end(const char *el) {
   XMLObjIter iter = find("Grant");
   ACLGrant *grant = (ACLGrant *)iter.get_next();
@@ -198,7 +223,6 @@ bool RGWAccessControlList_S3::xml_end(const char *el) {
     add_grant(grant);
     grant = (ACLGrant *)iter.get_next();
   }
-  init_user_map();
   return true;
 }
 
@@ -236,9 +260,9 @@ bool RGWAccessControlList_S3::create_canned(string id, string name, string canne
 
 }
 
-bool RGWAccessControlPolicy::xml_end(const char *el) {
-  RGWAccessControlList *acl_p =
-      (RGWAccessControlList *)find_first("AccessControlList");
+bool RGWAccessControlPolicy_S3::xml_end(const char *el) {
+  RGWAccessControlList_S3 *acl_p =
+      (RGWAccessControlList_S3 *)find_first("AccessControlList");
   if (!acl_p)
     return false;
   acl = *acl_p;
@@ -250,29 +274,44 @@ bool RGWAccessControlPolicy::xml_end(const char *el) {
   return true;
 }
 
+bool RGWAccessControlPolicy_S3::compare_group_name(string& id, ACLGroupTypeEnum group)
+{
+  switch (group) {
+  case ACL_GROUP_ALL_USERS:
+    return (id.compare(rgw_uri_all_users) == 0);
+  case ACL_GROUP_AUTHENTICATED_USERS:
+    return (id.compare(rgw_uri_auth_users) == 0);
+  default:
+    return id.empty();
+  }
+
+  // shouldn't get here
+  return false;
+}
+
 XMLObj *RGWACLXMLParser_S3::alloc_obj(const char *el)
 {
   XMLObj * obj = NULL;
   if (strcmp(el, "AccessControlPolicy") == 0) {
-    obj = new RGWAccessControlPolicy();
+    obj = new RGWAccessControlPolicy_S3();
   } else if (strcmp(el, "Owner") == 0) {
-    obj = new ACLOwner();
+    obj = new ACLOwner_S3();
   } else if (strcmp(el, "AccessControlList") == 0) {
-    obj = new RGWAccessControlList();
+    obj = new RGWAccessControlList_S3();
   } else if (strcmp(el, "ID") == 0) {
-    obj = new ACLID();
+    obj = new ACLID_S3();
   } else if (strcmp(el, "DisplayName") == 0) {
-    obj = new ACLDisplayName();
+    obj = new ACLDisplayName_S3();
   } else if (strcmp(el, "Grant") == 0) {
-    obj = new ACLGrant();
+    obj = new ACLGrant_S3();
   } else if (strcmp(el, "Grantee") == 0) {
-    obj = new ACLGrantee();
+    obj = new ACLGrantee_S3();
   } else if (strcmp(el, "Permission") == 0) {
     obj = new ACLPermission_S3();
   } else if (strcmp(el, "URI") == 0) {
-    obj = new ACLURI();
+    obj = new ACLURI_S3();
   } else if (strcmp(el, "EmailAddress") == 0) {
-    obj = new ACLEmail();
+    obj = new ACLEmail_S3();
   }
 
   return obj;
diff --git a/src/rgw/rgw_acl_s3.h b/src/rgw/rgw_acl_s3.h
index ef7fd6f00d..416bb064cd 100644
--- a/src/rgw/rgw_acl_s3.h
+++ b/src/rgw/rgw_acl_s3.h
@@ -35,38 +35,12 @@ public:
 
 class ACLGrant_S3 : public ACLGrant, public XMLObj
 {
-  ACLPermission *alloc_permission() {
-    return new ACLPermission_S3;
-  }
-  void free_permission(ACLPermission *perm) {
-    delete perm;
-  }
 public:
   ACLGrant_S3() {}
   ~ACLGrant_S3() {}
 
+  void to_xml(ostream& out);
   bool xml_end(const char *el);
-  void to_xml(ostream& out) {
-    out << "<Grant>" <<
-            "<Grantee xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:type=\"" << type.to_string() << "\">";
-    switch (type.get_type()) {
-    case ACL_TYPE_CANON_USER:
-      out << "<ID>" << id << "</ID>" <<
-             "<DisplayName>" << name << "</DisplayName>";
-      break;
-    case ACL_TYPE_EMAIL_USER:
-      out << "<EmailAddress>" << email << "</EmailAddress>";
-      break;
-    case ACL_TYPE_GROUP:
-       out << "<URI>" << uri << "</URI>";
-      break;
-    default:
-      break;
-    }
-    out << "</Grantee>";
-    ((ACLPermission_S3 *)permission)->to_xml(out);
-    out << "</Grant>";
-  }
   bool xml_start(const char *el, const char **attr);
 };
 
@@ -78,10 +52,10 @@ public:
 
   bool xml_end(const char *el);
   void to_xml(ostream& out) {
-    map<string, ACLGrant>::iterator iter;
+    multimap<string, ACLGrant>::iterator iter;
     out << "<AccessControlList>";
     for (iter = grant_map.begin(); iter != grant_map.end(); ++iter) {
-      ACLGrant& grant = iter->second;
+      ACLGrant_S3& grant = static_cast<ACLGrant_S3 &>(iter->second);
       grant.to_xml(out);
     }
     out << "</AccessControlList>";
@@ -117,10 +91,13 @@ public:
 
   void to_xml(ostream& out) {
     out << "<AccessControlPolicy xmlns=\"http://s3.amazonaws.com/doc/2006-03-01/\">";
-    owner.to_xml(out);
-    acl.to_xml(out);
+    ACLOwner_S3& _owner = static_cast<ACLOwner_S3 &>(owner);
+    RGWAccessControlList_S3& _acl = static_cast<RGWAccessControlList_S3 &>(acl);
+    _owner.to_xml(out);
+    _acl.to_xml(out);
     out << "</AccessControlPolicy>";
   }
+  bool compare_group_name(string& id, ACLGroupTypeEnum group);
 };
 
 /**

