commit dc8cdc1890d64fa688cbac05b286e9b82f7b6d2f
Author: David Beer <dbeer@adaptivecomputing.com>
Date:   Thu Mar 17 17:04:26 2016 -0600

    TRQ-3539. Pass a more specific error code when we fail to read a batch reply.

diff --git a/src/include/pbs_error_db.h b/src/include/pbs_error_db.h
index a9c7bd378..6ea9dc6f1 100644
--- a/src/include/pbs_error_db.h
+++ b/src/include/pbs_error_db.h
@@ -295,6 +295,7 @@ PbsErrClient(PBSE_GHOSTQUEUE, (char *)"This queue had errors during its recovery
 PbsErrClient(PBSE_GPU_NOT_INITIALIZED, (char *)"NVIDIA GPU not initialized")
 PbsErrClient(PBSE_UNSUPPORTED_DEVICE_VERSION, (char *)"Unsupported device version")
 PbsErrClient(PBSE_CGROUP_CREATE_FAIL, (char *)"Could not create all of the cgroups for this job.")
+PbsErrClient(PBSE_EOF, (char *)"This stream has already been closed. End of File.")
 /* pbs client errors ceiling (max_client_err + 1) */
 PbsErrClient(PBSE_CEILING,           (char*)0)
 #endif
diff --git a/src/lib/Libifl/PBSD_rdrpy.c b/src/lib/Libifl/PBSD_rdrpy.c
index ec3e1e793..006dbcf52 100644
--- a/src/lib/Libifl/PBSD_rdrpy.c
+++ b/src/lib/Libifl/PBSD_rdrpy.c
@@ -97,6 +97,57 @@
 #include "server_limits.h"
 
 
+/*
+ * set_pbs_errno_from_dis_errcode()
+ *
+ * Takes the error code from DIS and sets the appropriate PBSE_* error; the error code is passed through
+ * if it isn't a DIS error
+ *
+ * @param local_errno - a pointer to the error code we are setting
+ * @param dis_errcode - the error code we're passing in
+ */
+
+void set_pbs_errno_from_dis_errcode(
+    
+  int *local_errno,
+  int  dis_errcode)
+
+  {
+  switch (dis_errcode)
+    {
+    case DIS_OVERFLOW:
+    case DIS_HUGEVAL:
+    case DIS_BADSIGN:
+    case DIS_LEADZRO:
+    case DIS_NONDIGIT:
+    case DIS_NULLSTR:
+    case DIS_EOD:
+    case DIS_PROTO:
+    case DIS_NOCOMMIT:
+    case DIS_INVALID:
+
+      *local_errno = PBSE_PROTOCOL;
+      break;
+
+    case DIS_NOMALLOC:
+
+      *local_errno = PBSE_MEM_MALLOC;
+      break;
+
+    case DIS_EOF:
+
+      *local_errno = PBSE_EOF;
+      break;
+
+    default:
+
+      *local_errno = dis_errcode;
+      break;
+    }
+
+  } // END set_pbs_errno_from_dis_errcode()
+
+
 
 struct batch_reply *PBSD_rdrpy(
 
@@ -151,10 +202,8 @@ struct batch_reply *PBSD_rdrpy(
       *local_errno = PBSE_TIMEOUT;
       rc = PBSE_TIMEOUT;
       }
-    else
-      {
-      *local_errno = PBSE_PROTOCOL;
-      }
+
+    set_pbs_errno_from_dis_errcode(local_errno, rc);
 
     if ((the_msg = pbs_strerror(*local_errno)) != NULL)
       {
diff --git a/src/test/PBSD_rdrpy/test_uut.c b/src/test/PBSD_rdrpy/test_uut.c
index debd85af0..e7c689d92 100644
--- a/src/test/PBSD_rdrpy/test_uut.c
+++ b/src/test/PBSD_rdrpy/test_uut.c
@@ -7,6 +7,8 @@
 #include "dis.h"
 #include "pbs_error.h"
 
+void set_pbs_errno_from_dis_errcode(int *local_errno, int dis_errcode);
+
 extern bool timeout;
 extern bool setup_fail;
 extern int  decode_rc;
@@ -47,10 +49,37 @@ START_TEST(test_PBSD_rdrpy)
   }
 END_TEST
 
-START_TEST(test_two)
+START_TEST(set_pbs_errno_from_dis_errcode_test)
   {
-
-
+  int local_error = 0;
+
+  for (int i = 1; i < DIS_INVALID; i++)
+    {
+    set_pbs_errno_from_dis_errcode(&local_error, i);
+
+    switch (i)
+      {
+      case DIS_NOMALLOC:
+
+        fail_unless(local_error == PBSE_MEM_MALLOC);
+        break;
+
+      case DIS_EOF:
+        fail_unless(local_error == PBSE_EOF);
+        break;
+        
+      default:
+        fail_unless(local_error == PBSE_PROTOCOL);
+        break;
+      }
+    }
+  
+  // Make sure PBSE_* is a straight copy
+  for (int i = PBSE_FLOOR + 1; i < PBSE_CEILING; i++)
+    {
+    set_pbs_errno_from_dis_errcode(&local_error, i);
+    fail_unless(local_error == i);
+    }
   }
 END_TEST
 
@@ -61,8 +90,8 @@ Suite *PBSD_rdrpy_suite(void)
   tcase_add_test(tc_core, test_PBSD_rdrpy);
   suite_add_tcase(s, tc_core);
 
-  tc_core = tcase_create("test_two");
-  tcase_add_test(tc_core, test_two);
+  tc_core = tcase_create("set_pbs_errno_from_dis_errcode_test");
+  tcase_add_test(tc_core, set_pbs_errno_from_dis_errcode_test);
   suite_add_tcase(s, tc_core);
 
   return s;
diff --git a/src/test/complete_req/scaffolding.c b/src/test/complete_req/scaffolding.c
index bbaf95a7f..234063fb5 100644
--- a/src/test/complete_req/scaffolding.c
+++ b/src/test/complete_req/scaffolding.c
@@ -80,7 +80,6 @@ void *get_next(
 
   {
   static struct resource_def rd;
-  int save_gn_count;
 
   resource *r = (resource *)calloc(1, sizeof(resource));
   r->rs_defin = &rd;
diff --git a/src/test/complete_req/test_uut.c b/src/test/complete_req/test_uut.c
index f4826875a..30b219157 100644
--- a/src/test/complete_req/test_uut.c
+++ b/src/test/complete_req/test_uut.c
@@ -180,7 +180,6 @@ START_TEST(test_get_num_reqs)
   {
   complete_req c;
   std::string hostname = "kmn";
-  unsigned long swap;
 
   req r1;
   req r2;
@@ -333,6 +332,7 @@ Suite *complete_req_suite(void)
   tcase_add_test(tc_core, test_to_string);
   tcase_add_test(tc_core, test_set_get_value);
   tcase_add_test(tc_core, test_update_hostlist);
+  tcase_add_test(tc_core, test_get_req_index_for_host);
   suite_add_tcase(s, tc_core);
   
   return(s);
diff --git a/src/test/req/test_uut.c b/src/test/req/test_uut.c
index 5c93a25ce..23b71b258 100644
--- a/src/test/req/test_uut.c
+++ b/src/test/req/test_uut.c
@@ -104,12 +104,6 @@ START_TEST(test_string_constructor)
   }
 END_TEST
 
-START_TEST(test_get_task_stats)
-  {
-  }
-END_TEST
-
-
 START_TEST(test_get_set_values)
   {
   req r;
diff --git a/src/test/torque_test_lib/test_tcp_dis.cpp b/src/test/torque_test_lib/test_tcp_dis.cpp
index ff870a5c7..5d0540c11 100644
--- a/src/test/torque_test_lib/test_tcp_dis.cpp
+++ b/src/test/torque_test_lib/test_tcp_dis.cpp
@@ -139,7 +139,6 @@ int tcp_read(
   int               tmp_leadp = 0;
   int               tmp_trailp = 0;
   int               tmp_eod = 0;
-  char              err_msg[1024];
 
   tcpData *data = fds[chan->sock];
 
@@ -267,13 +266,10 @@ int DIS_tcp_wflush(
   size_t            ct;
   int               i;
   char             *pb = NULL;
-  char             *pbs_debug = NULL;
 
   struct tcpdisbuf *tp;
   tcpData *data = fds[chan->sock];
 
-  pbs_debug = getenv("PBSDEBUG");
-
   tp = &chan->writebuf;
   pb = tp->tdis_thebuf;
   ct = tp->tdis_trailp - tp->tdis_thebuf;

