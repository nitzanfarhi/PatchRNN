commit 4b40bc38b495bb0c986e7accf5897b164ccfee4d
Author: Filipe Brandenburger <filbranden@google.com>
Date:   Sun Aug 30 20:46:27 2015 -0700

    util: Declare a cleanup routine for a cpu_set_t
    
    Make use of it in config_parse_cpu_affinity2.
    
    Tested by tweaking the `CPUAffinity' setting in /etc/systemd/system.conf
    and reloading the daemon to confirm it is working as expected.
    
    No regressions observed in test cases.

diff --git a/src/basic/util.h b/src/basic/util.h
index 1484ef58e..ff7a00e92 100644
--- a/src/basic/util.h
+++ b/src/basic/util.h
@@ -363,6 +363,9 @@ int fd_is_temporary_fs(int fd);
 
 int pipe_eof(int fd);
 
+DEFINE_TRIVIAL_CLEANUP_FUNC(cpu_set_t*, CPU_FREE);
+#define _cleanup_cpu_free_ _cleanup_(CPU_FREEp)
+
 cpu_set_t* cpu_set_malloc(unsigned *ncpus);
 
 #define xsprintf(buf, fmt, ...) assert_se((size_t) snprintf(buf, ELEMENTSOF(buf), fmt, __VA_ARGS__) < ELEMENTSOF(buf))
diff --git a/src/core/main.c b/src/core/main.c
index 9c2b0c089..539c57a7b 100644
--- a/src/core/main.c
+++ b/src/core/main.c
@@ -433,7 +433,7 @@ static int config_parse_cpu_affinity2(
                 void *data,
                 void *userdata) {
 
-        cpu_set_t *c = NULL;
+        _cleanup_cpu_free_ cpu_set_t *c = NULL;
         unsigned ncpus = 0;
 
         assert(filename);
@@ -460,7 +460,6 @@ static int config_parse_cpu_affinity2(
                 if (r < 0 || cpu >= ncpus) {
                         log_syntax(unit, LOG_ERR, filename, line, -r,
                                    "Failed to parse CPU affinity '%s'", rvalue);
-                        CPU_FREE(c);
                         return -EBADMSG;
                 }
 
@@ -470,13 +469,10 @@ static int config_parse_cpu_affinity2(
                 log_syntax(unit, LOG_ERR, filename, line, EINVAL,
                            "Trailing garbage, ignoring.");
 
-        if (c) {
+        if (c)
                 if (sched_setaffinity(0, CPU_ALLOC_SIZE(ncpus), c) < 0)
                         log_warning("Failed to set CPU affinity: %m");
 
-                CPU_FREE(c);
-        }
-
         return 0;
 }
 

