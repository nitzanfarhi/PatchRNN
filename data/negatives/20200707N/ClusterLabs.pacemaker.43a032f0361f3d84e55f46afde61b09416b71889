commit 43a032f0361f3d84e55f46afde61b09416b71889
Author: Andrew Beekhof <andrew@beekhof.net>
Date:   Wed Oct 16 16:44:42 2013 +1100

    Feature: crmd: Make the utilization limit configurable

diff --git a/crmd/control.c b/crmd/control.c
index 7f4de2e10..af679d8fe 100644
--- a/crmd/control.c
+++ b/crmd/control.c
@@ -825,6 +825,10 @@ pe_cluster_option crmd_opts[] = {
 	  "Polling interval for time based changes to options, resource parameters and constraints.",
 	  "The Cluster is primarily event driven, however the configuration can have elements that change based on time."
 	  "  To ensure these changes take effect, we can optionally poll the cluster's status for changes." },
+	{ "utililization-limit", NULL, "percentage", NULL, "80%", &check_utilization,
+	  "The maximum amount of system resources that should be used by the cluster",
+	  "The cluster will slow down its recovery process when the amount of system resources used"
+          " (currently CPU) approaches this limit", },
 	{ XML_CONFIG_ATTR_ELECTION_FAIL, "election_timeout", "time", NULL, "2min", &check_timer, "*** Advanced Use Only ***.", "If need to adjust this value, it probably indicates the presence of a bug." },
 	{ XML_CONFIG_ATTR_FORCE_QUIT, "shutdown_escalation", "time", NULL, "20min", &check_timer, "*** Advanced Use Only ***.", "If need to adjust this value, it probably indicates the presence of a bug." },
 	{ "crmd-integration-timeout", NULL, "time", NULL, "3min", &check_timer, "*** Advanced Use Only ***.", "If need to adjust this value, it probably indicates the presence of a bug." },
@@ -889,6 +893,13 @@ config_query_callback(xmlNode * msg, int call_id, int rc, xmlNode * output, void
     value = crmd_pref(config_hash, XML_CONFIG_ATTR_DC_DEADTIME);
     election_trigger->period_ms = crm_get_msec(value);
 
+    value = crmd_pref(config_hash, "utililization-limit");
+    if(value) {
+        throttle_cpu_target = strtof(value, NULL) / 100;
+        crm_notice("Maximum utilization is %f based on utililization-limit=%s",
+                   throttle_cpu_target, value);
+    }
+
     value = crmd_pref(config_hash, XML_CONFIG_ATTR_FORCE_QUIT);
     shutdown_escalation_timer->period_ms = crm_get_msec(value);
     /* How long to declare an election over - even if not everyone voted */
diff --git a/crmd/throttle.c b/crmd/throttle.c
index 70be475b3..84d002693 100644
--- a/crmd/throttle.c
+++ b/crmd/throttle.c
@@ -39,7 +39,7 @@ struct throttle_record_s
         char *node;
 };
 
-static float cpu_target = 0.5; /* Ie. 50% configured by the user */
+float throttle_cpu_target = 0.5; /* Ie. 50% configured by the user */
 GHashTable *throttle_records = NULL;
 mainloop_timer_t *throttle_timer = NULL;
 
@@ -132,11 +132,11 @@ throttle_mode(void)
         simple_load = load;
     }
 
-    if(simple_load > cpu_target) {
+    if(simple_load > throttle_cpu_target) {
         mode |= throttle_high;
-    } else if(simple_load > 0.66 * cpu_target) {
+    } else if(simple_load > 0.66 * throttle_cpu_target) {
         mode |= throttle_med;
-    } else if(simple_load > 0.33 * cpu_target) {
+    } else if(simple_load > 0.33 * throttle_cpu_target) {
         mode |= throttle_low;
     }
 
diff --git a/crmd/throttle.h b/crmd/throttle.h
index de2bf4f17..e965fbb90 100644
--- a/crmd/throttle.h
+++ b/crmd/throttle.h
@@ -16,6 +16,8 @@
  * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
  */
 
+extern float throttle_cpu_target;
+
 void throttle_init(void);
 void throttle_fini(void);
 
diff --git a/include/crm_internal.h b/include/crm_internal.h
index fca2c4f5a..96b6037d7 100644
--- a/include/crm_internal.h
+++ b/include/crm_internal.h
@@ -124,6 +124,7 @@ gboolean check_time(const char *value);
 gboolean check_timer(const char *value);
 gboolean check_boolean(const char *value);
 gboolean check_number(const char *value);
+gboolean check_utilization(const char *value);
 
 /* Shared PE/crmd functionality */
 void filter_action_parameters(xmlNode * param_set, const char *version);
diff --git a/lib/common/utils.c b/lib/common/utils.c
index a179d3fca..c1ef09330 100644
--- a/lib/common/utils.c
+++ b/lib/common/utils.c
@@ -162,6 +162,21 @@ check_number(const char *value)
     return TRUE;
 }
 
+gboolean
+check_utilization(const char *value)
+{
+    char *end = NULL;
+    long number = strtol(value, &end, 10);
+
+    if(end && end[0] != '%') {
+        return FALSE;
+    } else if(number < 10) {
+        return FALSE;
+    }
+
+    return TRUE;
+}
+
 int
 char2score(const char *score)
 {
diff --git a/lib/pengine/common.c b/lib/pengine/common.c
index 5c17e47c8..8874c38ca 100644
--- a/lib/pengine/common.c
+++ b/lib/pengine/common.c
@@ -133,7 +133,7 @@ pe_cluster_option pe_opts[] = {
 	{ "cluster-delay", "transition_idle_timeout", "time", NULL, "60s", &check_time,
 	  "Round trip delay over the network (excluding action execution)",
 	  "The \"correct\" value will depend on the speed and load of your network and cluster nodes." },
-	{ "batch-limit", NULL, "integer", NULL, "30", &check_number,
+	{ "batch-limit", NULL, "integer", NULL, "0", &check_number,
 	  "The number of jobs that the TE is allowed to execute in parallel",
 	  "The \"correct\" value will depend on the speed and load of your network and cluster nodes." },
 	{ "migration-limit", NULL, "integer", NULL, "-1", &check_number,

