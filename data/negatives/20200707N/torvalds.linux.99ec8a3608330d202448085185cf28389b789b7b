commit 99ec8a3608330d202448085185cf28389b789b7b
Author: Paul Burton <paul.burton@imgtec.com>
Date:   Tue Jul 5 14:25:59 2016 +0100

    irqchip/mips-gic: Map to VPs using HW VPNum
    
    When mapping an interrupt to a VP(E) we must use the identifier for the
    VP that the hardware expects, and this does not always match up with the
    Linux CPU number. Commit d46812bb0bef ("irqchip: mips-gic: Use HW IDs
    for VPE_OTHER_ADDR") corrected this for the cases that existed at the
    time it was written, but commit 2af70a962070 ("irqchip/mips-gic: Add a
    IPI hierarchy domain") added another case before the former patch was
    merged. This leads to incorrectly using Linux CPU numbers when mapping
    interrupts to VPs, which breaks on certain systems such as those with
    multi-core I6400 CPUs. Fix by adding the appropriate call to
    mips_cm_vp_id() to retrieve the expected VP identifier.
    
    Fixes: d46812bb0bef ("irqchip: mips-gic: Use HW IDs for VPE_OTHER_ADDR")
    Fixes: 2af70a962070 ("irqchip/mips-gic: Add a IPI hierarchy domain")
    Signed-off-by: Paul Burton <paul.burton@imgtec.com>
    Cc: linux-mips@linux-mips.org
    Cc: Jason Cooper <jason@lakedaemon.net>
    Cc: Qais Yousef <qsyousef@gmail.com>
    Cc: Ralf Baechle <ralf@linux-mips.org>
    Cc: Marc Zyngier <marc.zyngier@arm.com>
    Cc: stable@vger.kernel.org
    Link: http://lkml.kernel.org/r/20160705132600.27730-1-paul.burton@imgtec.com
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>

diff --git a/drivers/irqchip/irq-mips-gic.c b/drivers/irqchip/irq-mips-gic.c
index 8a4adbeb2b8c..69b1b8275e4f 100644
--- a/drivers/irqchip/irq-mips-gic.c
+++ b/drivers/irqchip/irq-mips-gic.c
@@ -718,7 +718,7 @@ static int gic_shared_irq_domain_map(struct irq_domain *d, unsigned int virq,
 
 	spin_lock_irqsave(&gic_lock, flags);
 	gic_map_to_pin(intr, gic_cpu_pin);
-	gic_map_to_vpe(intr, vpe);
+	gic_map_to_vpe(intr, mips_cm_vp_id(vpe));
 	for (i = 0; i < min(gic_vpes, NR_CPUS); i++)
 		clear_bit(intr, pcpu_masks[i].pcpu_mask);
 	set_bit(intr, pcpu_masks[vpe].pcpu_mask);

