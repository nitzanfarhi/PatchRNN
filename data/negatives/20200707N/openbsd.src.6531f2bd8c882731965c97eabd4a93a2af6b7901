commit 6531f2bd8c882731965c97eabd4a93a2af6b7901
Author: drahn <drahn@openbsd.org>
Date:   Fri Feb 9 05:22:05 2001 +0000

    Add support for loading the bootloader and kernel from an HFS filesystem,
    using firmware. Mostly from NetBSD. This allows kernels to be booted directly
    from an HFS hard drive. (the rest of the files...)

diff --git a/sys/arch/powerpc/stand/hfs.c b/sys/arch/powerpc/stand/hfs.c
new file mode 100644
index 00000000000..0628e8cddbf
--- /dev/null
+++ b/sys/arch/powerpc/stand/hfs.c
@@ -0,0 +1,131 @@
+/*	$OpenBSD: hfs.c,v 1.1 2001/02/09 05:22:05 drahn Exp $	*/
+/*	$NetBSD: hfs.c,v 1.1 2000/11/14 11:25:35 tsubai Exp $	*/
+
+/*-
+ * Copyright (c) 2000 Tsubai Masanari.  All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in the
+ *    documentation and/or other materials provided with the distribution.
+ * 3. The name of the author may not be used to endorse or promote products
+ *    derived from this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
+ * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
+ * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
+ * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+ * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+ * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+
+#include <sys/param.h>
+#include <lib/libkern/libkern.h>
+#include <lib/libsa/stand.h>
+
+#include <openfirm.h>
+#include <hfs.h>
+
+static int OF_fd;	/* XXX */
+
+int
+hfs_open(path, f)
+	char *path;
+	struct open_file *f;
+{
+	int chosen;
+	char bootpath[128], *cp;
+
+
+	if ((chosen = OF_finddevice("/chosen")) == -1)
+		return ENXIO;
+	bzero(bootpath, sizeof bootpath);
+	OF_getprop(chosen, "bootpath", bootpath, sizeof bootpath);
+
+#ifdef HAVE_STAND_STRRCHR
+	cp = strrchr(bootpath, ',');
+#else
+	cp = bootpath;
+	cp += strlen (bootpath);
+	for (; *cp != ','; cp--) {
+		if (cp == bootpath) {
+			cp = NULL;
+			break;
+		}
+	}
+#endif
+	if (cp == NULL)
+		return ENXIO;
+
+	strcpy(cp + 1, path);
+	OF_fd = OF_open(bootpath);
+	if (OF_fd == -1)
+		return ENOENT;
+
+	return 0;
+}
+
+int
+hfs_close(f)
+	struct open_file *f;
+{
+	OF_close(OF_fd);
+	return 0;
+}
+
+int
+hfs_read(f, start, size, resid)
+	struct open_file *f;
+	void *start;
+	size_t size, *resid;
+{
+	int len;
+
+	len = OF_read(OF_fd, start, size);
+	size -= len;
+	if (resid)
+		*resid = size;
+	return 0;
+}
+
+int
+hfs_write(f, start, size, resid)
+	struct open_file *f;
+	void *start;
+	size_t size, *resid;
+{
+	printf("hfs_write\n");
+	return ENXIO;
+}
+
+off_t
+hfs_seek(f, offset, where)
+	struct open_file *f;
+	off_t offset;
+	int where;
+{
+	switch (where) {
+	case SEEK_SET:
+		return OF_seek(OF_fd, offset);
+	case SEEK_CUR:
+	case SEEK_END:
+	default:
+		return -1;
+	}
+}
+
+int
+hfs_stat(f, sb)
+	struct open_file *f;
+	struct stat *sb;
+{
+	return 0;
+}
diff --git a/sys/arch/powerpc/stand/hfs.h b/sys/arch/powerpc/stand/hfs.h
new file mode 100644
index 00000000000..9cfef5d6b9e
--- /dev/null
+++ b/sys/arch/powerpc/stand/hfs.h
@@ -0,0 +1,9 @@
+/*	$OpenBSD: hfs.h,v 1.1 2001/02/09 05:22:05 drahn Exp $	*/
+/*	$NetBSD: hfs.h,v 1.1 2000/11/14 11:25:35 tsubai Exp $	*/
+
+int hfs_open(char *, struct open_file *);
+int hfs_close(struct open_file *);
+int hfs_read(struct open_file *, void *, size_t, size_t *);
+int hfs_write(struct open_file *, void *, size_t, size_t *);
+off_t hfs_seek(struct open_file *, off_t, int);
+int hfs_stat(struct open_file *, struct stat *);
diff --git a/sys/arch/powerpc/stand/ofdev.c b/sys/arch/powerpc/stand/ofdev.c
index af474914c28..675f8b72d54 100644
--- a/sys/arch/powerpc/stand/ofdev.c
+++ b/sys/arch/powerpc/stand/ofdev.c
@@ -1,4 +1,4 @@
-/*	$OpenBSD: ofdev.c,v 1.6 2000/11/13 13:38:42 niklas Exp $	*/
+/*	$OpenBSD: ofdev.c,v 1.7 2001/02/09 05:22:05 drahn Exp $	*/
 /*	$NetBSD: ofdev.c,v 1.1 1997/04/16 20:29:20 thorpej Exp $	*/
 
 /*
@@ -42,6 +42,7 @@
 #include <lib/libsa/ufs.h>
 #include <lib/libsa/cd9660.h>
 #include <lib/libsa/nfs.h>
+#include <hfs.h>
 
 #include <powerpc/stand/ofdev.h>
 
@@ -156,6 +157,9 @@ static struct fs_ops file_system_cd9660 = {
 	cd9660_open, cd9660_close, cd9660_read, cd9660_write, cd9660_seek,
 	    cd9660_stat
 };
+static struct fs_ops file_system_hfs = {
+	hfs_open, hfs_close, hfs_read, hfs_write, hfs_seek, hfs_stat
+};
 static struct fs_ops file_system_nfs = {
 	nfs_open, nfs_close, nfs_read, nfs_write, nfs_seek, nfs_stat
 };
@@ -326,7 +330,9 @@ devopen(of, name, file)
 		bcopy(&file_system_ufs, file_system, sizeof file_system[0]);
 		bcopy(&file_system_cd9660, file_system + 1,
 		    sizeof file_system[0]);
-		nfsys = 2;
+		bcopy(&file_system_hfs, file_system + 2,
+		    sizeof file_system[0]);
+		nfsys = 3;
 		return 0;
 	}
 	if (!strcmp(buf, "network")) {

