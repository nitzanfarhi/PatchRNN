commit f418f47b66548585c06b3378c7c1de6cb9fed838
Author: Jan Kundrát <jkt@flaska.net>
Date:   Mon Oct 29 01:32:10 2012 +0100

    RFC2047: encode the leading part of the Subject header using ASCII if possible
    
    fixes #566

diff --git a/src/Imap/Encoders.cpp b/src/Imap/Encoders.cpp
index e8dc0cbb..9d51cffd 100644
--- a/src/Imap/Encoders.cpp
+++ b/src/Imap/Encoders.cpp
@@ -274,6 +274,20 @@ QByteArray encodeRFC2047String(const QString& text)
     return encodeRFC2047String(text, charset);
 }
 
+/** @short Encode the given string into RFC2047 form, preserving the ASCII leading part if possible */
+QByteArray encodeRFC2047StringWithAsciiPrefix(const QString &text)
+{
+    // Find first character which needs escaping
+    int pos = 0;
+    while (pos < text.size() && text[pos].unicode() >= 0x0020 && text[pos].unicode() <= 0x007e)
+        ++pos;
+    // Find last character of a word which doesn't need escaping
+    while (pos >0 && text[pos-1] != QLatin1Char(' '))
+        --pos;
+
+    return text.left(pos).toUtf8() + encodeRFC2047String(text.mid(pos));
+}
+
 QString decodeRFC2047String( const QByteArray& raw )
 {
     return ::decodeWordSequence( raw );
diff --git a/src/Imap/Encoders.h b/src/Imap/Encoders.h
index 578c25e7..94322552 100644
--- a/src/Imap/Encoders.h
+++ b/src/Imap/Encoders.h
@@ -40,6 +40,7 @@ typedef enum {
 QByteArray quotedString(const QByteArray &unquoted, QuotedStringStyle style = DoubleQuoted);
 QByteArray encodeRFC2047Phrase(const QString &text);
 
+QByteArray encodeRFC2047StringWithAsciiPrefix(const QString &text);
 QByteArray encodeRFC2047String(const QString &text);
 QByteArray encodeRFC2047String(const QString &text, const Rfc2047StringCharacterSetType charset);
 
diff --git a/src/Imap/Model/MessageComposer.cpp b/src/Imap/Model/MessageComposer.cpp
index a19ed019..f563f4c8 100644
--- a/src/Imap/Model/MessageComposer.cpp
+++ b/src/Imap/Model/MessageComposer.cpp
@@ -424,7 +424,7 @@ QByteArray MessageComposer::generateMimeBoundary()
 QByteArray MessageComposer::encodeHeaderField(const QString &text)
 {
     /* This encodes an "unstructured" header field */
-    return Imap::encodeRFC2047String(text);
+    return Imap::encodeRFC2047StringWithAsciiPrefix(text);
 }
 
 void MessageComposer::writeCommonMessageBeginning(QIODevice *target, const QByteArray boundary) const
diff --git a/tests/tests/test_rfccodecs/test_rfccodecs.cpp b/tests/tests/test_rfccodecs/test_rfccodecs.cpp
index 9a22ddee..4ab8146b 100644
--- a/tests/tests/test_rfccodecs/test_rfccodecs.cpp
+++ b/tests/tests/test_rfccodecs/test_rfccodecs.cpp
@@ -199,6 +199,31 @@ void RFCCodecsTest::testEncodeRFC2047String_data()
     QTest::newRow("empty") << QString() << QByteArray();
     QTest::newRow("simple-ascii") << QString::fromUtf8("ahoj") << QByteArray("ahoj");
     QTest::newRow("jan-kundrat") << QString::fromUtf8("Jan Kundrát") << QByteArray("=?iso-8859-1?Q?Jan_Kundr=E1t?=");
+    QTest::newRow("czech") << QString::fromUtf8("ě") << QByteArray("=?utf-8?B?xJs=?=");
+}
+
+void RFCCodecsTest::testEncodeRFC2047StringAsciiPrefix()
+{
+    QFETCH(QString, input);
+    QFETCH(QByteArray, encoded);
+
+    QCOMPARE(Imap::encodeRFC2047StringWithAsciiPrefix(input), encoded);
+    QCOMPARE(Imap::decodeRFC2047String(Imap::encodeRFC2047StringWithAsciiPrefix(input)), input);
+}
+
+void RFCCodecsTest::testEncodeRFC2047StringAsciiPrefix_data()
+{
+    QTest::addColumn<QString>("input");
+    QTest::addColumn<QByteArray>("encoded");
+
+    QTest::newRow("empty") << QString() << QByteArray();
+    QTest::newRow("simple-ascii") << QString::fromUtf8("ahoj") << QByteArray("ahoj");
+    QTest::newRow("jan-kundrat") << QString::fromUtf8("Jan Kundrát") << QByteArray("Jan =?iso-8859-1?Q?Kundr=E1t?=");
+    QTest::newRow("jan-kundrat-e") << QString::fromUtf8("Jan Kundrát ě") << QByteArray("Jan =?utf-8?B?S3VuZHLDoXQgxJs=?=");
+    QTest::newRow("czech") << QString::fromUtf8("ě") << QByteArray("=?utf-8?B?xJs=?=");
+    QTest::newRow("trojita-subjects") << QString::fromUtf8("[trojita] foo bar blesmrt") << QByteArray("[trojita] foo bar blesmrt");
+    QTest::newRow("trojita-subjects-utf") << QString::fromUtf8("[trojita] foo bar ěščřžýáíé")
+        << QByteArray("[trojita] foo bar =?utf-8?B?xJvFocSNxZnFvsO9w6HDrcOp?=");
 }
 
 TROJITA_HEADLESS_TEST( RFCCodecsTest )
diff --git a/tests/tests/test_rfccodecs/test_rfccodecs.h b/tests/tests/test_rfccodecs/test_rfccodecs.h
index 2828e369..125e4a12 100644
--- a/tests/tests/test_rfccodecs/test_rfccodecs.h
+++ b/tests/tests/test_rfccodecs/test_rfccodecs.h
@@ -39,6 +39,9 @@ private Q_SLOTS:
 
   void testEncodeRFC2047String();
   void testEncodeRFC2047String_data();
+
+  void testEncodeRFC2047StringAsciiPrefix();
+  void testEncodeRFC2047StringAsciiPrefix_data();
 };
 
 #endif

