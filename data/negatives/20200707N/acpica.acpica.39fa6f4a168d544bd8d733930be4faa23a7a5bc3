commit 39fa6f4a168d544bd8d733930be4faa23a7a5bc3
Author: Robert Moore <Robert.Moore@intel.com>
Date:   Thu Apr 9 08:18:21 2009 -0700

    Fix possible warnings for ACPI_THREAD_ID on 64-bit build.
    
    Warnings can be generated for printf-like statements that output
    the ACPI_THREAD_ID on 64-bit builds, since this type can expand
    to 64-bits depending on how it is defined. Use the %p format
    specifier to allow the output to automatically expand to 64 bits.

diff --git a/source/components/executer/exmutex.c b/source/components/executer/exmutex.c
index 4cdd16fcc..99e768d3c 100644
--- a/source/components/executer/exmutex.c
+++ b/source/components/executer/exmutex.c
@@ -488,10 +488,10 @@ AcpiExReleaseMutex (
         (ObjDesc != AcpiGbl_GlobalLockMutex))
     {
         ACPI_ERROR ((AE_INFO,
-            "Thread %X cannot release Mutex [%4.4s] acquired by thread %X",
-            WalkState->Thread->ThreadId,
+            "Thread %p cannot release Mutex [%4.4s] acquired by thread %p",
+            ACPI_CAST_PTR (void, WalkState->Thread->ThreadId),
             AcpiUtGetNodeName (ObjDesc->Mutex.Node),
-            ObjDesc->Mutex.OwnerThread->ThreadId));
+            ACPI_CAST_PTR (void, ObjDesc->Mutex.OwnerThread->ThreadId)));
         return_ACPI_STATUS (AE_AML_NOT_OWNER);
     }
 
diff --git a/source/components/utilities/utdebug.c b/source/components/utilities/utdebug.c
index 50a52af74..54ca46e44 100644
--- a/source/components/utilities/utdebug.c
+++ b/source/components/utilities/utdebug.c
@@ -279,8 +279,9 @@ AcpiDebugPrint (
         if (ACPI_LV_THREADS & AcpiDbgLevel)
         {
             AcpiOsPrintf (
-                "\n**** Context Switch from TID %X to TID %X ****\n\n",
-                AcpiGbl_PrevThreadId, ThreadId);
+                "\n**** Context Switch from TID %p to TID %p ****\n\n",
+                ACPI_CAST_PTR (void, AcpiGbl_PrevThreadId),
+                ACPI_CAST_PTR (void, ThreadId));
         }
 
         AcpiGbl_PrevThreadId = ThreadId;
@@ -294,7 +295,7 @@ AcpiDebugPrint (
 
     if (ACPI_LV_THREADS & AcpiDbgLevel)
     {
-        AcpiOsPrintf ("[%04lX] ", ThreadId);
+        AcpiOsPrintf ("[%p] ", ACPI_CAST_PTR (void, ThreadId));
     }
 
     AcpiOsPrintf ("[%02ld] %-22.22s: ",
diff --git a/source/components/utilities/utmutex.c b/source/components/utilities/utmutex.c
index 64653b3d8..f6e7cc365 100644
--- a/source/components/utilities/utmutex.c
+++ b/source/components/utilities/utmutex.c
@@ -351,15 +351,16 @@ AcpiUtAcquireMutex (
                 if (i == MutexId)
                 {
                     ACPI_ERROR ((AE_INFO,
-                        "Mutex [%s] already acquired by this thread [%X]",
-                        AcpiUtGetMutexName (MutexId), ThisThreadId));
+                        "Mutex [%s] already acquired by this thread [%p]",
+                        AcpiUtGetMutexName (MutexId),
+                        ACPI_CAST_PTR (void, ThisThreadId)));
 
                     return (AE_ALREADY_ACQUIRED);
                 }
 
                 ACPI_ERROR ((AE_INFO,
-                    "Invalid acquire order: Thread %X owns [%s], wants [%s]",
-                    ThisThreadId, AcpiUtGetMutexName (i),
+                    "Invalid acquire order: Thread %p owns [%s], wants [%s]",
+                    ACPI_CAST_PTR (void, ThisThreadId), AcpiUtGetMutexName (i),
                     AcpiUtGetMutexName (MutexId)));
 
                 return (AE_ACQUIRE_DEADLOCK);
@@ -369,15 +370,15 @@ AcpiUtAcquireMutex (
 #endif
 
     ACPI_DEBUG_PRINT ((ACPI_DB_MUTEX,
-        "Thread %X attempting to acquire Mutex [%s]\n",
-        ThisThreadId, AcpiUtGetMutexName (MutexId)));
+        "Thread %p attempting to acquire Mutex [%s]\n",
+        ACPI_CAST_PTR (void, ThisThreadId), AcpiUtGetMutexName (MutexId)));
 
     Status = AcpiOsAcquireMutex (AcpiGbl_MutexInfo[MutexId].Mutex,
                 ACPI_WAIT_FOREVER);
     if (ACPI_SUCCESS (Status))
     {
-        ACPI_DEBUG_PRINT ((ACPI_DB_MUTEX, "Thread %X acquired Mutex [%s]\n",
-            ThisThreadId, AcpiUtGetMutexName (MutexId)));
+        ACPI_DEBUG_PRINT ((ACPI_DB_MUTEX, "Thread %p acquired Mutex [%s]\n",
+            ACPI_CAST_PTR (void, ThisThreadId), AcpiUtGetMutexName (MutexId)));
 
         AcpiGbl_MutexInfo[MutexId].UseCount++;
         AcpiGbl_MutexInfo[MutexId].ThreadId = ThisThreadId;
@@ -385,7 +386,8 @@ AcpiUtAcquireMutex (
     else
     {
         ACPI_EXCEPTION ((AE_INFO, Status,
-            "Thread %X could not acquire Mutex [%X]", ThisThreadId, MutexId));
+            "Thread %p could not acquire Mutex [%X]",
+            ACPI_CAST_PTR (void, ThisThreadId), MutexId));
     }
 
     return (Status);
@@ -415,9 +417,8 @@ AcpiUtReleaseMutex (
 
 
     ThisThreadId = AcpiOsGetThreadId ();
-    ACPI_DEBUG_PRINT ((ACPI_DB_MUTEX,
-        "Thread %X releasing Mutex [%s]\n", ThisThreadId,
-        AcpiUtGetMutexName (MutexId)));
+    ACPI_DEBUG_PRINT ((ACPI_DB_MUTEX, "Thread %p releasing Mutex [%s]\n",
+        ACPI_CAST_PTR (void, ThisThreadId), AcpiUtGetMutexName (MutexId)));
 
     if (MutexId > ACPI_MAX_MUTEX)
     {

