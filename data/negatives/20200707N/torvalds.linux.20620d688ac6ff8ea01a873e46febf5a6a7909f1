commit 20620d688ac6ff8ea01a873e46febf5a6a7909f1
Author: David Woodhouse <dwmw2@infradead.org>
Date:   Wed Aug 22 14:01:11 2007 -0700

    serial: don't optimise away baud rate changes when BOTHER is used
    
    The uart_set_termios() function will bail out early without bothering to
    touch the hardware, if it decides that nothing "relevant" has changed.
    Unfortunately, its idea of "relevant" doesn't include c_[io]speed.  So if
    the baud rate bits are BOTHER and you just change the speed, the change
    gets optimised away.
    
    This patch makes it ignore the old Bfoo bits in c_cflag and just check
    whether c_ispeed and c_ospeed have changed.  Those integers are always set
    appropriately for us by set_termios().
    
    Signed-off-by: David Woodhouse <dwmw2@infradead.org>
    Acked-by: Alan Cox <alan@redhat.com>
    Cc: Russell King <rmk@arm.linux.org.uk>
    Cc: Mariusz Kozlowski <m.kozlowski@tuxland.pl>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

diff --git a/drivers/serial/serial_core.c b/drivers/serial/serial_core.c
index 030a6063541d..a055f58f342f 100644
--- a/drivers/serial/serial_core.c
+++ b/drivers/serial/serial_core.c
@@ -1146,11 +1146,14 @@ static void uart_set_termios(struct tty_struct *tty, struct ktermios *old_termio
 
 	/*
 	 * These are the bits that are used to setup various
-	 * flags in the low level driver.
+	 * flags in the low level driver. We can ignore the Bfoo
+	 * bits in c_cflag; c_[io]speed will always be set
+	 * appropriately by set_termios() in tty_ioctl.c
 	 */
 #define RELEVANT_IFLAG(iflag)	((iflag) & (IGNBRK|BRKINT|IGNPAR|PARMRK|INPCK))
-
 	if ((cflag ^ old_termios->c_cflag) == 0 &&
+	    tty->termios->c_ospeed == old_termios->c_ospeed &&
+	    tty->termios->c_ispeed == old_termios->c_ispeed &&
 	    RELEVANT_IFLAG(tty->termios->c_iflag ^ old_termios->c_iflag) == 0)
 		return;
 

