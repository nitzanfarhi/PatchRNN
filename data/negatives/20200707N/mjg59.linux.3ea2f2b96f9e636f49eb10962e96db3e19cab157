commit 3ea2f2b96f9e636f49eb10962e96db3e19cab157
Author: Oleg Nesterov <oleg@redhat.com>
Date:   Wed Oct 16 22:10:04 2013 +0200

    perf: Do not waste PAGE_SIZE bytes for ALIGN(8) in perf_event_mmap_event()
    
    perf_event_mmap_event() does kzalloc(PATH_MAX + sizeof(u64)) to
    ensure we can align the size later. However this means that we
    actually allocate PAGE_SIZE * 2 buffer, seems too much.
    
    Change this code to allocate PATH_MAX==PAGE_SIZE bytes, but tell
    d_path() to not use the last sizeof(u64) bytes.
    
    Note: it is not clear why do we need __GFP_ZERO, see the next patch.
    
    Signed-off-by: Oleg Nesterov <oleg@redhat.com>
    Signed-off-by: Peter Zijlstra <peterz@infradead.org>
    Link: http://lkml.kernel.org/r/20131016201004.GC23214@redhat.com
    Signed-off-by: Ingo Molnar <mingo@kernel.org>

diff --git a/kernel/events/core.c b/kernel/events/core.c
index 3ea560551a2a..b409e757cadc 100644
--- a/kernel/events/core.c
+++ b/kernel/events/core.c
@@ -5113,17 +5113,18 @@ static void perf_event_mmap_event(struct perf_mmap_event *mmap_event)
 	if (file) {
 		struct inode *inode;
 		dev_t dev;
-		/*
-		 * d_path works from the end of the rb backwards, so we
-		 * need to add enough zero bytes after the string to handle
-		 * the 64bit alignment we do later.
-		 */
-		buf = kzalloc(PATH_MAX + sizeof(u64), GFP_KERNEL);
+
+		buf = kzalloc(PATH_MAX, GFP_KERNEL);
 		if (!buf) {
 			name = strncpy(tmp, "//enomem", sizeof(tmp));
 			goto got_name;
 		}
-		name = d_path(&file->f_path, buf, PATH_MAX);
+		/*
+		 * d_path() works from the end of the rb backwards, so we
+		 * need to add enough zero bytes after the string to handle
+		 * the 64bit alignment we do later.
+		 */
+		name = d_path(&file->f_path, buf, PATH_MAX - sizeof(u64));
 		if (IS_ERR(name)) {
 			name = strncpy(tmp, "//toolong", sizeof(tmp));
 			goto got_name;

