commit d3857d2ef5c1c06948f5e0e08dd4309f668cdd28
Author: mwilliams <markw65@facebook.com>
Date:   Tue Aug 31 09:07:57 2010 -0700

    Rewrite o_exists in terms of o_realProp
    
    Summary:
    o_realProp is intended to implement the internals of o_exists, o_get, o_set and
    o_lval. This diff just implements o_realProp, and re-implements o_exists using
    it.
    It also implements doIsSet, doEmpty and o_propExists more efficiently.
    
    Test Plan:
    fast_tests, slow_tests, flib tests.
    
    DiffCamp Revision: 152930
    Reviewed By: hzhao
    Commenters: qixin
    CC: hzhao, qixin, mwilliams, hphp-diffs@lists
    Revert Plan:
    OK

diff --git a/src/compiler/analysis/variable_table.cpp b/src/compiler/analysis/variable_table.cpp
index 421807cc45..4d081ce5be 100644
--- a/src/compiler/analysis/variable_table.cpp
+++ b/src/compiler/analysis/variable_table.cpp
@@ -1548,8 +1548,9 @@ void VariableTable::outputCPPPropertyTable(CodeGenerator &cg,
   outputCPPPropertyOp(cg, ar, cls, parent, "get", ", bool error",
                       ", error", "Variant", false, JumpReturnString, false,
                       dynamicObject, JumpTableClassGet);
-  outputCPPPropertyOp(cg, ar, cls, parent, "exists", "", "", "bool", true,
-                      JumpExists, false, dynamicObject, JumpTableClassExists);
+  outputCPPPropertyOp(cg, ar, cls, parent, "realProp", ", int flags", ", flags",
+                      "Variant *", true, JumpRealProp, false, dynamicObject,
+                      JumpTableClassRealProp);
   outputCPPPropertyOp(cg, ar, cls, parent, "set",
                       ", CVarRef v, bool forInit",
                       ", v, forInit", "Variant",
@@ -1661,6 +1662,7 @@ bool VariableTable::outputCPPJumpTable(CodeGenerator &cg, AnalysisResultPtr ar,
   hphp_const_char_map<ssize_t> varIdx;
   strings.reserve(m_symbols.size());
   bool hasStatic = false;
+  bool needsGlobals = type == JumpReturnInit;
   for (unsigned int i = 0; i < m_symbols.size(); i++) {
     const string &name = m_symbols[i];
     bool stat = isStatic(name);
@@ -1674,23 +1676,27 @@ bool VariableTable::outputCPPJumpTable(CodeGenerator &cg, AnalysisResultPtr ar,
       hasStatic |= stat;
       if (type == JumpIndex) varIdx[name.c_str()] = strings.size();
       strings.push_back(name.c_str());
+      if (type == JumpRealProp &&
+          !Type::SameType(getFinalType(name), Type::Variant)) {
+        needsGlobals = true;
+      }
     }
   }
   if (strings.empty()) return false;
 
-  if (hasStatic) {
+  if (hasStatic || needsGlobals) {
     cg.printDeclareGlobals();
+    if (declaredGlobals) *declaredGlobals = true;
+  }
+
+  if (hasStatic) {
     ClassScopePtr cls = ar->getClassScope();
     if (cls && cls->needLazyStaticInitializer()) {
       cg_printf("lazy_initializer(g);\n");
     }
-    if (declaredGlobals) *declaredGlobals = true;
-  } else if (type == JumpReturnInit) {
-    cg.printDeclareGlobals();
-    if (declaredGlobals) *declaredGlobals = true;
   }
 
-  bool useString = (type == JumpExists) || (type == JumpSet) ||
+  bool useString = (type == JumpRealProp) || (type == JumpSet) ||
                    (type == JumpReturnString) ||
                    (type == JumpInitializedString) || (type == JumpReturnInit);
 
@@ -1713,10 +1719,12 @@ bool VariableTable::outputCPPJumpTable(CodeGenerator &cg, AnalysisResultPtr ar,
       varName = string("g->") + varName;
     }
     switch (type) {
-    case VariableTable::JumpExists:
-      cg_printf("HASH_EXISTS_STRING(0x%016llXLL, \"%s\", %d);\n",
+    case VariableTable::JumpRealProp:
+      cg_printf("HASH_REALPROP_%sSTRING(0x%016llXLL, \"%s\", %d, %s);\n",
+                Type::SameType(getFinalType(name), Type::Variant) ?
+                "" : "TYPED_",
                 hash_string(name), cg.escapeLabel(name).c_str(),
-                strlen(name));
+                strlen(name), cg.formatLabel(name).c_str());
       break;
     case VariableTable::JumpReturn:
       cg_printf("HASH_RETURN(0x%016llXLL, %s,\n",
diff --git a/src/compiler/analysis/variable_table.h b/src/compiler/analysis/variable_table.h
index d46f3e0e3a..d4662f320d 100644
--- a/src/compiler/analysis/variable_table.h
+++ b/src/compiler/analysis/variable_table.h
@@ -68,7 +68,7 @@ public:
 
   enum JumpTableType {
     JumpReturn,
-    JumpExists,
+    JumpRealProp,
     JumpSet,
     JumpInitialized,
     JumpInitializedString,
@@ -95,9 +95,9 @@ public:
     JumpTableClassGet,
     JumpTableClassGetPublic,
     JumpTableClassGetPrivate,
-    JumpTableClassExists,
-    JumpTableClassExistsPublic,
-    JumpTableClassExistsPrivate,
+    JumpTableClassRealProp,
+    JumpTableClassRealPropPublic,
+    JumpTableClassRealPropPrivate,
     JumpTableClassSet,
     JumpTableClassSetPublic,
     JumpTableClassSetPrivate,
diff --git a/src/compiler/statement/class_statement.cpp b/src/compiler/statement/class_statement.cpp
index a6f987e6ad..ec1abde0ff 100644
--- a/src/compiler/statement/class_statement.cpp
+++ b/src/compiler/statement/class_statement.cpp
@@ -318,16 +318,16 @@ void ClassStatement::outputCPPClassDecl(CodeGenerator &cg,
     cg_printf("#define OMIT_JUMP_TABLE_CLASS_SETARRAY_%s 1\n", clsName);
   }
 
-  if (variables->hasJumpTable(VariableTable::JumpTableClassExists)) {
-    cg_printf("virtual bool o_exists(CStrRef s, "
+  if (variables->hasJumpTable(VariableTable::JumpTableClassRealProp)) {
+    cg_printf("virtual Variant *o_realProp(CStrRef s, int flags, "
               "CStrRef context = null_string) const;\n");
   } else {
-    cg_printf("#define OMIT_JUMP_TABLE_CLASS_exists_%s 1\n", clsName);
+    cg_printf("#define OMIT_JUMP_TABLE_CLASS_realProp_%s 1\n", clsName);
   }
   if (variables->hasNonStaticPrivate()) {
-    cg_printf("bool o_existsPrivate(CStrRef s) const;\n");
+    cg_printf("Variant *o_realPropPrivate(CStrRef s, int flags) const;\n");
   } else {
-    cg_printf("#define OMIT_JUMP_TABLE_CLASS_exists_PRIVATE_%s 1\n", clsName);
+    cg_printf("#define OMIT_JUMP_TABLE_CLASS_realProp_PRIVATE_%s 1\n", clsName);
   }
 
   if (variables->hasJumpTable(VariableTable::JumpTableClassGet)) {
@@ -368,10 +368,11 @@ void ClassStatement::outputCPPClassDecl(CodeGenerator &cg,
 
   cg.printSection("DECLARE_INSTANCE_PUBLIC_PROP_OPS");
   cg_printf("public:\n");
-  if (variables->hasJumpTable(VariableTable::JumpTableClassExistsPublic)) {
-    cg_printf("virtual bool o_existsPublic(CStrRef s) const;\n");
+  if (variables->hasJumpTable(VariableTable::JumpTableClassRealPropPublic)) {
+    cg_printf("virtual Variant *o_realPropPublic(CStrRef s, "
+              "int flags) const;\n");
   } else {
-    cg_printf("#define OMIT_JUMP_TABLE_CLASS_exists_PUBLIC_%s 1\n", clsName);
+    cg_printf("#define OMIT_JUMP_TABLE_CLASS_realProp_PUBLIC_%s 1\n", clsName);
   }
   if (variables->hasJumpTable(VariableTable::JumpTableClassGetPublic)) {
     cg_printf("virtual Variant o_getPublic(CStrRef s, bool error = true);\n");
diff --git a/src/runtime/base/array/array_data.cpp b/src/runtime/base/array/array_data.cpp
index fe530851e0..97d973af2c 100644
--- a/src/runtime/base/array/array_data.cpp
+++ b/src/runtime/base/array/array_data.cpp
@@ -138,6 +138,11 @@ void ArrayData::load(CVarRef k, Variant &v) const {
   if (exists(k)) v = get(k);
 }
 
+ArrayData *ArrayData::lvalPtr(CStrRef k, Variant *&ret, bool copy,
+                              bool create) {
+  throw FatalErrorException("Unimplemented ArrayData::lvalPtr");
+}
+
 ///////////////////////////////////////////////////////////////////////////////
 // stack and queue operations
 
diff --git a/src/runtime/base/array/array_data.h b/src/runtime/base/array/array_data.h
index dbf939d1ef..509706193f 100644
--- a/src/runtime/base/array/array_data.h
+++ b/src/runtime/base/array/array_data.h
@@ -166,6 +166,13 @@ class ArrayData : public Countable {
   virtual ArrayData *lval(CVarRef k, Variant *&ret, bool copy,
                           bool checkExist = false) = 0;
 
+  /**
+   * Helper function used for getting a reference to elements of
+   * the o_properties array
+   */
+  virtual ArrayData *lvalPtr(CStrRef k, Variant *&ret, bool copy,
+                             bool create);
+
   /**
    * Setting a value at specified key. If "copy" is true, make a copy first
    * then set the value. Return NULL if escalation is not needed, or an
diff --git a/src/runtime/base/array/small_array.cpp b/src/runtime/base/array/small_array.cpp
index 2323551469..9a3c185356 100644
--- a/src/runtime/base/array/small_array.cpp
+++ b/src/runtime/base/array/small_array.cpp
@@ -578,6 +578,42 @@ ArrayData *SmallArray::lval(CStrRef k, Variant *&ret, bool copy,
   return result;
 }
 
+ArrayData *SmallArray::lvalPtr(CStrRef k, Variant *&ret, bool copy,
+                               bool create) {
+  StringData *key = k.get();
+  int64 prehash = key->hash();
+  int p = find(key->data(), key->size(), prehash);
+  Bucket *pb = m_arBuckets + p;
+
+  SmallArray *result = NULL;
+  if (pb->kind == Empty) {
+    if (create && m_nNumOfElements >= SARR_SIZE) {
+      ArrayData *a = escalateToZendArray();
+      a->lvalPtr(k, ret, false, create);
+      return a;
+    }
+    ret = NULL;
+    if (copy) {
+      result = copyImpl();
+      if (create) {
+        pb = result->addKey(p, key);
+        ret = &pb->data;
+      }
+    } else if (create) {
+      addKey(p, key);
+      ret = &pb->data;
+    }
+    return result;
+  }
+
+  if (copy) {
+    result = copyImpl();
+    pb = result->m_arBuckets + p;
+  }
+  ret = &pb->data;
+  return result;
+}
+
 ArrayData *SmallArray::lval(CVarRef k, Variant *&ret, bool copy,
                             bool checkExist /* = false */) {
   if (k.isNumeric()) {
diff --git a/src/runtime/base/array/small_array.h b/src/runtime/base/array/small_array.h
index 52d74c8e44..5ced53afef 100644
--- a/src/runtime/base/array/small_array.h
+++ b/src/runtime/base/array/small_array.h
@@ -83,6 +83,8 @@ public:
                           bool checkExist = false);
   virtual ArrayData *lval(CVarRef k, Variant *&ret, bool copy,
                           bool checkExist = false);
+  virtual ArrayData *lvalPtr(CStrRef k, Variant *&ret, bool copy,
+                             bool create);
 
   virtual ArrayData *set(int64   k, CVarRef v, bool copy);
   virtual ArrayData *set(litstr  k, CVarRef v, bool copy);
diff --git a/src/runtime/base/array/zend_array.cpp b/src/runtime/base/array/zend_array.cpp
index ce2a537086..49c547e670 100644
--- a/src/runtime/base/array/zend_array.cpp
+++ b/src/runtime/base/array/zend_array.cpp
@@ -779,6 +779,28 @@ ArrayData *ZendArray::lval(CStrRef k, Variant *&ret, bool copy,
   return a;
 }
 
+ArrayData *ZendArray::lvalPtr(CStrRef k, Variant *&ret, bool copy,
+                              bool create) {
+  StringData *key = k.get();
+  int64 prehash = key->hash();
+  ZendArray *a = 0, *t = this;
+  if (copy) {
+    a = t = copyImpl();
+  }
+
+  if (create) {
+    t->addLval(key, prehash, &ret);
+  } else {
+    Bucket *p = t->find(key->data(), key->size(), prehash);
+    if (p) {
+      ret = &p->data;
+    } else {
+      ret = NULL;
+    }
+  }
+  return a;
+}
+
 ArrayData *ZendArray::lval(litstr k, Variant *&ret, bool copy,
                            bool checkExist /* = false */) {
   String s(k, AttachLiteral);
diff --git a/src/runtime/base/array/zend_array.h b/src/runtime/base/array/zend_array.h
index 3101073cae..a5021647ad 100644
--- a/src/runtime/base/array/zend_array.h
+++ b/src/runtime/base/array/zend_array.h
@@ -88,6 +88,8 @@ public:
                           bool checkExist = false);
   virtual ArrayData *lval(CVarRef k, Variant *&ret, bool copy,
                           bool checkExist = false);
+  virtual ArrayData *lvalPtr(CStrRef k, Variant *&ret, bool copy,
+                             bool create);
 
   virtual ArrayData *set(int64   k, CVarRef v, bool copy);
   virtual ArrayData *set(litstr  k, CVarRef v, bool copy);
diff --git a/src/runtime/base/dynamic_object_data.cpp b/src/runtime/base/dynamic_object_data.cpp
index 37df4871ff..3ced500b74 100644
--- a/src/runtime/base/dynamic_object_data.cpp
+++ b/src/runtime/base/dynamic_object_data.cpp
@@ -84,12 +84,12 @@ ObjectData* DynamicObjectData::clone() {
 ///////////////////////////////////////////////////////////////////////////////
 // instance methods and properties
 
-bool DynamicObjectData::o_exists(CStrRef propName,
-                                 CStrRef context /* = null_string */) const {
+Variant *DynamicObjectData::o_realProp(
+  CStrRef propName, int flags, CStrRef context /* = null_string */) const {
   if (!parent.isNull()) {
-    return parent->o_exists(propName, context);
+    return parent->o_realProp(propName, flags, context);
   } else {
-    return ObjectData::o_exists(propName, context);
+    return ObjectData::o_realProp(propName, flags, context);
   }
 }
 
diff --git a/src/runtime/base/dynamic_object_data.h b/src/runtime/base/dynamic_object_data.h
index 3fd927ae8c..d02e030753 100644
--- a/src/runtime/base/dynamic_object_data.h
+++ b/src/runtime/base/dynamic_object_data.h
@@ -42,7 +42,8 @@ class DynamicObjectData : public ObjectData {
   // properties
   virtual Array o_toArray() const;
   virtual Array o_getDynamicProperties() const;
-  virtual bool o_exists(CStrRef prop, CStrRef context = null_string) const;
+  virtual Variant *o_realProp(CStrRef prop, int flags,
+                              CStrRef context = null_string) const;
   virtual Variant o_get(CStrRef prop, bool error = true,
                         CStrRef context = null_string);
   virtual Variant o_set(CStrRef prop, CVarRef v, bool forInit = false,
diff --git a/src/runtime/base/hphp_system.h b/src/runtime/base/hphp_system.h
index bd1bed1572..96e117dcdd 100644
--- a/src/runtime/base/hphp_system.h
+++ b/src/runtime/base/hphp_system.h
@@ -79,6 +79,7 @@ public:
   virtual Array getDefinedVars();
 public:
   Variant __lvalProxy;
+  Variant __realPropProxy;
   bool FVF(__autoload);
 private:
   Array m_dynamicConstants;  // declared constants
diff --git a/src/runtime/base/macros.h b/src/runtime/base/macros.h
index 86b7a850eb..297a59ce0e 100644
--- a/src/runtime/base/macros.h
+++ b/src/runtime/base/macros.h
@@ -122,9 +122,9 @@ namespace HPHP {
 
 #define DECLARE_INSTANCE_PROP_OPS                                       \
   public:                                                               \
-  virtual bool o_exists(CStrRef prop,                                   \
+  virtual Variant *o_realProp(CStrRef prop, int flags,                  \
                         CStrRef context = null_string) const;           \
-  bool o_existsPrivate(CStrRef s) const;                                \
+  Variant *o_realPropPrivate(CStrRef s, int flags) const;               \
   virtual void o_getArray(Array &props) const;                          \
   virtual void o_setArray(CArrRef props);                               \
   virtual Variant o_get(CStrRef prop, bool error = true,                \
@@ -138,7 +138,7 @@ namespace HPHP {
 
 #define DECLARE_INSTANCE_PUBLIC_PROP_OPS                                \
   public:                                                               \
-  virtual bool o_existsPublic(CStrRef s) const;                         \
+  virtual Variant *o_realPropPublic(CStrRef s, int flags) const;        \
   virtual Variant o_getPublic(CStrRef s, bool error = true);            \
   virtual Variant o_setPublic(CStrRef s, CVarRef v, bool forInit);      \
   virtual Variant &o_lvalPublic(CStrRef s);                             \
@@ -234,6 +234,14 @@ namespace HPHP {
 #define HASH_EXISTS_STRING(code, str, len)                              \
   if (hash == code && s.length() == len &&                              \
       memcmp(s.data(), str, len) == 0) return true
+#define HASH_REALPROP_STRING(code, str, len, prop)                      \
+  if (hash == code && s.length() == len &&                              \
+      memcmp(s.data(), str, len) == 0)                                  \
+    return const_cast<Variant*>(&m_##prop)
+#define HASH_REALPROP_TYPED_STRING(code, str, len, prop)                \
+  if (!flags && hash == code && s.length() == len &&                    \
+      memcmp(s.data(), str, len) == 0)                                  \
+    return g->__realPropProxy = m_##prop,&g->__realPropProxy
 #define HASH_INITIALIZED(code, name, str)                               \
   if (hash == code && strcmp(s, str) == 0)                              \
     return isInitialized(name)
diff --git a/src/runtime/base/object_data.cpp b/src/runtime/base/object_data.cpp
index ed16ea754c..4208f9a0cf 100644
--- a/src/runtime/base/object_data.cpp
+++ b/src/runtime/base/object_data.cpp
@@ -136,15 +136,23 @@ ObjectData::os_invoke_from_eval(const char *c, const char *s,
 ///////////////////////////////////////////////////////////////////////////////
 // instance methods and properties
 
-bool ObjectData::o_exists(CStrRef propName,
-                          CStrRef context /* = null_string */) const {
-  return o_existsPublic(propName);
+Variant *ObjectData::o_realProp(CStrRef propName, int flags,
+                                CStrRef context /* = null_string */) const {
+  return o_realPropPublic(propName, flags);
+}
+
+Variant *ObjectData::o_realPropPublic(CStrRef propName, int flags) const {
+  if (propName.size() > 0 && ((flags & RealPropCreate) || o_properties)) {
+    return o_properties->lvalPtr(propName,
+                                 flags & RealPropWrite, flags & RealPropCreate);
+  }
+  return NULL;
 }
 
-bool ObjectData::o_existsPublic(CStrRef propName) const {
-  return propName.size() > 0 && o_properties &&
-         // object properties are always strings
-         o_properties->exists(propName, true);
+bool ObjectData::o_exists(CStrRef propName,
+                          CStrRef context /* = null_string */) const {
+  const Variant *t = o_realProp(propName, 0, context);
+  return t && t->isInitialized();
 }
 
 Variant ObjectData::o_get(CStrRef propName, bool error /* = true */,
@@ -759,15 +767,15 @@ Variant ObjectData::doGet(Variant v_name, bool error) {
 }
 
 bool ObjectData::doIsSet(CStrRef prop, CStrRef context) {
-  if (o_exists(prop, context)) {
-    return !o_get(prop, false, context).isNull();
+  if (Variant *t = o_realProp(prop, 0, context)) {
+    return !t->isNull();
   }
   return t___isset(prop);
 }
 
 bool ObjectData::doEmpty(CStrRef prop, CStrRef context) {
-  if (o_exists(prop, context)) {
-    return empty(o_get(prop, false, context));
+  if (Variant *t = o_realProp(prop, 0, context)) {
+    return empty(*t);
   }
   return !t___isset(prop) || empty(t___get(prop));
 }
@@ -828,11 +836,8 @@ Variant ObjectData::t___unset(Variant v_name) {
 }
 
 bool ObjectData::o_propExists(CStrRef s, CStrRef context /* = null_string */) {
-  // Exists and the value is not null or it is null but also initialized.
-  // Can't just do isInitialized because type inferred properties may not
-  // be in the o_lval table.
-  return o_exists(s, context) && (!o_get(s, context).isNull() ||
-      o_lval(s, context).isInitialized());
+  Variant *t = o_realProp(s, 0, context);
+  return t && t->isInitialized();
 }
 
 Variant ObjectData::t___sleep() {
diff --git a/src/runtime/base/object_data.h b/src/runtime/base/object_data.h
index cd80743e67..c43f177fce 100644
--- a/src/runtime/base/object_data.h
+++ b/src/runtime/base/object_data.h
@@ -61,6 +61,12 @@ class ObjectData : public Countable {
     HasSleep      = 4, // __sleep()
     InSet         = 8, // __set()
     InGet         = 16, // __get()
+    HasGet        = 32,
+    HasSet        = 64,
+  };
+  enum {
+    RealPropCreate = 1,// Property should be created if it doesnt exist
+    RealPropWrite = 2  // Property could be modified
   };
 
   ObjectData(bool isResource = false);
@@ -151,8 +157,10 @@ class ObjectData : public Countable {
   virtual Array o_toArray() const;
   virtual Array o_toIterArray(CStrRef context, bool getRef = false);
   virtual Array o_getDynamicProperties() const;
+  virtual Variant *o_realProp(CStrRef s, int flags,
+                              CStrRef context = null_string) const;
+  virtual Variant *o_realPropPublic(CStrRef s, int flags) const;
   virtual bool o_exists(CStrRef s, CStrRef context = null_string) const;
-  virtual bool o_existsPublic(CStrRef s) const;
   virtual Variant o_get(CStrRef s, bool error = true,
                         CStrRef context = null_string);
   virtual Variant o_getPublic(CStrRef s, bool error = true);
diff --git a/src/runtime/base/type_array.cpp b/src/runtime/base/type_array.cpp
index c0b0ab39d2..0d6aa21727 100644
--- a/src/runtime/base/type_array.cpp
+++ b/src/runtime/base/type_array.cpp
@@ -468,6 +468,22 @@ Variant Array::rvalAt(CVarRef key, bool error /* = false*/) const {
   return null_variant;
 }
 
+Variant *Array::lvalPtr(CStrRef key, bool forWrite, bool create) {
+  if (create) {
+    return &lvalAt(key, false, true);
+  }
+  Variant *ret = NULL;
+  if (m_px) {
+    ArrayData *escalated = m_px->lvalPtr(key, ret,
+                                         forWrite && m_px->getCount() > 1,
+                                         false);
+    if (escalated) {
+      SmartPtr<ArrayData>::operator=(escalated);
+    }
+  }
+  return ret;
+}
+
 Variant &Array::lvalAt(litstr  key, bool checkExist /* = false */,
                        bool isString /* = false */) {
   if (isString) return lvalAtImpl(String(key), checkExist);
diff --git a/src/runtime/base/type_array.h b/src/runtime/base/type_array.h
index ff4696b407..15fbb50a5e 100644
--- a/src/runtime/base/type_array.h
+++ b/src/runtime/base/type_array.h
@@ -268,6 +268,8 @@ class Array : public SmartPtr<ArrayData> {
     return *ret;
   }
 
+  Variant *lvalPtr(CStrRef key, bool forWrite, bool create);
+
   Variant &lvalAt();
 
   Variant &lvalAt(bool    key, bool checkExist = false) {
diff --git a/src/runtime/eval/runtime/eval_object_data.cpp b/src/runtime/eval/runtime/eval_object_data.cpp
index 7068a19d78..5d7e5fc19f 100644
--- a/src/runtime/eval/runtime/eval_object_data.cpp
+++ b/src/runtime/eval/runtime/eval_object_data.cpp
@@ -100,13 +100,16 @@ Array EvalObjectData::o_toArray() const {
   return props;
 }
 
-bool EvalObjectData::o_exists(CStrRef s,
-                              CStrRef context /* = null_string */) const {
+Variant *EvalObjectData::o_realProp(CStrRef s, int flags,
+                                    CStrRef context /* = null_string */) const {
   CStrRef c = context.isNull() ? FrameInjection::GetClassName(false) : context;
-  return (m_privates.exists(c, true) &&
-          m_privates.rvalAt(c, false, true).getArrayData()
-              ->exists(s)) ||
-         DynamicObjectData::o_exists(s, c);
+  if (m_privates.exists(c, true)) {
+    if (Variant *ret = toArray(m_privates.rvalAt(c, false, true)).
+        lvalPtr(s, flags & RealPropWrite, false)) {
+      return ret;
+    }
+  }
+  return DynamicObjectData::o_realProp(s, flags);
 }
 
 void EvalObjectData::o_getArray(Array &props) const {
diff --git a/src/runtime/eval/runtime/eval_object_data.h b/src/runtime/eval/runtime/eval_object_data.h
index 7ad741a8dd..20c4b1fc7a 100644
--- a/src/runtime/eval/runtime/eval_object_data.h
+++ b/src/runtime/eval/runtime/eval_object_data.h
@@ -44,7 +44,8 @@ public:
   virtual Array o_toArray() const;
   virtual void o_getArray(Array &props) const;
   virtual void o_setArray(CArrRef props);
-  virtual bool o_exists(CStrRef prop, CStrRef context = null_string) const;
+  virtual Variant *o_realProp(CStrRef prop, int flags,
+                              CStrRef context = null_string) const;
   virtual Variant o_get(CStrRef prop, bool error = true,
                         CStrRef context = null_string);
   virtual Variant o_getUnchecked(CStrRef prop, CStrRef context = null_string);
diff --git a/src/system/gen/cls/__php_incomplete_class.h b/src/system/gen/cls/__php_incomplete_class.h
index c135e1567a..988ccd8338 100644
--- a/src/system/gen/cls/__php_incomplete_class.h
+++ b/src/system/gen/cls/__php_incomplete_class.h
@@ -40,8 +40,8 @@ class c___php_incomplete_class : public ExtObjectData {
   public:
 #define OMIT_JUMP_TABLE_CLASS_GETARRAY___php_incomplete_class 1
 #define OMIT_JUMP_TABLE_CLASS_SETARRAY___php_incomplete_class 1
-#define OMIT_JUMP_TABLE_CLASS_exists___php_incomplete_class 1
-#define OMIT_JUMP_TABLE_CLASS_exists_PRIVATE___php_incomplete_class 1
+#define OMIT_JUMP_TABLE_CLASS_realProp___php_incomplete_class 1
+#define OMIT_JUMP_TABLE_CLASS_realProp_PRIVATE___php_incomplete_class 1
 #define OMIT_JUMP_TABLE_CLASS_get___php_incomplete_class 1
 #define OMIT_JUMP_TABLE_CLASS_get_PRIVATE___php_incomplete_class 1
 #define OMIT_JUMP_TABLE_CLASS_set___php_incomplete_class 1
@@ -51,7 +51,7 @@ class c___php_incomplete_class : public ExtObjectData {
 
   // DECLARE_INSTANCE_PUBLIC_PROP_OPS
   public:
-#define OMIT_JUMP_TABLE_CLASS_exists_PUBLIC___php_incomplete_class 1
+#define OMIT_JUMP_TABLE_CLASS_realProp_PUBLIC___php_incomplete_class 1
 #define OMIT_JUMP_TABLE_CLASS_get_PUBLIC___php_incomplete_class 1
 #define OMIT_JUMP_TABLE_CLASS_set_PUBLIC___php_incomplete_class 1
 #define OMIT_JUMP_TABLE_CLASS_lval_PUBLIC___php_incomplete_class 1
diff --git a/src/system/gen/cls/appenditerator.h b/src/system/gen/cls/appenditerator.h
index f50dde857f..a2c0bb7da9 100644
--- a/src/system/gen/cls/appenditerator.h
+++ b/src/system/gen/cls/appenditerator.h
@@ -44,8 +44,8 @@ class c_appenditerator : public ExtObjectData {
   public:
   virtual void o_getArray(Array &props) const;
   virtual void o_setArray(CArrRef props);
-  virtual bool o_exists(CStrRef s, CStrRef context = null_string) const;
-  bool o_existsPrivate(CStrRef s) const;
+  virtual Variant *o_realProp(CStrRef s, int flags, CStrRef context = null_string) const;
+  Variant *o_realPropPrivate(CStrRef s, int flags) const;
   virtual Variant o_get(CStrRef s, bool error = true, CStrRef context = null_string);
   Variant o_getPrivate(CStrRef s, bool error = true);
   virtual Variant o_set(CStrRef s, CVarRef v, bool forInit = false, CStrRef context = null_string);
@@ -55,7 +55,7 @@ class c_appenditerator : public ExtObjectData {
 
   // DECLARE_INSTANCE_PUBLIC_PROP_OPS
   public:
-#define OMIT_JUMP_TABLE_CLASS_exists_PUBLIC_appenditerator 1
+#define OMIT_JUMP_TABLE_CLASS_realProp_PUBLIC_appenditerator 1
 #define OMIT_JUMP_TABLE_CLASS_get_PUBLIC_appenditerator 1
 #define OMIT_JUMP_TABLE_CLASS_set_PUBLIC_appenditerator 1
 #define OMIT_JUMP_TABLE_CLASS_lval_PUBLIC_appenditerator 1
diff --git a/src/system/gen/cls/arrayiterator.h b/src/system/gen/cls/arrayiterator.h
index b7ac6d93b9..6166a05caf 100644
--- a/src/system/gen/cls/arrayiterator.h
+++ b/src/system/gen/cls/arrayiterator.h
@@ -48,8 +48,8 @@ class c_arrayiterator : public ExtObjectData {
   public:
   virtual void o_getArray(Array &props) const;
   virtual void o_setArray(CArrRef props);
-  virtual bool o_exists(CStrRef s, CStrRef context = null_string) const;
-  bool o_existsPrivate(CStrRef s) const;
+  virtual Variant *o_realProp(CStrRef s, int flags, CStrRef context = null_string) const;
+  Variant *o_realPropPrivate(CStrRef s, int flags) const;
   virtual Variant o_get(CStrRef s, bool error = true, CStrRef context = null_string);
   Variant o_getPrivate(CStrRef s, bool error = true);
   virtual Variant o_set(CStrRef s, CVarRef v, bool forInit = false, CStrRef context = null_string);
@@ -59,7 +59,7 @@ class c_arrayiterator : public ExtObjectData {
 
   // DECLARE_INSTANCE_PUBLIC_PROP_OPS
   public:
-#define OMIT_JUMP_TABLE_CLASS_exists_PUBLIC_arrayiterator 1
+#define OMIT_JUMP_TABLE_CLASS_realProp_PUBLIC_arrayiterator 1
 #define OMIT_JUMP_TABLE_CLASS_get_PUBLIC_arrayiterator 1
 #define OMIT_JUMP_TABLE_CLASS_set_PUBLIC_arrayiterator 1
 #define OMIT_JUMP_TABLE_CLASS_lval_PUBLIC_arrayiterator 1
diff --git a/src/system/gen/cls/badfunctioncallexception.h b/src/system/gen/cls/badfunctioncallexception.h
index 2c728d4fb5..e8b44bc2b2 100644
--- a/src/system/gen/cls/badfunctioncallexception.h
+++ b/src/system/gen/cls/badfunctioncallexception.h
@@ -43,8 +43,8 @@ class c_badfunctioncallexception : public c_logicexception {
   public:
 #define OMIT_JUMP_TABLE_CLASS_GETARRAY_badfunctioncallexception 1
 #define OMIT_JUMP_TABLE_CLASS_SETARRAY_badfunctioncallexception 1
-#define OMIT_JUMP_TABLE_CLASS_exists_badfunctioncallexception 1
-#define OMIT_JUMP_TABLE_CLASS_exists_PRIVATE_badfunctioncallexception 1
+#define OMIT_JUMP_TABLE_CLASS_realProp_badfunctioncallexception 1
+#define OMIT_JUMP_TABLE_CLASS_realProp_PRIVATE_badfunctioncallexception 1
 #define OMIT_JUMP_TABLE_CLASS_get_badfunctioncallexception 1
 #define OMIT_JUMP_TABLE_CLASS_get_PRIVATE_badfunctioncallexception 1
 #define OMIT_JUMP_TABLE_CLASS_set_badfunctioncallexception 1
@@ -54,7 +54,7 @@ class c_badfunctioncallexception : public c_logicexception {
 
   // DECLARE_INSTANCE_PUBLIC_PROP_OPS
   public:
-#define OMIT_JUMP_TABLE_CLASS_exists_PUBLIC_badfunctioncallexception 1
+#define OMIT_JUMP_TABLE_CLASS_realProp_PUBLIC_badfunctioncallexception 1
 #define OMIT_JUMP_TABLE_CLASS_get_PUBLIC_badfunctioncallexception 1
 #define OMIT_JUMP_TABLE_CLASS_set_PUBLIC_badfunctioncallexception 1
 #define OMIT_JUMP_TABLE_CLASS_lval_PUBLIC_badfunctioncallexception 1
diff --git a/src/system/gen/cls/badmethodcallexception.h b/src/system/gen/cls/badmethodcallexception.h
index fc9c0893c7..b50190e3a2 100644
--- a/src/system/gen/cls/badmethodcallexception.h
+++ b/src/system/gen/cls/badmethodcallexception.h
@@ -44,8 +44,8 @@ class c_badmethodcallexception : public c_badfunctioncallexception {
   public:
 #define OMIT_JUMP_TABLE_CLASS_GETARRAY_badmethodcallexception 1
 #define OMIT_JUMP_TABLE_CLASS_SETARRAY_badmethodcallexception 1
-#define OMIT_JUMP_TABLE_CLASS_exists_badmethodcallexception 1
-#define OMIT_JUMP_TABLE_CLASS_exists_PRIVATE_badmethodcallexception 1
+#define OMIT_JUMP_TABLE_CLASS_realProp_badmethodcallexception 1
+#define OMIT_JUMP_TABLE_CLASS_realProp_PRIVATE_badmethodcallexception 1
 #define OMIT_JUMP_TABLE_CLASS_get_badmethodcallexception 1
 #define OMIT_JUMP_TABLE_CLASS_get_PRIVATE_badmethodcallexception 1
 #define OMIT_JUMP_TABLE_CLASS_set_badmethodcallexception 1
@@ -55,7 +55,7 @@ class c_badmethodcallexception : public c_badfunctioncallexception {
 
   // DECLARE_INSTANCE_PUBLIC_PROP_OPS
   public:
-#define OMIT_JUMP_TABLE_CLASS_exists_PUBLIC_badmethodcallexception 1
+#define OMIT_JUMP_TABLE_CLASS_realProp_PUBLIC_badmethodcallexception 1
 #define OMIT_JUMP_TABLE_CLASS_get_PUBLIC_badmethodcallexception 1
 #define OMIT_JUMP_TABLE_CLASS_set_PUBLIC_badmethodcallexception 1
 #define OMIT_JUMP_TABLE_CLASS_lval_PUBLIC_badmethodcallexception 1
diff --git a/src/system/gen/cls/directory.h b/src/system/gen/cls/directory.h
index 197b0da8e2..8245a09ac8 100644
--- a/src/system/gen/cls/directory.h
+++ b/src/system/gen/cls/directory.h
@@ -40,8 +40,8 @@ class c_directory : public ExtObjectData {
   public:
   virtual void o_getArray(Array &props) const;
 #define OMIT_JUMP_TABLE_CLASS_SETARRAY_directory 1
-#define OMIT_JUMP_TABLE_CLASS_exists_directory 1
-#define OMIT_JUMP_TABLE_CLASS_exists_PRIVATE_directory 1
+#define OMIT_JUMP_TABLE_CLASS_realProp_directory 1
+#define OMIT_JUMP_TABLE_CLASS_realProp_PRIVATE_directory 1
 #define OMIT_JUMP_TABLE_CLASS_get_directory 1
 #define OMIT_JUMP_TABLE_CLASS_get_PRIVATE_directory 1
 #define OMIT_JUMP_TABLE_CLASS_set_directory 1
@@ -51,7 +51,7 @@ class c_directory : public ExtObjectData {
 
   // DECLARE_INSTANCE_PUBLIC_PROP_OPS
   public:
-  virtual bool o_existsPublic(CStrRef s) const;
+  virtual Variant *o_realPropPublic(CStrRef s, int flags) const;
   virtual Variant o_getPublic(CStrRef s, bool error = true);
   virtual Variant o_setPublic(CStrRef s,
                               CVarRef v, bool forInit);
diff --git a/src/system/gen/cls/directoryiterator.h b/src/system/gen/cls/directoryiterator.h
index 4be3356719..3e2846bf98 100644
--- a/src/system/gen/cls/directoryiterator.h
+++ b/src/system/gen/cls/directoryiterator.h
@@ -47,8 +47,8 @@ class c_directoryiterator : public c_splfileinfo {
   public:
 #define OMIT_JUMP_TABLE_CLASS_GETARRAY_directoryiterator 1
 #define OMIT_JUMP_TABLE_CLASS_SETARRAY_directoryiterator 1
-#define OMIT_JUMP_TABLE_CLASS_exists_directoryiterator 1
-#define OMIT_JUMP_TABLE_CLASS_exists_PRIVATE_directoryiterator 1
+#define OMIT_JUMP_TABLE_CLASS_realProp_directoryiterator 1
+#define OMIT_JUMP_TABLE_CLASS_realProp_PRIVATE_directoryiterator 1
 #define OMIT_JUMP_TABLE_CLASS_get_directoryiterator 1
 #define OMIT_JUMP_TABLE_CLASS_get_PRIVATE_directoryiterator 1
 #define OMIT_JUMP_TABLE_CLASS_set_directoryiterator 1
@@ -58,7 +58,7 @@ class c_directoryiterator : public c_splfileinfo {
 
   // DECLARE_INSTANCE_PUBLIC_PROP_OPS
   public:
-#define OMIT_JUMP_TABLE_CLASS_exists_PUBLIC_directoryiterator 1
+#define OMIT_JUMP_TABLE_CLASS_realProp_PUBLIC_directoryiterator 1
 #define OMIT_JUMP_TABLE_CLASS_get_PUBLIC_directoryiterator 1
 #define OMIT_JUMP_TABLE_CLASS_set_PUBLIC_directoryiterator 1
 #define OMIT_JUMP_TABLE_CLASS_lval_PUBLIC_directoryiterator 1
diff --git a/src/system/gen/cls/domainexception.h b/src/system/gen/cls/domainexception.h
index 15c967dde5..8e891b3bd6 100644
--- a/src/system/gen/cls/domainexception.h
+++ b/src/system/gen/cls/domainexception.h
@@ -43,8 +43,8 @@ class c_domainexception : public c_logicexception {
   public:
 #define OMIT_JUMP_TABLE_CLASS_GETARRAY_domainexception 1
 #define OMIT_JUMP_TABLE_CLASS_SETARRAY_domainexception 1
-#define OMIT_JUMP_TABLE_CLASS_exists_domainexception 1
-#define OMIT_JUMP_TABLE_CLASS_exists_PRIVATE_domainexception 1
+#define OMIT_JUMP_TABLE_CLASS_realProp_domainexception 1
+#define OMIT_JUMP_TABLE_CLASS_realProp_PRIVATE_domainexception 1
 #define OMIT_JUMP_TABLE_CLASS_get_domainexception 1
 #define OMIT_JUMP_TABLE_CLASS_get_PRIVATE_domainexception 1
 #define OMIT_JUMP_TABLE_CLASS_set_domainexception 1
@@ -54,7 +54,7 @@ class c_domainexception : public c_logicexception {
 
   // DECLARE_INSTANCE_PUBLIC_PROP_OPS
   public:
-#define OMIT_JUMP_TABLE_CLASS_exists_PUBLIC_domainexception 1
+#define OMIT_JUMP_TABLE_CLASS_realProp_PUBLIC_domainexception 1
 #define OMIT_JUMP_TABLE_CLASS_get_PUBLIC_domainexception 1
 #define OMIT_JUMP_TABLE_CLASS_set_PUBLIC_domainexception 1
 #define OMIT_JUMP_TABLE_CLASS_lval_PUBLIC_domainexception 1
diff --git a/src/system/gen/cls/errorexception.h b/src/system/gen/cls/errorexception.h
index 44c06ceab7..32aae48040 100644
--- a/src/system/gen/cls/errorexception.h
+++ b/src/system/gen/cls/errorexception.h
@@ -42,8 +42,8 @@ class c_errorexception : public c_exception {
   public:
   virtual void o_getArray(Array &props) const;
 #define OMIT_JUMP_TABLE_CLASS_SETARRAY_errorexception 1
-#define OMIT_JUMP_TABLE_CLASS_exists_errorexception 1
-#define OMIT_JUMP_TABLE_CLASS_exists_PRIVATE_errorexception 1
+#define OMIT_JUMP_TABLE_CLASS_realProp_errorexception 1
+#define OMIT_JUMP_TABLE_CLASS_realProp_PRIVATE_errorexception 1
 #define OMIT_JUMP_TABLE_CLASS_get_errorexception 1
 #define OMIT_JUMP_TABLE_CLASS_get_PRIVATE_errorexception 1
 #define OMIT_JUMP_TABLE_CLASS_set_errorexception 1
@@ -53,7 +53,7 @@ class c_errorexception : public c_exception {
 
   // DECLARE_INSTANCE_PUBLIC_PROP_OPS
   public:
-  virtual bool o_existsPublic(CStrRef s) const;
+  virtual Variant *o_realPropPublic(CStrRef s, int flags) const;
   virtual Variant o_getPublic(CStrRef s, bool error = true);
   virtual Variant o_setPublic(CStrRef s,
                               CVarRef v, bool forInit);
diff --git a/src/system/gen/cls/exception.h b/src/system/gen/cls/exception.h
index 943da3f39b..44583b1089 100644
--- a/src/system/gen/cls/exception.h
+++ b/src/system/gen/cls/exception.h
@@ -40,8 +40,8 @@ class c_exception : public ExtObjectData {
   public:
   virtual void o_getArray(Array &props) const;
 #define OMIT_JUMP_TABLE_CLASS_SETARRAY_exception 1
-#define OMIT_JUMP_TABLE_CLASS_exists_exception 1
-#define OMIT_JUMP_TABLE_CLASS_exists_PRIVATE_exception 1
+#define OMIT_JUMP_TABLE_CLASS_realProp_exception 1
+#define OMIT_JUMP_TABLE_CLASS_realProp_PRIVATE_exception 1
 #define OMIT_JUMP_TABLE_CLASS_get_exception 1
 #define OMIT_JUMP_TABLE_CLASS_get_PRIVATE_exception 1
 #define OMIT_JUMP_TABLE_CLASS_set_exception 1
@@ -51,7 +51,7 @@ class c_exception : public ExtObjectData {
 
   // DECLARE_INSTANCE_PUBLIC_PROP_OPS
   public:
-  virtual bool o_existsPublic(CStrRef s) const;
+  virtual Variant *o_realPropPublic(CStrRef s, int flags) const;
   virtual Variant o_getPublic(CStrRef s, bool error = true);
   virtual Variant o_setPublic(CStrRef s,
                               CVarRef v, bool forInit);
diff --git a/src/system/gen/cls/filteriterator.h b/src/system/gen/cls/filteriterator.h
index a4a7ad20e1..8d0b96d518 100644
--- a/src/system/gen/cls/filteriterator.h
+++ b/src/system/gen/cls/filteriterator.h
@@ -44,8 +44,8 @@ class c_filteriterator : public ExtObjectData {
   public:
 #define OMIT_JUMP_TABLE_CLASS_GETARRAY_filteriterator 1
 #define OMIT_JUMP_TABLE_CLASS_SETARRAY_filteriterator 1
-#define OMIT_JUMP_TABLE_CLASS_exists_filteriterator 1
-#define OMIT_JUMP_TABLE_CLASS_exists_PRIVATE_filteriterator 1
+#define OMIT_JUMP_TABLE_CLASS_realProp_filteriterator 1
+#define OMIT_JUMP_TABLE_CLASS_realProp_PRIVATE_filteriterator 1
 #define OMIT_JUMP_TABLE_CLASS_get_filteriterator 1
 #define OMIT_JUMP_TABLE_CLASS_get_PRIVATE_filteriterator 1
 #define OMIT_JUMP_TABLE_CLASS_set_filteriterator 1
@@ -55,7 +55,7 @@ class c_filteriterator : public ExtObjectData {
 
   // DECLARE_INSTANCE_PUBLIC_PROP_OPS
   public:
-#define OMIT_JUMP_TABLE_CLASS_exists_PUBLIC_filteriterator 1
+#define OMIT_JUMP_TABLE_CLASS_realProp_PUBLIC_filteriterator 1
 #define OMIT_JUMP_TABLE_CLASS_get_PUBLIC_filteriterator 1
 #define OMIT_JUMP_TABLE_CLASS_set_PUBLIC_filteriterator 1
 #define OMIT_JUMP_TABLE_CLASS_lval_PUBLIC_filteriterator 1
diff --git a/src/system/gen/cls/invalidargumentexception.h b/src/system/gen/cls/invalidargumentexception.h
index 19ea36f3ce..c1ca84ba46 100644
--- a/src/system/gen/cls/invalidargumentexception.h
+++ b/src/system/gen/cls/invalidargumentexception.h
@@ -43,8 +43,8 @@ class c_invalidargumentexception : public c_logicexception {
   public:
 #define OMIT_JUMP_TABLE_CLASS_GETARRAY_invalidargumentexception 1
 #define OMIT_JUMP_TABLE_CLASS_SETARRAY_invalidargumentexception 1
-#define OMIT_JUMP_TABLE_CLASS_exists_invalidargumentexception 1
-#define OMIT_JUMP_TABLE_CLASS_exists_PRIVATE_invalidargumentexception 1
+#define OMIT_JUMP_TABLE_CLASS_realProp_invalidargumentexception 1
+#define OMIT_JUMP_TABLE_CLASS_realProp_PRIVATE_invalidargumentexception 1
 #define OMIT_JUMP_TABLE_CLASS_get_invalidargumentexception 1
 #define OMIT_JUMP_TABLE_CLASS_get_PRIVATE_invalidargumentexception 1
 #define OMIT_JUMP_TABLE_CLASS_set_invalidargumentexception 1
@@ -54,7 +54,7 @@ class c_invalidargumentexception : public c_logicexception {
 
   // DECLARE_INSTANCE_PUBLIC_PROP_OPS
   public:
-#define OMIT_JUMP_TABLE_CLASS_exists_PUBLIC_invalidargumentexception 1
+#define OMIT_JUMP_TABLE_CLASS_realProp_PUBLIC_invalidargumentexception 1
 #define OMIT_JUMP_TABLE_CLASS_get_PUBLIC_invalidargumentexception 1
 #define OMIT_JUMP_TABLE_CLASS_set_PUBLIC_invalidargumentexception 1
 #define OMIT_JUMP_TABLE_CLASS_lval_PUBLIC_invalidargumentexception 1
diff --git a/src/system/gen/cls/lengthexception.h b/src/system/gen/cls/lengthexception.h
index 59c35bbee2..0f9df3c1fd 100644
--- a/src/system/gen/cls/lengthexception.h
+++ b/src/system/gen/cls/lengthexception.h
@@ -43,8 +43,8 @@ class c_lengthexception : public c_logicexception {
   public:
 #define OMIT_JUMP_TABLE_CLASS_GETARRAY_lengthexception 1
 #define OMIT_JUMP_TABLE_CLASS_SETARRAY_lengthexception 1
-#define OMIT_JUMP_TABLE_CLASS_exists_lengthexception 1
-#define OMIT_JUMP_TABLE_CLASS_exists_PRIVATE_lengthexception 1
+#define OMIT_JUMP_TABLE_CLASS_realProp_lengthexception 1
+#define OMIT_JUMP_TABLE_CLASS_realProp_PRIVATE_lengthexception 1
 #define OMIT_JUMP_TABLE_CLASS_get_lengthexception 1
 #define OMIT_JUMP_TABLE_CLASS_get_PRIVATE_lengthexception 1
 #define OMIT_JUMP_TABLE_CLASS_set_lengthexception 1
@@ -54,7 +54,7 @@ class c_lengthexception : public c_logicexception {
 
   // DECLARE_INSTANCE_PUBLIC_PROP_OPS
   public:
-#define OMIT_JUMP_TABLE_CLASS_exists_PUBLIC_lengthexception 1
+#define OMIT_JUMP_TABLE_CLASS_realProp_PUBLIC_lengthexception 1
 #define OMIT_JUMP_TABLE_CLASS_get_PUBLIC_lengthexception 1
 #define OMIT_JUMP_TABLE_CLASS_set_PUBLIC_lengthexception 1
 #define OMIT_JUMP_TABLE_CLASS_lval_PUBLIC_lengthexception 1
diff --git a/src/system/gen/cls/logicexception.h b/src/system/gen/cls/logicexception.h
index 612887495a..be6ce511c7 100644
--- a/src/system/gen/cls/logicexception.h
+++ b/src/system/gen/cls/logicexception.h
@@ -42,8 +42,8 @@ class c_logicexception : public c_exception {
   public:
 #define OMIT_JUMP_TABLE_CLASS_GETARRAY_logicexception 1
 #define OMIT_JUMP_TABLE_CLASS_SETARRAY_logicexception 1
-#define OMIT_JUMP_TABLE_CLASS_exists_logicexception 1
-#define OMIT_JUMP_TABLE_CLASS_exists_PRIVATE_logicexception 1
+#define OMIT_JUMP_TABLE_CLASS_realProp_logicexception 1
+#define OMIT_JUMP_TABLE_CLASS_realProp_PRIVATE_logicexception 1
 #define OMIT_JUMP_TABLE_CLASS_get_logicexception 1
 #define OMIT_JUMP_TABLE_CLASS_get_PRIVATE_logicexception 1
 #define OMIT_JUMP_TABLE_CLASS_set_logicexception 1
@@ -53,7 +53,7 @@ class c_logicexception : public c_exception {
 
   // DECLARE_INSTANCE_PUBLIC_PROP_OPS
   public:
-#define OMIT_JUMP_TABLE_CLASS_exists_PUBLIC_logicexception 1
+#define OMIT_JUMP_TABLE_CLASS_realProp_PUBLIC_logicexception 1
 #define OMIT_JUMP_TABLE_CLASS_get_PUBLIC_logicexception 1
 #define OMIT_JUMP_TABLE_CLASS_set_PUBLIC_logicexception 1
 #define OMIT_JUMP_TABLE_CLASS_lval_PUBLIC_logicexception 1
diff --git a/src/system/gen/cls/outofboundsexception.h b/src/system/gen/cls/outofboundsexception.h
index 2d5ef68fdd..6f2ef13e47 100644
--- a/src/system/gen/cls/outofboundsexception.h
+++ b/src/system/gen/cls/outofboundsexception.h
@@ -43,8 +43,8 @@ class c_outofboundsexception : public c_runtimeexception {
   public:
 #define OMIT_JUMP_TABLE_CLASS_GETARRAY_outofboundsexception 1
 #define OMIT_JUMP_TABLE_CLASS_SETARRAY_outofboundsexception 1
-#define OMIT_JUMP_TABLE_CLASS_exists_outofboundsexception 1
-#define OMIT_JUMP_TABLE_CLASS_exists_PRIVATE_outofboundsexception 1
+#define OMIT_JUMP_TABLE_CLASS_realProp_outofboundsexception 1
+#define OMIT_JUMP_TABLE_CLASS_realProp_PRIVATE_outofboundsexception 1
 #define OMIT_JUMP_TABLE_CLASS_get_outofboundsexception 1
 #define OMIT_JUMP_TABLE_CLASS_get_PRIVATE_outofboundsexception 1
 #define OMIT_JUMP_TABLE_CLASS_set_outofboundsexception 1
@@ -54,7 +54,7 @@ class c_outofboundsexception : public c_runtimeexception {
 
   // DECLARE_INSTANCE_PUBLIC_PROP_OPS
   public:
-#define OMIT_JUMP_TABLE_CLASS_exists_PUBLIC_outofboundsexception 1
+#define OMIT_JUMP_TABLE_CLASS_realProp_PUBLIC_outofboundsexception 1
 #define OMIT_JUMP_TABLE_CLASS_get_PUBLIC_outofboundsexception 1
 #define OMIT_JUMP_TABLE_CLASS_set_PUBLIC_outofboundsexception 1
 #define OMIT_JUMP_TABLE_CLASS_lval_PUBLIC_outofboundsexception 1
diff --git a/src/system/gen/cls/outofrangeexception.h b/src/system/gen/cls/outofrangeexception.h
index 1952b86bbf..5dbe41f1c1 100644
--- a/src/system/gen/cls/outofrangeexception.h
+++ b/src/system/gen/cls/outofrangeexception.h
@@ -43,8 +43,8 @@ class c_outofrangeexception : public c_logicexception {
   public:
 #define OMIT_JUMP_TABLE_CLASS_GETARRAY_outofrangeexception 1
 #define OMIT_JUMP_TABLE_CLASS_SETARRAY_outofrangeexception 1
-#define OMIT_JUMP_TABLE_CLASS_exists_outofrangeexception 1
-#define OMIT_JUMP_TABLE_CLASS_exists_PRIVATE_outofrangeexception 1
+#define OMIT_JUMP_TABLE_CLASS_realProp_outofrangeexception 1
+#define OMIT_JUMP_TABLE_CLASS_realProp_PRIVATE_outofrangeexception 1
 #define OMIT_JUMP_TABLE_CLASS_get_outofrangeexception 1
 #define OMIT_JUMP_TABLE_CLASS_get_PRIVATE_outofrangeexception 1
 #define OMIT_JUMP_TABLE_CLASS_set_outofrangeexception 1
@@ -54,7 +54,7 @@ class c_outofrangeexception : public c_logicexception {
 
   // DECLARE_INSTANCE_PUBLIC_PROP_OPS
   public:
-#define OMIT_JUMP_TABLE_CLASS_exists_PUBLIC_outofrangeexception 1
+#define OMIT_JUMP_TABLE_CLASS_realProp_PUBLIC_outofrangeexception 1
 #define OMIT_JUMP_TABLE_CLASS_get_PUBLIC_outofrangeexception 1
 #define OMIT_JUMP_TABLE_CLASS_set_PUBLIC_outofrangeexception 1
 #define OMIT_JUMP_TABLE_CLASS_lval_PUBLIC_outofrangeexception 1
diff --git a/src/system/gen/cls/overflowexception.h b/src/system/gen/cls/overflowexception.h
index 2d0d63ceee..57f7278706 100644
--- a/src/system/gen/cls/overflowexception.h
+++ b/src/system/gen/cls/overflowexception.h
@@ -43,8 +43,8 @@ class c_overflowexception : public c_runtimeexception {
   public:
 #define OMIT_JUMP_TABLE_CLASS_GETARRAY_overflowexception 1
 #define OMIT_JUMP_TABLE_CLASS_SETARRAY_overflowexception 1
-#define OMIT_JUMP_TABLE_CLASS_exists_overflowexception 1
-#define OMIT_JUMP_TABLE_CLASS_exists_PRIVATE_overflowexception 1
+#define OMIT_JUMP_TABLE_CLASS_realProp_overflowexception 1
+#define OMIT_JUMP_TABLE_CLASS_realProp_PRIVATE_overflowexception 1
 #define OMIT_JUMP_TABLE_CLASS_get_overflowexception 1
 #define OMIT_JUMP_TABLE_CLASS_get_PRIVATE_overflowexception 1
 #define OMIT_JUMP_TABLE_CLASS_set_overflowexception 1
@@ -54,7 +54,7 @@ class c_overflowexception : public c_runtimeexception {
 
   // DECLARE_INSTANCE_PUBLIC_PROP_OPS
   public:
-#define OMIT_JUMP_TABLE_CLASS_exists_PUBLIC_overflowexception 1
+#define OMIT_JUMP_TABLE_CLASS_realProp_PUBLIC_overflowexception 1
 #define OMIT_JUMP_TABLE_CLASS_get_PUBLIC_overflowexception 1
 #define OMIT_JUMP_TABLE_CLASS_set_PUBLIC_overflowexception 1
 #define OMIT_JUMP_TABLE_CLASS_lval_PUBLIC_overflowexception 1
diff --git a/src/system/gen/cls/rangeexception.h b/src/system/gen/cls/rangeexception.h
index 57eb0df424..77a60b68b3 100644
--- a/src/system/gen/cls/rangeexception.h
+++ b/src/system/gen/cls/rangeexception.h
@@ -43,8 +43,8 @@ class c_rangeexception : public c_runtimeexception {
   public:
 #define OMIT_JUMP_TABLE_CLASS_GETARRAY_rangeexception 1
 #define OMIT_JUMP_TABLE_CLASS_SETARRAY_rangeexception 1
-#define OMIT_JUMP_TABLE_CLASS_exists_rangeexception 1
-#define OMIT_JUMP_TABLE_CLASS_exists_PRIVATE_rangeexception 1
+#define OMIT_JUMP_TABLE_CLASS_realProp_rangeexception 1
+#define OMIT_JUMP_TABLE_CLASS_realProp_PRIVATE_rangeexception 1
 #define OMIT_JUMP_TABLE_CLASS_get_rangeexception 1
 #define OMIT_JUMP_TABLE_CLASS_get_PRIVATE_rangeexception 1
 #define OMIT_JUMP_TABLE_CLASS_set_rangeexception 1
@@ -54,7 +54,7 @@ class c_rangeexception : public c_runtimeexception {
 
   // DECLARE_INSTANCE_PUBLIC_PROP_OPS
   public:
-#define OMIT_JUMP_TABLE_CLASS_exists_PUBLIC_rangeexception 1
+#define OMIT_JUMP_TABLE_CLASS_realProp_PUBLIC_rangeexception 1
 #define OMIT_JUMP_TABLE_CLASS_get_PUBLIC_rangeexception 1
 #define OMIT_JUMP_TABLE_CLASS_set_PUBLIC_rangeexception 1
 #define OMIT_JUMP_TABLE_CLASS_lval_PUBLIC_rangeexception 1
diff --git a/src/system/gen/cls/recursivedirectoryiterator.h b/src/system/gen/cls/recursivedirectoryiterator.h
index c75c1778a8..cb6c1e5eb1 100644
--- a/src/system/gen/cls/recursivedirectoryiterator.h
+++ b/src/system/gen/cls/recursivedirectoryiterator.h
@@ -48,8 +48,8 @@ class c_recursivedirectoryiterator : public c_directoryiterator {
   public:
 #define OMIT_JUMP_TABLE_CLASS_GETARRAY_recursivedirectoryiterator 1
 #define OMIT_JUMP_TABLE_CLASS_SETARRAY_recursivedirectoryiterator 1
-#define OMIT_JUMP_TABLE_CLASS_exists_recursivedirectoryiterator 1
-#define OMIT_JUMP_TABLE_CLASS_exists_PRIVATE_recursivedirectoryiterator 1
+#define OMIT_JUMP_TABLE_CLASS_realProp_recursivedirectoryiterator 1
+#define OMIT_JUMP_TABLE_CLASS_realProp_PRIVATE_recursivedirectoryiterator 1
 #define OMIT_JUMP_TABLE_CLASS_get_recursivedirectoryiterator 1
 #define OMIT_JUMP_TABLE_CLASS_get_PRIVATE_recursivedirectoryiterator 1
 #define OMIT_JUMP_TABLE_CLASS_set_recursivedirectoryiterator 1
@@ -59,7 +59,7 @@ class c_recursivedirectoryiterator : public c_directoryiterator {
 
   // DECLARE_INSTANCE_PUBLIC_PROP_OPS
   public:
-#define OMIT_JUMP_TABLE_CLASS_exists_PUBLIC_recursivedirectoryiterator 1
+#define OMIT_JUMP_TABLE_CLASS_realProp_PUBLIC_recursivedirectoryiterator 1
 #define OMIT_JUMP_TABLE_CLASS_get_PUBLIC_recursivedirectoryiterator 1
 #define OMIT_JUMP_TABLE_CLASS_set_PUBLIC_recursivedirectoryiterator 1
 #define OMIT_JUMP_TABLE_CLASS_lval_PUBLIC_recursivedirectoryiterator 1
diff --git a/src/system/gen/cls/recursiveiteratoriterator.h b/src/system/gen/cls/recursiveiteratoriterator.h
index 4bb7d11825..800a9e50d3 100644
--- a/src/system/gen/cls/recursiveiteratoriterator.h
+++ b/src/system/gen/cls/recursiveiteratoriterator.h
@@ -45,8 +45,8 @@ class c_recursiveiteratoriterator : public ExtObjectData {
   public:
 #define OMIT_JUMP_TABLE_CLASS_GETARRAY_recursiveiteratoriterator 1
 #define OMIT_JUMP_TABLE_CLASS_SETARRAY_recursiveiteratoriterator 1
-#define OMIT_JUMP_TABLE_CLASS_exists_recursiveiteratoriterator 1
-#define OMIT_JUMP_TABLE_CLASS_exists_PRIVATE_recursiveiteratoriterator 1
+#define OMIT_JUMP_TABLE_CLASS_realProp_recursiveiteratoriterator 1
+#define OMIT_JUMP_TABLE_CLASS_realProp_PRIVATE_recursiveiteratoriterator 1
 #define OMIT_JUMP_TABLE_CLASS_get_recursiveiteratoriterator 1
 #define OMIT_JUMP_TABLE_CLASS_get_PRIVATE_recursiveiteratoriterator 1
 #define OMIT_JUMP_TABLE_CLASS_set_recursiveiteratoriterator 1
@@ -56,7 +56,7 @@ class c_recursiveiteratoriterator : public ExtObjectData {
 
   // DECLARE_INSTANCE_PUBLIC_PROP_OPS
   public:
-#define OMIT_JUMP_TABLE_CLASS_exists_PUBLIC_recursiveiteratoriterator 1
+#define OMIT_JUMP_TABLE_CLASS_realProp_PUBLIC_recursiveiteratoriterator 1
 #define OMIT_JUMP_TABLE_CLASS_get_PUBLIC_recursiveiteratoriterator 1
 #define OMIT_JUMP_TABLE_CLASS_set_PUBLIC_recursiveiteratoriterator 1
 #define OMIT_JUMP_TABLE_CLASS_lval_PUBLIC_recursiveiteratoriterator 1
diff --git a/src/system/gen/cls/reflectionclass.h b/src/system/gen/cls/reflectionclass.h
index 641cba88b8..5f577b73fc 100644
--- a/src/system/gen/cls/reflectionclass.h
+++ b/src/system/gen/cls/reflectionclass.h
@@ -42,8 +42,8 @@ class c_reflectionclass : public ExtObjectData {
   public:
   virtual void o_getArray(Array &props) const;
   virtual void o_setArray(CArrRef props);
-  virtual bool o_exists(CStrRef s, CStrRef context = null_string) const;
-  bool o_existsPrivate(CStrRef s) const;
+  virtual Variant *o_realProp(CStrRef s, int flags, CStrRef context = null_string) const;
+  Variant *o_realPropPrivate(CStrRef s, int flags) const;
   virtual Variant o_get(CStrRef s, bool error = true, CStrRef context = null_string);
   Variant o_getPrivate(CStrRef s, bool error = true);
   virtual Variant o_set(CStrRef s, CVarRef v, bool forInit = false, CStrRef context = null_string);
@@ -53,7 +53,7 @@ class c_reflectionclass : public ExtObjectData {
 
   // DECLARE_INSTANCE_PUBLIC_PROP_OPS
   public:
-  virtual bool o_existsPublic(CStrRef s) const;
+  virtual Variant *o_realPropPublic(CStrRef s, int flags) const;
   virtual Variant o_getPublic(CStrRef s, bool error = true);
   virtual Variant o_setPublic(CStrRef s,
                               CVarRef v, bool forInit);
diff --git a/src/system/gen/cls/reflectionexception.h b/src/system/gen/cls/reflectionexception.h
index e840a45177..a3052017ae 100644
--- a/src/system/gen/cls/reflectionexception.h
+++ b/src/system/gen/cls/reflectionexception.h
@@ -42,8 +42,8 @@ class c_reflectionexception : public c_exception {
   public:
 #define OMIT_JUMP_TABLE_CLASS_GETARRAY_reflectionexception 1
 #define OMIT_JUMP_TABLE_CLASS_SETARRAY_reflectionexception 1
-#define OMIT_JUMP_TABLE_CLASS_exists_reflectionexception 1
-#define OMIT_JUMP_TABLE_CLASS_exists_PRIVATE_reflectionexception 1
+#define OMIT_JUMP_TABLE_CLASS_realProp_reflectionexception 1
+#define OMIT_JUMP_TABLE_CLASS_realProp_PRIVATE_reflectionexception 1
 #define OMIT_JUMP_TABLE_CLASS_get_reflectionexception 1
 #define OMIT_JUMP_TABLE_CLASS_get_PRIVATE_reflectionexception 1
 #define OMIT_JUMP_TABLE_CLASS_set_reflectionexception 1
@@ -53,7 +53,7 @@ class c_reflectionexception : public c_exception {
 
   // DECLARE_INSTANCE_PUBLIC_PROP_OPS
   public:
-#define OMIT_JUMP_TABLE_CLASS_exists_PUBLIC_reflectionexception 1
+#define OMIT_JUMP_TABLE_CLASS_realProp_PUBLIC_reflectionexception 1
 #define OMIT_JUMP_TABLE_CLASS_get_PUBLIC_reflectionexception 1
 #define OMIT_JUMP_TABLE_CLASS_set_PUBLIC_reflectionexception 1
 #define OMIT_JUMP_TABLE_CLASS_lval_PUBLIC_reflectionexception 1
diff --git a/src/system/gen/cls/reflectionextension.h b/src/system/gen/cls/reflectionextension.h
index b32933035d..dc0c2a454d 100644
--- a/src/system/gen/cls/reflectionextension.h
+++ b/src/system/gen/cls/reflectionextension.h
@@ -42,8 +42,8 @@ class c_reflectionextension : public ExtObjectData {
   public:
   virtual void o_getArray(Array &props) const;
   virtual void o_setArray(CArrRef props);
-  virtual bool o_exists(CStrRef s, CStrRef context = null_string) const;
-  bool o_existsPrivate(CStrRef s) const;
+  virtual Variant *o_realProp(CStrRef s, int flags, CStrRef context = null_string) const;
+  Variant *o_realPropPrivate(CStrRef s, int flags) const;
   virtual Variant o_get(CStrRef s, bool error = true, CStrRef context = null_string);
   Variant o_getPrivate(CStrRef s, bool error = true);
   virtual Variant o_set(CStrRef s, CVarRef v, bool forInit = false, CStrRef context = null_string);
@@ -53,7 +53,7 @@ class c_reflectionextension : public ExtObjectData {
 
   // DECLARE_INSTANCE_PUBLIC_PROP_OPS
   public:
-#define OMIT_JUMP_TABLE_CLASS_exists_PUBLIC_reflectionextension 1
+#define OMIT_JUMP_TABLE_CLASS_realProp_PUBLIC_reflectionextension 1
 #define OMIT_JUMP_TABLE_CLASS_get_PUBLIC_reflectionextension 1
 #define OMIT_JUMP_TABLE_CLASS_set_PUBLIC_reflectionextension 1
 #define OMIT_JUMP_TABLE_CLASS_lval_PUBLIC_reflectionextension 1
diff --git a/src/system/gen/cls/reflectionfunction.h b/src/system/gen/cls/reflectionfunction.h
index 7c0f56710b..929b262df4 100644
--- a/src/system/gen/cls/reflectionfunction.h
+++ b/src/system/gen/cls/reflectionfunction.h
@@ -44,8 +44,8 @@ class c_reflectionfunction : public c_reflectionfunctionabstract {
   public:
 #define OMIT_JUMP_TABLE_CLASS_GETARRAY_reflectionfunction 1
 #define OMIT_JUMP_TABLE_CLASS_SETARRAY_reflectionfunction 1
-#define OMIT_JUMP_TABLE_CLASS_exists_reflectionfunction 1
-#define OMIT_JUMP_TABLE_CLASS_exists_PRIVATE_reflectionfunction 1
+#define OMIT_JUMP_TABLE_CLASS_realProp_reflectionfunction 1
+#define OMIT_JUMP_TABLE_CLASS_realProp_PRIVATE_reflectionfunction 1
 #define OMIT_JUMP_TABLE_CLASS_get_reflectionfunction 1
 #define OMIT_JUMP_TABLE_CLASS_get_PRIVATE_reflectionfunction 1
 #define OMIT_JUMP_TABLE_CLASS_set_reflectionfunction 1
@@ -55,7 +55,7 @@ class c_reflectionfunction : public c_reflectionfunctionabstract {
 
   // DECLARE_INSTANCE_PUBLIC_PROP_OPS
   public:
-#define OMIT_JUMP_TABLE_CLASS_exists_PUBLIC_reflectionfunction 1
+#define OMIT_JUMP_TABLE_CLASS_realProp_PUBLIC_reflectionfunction 1
 #define OMIT_JUMP_TABLE_CLASS_get_PUBLIC_reflectionfunction 1
 #define OMIT_JUMP_TABLE_CLASS_set_PUBLIC_reflectionfunction 1
 #define OMIT_JUMP_TABLE_CLASS_lval_PUBLIC_reflectionfunction 1
diff --git a/src/system/gen/cls/reflectionfunctionabstract.h b/src/system/gen/cls/reflectionfunctionabstract.h
index 51284162ee..0dffe7edab 100644
--- a/src/system/gen/cls/reflectionfunctionabstract.h
+++ b/src/system/gen/cls/reflectionfunctionabstract.h
@@ -40,8 +40,8 @@ class c_reflectionfunctionabstract : public ExtObjectData {
   public:
   virtual void o_getArray(Array &props) const;
 #define OMIT_JUMP_TABLE_CLASS_SETARRAY_reflectionfunctionabstract 1
-#define OMIT_JUMP_TABLE_CLASS_exists_reflectionfunctionabstract 1
-#define OMIT_JUMP_TABLE_CLASS_exists_PRIVATE_reflectionfunctionabstract 1
+#define OMIT_JUMP_TABLE_CLASS_realProp_reflectionfunctionabstract 1
+#define OMIT_JUMP_TABLE_CLASS_realProp_PRIVATE_reflectionfunctionabstract 1
 #define OMIT_JUMP_TABLE_CLASS_get_reflectionfunctionabstract 1
 #define OMIT_JUMP_TABLE_CLASS_get_PRIVATE_reflectionfunctionabstract 1
 #define OMIT_JUMP_TABLE_CLASS_set_reflectionfunctionabstract 1
@@ -51,7 +51,7 @@ class c_reflectionfunctionabstract : public ExtObjectData {
 
   // DECLARE_INSTANCE_PUBLIC_PROP_OPS
   public:
-  virtual bool o_existsPublic(CStrRef s) const;
+  virtual Variant *o_realPropPublic(CStrRef s, int flags) const;
   virtual Variant o_getPublic(CStrRef s, bool error = true);
   virtual Variant o_setPublic(CStrRef s,
                               CVarRef v, bool forInit);
diff --git a/src/system/gen/cls/reflectionmethod.h b/src/system/gen/cls/reflectionmethod.h
index a6b2184e8b..d6fd53281d 100644
--- a/src/system/gen/cls/reflectionmethod.h
+++ b/src/system/gen/cls/reflectionmethod.h
@@ -44,8 +44,8 @@ class c_reflectionmethod : public c_reflectionfunctionabstract {
   public:
   virtual void o_getArray(Array &props) const;
 #define OMIT_JUMP_TABLE_CLASS_SETARRAY_reflectionmethod 1
-#define OMIT_JUMP_TABLE_CLASS_exists_reflectionmethod 1
-#define OMIT_JUMP_TABLE_CLASS_exists_PRIVATE_reflectionmethod 1
+#define OMIT_JUMP_TABLE_CLASS_realProp_reflectionmethod 1
+#define OMIT_JUMP_TABLE_CLASS_realProp_PRIVATE_reflectionmethod 1
 #define OMIT_JUMP_TABLE_CLASS_get_reflectionmethod 1
 #define OMIT_JUMP_TABLE_CLASS_get_PRIVATE_reflectionmethod 1
 #define OMIT_JUMP_TABLE_CLASS_set_reflectionmethod 1
@@ -55,7 +55,7 @@ class c_reflectionmethod : public c_reflectionfunctionabstract {
 
   // DECLARE_INSTANCE_PUBLIC_PROP_OPS
   public:
-  virtual bool o_existsPublic(CStrRef s) const;
+  virtual Variant *o_realPropPublic(CStrRef s, int flags) const;
   virtual Variant o_getPublic(CStrRef s, bool error = true);
   virtual Variant o_setPublic(CStrRef s,
                               CVarRef v, bool forInit);
diff --git a/src/system/gen/cls/reflectionobject.h b/src/system/gen/cls/reflectionobject.h
index b4ac503dd2..43edd5fae9 100644
--- a/src/system/gen/cls/reflectionobject.h
+++ b/src/system/gen/cls/reflectionobject.h
@@ -43,8 +43,8 @@ class c_reflectionobject : public c_reflectionclass {
   public:
 #define OMIT_JUMP_TABLE_CLASS_GETARRAY_reflectionobject 1
 #define OMIT_JUMP_TABLE_CLASS_SETARRAY_reflectionobject 1
-  virtual bool o_exists(CStrRef s, CStrRef context = null_string) const;
-#define OMIT_JUMP_TABLE_CLASS_exists_PRIVATE_reflectionobject 1
+  virtual Variant *o_realProp(CStrRef s, int flags, CStrRef context = null_string) const;
+#define OMIT_JUMP_TABLE_CLASS_realProp_PRIVATE_reflectionobject 1
   virtual Variant o_get(CStrRef s, bool error = true, CStrRef context = null_string);
 #define OMIT_JUMP_TABLE_CLASS_get_PRIVATE_reflectionobject 1
   virtual Variant o_set(CStrRef s, CVarRef v, bool forInit = false, CStrRef context = null_string);
@@ -54,7 +54,7 @@ class c_reflectionobject : public c_reflectionclass {
 
   // DECLARE_INSTANCE_PUBLIC_PROP_OPS
   public:
-#define OMIT_JUMP_TABLE_CLASS_exists_PUBLIC_reflectionobject 1
+#define OMIT_JUMP_TABLE_CLASS_realProp_PUBLIC_reflectionobject 1
 #define OMIT_JUMP_TABLE_CLASS_get_PUBLIC_reflectionobject 1
 #define OMIT_JUMP_TABLE_CLASS_set_PUBLIC_reflectionobject 1
 #define OMIT_JUMP_TABLE_CLASS_lval_PUBLIC_reflectionobject 1
diff --git a/src/system/gen/cls/reflectionparameter.h b/src/system/gen/cls/reflectionparameter.h
index 149d4d9f1c..de13c66dc4 100644
--- a/src/system/gen/cls/reflectionparameter.h
+++ b/src/system/gen/cls/reflectionparameter.h
@@ -42,8 +42,8 @@ class c_reflectionparameter : public ExtObjectData {
   public:
   virtual void o_getArray(Array &props) const;
 #define OMIT_JUMP_TABLE_CLASS_SETARRAY_reflectionparameter 1
-#define OMIT_JUMP_TABLE_CLASS_exists_reflectionparameter 1
-#define OMIT_JUMP_TABLE_CLASS_exists_PRIVATE_reflectionparameter 1
+#define OMIT_JUMP_TABLE_CLASS_realProp_reflectionparameter 1
+#define OMIT_JUMP_TABLE_CLASS_realProp_PRIVATE_reflectionparameter 1
 #define OMIT_JUMP_TABLE_CLASS_get_reflectionparameter 1
 #define OMIT_JUMP_TABLE_CLASS_get_PRIVATE_reflectionparameter 1
 #define OMIT_JUMP_TABLE_CLASS_set_reflectionparameter 1
@@ -53,7 +53,7 @@ class c_reflectionparameter : public ExtObjectData {
 
   // DECLARE_INSTANCE_PUBLIC_PROP_OPS
   public:
-  virtual bool o_existsPublic(CStrRef s) const;
+  virtual Variant *o_realPropPublic(CStrRef s, int flags) const;
   virtual Variant o_getPublic(CStrRef s, bool error = true);
   virtual Variant o_setPublic(CStrRef s,
                               CVarRef v, bool forInit);
diff --git a/src/system/gen/cls/reflectionproperty.h b/src/system/gen/cls/reflectionproperty.h
index dff457b9ba..c394d957ae 100644
--- a/src/system/gen/cls/reflectionproperty.h
+++ b/src/system/gen/cls/reflectionproperty.h
@@ -42,8 +42,8 @@ class c_reflectionproperty : public ExtObjectData {
   public:
   virtual void o_getArray(Array &props) const;
 #define OMIT_JUMP_TABLE_CLASS_SETARRAY_reflectionproperty 1
-#define OMIT_JUMP_TABLE_CLASS_exists_reflectionproperty 1
-#define OMIT_JUMP_TABLE_CLASS_exists_PRIVATE_reflectionproperty 1
+#define OMIT_JUMP_TABLE_CLASS_realProp_reflectionproperty 1
+#define OMIT_JUMP_TABLE_CLASS_realProp_PRIVATE_reflectionproperty 1
 #define OMIT_JUMP_TABLE_CLASS_get_reflectionproperty 1
 #define OMIT_JUMP_TABLE_CLASS_get_PRIVATE_reflectionproperty 1
 #define OMIT_JUMP_TABLE_CLASS_set_reflectionproperty 1
@@ -53,7 +53,7 @@ class c_reflectionproperty : public ExtObjectData {
 
   // DECLARE_INSTANCE_PUBLIC_PROP_OPS
   public:
-  virtual bool o_existsPublic(CStrRef s) const;
+  virtual Variant *o_realPropPublic(CStrRef s, int flags) const;
   virtual Variant o_getPublic(CStrRef s, bool error = true);
   virtual Variant o_setPublic(CStrRef s,
                               CVarRef v, bool forInit);
diff --git a/src/system/gen/cls/runtimeexception.h b/src/system/gen/cls/runtimeexception.h
index cf4329534d..2caee8af3c 100644
--- a/src/system/gen/cls/runtimeexception.h
+++ b/src/system/gen/cls/runtimeexception.h
@@ -42,8 +42,8 @@ class c_runtimeexception : public c_exception {
   public:
 #define OMIT_JUMP_TABLE_CLASS_GETARRAY_runtimeexception 1
 #define OMIT_JUMP_TABLE_CLASS_SETARRAY_runtimeexception 1
-#define OMIT_JUMP_TABLE_CLASS_exists_runtimeexception 1
-#define OMIT_JUMP_TABLE_CLASS_exists_PRIVATE_runtimeexception 1
+#define OMIT_JUMP_TABLE_CLASS_realProp_runtimeexception 1
+#define OMIT_JUMP_TABLE_CLASS_realProp_PRIVATE_runtimeexception 1
 #define OMIT_JUMP_TABLE_CLASS_get_runtimeexception 1
 #define OMIT_JUMP_TABLE_CLASS_get_PRIVATE_runtimeexception 1
 #define OMIT_JUMP_TABLE_CLASS_set_runtimeexception 1
@@ -53,7 +53,7 @@ class c_runtimeexception : public c_exception {
 
   // DECLARE_INSTANCE_PUBLIC_PROP_OPS
   public:
-#define OMIT_JUMP_TABLE_CLASS_exists_PUBLIC_runtimeexception 1
+#define OMIT_JUMP_TABLE_CLASS_realProp_PUBLIC_runtimeexception 1
 #define OMIT_JUMP_TABLE_CLASS_get_PUBLIC_runtimeexception 1
 #define OMIT_JUMP_TABLE_CLASS_set_PUBLIC_runtimeexception 1
 #define OMIT_JUMP_TABLE_CLASS_lval_PUBLIC_runtimeexception 1
diff --git a/src/system/gen/cls/splfileinfo.h b/src/system/gen/cls/splfileinfo.h
index d654f61b67..0adcc7c7aa 100644
--- a/src/system/gen/cls/splfileinfo.h
+++ b/src/system/gen/cls/splfileinfo.h
@@ -40,8 +40,8 @@ class c_splfileinfo : public ExtObjectData {
   public:
 #define OMIT_JUMP_TABLE_CLASS_GETARRAY_splfileinfo 1
 #define OMIT_JUMP_TABLE_CLASS_SETARRAY_splfileinfo 1
-#define OMIT_JUMP_TABLE_CLASS_exists_splfileinfo 1
-#define OMIT_JUMP_TABLE_CLASS_exists_PRIVATE_splfileinfo 1
+#define OMIT_JUMP_TABLE_CLASS_realProp_splfileinfo 1
+#define OMIT_JUMP_TABLE_CLASS_realProp_PRIVATE_splfileinfo 1
 #define OMIT_JUMP_TABLE_CLASS_get_splfileinfo 1
 #define OMIT_JUMP_TABLE_CLASS_get_PRIVATE_splfileinfo 1
 #define OMIT_JUMP_TABLE_CLASS_set_splfileinfo 1
@@ -51,7 +51,7 @@ class c_splfileinfo : public ExtObjectData {
 
   // DECLARE_INSTANCE_PUBLIC_PROP_OPS
   public:
-#define OMIT_JUMP_TABLE_CLASS_exists_PUBLIC_splfileinfo 1
+#define OMIT_JUMP_TABLE_CLASS_realProp_PUBLIC_splfileinfo 1
 #define OMIT_JUMP_TABLE_CLASS_get_PUBLIC_splfileinfo 1
 #define OMIT_JUMP_TABLE_CLASS_set_PUBLIC_splfileinfo 1
 #define OMIT_JUMP_TABLE_CLASS_lval_PUBLIC_splfileinfo 1
diff --git a/src/system/gen/cls/splfileobject.h b/src/system/gen/cls/splfileobject.h
index 1b47295c1c..0798eddada 100644
--- a/src/system/gen/cls/splfileobject.h
+++ b/src/system/gen/cls/splfileobject.h
@@ -49,8 +49,8 @@ class c_splfileobject : public c_splfileinfo {
   public:
 #define OMIT_JUMP_TABLE_CLASS_GETARRAY_splfileobject 1
 #define OMIT_JUMP_TABLE_CLASS_SETARRAY_splfileobject 1
-#define OMIT_JUMP_TABLE_CLASS_exists_splfileobject 1
-#define OMIT_JUMP_TABLE_CLASS_exists_PRIVATE_splfileobject 1
+#define OMIT_JUMP_TABLE_CLASS_realProp_splfileobject 1
+#define OMIT_JUMP_TABLE_CLASS_realProp_PRIVATE_splfileobject 1
 #define OMIT_JUMP_TABLE_CLASS_get_splfileobject 1
 #define OMIT_JUMP_TABLE_CLASS_get_PRIVATE_splfileobject 1
 #define OMIT_JUMP_TABLE_CLASS_set_splfileobject 1
@@ -60,7 +60,7 @@ class c_splfileobject : public c_splfileinfo {
 
   // DECLARE_INSTANCE_PUBLIC_PROP_OPS
   public:
-#define OMIT_JUMP_TABLE_CLASS_exists_PUBLIC_splfileobject 1
+#define OMIT_JUMP_TABLE_CLASS_realProp_PUBLIC_splfileobject 1
 #define OMIT_JUMP_TABLE_CLASS_get_PUBLIC_splfileobject 1
 #define OMIT_JUMP_TABLE_CLASS_set_PUBLIC_splfileobject 1
 #define OMIT_JUMP_TABLE_CLASS_lval_PUBLIC_splfileobject 1
diff --git a/src/system/gen/cls/splobjectstorage.h b/src/system/gen/cls/splobjectstorage.h
index eae6631315..c9777fd22c 100644
--- a/src/system/gen/cls/splobjectstorage.h
+++ b/src/system/gen/cls/splobjectstorage.h
@@ -45,8 +45,8 @@ class c_splobjectstorage : public ExtObjectData {
   public:
   virtual void o_getArray(Array &props) const;
   virtual void o_setArray(CArrRef props);
-  virtual bool o_exists(CStrRef s, CStrRef context = null_string) const;
-  bool o_existsPrivate(CStrRef s) const;
+  virtual Variant *o_realProp(CStrRef s, int flags, CStrRef context = null_string) const;
+  Variant *o_realPropPrivate(CStrRef s, int flags) const;
   virtual Variant o_get(CStrRef s, bool error = true, CStrRef context = null_string);
   Variant o_getPrivate(CStrRef s, bool error = true);
   virtual Variant o_set(CStrRef s, CVarRef v, bool forInit = false, CStrRef context = null_string);
@@ -56,7 +56,7 @@ class c_splobjectstorage : public ExtObjectData {
 
   // DECLARE_INSTANCE_PUBLIC_PROP_OPS
   public:
-#define OMIT_JUMP_TABLE_CLASS_exists_PUBLIC_splobjectstorage 1
+#define OMIT_JUMP_TABLE_CLASS_realProp_PUBLIC_splobjectstorage 1
 #define OMIT_JUMP_TABLE_CLASS_get_PUBLIC_splobjectstorage 1
 #define OMIT_JUMP_TABLE_CLASS_set_PUBLIC_splobjectstorage 1
 #define OMIT_JUMP_TABLE_CLASS_lval_PUBLIC_splobjectstorage 1
diff --git a/src/system/gen/cls/stdclass.h b/src/system/gen/cls/stdclass.h
index b38c8e2b3f..f87e989f2f 100644
--- a/src/system/gen/cls/stdclass.h
+++ b/src/system/gen/cls/stdclass.h
@@ -40,8 +40,8 @@ class c_stdclass : public ExtObjectData {
   public:
 #define OMIT_JUMP_TABLE_CLASS_GETARRAY_stdclass 1
 #define OMIT_JUMP_TABLE_CLASS_SETARRAY_stdclass 1
-#define OMIT_JUMP_TABLE_CLASS_exists_stdclass 1
-#define OMIT_JUMP_TABLE_CLASS_exists_PRIVATE_stdclass 1
+#define OMIT_JUMP_TABLE_CLASS_realProp_stdclass 1
+#define OMIT_JUMP_TABLE_CLASS_realProp_PRIVATE_stdclass 1
 #define OMIT_JUMP_TABLE_CLASS_get_stdclass 1
 #define OMIT_JUMP_TABLE_CLASS_get_PRIVATE_stdclass 1
 #define OMIT_JUMP_TABLE_CLASS_set_stdclass 1
@@ -51,7 +51,7 @@ class c_stdclass : public ExtObjectData {
 
   // DECLARE_INSTANCE_PUBLIC_PROP_OPS
   public:
-#define OMIT_JUMP_TABLE_CLASS_exists_PUBLIC_stdclass 1
+#define OMIT_JUMP_TABLE_CLASS_realProp_PUBLIC_stdclass 1
 #define OMIT_JUMP_TABLE_CLASS_get_PUBLIC_stdclass 1
 #define OMIT_JUMP_TABLE_CLASS_set_PUBLIC_stdclass 1
 #define OMIT_JUMP_TABLE_CLASS_lval_PUBLIC_stdclass 1
diff --git a/src/system/gen/cls/underflowexception.h b/src/system/gen/cls/underflowexception.h
index 34a3141f23..4d56694311 100644
--- a/src/system/gen/cls/underflowexception.h
+++ b/src/system/gen/cls/underflowexception.h
@@ -43,8 +43,8 @@ class c_underflowexception : public c_runtimeexception {
   public:
 #define OMIT_JUMP_TABLE_CLASS_GETARRAY_underflowexception 1
 #define OMIT_JUMP_TABLE_CLASS_SETARRAY_underflowexception 1
-#define OMIT_JUMP_TABLE_CLASS_exists_underflowexception 1
-#define OMIT_JUMP_TABLE_CLASS_exists_PRIVATE_underflowexception 1
+#define OMIT_JUMP_TABLE_CLASS_realProp_underflowexception 1
+#define OMIT_JUMP_TABLE_CLASS_realProp_PRIVATE_underflowexception 1
 #define OMIT_JUMP_TABLE_CLASS_get_underflowexception 1
 #define OMIT_JUMP_TABLE_CLASS_get_PRIVATE_underflowexception 1
 #define OMIT_JUMP_TABLE_CLASS_set_underflowexception 1
@@ -54,7 +54,7 @@ class c_underflowexception : public c_runtimeexception {
 
   // DECLARE_INSTANCE_PUBLIC_PROP_OPS
   public:
-#define OMIT_JUMP_TABLE_CLASS_exists_PUBLIC_underflowexception 1
+#define OMIT_JUMP_TABLE_CLASS_realProp_PUBLIC_underflowexception 1
 #define OMIT_JUMP_TABLE_CLASS_get_PUBLIC_underflowexception 1
 #define OMIT_JUMP_TABLE_CLASS_set_PUBLIC_underflowexception 1
 #define OMIT_JUMP_TABLE_CLASS_lval_PUBLIC_underflowexception 1
diff --git a/src/system/gen/cls/unexpectedvalueexception.h b/src/system/gen/cls/unexpectedvalueexception.h
index 705001df9e..a93382aee7 100644
--- a/src/system/gen/cls/unexpectedvalueexception.h
+++ b/src/system/gen/cls/unexpectedvalueexception.h
@@ -43,8 +43,8 @@ class c_unexpectedvalueexception : public c_runtimeexception {
   public:
 #define OMIT_JUMP_TABLE_CLASS_GETARRAY_unexpectedvalueexception 1
 #define OMIT_JUMP_TABLE_CLASS_SETARRAY_unexpectedvalueexception 1
-#define OMIT_JUMP_TABLE_CLASS_exists_unexpectedvalueexception 1
-#define OMIT_JUMP_TABLE_CLASS_exists_PRIVATE_unexpectedvalueexception 1
+#define OMIT_JUMP_TABLE_CLASS_realProp_unexpectedvalueexception 1
+#define OMIT_JUMP_TABLE_CLASS_realProp_PRIVATE_unexpectedvalueexception 1
 #define OMIT_JUMP_TABLE_CLASS_get_unexpectedvalueexception 1
 #define OMIT_JUMP_TABLE_CLASS_get_PRIVATE_unexpectedvalueexception 1
 #define OMIT_JUMP_TABLE_CLASS_set_unexpectedvalueexception 1
@@ -54,7 +54,7 @@ class c_unexpectedvalueexception : public c_runtimeexception {
 
   // DECLARE_INSTANCE_PUBLIC_PROP_OPS
   public:
-#define OMIT_JUMP_TABLE_CLASS_exists_PUBLIC_unexpectedvalueexception 1
+#define OMIT_JUMP_TABLE_CLASS_realProp_PUBLIC_unexpectedvalueexception 1
 #define OMIT_JUMP_TABLE_CLASS_get_PUBLIC_unexpectedvalueexception 1
 #define OMIT_JUMP_TABLE_CLASS_set_PUBLIC_unexpectedvalueexception 1
 #define OMIT_JUMP_TABLE_CLASS_lval_PUBLIC_unexpectedvalueexception 1
diff --git a/src/system/gen/php/classes/directory.cpp b/src/system/gen/php/classes/directory.cpp
index 25dade27b6..7e3ee48f4d 100644
--- a/src/system/gen/php/classes/directory.cpp
+++ b/src/system/gen/php/classes/directory.cpp
@@ -94,32 +94,32 @@ Variant c_directory::o_getPrivate(CStrRef s, bool error) {
   return o_getPublic(s, error);
 }
 #endif // OMIT_JUMP_TABLE_CLASS_get_PRIVATE_directory
-#ifndef OMIT_JUMP_TABLE_CLASS_exists_directory
-bool c_directory::o_exists(CStrRef prop, CStrRef context) const {
-  return o_existsPublic(prop);
+#ifndef OMIT_JUMP_TABLE_CLASS_realProp_directory
+Variant * c_directory::o_realProp(CStrRef prop, int flags, CStrRef context) const {
+  return o_realPropPublic(prop, flags);
 }
-#endif // OMIT_JUMP_TABLE_CLASS_exists_directory
-#ifndef OMIT_JUMP_TABLE_CLASS_exists_PUBLIC_directory
-bool c_directory::o_existsPublic(CStrRef s) const {
+#endif // OMIT_JUMP_TABLE_CLASS_realProp_directory
+#ifndef OMIT_JUMP_TABLE_CLASS_realProp_PUBLIC_directory
+Variant * c_directory::o_realPropPublic(CStrRef s, int flags) const {
   int64 hash = s->hash();
   switch (hash & 3) {
     case 0:
-      HASH_EXISTS_STRING(0x1429F792A6880074LL, "path", 4);
+      HASH_REALPROP_STRING(0x1429F792A6880074LL, "path", 4, path);
       break;
     case 2:
-      HASH_EXISTS_STRING(0x5C4CA333F4541532LL, "handle", 6);
+      HASH_REALPROP_STRING(0x5C4CA333F4541532LL, "handle", 6, handle);
       break;
     default:
       break;
   }
-  return c_ObjectData::o_existsPublic(s);
+  return c_ObjectData::o_realPropPublic(s, flags);
 }
-#endif // OMIT_JUMP_TABLE_CLASS_exists_PUBLIC_directory
-#ifndef OMIT_JUMP_TABLE_CLASS_exists_PRIVATE_directory
-bool c_directory::o_existsPrivate(CStrRef s) const {
-  return o_existsPublic(s);
+#endif // OMIT_JUMP_TABLE_CLASS_realProp_PUBLIC_directory
+#ifndef OMIT_JUMP_TABLE_CLASS_realProp_PRIVATE_directory
+Variant * c_directory::o_realPropPrivate(CStrRef s, int flags) const {
+  return o_realPropPublic(s, flags);
 }
-#endif // OMIT_JUMP_TABLE_CLASS_exists_PRIVATE_directory
+#endif // OMIT_JUMP_TABLE_CLASS_realProp_PRIVATE_directory
 #ifndef OMIT_JUMP_TABLE_CLASS_set_directory
 Variant c_directory::o_set(CStrRef prop, CVarRef v, bool forInit, CStrRef context) {
   return o_setPublic(prop, v, forInit);
diff --git a/src/system/gen/php/classes/exception.cpp b/src/system/gen/php/classes/exception.cpp
index be922b28a4..bd4ec4f5aa 100644
--- a/src/system/gen/php/classes/exception.cpp
+++ b/src/system/gen/php/classes/exception.cpp
@@ -65,21 +65,21 @@ Variant c_unexpectedvalueexception::o_getPrivate(CStrRef s, bool error) {
   return o_getPublic(s, error);
 }
 #endif // OMIT_JUMP_TABLE_CLASS_get_PRIVATE_unexpectedvalueexception
-#ifndef OMIT_JUMP_TABLE_CLASS_exists_unexpectedvalueexception
-bool c_unexpectedvalueexception::o_exists(CStrRef prop, CStrRef context) const {
-  return o_existsPublic(prop);
+#ifndef OMIT_JUMP_TABLE_CLASS_realProp_unexpectedvalueexception
+Variant * c_unexpectedvalueexception::o_realProp(CStrRef prop, int flags, CStrRef context) const {
+  return o_realPropPublic(prop, flags);
 }
-#endif // OMIT_JUMP_TABLE_CLASS_exists_unexpectedvalueexception
-#ifndef OMIT_JUMP_TABLE_CLASS_exists_PUBLIC_unexpectedvalueexception
-bool c_unexpectedvalueexception::o_existsPublic(CStrRef s) const {
-  return c_runtimeexception::o_existsPublic(s);
+#endif // OMIT_JUMP_TABLE_CLASS_realProp_unexpectedvalueexception
+#ifndef OMIT_JUMP_TABLE_CLASS_realProp_PUBLIC_unexpectedvalueexception
+Variant * c_unexpectedvalueexception::o_realPropPublic(CStrRef s, int flags) const {
+  return c_runtimeexception::o_realPropPublic(s, flags);
 }
-#endif // OMIT_JUMP_TABLE_CLASS_exists_PUBLIC_unexpectedvalueexception
-#ifndef OMIT_JUMP_TABLE_CLASS_exists_PRIVATE_unexpectedvalueexception
-bool c_unexpectedvalueexception::o_existsPrivate(CStrRef s) const {
-  return o_existsPublic(s);
+#endif // OMIT_JUMP_TABLE_CLASS_realProp_PUBLIC_unexpectedvalueexception
+#ifndef OMIT_JUMP_TABLE_CLASS_realProp_PRIVATE_unexpectedvalueexception
+Variant * c_unexpectedvalueexception::o_realPropPrivate(CStrRef s, int flags) const {
+  return o_realPropPublic(s, flags);
 }
-#endif // OMIT_JUMP_TABLE_CLASS_exists_PRIVATE_unexpectedvalueexception
+#endif // OMIT_JUMP_TABLE_CLASS_realProp_PRIVATE_unexpectedvalueexception
 #ifndef OMIT_JUMP_TABLE_CLASS_set_unexpectedvalueexception
 Variant c_unexpectedvalueexception::o_set(CStrRef prop, CVarRef v, bool forInit, CStrRef context) {
   return o_setPublic(prop, v, forInit);
@@ -750,21 +750,21 @@ Variant c_overflowexception::o_getPrivate(CStrRef s, bool error) {
   return o_getPublic(s, error);
 }
 #endif // OMIT_JUMP_TABLE_CLASS_get_PRIVATE_overflowexception
-#ifndef OMIT_JUMP_TABLE_CLASS_exists_overflowexception
-bool c_overflowexception::o_exists(CStrRef prop, CStrRef context) const {
-  return o_existsPublic(prop);
+#ifndef OMIT_JUMP_TABLE_CLASS_realProp_overflowexception
+Variant * c_overflowexception::o_realProp(CStrRef prop, int flags, CStrRef context) const {
+  return o_realPropPublic(prop, flags);
 }
-#endif // OMIT_JUMP_TABLE_CLASS_exists_overflowexception
-#ifndef OMIT_JUMP_TABLE_CLASS_exists_PUBLIC_overflowexception
-bool c_overflowexception::o_existsPublic(CStrRef s) const {
-  return c_runtimeexception::o_existsPublic(s);
+#endif // OMIT_JUMP_TABLE_CLASS_realProp_overflowexception
+#ifndef OMIT_JUMP_TABLE_CLASS_realProp_PUBLIC_overflowexception
+Variant * c_overflowexception::o_realPropPublic(CStrRef s, int flags) const {
+  return c_runtimeexception::o_realPropPublic(s, flags);
 }
-#endif // OMIT_JUMP_TABLE_CLASS_exists_PUBLIC_overflowexception
-#ifndef OMIT_JUMP_TABLE_CLASS_exists_PRIVATE_overflowexception
-bool c_overflowexception::o_existsPrivate(CStrRef s) const {
-  return o_existsPublic(s);
+#endif // OMIT_JUMP_TABLE_CLASS_realProp_PUBLIC_overflowexception
+#ifndef OMIT_JUMP_TABLE_CLASS_realProp_PRIVATE_overflowexception
+Variant * c_overflowexception::o_realPropPrivate(CStrRef s, int flags) const {
+  return o_realPropPublic(s, flags);
 }
-#endif // OMIT_JUMP_TABLE_CLASS_exists_PRIVATE_overflowexception
+#endif // OMIT_JUMP_TABLE_CLASS_realProp_PRIVATE_overflowexception
 #ifndef OMIT_JUMP_TABLE_CLASS_set_overflowexception
 Variant c_overflowexception::o_set(CStrRef prop, CVarRef v, bool forInit, CStrRef context) {
   return o_setPublic(prop, v, forInit);
@@ -1435,21 +1435,21 @@ Variant c_outofboundsexception::o_getPrivate(CStrRef s, bool error) {
   return o_getPublic(s, error);
 }
 #endif // OMIT_JUMP_TABLE_CLASS_get_PRIVATE_outofboundsexception
-#ifndef OMIT_JUMP_TABLE_CLASS_exists_outofboundsexception
-bool c_outofboundsexception::o_exists(CStrRef prop, CStrRef context) const {
-  return o_existsPublic(prop);
+#ifndef OMIT_JUMP_TABLE_CLASS_realProp_outofboundsexception
+Variant * c_outofboundsexception::o_realProp(CStrRef prop, int flags, CStrRef context) const {
+  return o_realPropPublic(prop, flags);
 }
-#endif // OMIT_JUMP_TABLE_CLASS_exists_outofboundsexception
-#ifndef OMIT_JUMP_TABLE_CLASS_exists_PUBLIC_outofboundsexception
-bool c_outofboundsexception::o_existsPublic(CStrRef s) const {
-  return c_runtimeexception::o_existsPublic(s);
+#endif // OMIT_JUMP_TABLE_CLASS_realProp_outofboundsexception
+#ifndef OMIT_JUMP_TABLE_CLASS_realProp_PUBLIC_outofboundsexception
+Variant * c_outofboundsexception::o_realPropPublic(CStrRef s, int flags) const {
+  return c_runtimeexception::o_realPropPublic(s, flags);
 }
-#endif // OMIT_JUMP_TABLE_CLASS_exists_PUBLIC_outofboundsexception
-#ifndef OMIT_JUMP_TABLE_CLASS_exists_PRIVATE_outofboundsexception
-bool c_outofboundsexception::o_existsPrivate(CStrRef s) const {
-  return o_existsPublic(s);
+#endif // OMIT_JUMP_TABLE_CLASS_realProp_PUBLIC_outofboundsexception
+#ifndef OMIT_JUMP_TABLE_CLASS_realProp_PRIVATE_outofboundsexception
+Variant * c_outofboundsexception::o_realPropPrivate(CStrRef s, int flags) const {
+  return o_realPropPublic(s, flags);
 }
-#endif // OMIT_JUMP_TABLE_CLASS_exists_PRIVATE_outofboundsexception
+#endif // OMIT_JUMP_TABLE_CLASS_realProp_PRIVATE_outofboundsexception
 #ifndef OMIT_JUMP_TABLE_CLASS_set_outofboundsexception
 Variant c_outofboundsexception::o_set(CStrRef prop, CVarRef v, bool forInit, CStrRef context) {
   return o_setPublic(prop, v, forInit);
@@ -2120,21 +2120,21 @@ Variant c_logicexception::o_getPrivate(CStrRef s, bool error) {
   return o_getPublic(s, error);
 }
 #endif // OMIT_JUMP_TABLE_CLASS_get_PRIVATE_logicexception
-#ifndef OMIT_JUMP_TABLE_CLASS_exists_logicexception
-bool c_logicexception::o_exists(CStrRef prop, CStrRef context) const {
-  return o_existsPublic(prop);
+#ifndef OMIT_JUMP_TABLE_CLASS_realProp_logicexception
+Variant * c_logicexception::o_realProp(CStrRef prop, int flags, CStrRef context) const {
+  return o_realPropPublic(prop, flags);
 }
-#endif // OMIT_JUMP_TABLE_CLASS_exists_logicexception
-#ifndef OMIT_JUMP_TABLE_CLASS_exists_PUBLIC_logicexception
-bool c_logicexception::o_existsPublic(CStrRef s) const {
-  return c_exception::o_existsPublic(s);
+#endif // OMIT_JUMP_TABLE_CLASS_realProp_logicexception
+#ifndef OMIT_JUMP_TABLE_CLASS_realProp_PUBLIC_logicexception
+Variant * c_logicexception::o_realPropPublic(CStrRef s, int flags) const {
+  return c_exception::o_realPropPublic(s, flags);
 }
-#endif // OMIT_JUMP_TABLE_CLASS_exists_PUBLIC_logicexception
-#ifndef OMIT_JUMP_TABLE_CLASS_exists_PRIVATE_logicexception
-bool c_logicexception::o_existsPrivate(CStrRef s) const {
-  return o_existsPublic(s);
+#endif // OMIT_JUMP_TABLE_CLASS_realProp_PUBLIC_logicexception
+#ifndef OMIT_JUMP_TABLE_CLASS_realProp_PRIVATE_logicexception
+Variant * c_logicexception::o_realPropPrivate(CStrRef s, int flags) const {
+  return o_realPropPublic(s, flags);
 }
-#endif // OMIT_JUMP_TABLE_CLASS_exists_PRIVATE_logicexception
+#endif // OMIT_JUMP_TABLE_CLASS_realProp_PRIVATE_logicexception
 #ifndef OMIT_JUMP_TABLE_CLASS_set_logicexception
 Variant c_logicexception::o_set(CStrRef prop, CVarRef v, bool forInit, CStrRef context) {
   return o_setPublic(prop, v, forInit);
@@ -2805,21 +2805,21 @@ Variant c_rangeexception::o_getPrivate(CStrRef s, bool error) {
   return o_getPublic(s, error);
 }
 #endif // OMIT_JUMP_TABLE_CLASS_get_PRIVATE_rangeexception
-#ifndef OMIT_JUMP_TABLE_CLASS_exists_rangeexception
-bool c_rangeexception::o_exists(CStrRef prop, CStrRef context) const {
-  return o_existsPublic(prop);
+#ifndef OMIT_JUMP_TABLE_CLASS_realProp_rangeexception
+Variant * c_rangeexception::o_realProp(CStrRef prop, int flags, CStrRef context) const {
+  return o_realPropPublic(prop, flags);
 }
-#endif // OMIT_JUMP_TABLE_CLASS_exists_rangeexception
-#ifndef OMIT_JUMP_TABLE_CLASS_exists_PUBLIC_rangeexception
-bool c_rangeexception::o_existsPublic(CStrRef s) const {
-  return c_runtimeexception::o_existsPublic(s);
+#endif // OMIT_JUMP_TABLE_CLASS_realProp_rangeexception
+#ifndef OMIT_JUMP_TABLE_CLASS_realProp_PUBLIC_rangeexception
+Variant * c_rangeexception::o_realPropPublic(CStrRef s, int flags) const {
+  return c_runtimeexception::o_realPropPublic(s, flags);
 }
-#endif // OMIT_JUMP_TABLE_CLASS_exists_PUBLIC_rangeexception
-#ifndef OMIT_JUMP_TABLE_CLASS_exists_PRIVATE_rangeexception
-bool c_rangeexception::o_existsPrivate(CStrRef s) const {
-  return o_existsPublic(s);
+#endif // OMIT_JUMP_TABLE_CLASS_realProp_PUBLIC_rangeexception
+#ifndef OMIT_JUMP_TABLE_CLASS_realProp_PRIVATE_rangeexception
+Variant * c_rangeexception::o_realPropPrivate(CStrRef s, int flags) const {
+  return o_realPropPublic(s, flags);
 }
-#endif // OMIT_JUMP_TABLE_CLASS_exists_PRIVATE_rangeexception
+#endif // OMIT_JUMP_TABLE_CLASS_realProp_PRIVATE_rangeexception
 #ifndef OMIT_JUMP_TABLE_CLASS_set_rangeexception
 Variant c_rangeexception::o_set(CStrRef prop, CVarRef v, bool forInit, CStrRef context) {
   return o_setPublic(prop, v, forInit);
@@ -3490,21 +3490,21 @@ Variant c_invalidargumentexception::o_getPrivate(CStrRef s, bool error) {
   return o_getPublic(s, error);
 }
 #endif // OMIT_JUMP_TABLE_CLASS_get_PRIVATE_invalidargumentexception
-#ifndef OMIT_JUMP_TABLE_CLASS_exists_invalidargumentexception
-bool c_invalidargumentexception::o_exists(CStrRef prop, CStrRef context) const {
-  return o_existsPublic(prop);
+#ifndef OMIT_JUMP_TABLE_CLASS_realProp_invalidargumentexception
+Variant * c_invalidargumentexception::o_realProp(CStrRef prop, int flags, CStrRef context) const {
+  return o_realPropPublic(prop, flags);
 }
-#endif // OMIT_JUMP_TABLE_CLASS_exists_invalidargumentexception
-#ifndef OMIT_JUMP_TABLE_CLASS_exists_PUBLIC_invalidargumentexception
-bool c_invalidargumentexception::o_existsPublic(CStrRef s) const {
-  return c_logicexception::o_existsPublic(s);
+#endif // OMIT_JUMP_TABLE_CLASS_realProp_invalidargumentexception
+#ifndef OMIT_JUMP_TABLE_CLASS_realProp_PUBLIC_invalidargumentexception
+Variant * c_invalidargumentexception::o_realPropPublic(CStrRef s, int flags) const {
+  return c_logicexception::o_realPropPublic(s, flags);
 }
-#endif // OMIT_JUMP_TABLE_CLASS_exists_PUBLIC_invalidargumentexception
-#ifndef OMIT_JUMP_TABLE_CLASS_exists_PRIVATE_invalidargumentexception
-bool c_invalidargumentexception::o_existsPrivate(CStrRef s) const {
-  return o_existsPublic(s);
+#endif // OMIT_JUMP_TABLE_CLASS_realProp_PUBLIC_invalidargumentexception
+#ifndef OMIT_JUMP_TABLE_CLASS_realProp_PRIVATE_invalidargumentexception
+Variant * c_invalidargumentexception::o_realPropPrivate(CStrRef s, int flags) const {
+  return o_realPropPublic(s, flags);
 }
-#endif // OMIT_JUMP_TABLE_CLASS_exists_PRIVATE_invalidargumentexception
+#endif // OMIT_JUMP_TABLE_CLASS_realProp_PRIVATE_invalidargumentexception
 #ifndef OMIT_JUMP_TABLE_CLASS_set_invalidargumentexception
 Variant c_invalidargumentexception::o_set(CStrRef prop, CVarRef v, bool forInit, CStrRef context) {
   return o_setPublic(prop, v, forInit);
@@ -4175,21 +4175,21 @@ Variant c_underflowexception::o_getPrivate(CStrRef s, bool error) {
   return o_getPublic(s, error);
 }
 #endif // OMIT_JUMP_TABLE_CLASS_get_PRIVATE_underflowexception
-#ifndef OMIT_JUMP_TABLE_CLASS_exists_underflowexception
-bool c_underflowexception::o_exists(CStrRef prop, CStrRef context) const {
-  return o_existsPublic(prop);
+#ifndef OMIT_JUMP_TABLE_CLASS_realProp_underflowexception
+Variant * c_underflowexception::o_realProp(CStrRef prop, int flags, CStrRef context) const {
+  return o_realPropPublic(prop, flags);
 }
-#endif // OMIT_JUMP_TABLE_CLASS_exists_underflowexception
-#ifndef OMIT_JUMP_TABLE_CLASS_exists_PUBLIC_underflowexception
-bool c_underflowexception::o_existsPublic(CStrRef s) const {
-  return c_runtimeexception::o_existsPublic(s);
+#endif // OMIT_JUMP_TABLE_CLASS_realProp_underflowexception
+#ifndef OMIT_JUMP_TABLE_CLASS_realProp_PUBLIC_underflowexception
+Variant * c_underflowexception::o_realPropPublic(CStrRef s, int flags) const {
+  return c_runtimeexception::o_realPropPublic(s, flags);
 }
-#endif // OMIT_JUMP_TABLE_CLASS_exists_PUBLIC_underflowexception
-#ifndef OMIT_JUMP_TABLE_CLASS_exists_PRIVATE_underflowexception
-bool c_underflowexception::o_existsPrivate(CStrRef s) const {
-  return o_existsPublic(s);
+#endif // OMIT_JUMP_TABLE_CLASS_realProp_PUBLIC_underflowexception
+#ifndef OMIT_JUMP_TABLE_CLASS_realProp_PRIVATE_underflowexception
+Variant * c_underflowexception::o_realPropPrivate(CStrRef s, int flags) const {
+  return o_realPropPublic(s, flags);
 }
-#endif // OMIT_JUMP_TABLE_CLASS_exists_PRIVATE_underflowexception
+#endif // OMIT_JUMP_TABLE_CLASS_realProp_PRIVATE_underflowexception
 #ifndef OMIT_JUMP_TABLE_CLASS_set_underflowexception
 Variant c_underflowexception::o_set(CStrRef prop, CVarRef v, bool forInit, CStrRef context) {
   return o_setPublic(prop, v, forInit);
@@ -4860,21 +4860,21 @@ Variant c_outofrangeexception::o_getPrivate(CStrRef s, bool error) {
   return o_getPublic(s, error);
 }
 #endif // OMIT_JUMP_TABLE_CLASS_get_PRIVATE_outofrangeexception
-#ifndef OMIT_JUMP_TABLE_CLASS_exists_outofrangeexception
-bool c_outofrangeexception::o_exists(CStrRef prop, CStrRef context) const {
-  return o_existsPublic(prop);
+#ifndef OMIT_JUMP_TABLE_CLASS_realProp_outofrangeexception
+Variant * c_outofrangeexception::o_realProp(CStrRef prop, int flags, CStrRef context) const {
+  return o_realPropPublic(prop, flags);
 }
-#endif // OMIT_JUMP_TABLE_CLASS_exists_outofrangeexception
-#ifndef OMIT_JUMP_TABLE_CLASS_exists_PUBLIC_outofrangeexception
-bool c_outofrangeexception::o_existsPublic(CStrRef s) const {
-  return c_logicexception::o_existsPublic(s);
+#endif // OMIT_JUMP_TABLE_CLASS_realProp_outofrangeexception
+#ifndef OMIT_JUMP_TABLE_CLASS_realProp_PUBLIC_outofrangeexception
+Variant * c_outofrangeexception::o_realPropPublic(CStrRef s, int flags) const {
+  return c_logicexception::o_realPropPublic(s, flags);
 }
-#endif // OMIT_JUMP_TABLE_CLASS_exists_PUBLIC_outofrangeexception
-#ifndef OMIT_JUMP_TABLE_CLASS_exists_PRIVATE_outofrangeexception
-bool c_outofrangeexception::o_existsPrivate(CStrRef s) const {
-  return o_existsPublic(s);
+#endif // OMIT_JUMP_TABLE_CLASS_realProp_PUBLIC_outofrangeexception
+#ifndef OMIT_JUMP_TABLE_CLASS_realProp_PRIVATE_outofrangeexception
+Variant * c_outofrangeexception::o_realPropPrivate(CStrRef s, int flags) const {
+  return o_realPropPublic(s, flags);
 }
-#endif // OMIT_JUMP_TABLE_CLASS_exists_PRIVATE_outofrangeexception
+#endif // OMIT_JUMP_TABLE_CLASS_realProp_PRIVATE_outofrangeexception
 #ifndef OMIT_JUMP_TABLE_CLASS_set_outofrangeexception
 Variant c_outofrangeexception::o_set(CStrRef prop, CVarRef v, bool forInit, CStrRef context) {
   return o_setPublic(prop, v, forInit);
@@ -5545,21 +5545,21 @@ Variant c_badmethodcallexception::o_getPrivate(CStrRef s, bool error) {
   return o_getPublic(s, error);
 }
 #endif // OMIT_JUMP_TABLE_CLASS_get_PRIVATE_badmethodcallexception
-#ifndef OMIT_JUMP_TABLE_CLASS_exists_badmethodcallexception
-bool c_badmethodcallexception::o_exists(CStrRef prop, CStrRef context) const {
-  return o_existsPublic(prop);
+#ifndef OMIT_JUMP_TABLE_CLASS_realProp_badmethodcallexception
+Variant * c_badmethodcallexception::o_realProp(CStrRef prop, int flags, CStrRef context) const {
+  return o_realPropPublic(prop, flags);
 }
-#endif // OMIT_JUMP_TABLE_CLASS_exists_badmethodcallexception
-#ifndef OMIT_JUMP_TABLE_CLASS_exists_PUBLIC_badmethodcallexception
-bool c_badmethodcallexception::o_existsPublic(CStrRef s) const {
-  return c_badfunctioncallexception::o_existsPublic(s);
+#endif // OMIT_JUMP_TABLE_CLASS_realProp_badmethodcallexception
+#ifndef OMIT_JUMP_TABLE_CLASS_realProp_PUBLIC_badmethodcallexception
+Variant * c_badmethodcallexception::o_realPropPublic(CStrRef s, int flags) const {
+  return c_badfunctioncallexception::o_realPropPublic(s, flags);
 }
-#endif // OMIT_JUMP_TABLE_CLASS_exists_PUBLIC_badmethodcallexception
-#ifndef OMIT_JUMP_TABLE_CLASS_exists_PRIVATE_badmethodcallexception
-bool c_badmethodcallexception::o_existsPrivate(CStrRef s) const {
-  return o_existsPublic(s);
+#endif // OMIT_JUMP_TABLE_CLASS_realProp_PUBLIC_badmethodcallexception
+#ifndef OMIT_JUMP_TABLE_CLASS_realProp_PRIVATE_badmethodcallexception
+Variant * c_badmethodcallexception::o_realPropPrivate(CStrRef s, int flags) const {
+  return o_realPropPublic(s, flags);
 }
-#endif // OMIT_JUMP_TABLE_CLASS_exists_PRIVATE_badmethodcallexception
+#endif // OMIT_JUMP_TABLE_CLASS_realProp_PRIVATE_badmethodcallexception
 #ifndef OMIT_JUMP_TABLE_CLASS_set_badmethodcallexception
 Variant c_badmethodcallexception::o_set(CStrRef prop, CVarRef v, bool forInit, CStrRef context) {
   return o_setPublic(prop, v, forInit);
@@ -6230,21 +6230,21 @@ Variant c_runtimeexception::o_getPrivate(CStrRef s, bool error) {
   return o_getPublic(s, error);
 }
 #endif // OMIT_JUMP_TABLE_CLASS_get_PRIVATE_runtimeexception
-#ifndef OMIT_JUMP_TABLE_CLASS_exists_runtimeexception
-bool c_runtimeexception::o_exists(CStrRef prop, CStrRef context) const {
-  return o_existsPublic(prop);
+#ifndef OMIT_JUMP_TABLE_CLASS_realProp_runtimeexception
+Variant * c_runtimeexception::o_realProp(CStrRef prop, int flags, CStrRef context) const {
+  return o_realPropPublic(prop, flags);
 }
-#endif // OMIT_JUMP_TABLE_CLASS_exists_runtimeexception
-#ifndef OMIT_JUMP_TABLE_CLASS_exists_PUBLIC_runtimeexception
-bool c_runtimeexception::o_existsPublic(CStrRef s) const {
-  return c_exception::o_existsPublic(s);
+#endif // OMIT_JUMP_TABLE_CLASS_realProp_runtimeexception
+#ifndef OMIT_JUMP_TABLE_CLASS_realProp_PUBLIC_runtimeexception
+Variant * c_runtimeexception::o_realPropPublic(CStrRef s, int flags) const {
+  return c_exception::o_realPropPublic(s, flags);
 }
-#endif // OMIT_JUMP_TABLE_CLASS_exists_PUBLIC_runtimeexception
-#ifndef OMIT_JUMP_TABLE_CLASS_exists_PRIVATE_runtimeexception
-bool c_runtimeexception::o_existsPrivate(CStrRef s) const {
-  return o_existsPublic(s);
+#endif // OMIT_JUMP_TABLE_CLASS_realProp_PUBLIC_runtimeexception
+#ifndef OMIT_JUMP_TABLE_CLASS_realProp_PRIVATE_runtimeexception
+Variant * c_runtimeexception::o_realPropPrivate(CStrRef s, int flags) const {
+  return o_realPropPublic(s, flags);
 }
-#endif // OMIT_JUMP_TABLE_CLASS_exists_PRIVATE_runtimeexception
+#endif // OMIT_JUMP_TABLE_CLASS_realProp_PRIVATE_runtimeexception
 #ifndef OMIT_JUMP_TABLE_CLASS_set_runtimeexception
 Variant c_runtimeexception::o_set(CStrRef prop, CVarRef v, bool forInit, CStrRef context) {
   return o_setPublic(prop, v, forInit);
@@ -6971,41 +6971,41 @@ Variant c_exception::o_getPrivate(CStrRef s, bool error) {
   return o_getPublic(s, error);
 }
 #endif // OMIT_JUMP_TABLE_CLASS_get_PRIVATE_exception
-#ifndef OMIT_JUMP_TABLE_CLASS_exists_exception
-bool c_exception::o_exists(CStrRef prop, CStrRef context) const {
-  return o_existsPublic(prop);
+#ifndef OMIT_JUMP_TABLE_CLASS_realProp_exception
+Variant * c_exception::o_realProp(CStrRef prop, int flags, CStrRef context) const {
+  return o_realPropPublic(prop, flags);
 }
-#endif // OMIT_JUMP_TABLE_CLASS_exists_exception
-#ifndef OMIT_JUMP_TABLE_CLASS_exists_PUBLIC_exception
-bool c_exception::o_existsPublic(CStrRef s) const {
+#endif // OMIT_JUMP_TABLE_CLASS_realProp_exception
+#ifndef OMIT_JUMP_TABLE_CLASS_realProp_PUBLIC_exception
+Variant * c_exception::o_realPropPublic(CStrRef s, int flags) const {
   int64 hash = s->hash();
   switch (hash & 15) {
     case 7:
-      HASH_EXISTS_STRING(0x3CCB986B2CF0A747LL, "trace", 5);
+      HASH_REALPROP_STRING(0x3CCB986B2CF0A747LL, "trace", 5, trace);
       break;
     case 9:
-      HASH_EXISTS_STRING(0x58C72230857ACDB9LL, "code", 4);
+      HASH_REALPROP_STRING(0x58C72230857ACDB9LL, "code", 4, code);
       break;
     case 10:
-      HASH_EXISTS_STRING(0x04AB35CACF8C8C9ALL, "line", 4);
+      HASH_REALPROP_STRING(0x04AB35CACF8C8C9ALL, "line", 4, line);
       break;
     case 11:
-      HASH_EXISTS_STRING(0x0247CDBB94C9D47BLL, "message", 7);
+      HASH_REALPROP_STRING(0x0247CDBB94C9D47BLL, "message", 7, message);
       break;
     case 15:
-      HASH_EXISTS_STRING(0x7863294A8F33D14FLL, "file", 4);
+      HASH_REALPROP_STRING(0x7863294A8F33D14FLL, "file", 4, file);
       break;
     default:
       break;
   }
-  return c_ObjectData::o_existsPublic(s);
+  return c_ObjectData::o_realPropPublic(s, flags);
 }
-#endif // OMIT_JUMP_TABLE_CLASS_exists_PUBLIC_exception
-#ifndef OMIT_JUMP_TABLE_CLASS_exists_PRIVATE_exception
-bool c_exception::o_existsPrivate(CStrRef s) const {
-  return o_existsPublic(s);
+#endif // OMIT_JUMP_TABLE_CLASS_realProp_PUBLIC_exception
+#ifndef OMIT_JUMP_TABLE_CLASS_realProp_PRIVATE_exception
+Variant * c_exception::o_realPropPrivate(CStrRef s, int flags) const {
+  return o_realPropPublic(s, flags);
 }
-#endif // OMIT_JUMP_TABLE_CLASS_exists_PRIVATE_exception
+#endif // OMIT_JUMP_TABLE_CLASS_realProp_PRIVATE_exception
 #ifndef OMIT_JUMP_TABLE_CLASS_set_exception
 Variant c_exception::o_set(CStrRef prop, CVarRef v, bool forInit, CStrRef context) {
   return o_setPublic(prop, v, forInit);
@@ -7991,29 +7991,29 @@ Variant c_errorexception::o_getPrivate(CStrRef s, bool error) {
   return o_getPublic(s, error);
 }
 #endif // OMIT_JUMP_TABLE_CLASS_get_PRIVATE_errorexception
-#ifndef OMIT_JUMP_TABLE_CLASS_exists_errorexception
-bool c_errorexception::o_exists(CStrRef prop, CStrRef context) const {
-  return o_existsPublic(prop);
+#ifndef OMIT_JUMP_TABLE_CLASS_realProp_errorexception
+Variant * c_errorexception::o_realProp(CStrRef prop, int flags, CStrRef context) const {
+  return o_realPropPublic(prop, flags);
 }
-#endif // OMIT_JUMP_TABLE_CLASS_exists_errorexception
-#ifndef OMIT_JUMP_TABLE_CLASS_exists_PUBLIC_errorexception
-bool c_errorexception::o_existsPublic(CStrRef s) const {
+#endif // OMIT_JUMP_TABLE_CLASS_realProp_errorexception
+#ifndef OMIT_JUMP_TABLE_CLASS_realProp_PUBLIC_errorexception
+Variant * c_errorexception::o_realPropPublic(CStrRef s, int flags) const {
   int64 hash = s->hash();
   switch (hash & 1) {
     case 1:
-      HASH_EXISTS_STRING(0x4FDAA620FA5F15F9LL, "severity", 8);
+      HASH_REALPROP_STRING(0x4FDAA620FA5F15F9LL, "severity", 8, severity);
       break;
     default:
       break;
   }
-  return c_exception::o_existsPublic(s);
+  return c_exception::o_realPropPublic(s, flags);
 }
-#endif // OMIT_JUMP_TABLE_CLASS_exists_PUBLIC_errorexception
-#ifndef OMIT_JUMP_TABLE_CLASS_exists_PRIVATE_errorexception
-bool c_errorexception::o_existsPrivate(CStrRef s) const {
-  return o_existsPublic(s);
+#endif // OMIT_JUMP_TABLE_CLASS_realProp_PUBLIC_errorexception
+#ifndef OMIT_JUMP_TABLE_CLASS_realProp_PRIVATE_errorexception
+Variant * c_errorexception::o_realPropPrivate(CStrRef s, int flags) const {
+  return o_realPropPublic(s, flags);
 }
-#endif // OMIT_JUMP_TABLE_CLASS_exists_PRIVATE_errorexception
+#endif // OMIT_JUMP_TABLE_CLASS_realProp_PRIVATE_errorexception
 #ifndef OMIT_JUMP_TABLE_CLASS_set_errorexception
 Variant c_errorexception::o_set(CStrRef prop, CVarRef v, bool forInit, CStrRef context) {
   return o_setPublic(prop, v, forInit);
@@ -8947,21 +8947,21 @@ Variant c_badfunctioncallexception::o_getPrivate(CStrRef s, bool error) {
   return o_getPublic(s, error);
 }
 #endif // OMIT_JUMP_TABLE_CLASS_get_PRIVATE_badfunctioncallexception
-#ifndef OMIT_JUMP_TABLE_CLASS_exists_badfunctioncallexception
-bool c_badfunctioncallexception::o_exists(CStrRef prop, CStrRef context) const {
-  return o_existsPublic(prop);
+#ifndef OMIT_JUMP_TABLE_CLASS_realProp_badfunctioncallexception
+Variant * c_badfunctioncallexception::o_realProp(CStrRef prop, int flags, CStrRef context) const {
+  return o_realPropPublic(prop, flags);
 }
-#endif // OMIT_JUMP_TABLE_CLASS_exists_badfunctioncallexception
-#ifndef OMIT_JUMP_TABLE_CLASS_exists_PUBLIC_badfunctioncallexception
-bool c_badfunctioncallexception::o_existsPublic(CStrRef s) const {
-  return c_logicexception::o_existsPublic(s);
+#endif // OMIT_JUMP_TABLE_CLASS_realProp_badfunctioncallexception
+#ifndef OMIT_JUMP_TABLE_CLASS_realProp_PUBLIC_badfunctioncallexception
+Variant * c_badfunctioncallexception::o_realPropPublic(CStrRef s, int flags) const {
+  return c_logicexception::o_realPropPublic(s, flags);
 }
-#endif // OMIT_JUMP_TABLE_CLASS_exists_PUBLIC_badfunctioncallexception
-#ifndef OMIT_JUMP_TABLE_CLASS_exists_PRIVATE_badfunctioncallexception
-bool c_badfunctioncallexception::o_existsPrivate(CStrRef s) const {
-  return o_existsPublic(s);
+#endif // OMIT_JUMP_TABLE_CLASS_realProp_PUBLIC_badfunctioncallexception
+#ifndef OMIT_JUMP_TABLE_CLASS_realProp_PRIVATE_badfunctioncallexception
+Variant * c_badfunctioncallexception::o_realPropPrivate(CStrRef s, int flags) const {
+  return o_realPropPublic(s, flags);
 }
-#endif // OMIT_JUMP_TABLE_CLASS_exists_PRIVATE_badfunctioncallexception
+#endif // OMIT_JUMP_TABLE_CLASS_realProp_PRIVATE_badfunctioncallexception
 #ifndef OMIT_JUMP_TABLE_CLASS_set_badfunctioncallexception
 Variant c_badfunctioncallexception::o_set(CStrRef prop, CVarRef v, bool forInit, CStrRef context) {
   return o_setPublic(prop, v, forInit);
@@ -9632,21 +9632,21 @@ Variant c_lengthexception::o_getPrivate(CStrRef s, bool error) {
   return o_getPublic(s, error);
 }
 #endif // OMIT_JUMP_TABLE_CLASS_get_PRIVATE_lengthexception
-#ifndef OMIT_JUMP_TABLE_CLASS_exists_lengthexception
-bool c_lengthexception::o_exists(CStrRef prop, CStrRef context) const {
-  return o_existsPublic(prop);
+#ifndef OMIT_JUMP_TABLE_CLASS_realProp_lengthexception
+Variant * c_lengthexception::o_realProp(CStrRef prop, int flags, CStrRef context) const {
+  return o_realPropPublic(prop, flags);
 }
-#endif // OMIT_JUMP_TABLE_CLASS_exists_lengthexception
-#ifndef OMIT_JUMP_TABLE_CLASS_exists_PUBLIC_lengthexception
-bool c_lengthexception::o_existsPublic(CStrRef s) const {
-  return c_logicexception::o_existsPublic(s);
+#endif // OMIT_JUMP_TABLE_CLASS_realProp_lengthexception
+#ifndef OMIT_JUMP_TABLE_CLASS_realProp_PUBLIC_lengthexception
+Variant * c_lengthexception::o_realPropPublic(CStrRef s, int flags) const {
+  return c_logicexception::o_realPropPublic(s, flags);
 }
-#endif // OMIT_JUMP_TABLE_CLASS_exists_PUBLIC_lengthexception
-#ifndef OMIT_JUMP_TABLE_CLASS_exists_PRIVATE_lengthexception
-bool c_lengthexception::o_existsPrivate(CStrRef s) const {
-  return o_existsPublic(s);
+#endif // OMIT_JUMP_TABLE_CLASS_realProp_PUBLIC_lengthexception
+#ifndef OMIT_JUMP_TABLE_CLASS_realProp_PRIVATE_lengthexception
+Variant * c_lengthexception::o_realPropPrivate(CStrRef s, int flags) const {
+  return o_realPropPublic(s, flags);
 }
-#endif // OMIT_JUMP_TABLE_CLASS_exists_PRIVATE_lengthexception
+#endif // OMIT_JUMP_TABLE_CLASS_realProp_PRIVATE_lengthexception
 #ifndef OMIT_JUMP_TABLE_CLASS_set_lengthexception
 Variant c_lengthexception::o_set(CStrRef prop, CVarRef v, bool forInit, CStrRef context) {
   return o_setPublic(prop, v, forInit);
@@ -10317,21 +10317,21 @@ Variant c_domainexception::o_getPrivate(CStrRef s, bool error) {
   return o_getPublic(s, error);
 }
 #endif // OMIT_JUMP_TABLE_CLASS_get_PRIVATE_domainexception
-#ifndef OMIT_JUMP_TABLE_CLASS_exists_domainexception
-bool c_domainexception::o_exists(CStrRef prop, CStrRef context) const {
-  return o_existsPublic(prop);
+#ifndef OMIT_JUMP_TABLE_CLASS_realProp_domainexception
+Variant * c_domainexception::o_realProp(CStrRef prop, int flags, CStrRef context) const {
+  return o_realPropPublic(prop, flags);
 }
-#endif // OMIT_JUMP_TABLE_CLASS_exists_domainexception
-#ifndef OMIT_JUMP_TABLE_CLASS_exists_PUBLIC_domainexception
-bool c_domainexception::o_existsPublic(CStrRef s) const {
-  return c_logicexception::o_existsPublic(s);
+#endif // OMIT_JUMP_TABLE_CLASS_realProp_domainexception
+#ifndef OMIT_JUMP_TABLE_CLASS_realProp_PUBLIC_domainexception
+Variant * c_domainexception::o_realPropPublic(CStrRef s, int flags) const {
+  return c_logicexception::o_realPropPublic(s, flags);
 }
-#endif // OMIT_JUMP_TABLE_CLASS_exists_PUBLIC_domainexception
-#ifndef OMIT_JUMP_TABLE_CLASS_exists_PRIVATE_domainexception
-bool c_domainexception::o_existsPrivate(CStrRef s) const {
-  return o_existsPublic(s);
+#endif // OMIT_JUMP_TABLE_CLASS_realProp_PUBLIC_domainexception
+#ifndef OMIT_JUMP_TABLE_CLASS_realProp_PRIVATE_domainexception
+Variant * c_domainexception::o_realPropPrivate(CStrRef s, int flags) const {
+  return o_realPropPublic(s, flags);
 }
-#endif // OMIT_JUMP_TABLE_CLASS_exists_PRIVATE_domainexception
+#endif // OMIT_JUMP_TABLE_CLASS_realProp_PRIVATE_domainexception
 #ifndef OMIT_JUMP_TABLE_CLASS_set_domainexception
 Variant c_domainexception::o_set(CStrRef prop, CVarRef v, bool forInit, CStrRef context) {
   return o_setPublic(prop, v, forInit);
diff --git a/src/system/gen/php/classes/iterator.cpp b/src/system/gen/php/classes/iterator.cpp
index e1e34d692d..12c64e1f02 100644
--- a/src/system/gen/php/classes/iterator.cpp
+++ b/src/system/gen/php/classes/iterator.cpp
@@ -109,41 +109,41 @@ Variant c_arrayiterator::o_getPrivate(CStrRef s, bool error) {
   return o_getPublic(s, error);
 }
 #endif // OMIT_JUMP_TABLE_CLASS_get_PRIVATE_arrayiterator
-#ifndef OMIT_JUMP_TABLE_CLASS_exists_arrayiterator
-bool c_arrayiterator::o_exists(CStrRef prop, CStrRef context) const {
+#ifndef OMIT_JUMP_TABLE_CLASS_realProp_arrayiterator
+Variant * c_arrayiterator::o_realProp(CStrRef prop, int flags, CStrRef context) const {
   CStrRef s = context.isNull() ? FrameInjection::GetClassName(false) : context;
   int64 hash = s->hash();
   switch (hash & 1) {
     case 1:
-      HASH_GUARD_STRING(0x3D5870E53BF89873LL, ArrayIterator) { return o_existsPrivate(prop); }
+      HASH_GUARD_STRING(0x3D5870E53BF89873LL, ArrayIterator) { return o_realPropPrivate(prop, flags); }
       break;
     default:
       break;
   }
-  return o_existsPublic(prop);
+  return o_realPropPublic(prop, flags);
 }
-#endif // OMIT_JUMP_TABLE_CLASS_exists_arrayiterator
-#ifndef OMIT_JUMP_TABLE_CLASS_exists_PUBLIC_arrayiterator
-bool c_arrayiterator::o_existsPublic(CStrRef s) const {
-  return c_ObjectData::o_existsPublic(s);
+#endif // OMIT_JUMP_TABLE_CLASS_realProp_arrayiterator
+#ifndef OMIT_JUMP_TABLE_CLASS_realProp_PUBLIC_arrayiterator
+Variant * c_arrayiterator::o_realPropPublic(CStrRef s, int flags) const {
+  return c_ObjectData::o_realPropPublic(s, flags);
 }
-#endif // OMIT_JUMP_TABLE_CLASS_exists_PUBLIC_arrayiterator
-#ifndef OMIT_JUMP_TABLE_CLASS_exists_PRIVATE_arrayiterator
-bool c_arrayiterator::o_existsPrivate(CStrRef s) const {
+#endif // OMIT_JUMP_TABLE_CLASS_realProp_PUBLIC_arrayiterator
+#ifndef OMIT_JUMP_TABLE_CLASS_realProp_PRIVATE_arrayiterator
+Variant * c_arrayiterator::o_realPropPrivate(CStrRef s, int flags) const {
   int64 hash = s->hash();
   switch (hash & 3) {
     case 1:
-      HASH_EXISTS_STRING(0x7D2126D089B92EA5LL, "arr", 3);
+      HASH_REALPROP_STRING(0x7D2126D089B92EA5LL, "arr", 3, arr);
       break;
     case 3:
-      HASH_EXISTS_STRING(0x7401482B86AFCBFBLL, "flags", 5);
+      HASH_REALPROP_STRING(0x7401482B86AFCBFBLL, "flags", 5, flags);
       break;
     default:
       break;
   }
-  return o_existsPublic(s);
+  return o_realPropPublic(s, flags);
 }
-#endif // OMIT_JUMP_TABLE_CLASS_exists_PRIVATE_arrayiterator
+#endif // OMIT_JUMP_TABLE_CLASS_realProp_PRIVATE_arrayiterator
 #ifndef OMIT_JUMP_TABLE_CLASS_set_arrayiterator
 Variant c_arrayiterator::o_set(CStrRef prop, CVarRef v, bool forInit, CStrRef context) {
   CStrRef s = context.isNull() ? FrameInjection::GetClassName(false) : context;
@@ -1939,38 +1939,38 @@ Variant c_appenditerator::o_getPrivate(CStrRef s, bool error) {
   return o_getPublic(s, error);
 }
 #endif // OMIT_JUMP_TABLE_CLASS_get_PRIVATE_appenditerator
-#ifndef OMIT_JUMP_TABLE_CLASS_exists_appenditerator
-bool c_appenditerator::o_exists(CStrRef prop, CStrRef context) const {
+#ifndef OMIT_JUMP_TABLE_CLASS_realProp_appenditerator
+Variant * c_appenditerator::o_realProp(CStrRef prop, int flags, CStrRef context) const {
   CStrRef s = context.isNull() ? FrameInjection::GetClassName(false) : context;
   int64 hash = s->hash();
   switch (hash & 1) {
     case 0:
-      HASH_GUARD_STRING(0x2E363D51549781C8LL, AppendIterator) { return o_existsPrivate(prop); }
+      HASH_GUARD_STRING(0x2E363D51549781C8LL, AppendIterator) { return o_realPropPrivate(prop, flags); }
       break;
     default:
       break;
   }
-  return o_existsPublic(prop);
+  return o_realPropPublic(prop, flags);
 }
-#endif // OMIT_JUMP_TABLE_CLASS_exists_appenditerator
-#ifndef OMIT_JUMP_TABLE_CLASS_exists_PUBLIC_appenditerator
-bool c_appenditerator::o_existsPublic(CStrRef s) const {
-  return c_ObjectData::o_existsPublic(s);
+#endif // OMIT_JUMP_TABLE_CLASS_realProp_appenditerator
+#ifndef OMIT_JUMP_TABLE_CLASS_realProp_PUBLIC_appenditerator
+Variant * c_appenditerator::o_realPropPublic(CStrRef s, int flags) const {
+  return c_ObjectData::o_realPropPublic(s, flags);
 }
-#endif // OMIT_JUMP_TABLE_CLASS_exists_PUBLIC_appenditerator
-#ifndef OMIT_JUMP_TABLE_CLASS_exists_PRIVATE_appenditerator
-bool c_appenditerator::o_existsPrivate(CStrRef s) const {
+#endif // OMIT_JUMP_TABLE_CLASS_realProp_PUBLIC_appenditerator
+#ifndef OMIT_JUMP_TABLE_CLASS_realProp_PRIVATE_appenditerator
+Variant * c_appenditerator::o_realPropPrivate(CStrRef s, int flags) const {
   int64 hash = s->hash();
   switch (hash & 1) {
     case 1:
-      HASH_EXISTS_STRING(0x60EA38C41F14FF71LL, "iterators", 9);
+      HASH_REALPROP_STRING(0x60EA38C41F14FF71LL, "iterators", 9, iterators);
       break;
     default:
       break;
   }
-  return o_existsPublic(s);
+  return o_realPropPublic(s, flags);
 }
-#endif // OMIT_JUMP_TABLE_CLASS_exists_PRIVATE_appenditerator
+#endif // OMIT_JUMP_TABLE_CLASS_realProp_PRIVATE_appenditerator
 #ifndef OMIT_JUMP_TABLE_CLASS_set_appenditerator
 Variant c_appenditerator::o_set(CStrRef prop, CVarRef v, bool forInit, CStrRef context) {
   CStrRef s = context.isNull() ? FrameInjection::GetClassName(false) : context;
@@ -2858,21 +2858,21 @@ Variant c_recursivedirectoryiterator::o_getPrivate(CStrRef s, bool error) {
   return o_getPublic(s, error);
 }
 #endif // OMIT_JUMP_TABLE_CLASS_get_PRIVATE_recursivedirectoryiterator
-#ifndef OMIT_JUMP_TABLE_CLASS_exists_recursivedirectoryiterator
-bool c_recursivedirectoryiterator::o_exists(CStrRef prop, CStrRef context) const {
-  return o_existsPublic(prop);
+#ifndef OMIT_JUMP_TABLE_CLASS_realProp_recursivedirectoryiterator
+Variant * c_recursivedirectoryiterator::o_realProp(CStrRef prop, int flags, CStrRef context) const {
+  return o_realPropPublic(prop, flags);
 }
-#endif // OMIT_JUMP_TABLE_CLASS_exists_recursivedirectoryiterator
-#ifndef OMIT_JUMP_TABLE_CLASS_exists_PUBLIC_recursivedirectoryiterator
-bool c_recursivedirectoryiterator::o_existsPublic(CStrRef s) const {
-  return c_directoryiterator::o_existsPublic(s);
+#endif // OMIT_JUMP_TABLE_CLASS_realProp_recursivedirectoryiterator
+#ifndef OMIT_JUMP_TABLE_CLASS_realProp_PUBLIC_recursivedirectoryiterator
+Variant * c_recursivedirectoryiterator::o_realPropPublic(CStrRef s, int flags) const {
+  return c_directoryiterator::o_realPropPublic(s, flags);
 }
-#endif // OMIT_JUMP_TABLE_CLASS_exists_PUBLIC_recursivedirectoryiterator
-#ifndef OMIT_JUMP_TABLE_CLASS_exists_PRIVATE_recursivedirectoryiterator
-bool c_recursivedirectoryiterator::o_existsPrivate(CStrRef s) const {
-  return o_existsPublic(s);
+#endif // OMIT_JUMP_TABLE_CLASS_realProp_PUBLIC_recursivedirectoryiterator
+#ifndef OMIT_JUMP_TABLE_CLASS_realProp_PRIVATE_recursivedirectoryiterator
+Variant * c_recursivedirectoryiterator::o_realPropPrivate(CStrRef s, int flags) const {
+  return o_realPropPublic(s, flags);
 }
-#endif // OMIT_JUMP_TABLE_CLASS_exists_PRIVATE_recursivedirectoryiterator
+#endif // OMIT_JUMP_TABLE_CLASS_realProp_PRIVATE_recursivedirectoryiterator
 #ifndef OMIT_JUMP_TABLE_CLASS_set_recursivedirectoryiterator
 Variant c_recursivedirectoryiterator::o_set(CStrRef prop, CVarRef v, bool forInit, CStrRef context) {
   return o_setPublic(prop, v, forInit);
@@ -5418,21 +5418,21 @@ Variant c_directoryiterator::o_getPrivate(CStrRef s, bool error) {
   return o_getPublic(s, error);
 }
 #endif // OMIT_JUMP_TABLE_CLASS_get_PRIVATE_directoryiterator
-#ifndef OMIT_JUMP_TABLE_CLASS_exists_directoryiterator
-bool c_directoryiterator::o_exists(CStrRef prop, CStrRef context) const {
-  return o_existsPublic(prop);
+#ifndef OMIT_JUMP_TABLE_CLASS_realProp_directoryiterator
+Variant * c_directoryiterator::o_realProp(CStrRef prop, int flags, CStrRef context) const {
+  return o_realPropPublic(prop, flags);
 }
-#endif // OMIT_JUMP_TABLE_CLASS_exists_directoryiterator
-#ifndef OMIT_JUMP_TABLE_CLASS_exists_PUBLIC_directoryiterator
-bool c_directoryiterator::o_existsPublic(CStrRef s) const {
-  return c_splfileinfo::o_existsPublic(s);
+#endif // OMIT_JUMP_TABLE_CLASS_realProp_directoryiterator
+#ifndef OMIT_JUMP_TABLE_CLASS_realProp_PUBLIC_directoryiterator
+Variant * c_directoryiterator::o_realPropPublic(CStrRef s, int flags) const {
+  return c_splfileinfo::o_realPropPublic(s, flags);
 }
-#endif // OMIT_JUMP_TABLE_CLASS_exists_PUBLIC_directoryiterator
-#ifndef OMIT_JUMP_TABLE_CLASS_exists_PRIVATE_directoryiterator
-bool c_directoryiterator::o_existsPrivate(CStrRef s) const {
-  return o_existsPublic(s);
+#endif // OMIT_JUMP_TABLE_CLASS_realProp_PUBLIC_directoryiterator
+#ifndef OMIT_JUMP_TABLE_CLASS_realProp_PRIVATE_directoryiterator
+Variant * c_directoryiterator::o_realPropPrivate(CStrRef s, int flags) const {
+  return o_realPropPublic(s, flags);
 }
-#endif // OMIT_JUMP_TABLE_CLASS_exists_PRIVATE_directoryiterator
+#endif // OMIT_JUMP_TABLE_CLASS_realProp_PRIVATE_directoryiterator
 #ifndef OMIT_JUMP_TABLE_CLASS_set_directoryiterator
 Variant c_directoryiterator::o_set(CStrRef prop, CVarRef v, bool forInit, CStrRef context) {
   return o_setPublic(prop, v, forInit);
@@ -7703,21 +7703,21 @@ Variant c_recursiveiteratoriterator::o_getPrivate(CStrRef s, bool error) {
   return o_getPublic(s, error);
 }
 #endif // OMIT_JUMP_TABLE_CLASS_get_PRIVATE_recursiveiteratoriterator
-#ifndef OMIT_JUMP_TABLE_CLASS_exists_recursiveiteratoriterator
-bool c_recursiveiteratoriterator::o_exists(CStrRef prop, CStrRef context) const {
-  return o_existsPublic(prop);
+#ifndef OMIT_JUMP_TABLE_CLASS_realProp_recursiveiteratoriterator
+Variant * c_recursiveiteratoriterator::o_realProp(CStrRef prop, int flags, CStrRef context) const {
+  return o_realPropPublic(prop, flags);
 }
-#endif // OMIT_JUMP_TABLE_CLASS_exists_recursiveiteratoriterator
-#ifndef OMIT_JUMP_TABLE_CLASS_exists_PUBLIC_recursiveiteratoriterator
-bool c_recursiveiteratoriterator::o_existsPublic(CStrRef s) const {
-  return c_ObjectData::o_existsPublic(s);
+#endif // OMIT_JUMP_TABLE_CLASS_realProp_recursiveiteratoriterator
+#ifndef OMIT_JUMP_TABLE_CLASS_realProp_PUBLIC_recursiveiteratoriterator
+Variant * c_recursiveiteratoriterator::o_realPropPublic(CStrRef s, int flags) const {
+  return c_ObjectData::o_realPropPublic(s, flags);
 }
-#endif // OMIT_JUMP_TABLE_CLASS_exists_PUBLIC_recursiveiteratoriterator
-#ifndef OMIT_JUMP_TABLE_CLASS_exists_PRIVATE_recursiveiteratoriterator
-bool c_recursiveiteratoriterator::o_existsPrivate(CStrRef s) const {
-  return o_existsPublic(s);
+#endif // OMIT_JUMP_TABLE_CLASS_realProp_PUBLIC_recursiveiteratoriterator
+#ifndef OMIT_JUMP_TABLE_CLASS_realProp_PRIVATE_recursiveiteratoriterator
+Variant * c_recursiveiteratoriterator::o_realPropPrivate(CStrRef s, int flags) const {
+  return o_realPropPublic(s, flags);
 }
-#endif // OMIT_JUMP_TABLE_CLASS_exists_PRIVATE_recursiveiteratoriterator
+#endif // OMIT_JUMP_TABLE_CLASS_realProp_PRIVATE_recursiveiteratoriterator
 #ifndef OMIT_JUMP_TABLE_CLASS_set_recursiveiteratoriterator
 Variant c_recursiveiteratoriterator::o_set(CStrRef prop, CVarRef v, bool forInit, CStrRef context) {
   return o_setPublic(prop, v, forInit);
@@ -8420,21 +8420,21 @@ Variant c_filteriterator::o_getPrivate(CStrRef s, bool error) {
   return o_getPublic(s, error);
 }
 #endif // OMIT_JUMP_TABLE_CLASS_get_PRIVATE_filteriterator
-#ifndef OMIT_JUMP_TABLE_CLASS_exists_filteriterator
-bool c_filteriterator::o_exists(CStrRef prop, CStrRef context) const {
-  return o_existsPublic(prop);
+#ifndef OMIT_JUMP_TABLE_CLASS_realProp_filteriterator
+Variant * c_filteriterator::o_realProp(CStrRef prop, int flags, CStrRef context) const {
+  return o_realPropPublic(prop, flags);
 }
-#endif // OMIT_JUMP_TABLE_CLASS_exists_filteriterator
-#ifndef OMIT_JUMP_TABLE_CLASS_exists_PUBLIC_filteriterator
-bool c_filteriterator::o_existsPublic(CStrRef s) const {
-  return c_ObjectData::o_existsPublic(s);
+#endif // OMIT_JUMP_TABLE_CLASS_realProp_filteriterator
+#ifndef OMIT_JUMP_TABLE_CLASS_realProp_PUBLIC_filteriterator
+Variant * c_filteriterator::o_realPropPublic(CStrRef s, int flags) const {
+  return c_ObjectData::o_realPropPublic(s, flags);
 }
-#endif // OMIT_JUMP_TABLE_CLASS_exists_PUBLIC_filteriterator
-#ifndef OMIT_JUMP_TABLE_CLASS_exists_PRIVATE_filteriterator
-bool c_filteriterator::o_existsPrivate(CStrRef s) const {
-  return o_existsPublic(s);
+#endif // OMIT_JUMP_TABLE_CLASS_realProp_PUBLIC_filteriterator
+#ifndef OMIT_JUMP_TABLE_CLASS_realProp_PRIVATE_filteriterator
+Variant * c_filteriterator::o_realPropPrivate(CStrRef s, int flags) const {
+  return o_realPropPublic(s, flags);
 }
-#endif // OMIT_JUMP_TABLE_CLASS_exists_PRIVATE_filteriterator
+#endif // OMIT_JUMP_TABLE_CLASS_realProp_PRIVATE_filteriterator
 #ifndef OMIT_JUMP_TABLE_CLASS_set_filteriterator
 Variant c_filteriterator::o_set(CStrRef prop, CVarRef v, bool forInit, CStrRef context) {
   return o_setPublic(prop, v, forInit);
diff --git a/src/system/gen/php/classes/reflection.cpp b/src/system/gen/php/classes/reflection.cpp
index 0fff763b3b..4be5699c24 100644
--- a/src/system/gen/php/classes/reflection.cpp
+++ b/src/system/gen/php/classes/reflection.cpp
@@ -87,29 +87,29 @@ Variant c_reflectionfunctionabstract::o_getPrivate(CStrRef s, bool error) {
   return o_getPublic(s, error);
 }
 #endif // OMIT_JUMP_TABLE_CLASS_get_PRIVATE_reflectionfunctionabstract
-#ifndef OMIT_JUMP_TABLE_CLASS_exists_reflectionfunctionabstract
-bool c_reflectionfunctionabstract::o_exists(CStrRef prop, CStrRef context) const {
-  return o_existsPublic(prop);
+#ifndef OMIT_JUMP_TABLE_CLASS_realProp_reflectionfunctionabstract
+Variant * c_reflectionfunctionabstract::o_realProp(CStrRef prop, int flags, CStrRef context) const {
+  return o_realPropPublic(prop, flags);
 }
-#endif // OMIT_JUMP_TABLE_CLASS_exists_reflectionfunctionabstract
-#ifndef OMIT_JUMP_TABLE_CLASS_exists_PUBLIC_reflectionfunctionabstract
-bool c_reflectionfunctionabstract::o_existsPublic(CStrRef s) const {
+#endif // OMIT_JUMP_TABLE_CLASS_realProp_reflectionfunctionabstract
+#ifndef OMIT_JUMP_TABLE_CLASS_realProp_PUBLIC_reflectionfunctionabstract
+Variant * c_reflectionfunctionabstract::o_realPropPublic(CStrRef s, int flags) const {
   int64 hash = s->hash();
   switch (hash & 1) {
     case 1:
-      HASH_EXISTS_STRING(0x0F2EF58F157D479FLL, "info", 4);
+      HASH_REALPROP_STRING(0x0F2EF58F157D479FLL, "info", 4, info);
       break;
     default:
       break;
   }
-  return c_ObjectData::o_existsPublic(s);
+  return c_ObjectData::o_realPropPublic(s, flags);
 }
-#endif // OMIT_JUMP_TABLE_CLASS_exists_PUBLIC_reflectionfunctionabstract
-#ifndef OMIT_JUMP_TABLE_CLASS_exists_PRIVATE_reflectionfunctionabstract
-bool c_reflectionfunctionabstract::o_existsPrivate(CStrRef s) const {
-  return o_existsPublic(s);
+#endif // OMIT_JUMP_TABLE_CLASS_realProp_PUBLIC_reflectionfunctionabstract
+#ifndef OMIT_JUMP_TABLE_CLASS_realProp_PRIVATE_reflectionfunctionabstract
+Variant * c_reflectionfunctionabstract::o_realPropPrivate(CStrRef s, int flags) const {
+  return o_realPropPublic(s, flags);
 }
-#endif // OMIT_JUMP_TABLE_CLASS_exists_PRIVATE_reflectionfunctionabstract
+#endif // OMIT_JUMP_TABLE_CLASS_realProp_PRIVATE_reflectionfunctionabstract
 #ifndef OMIT_JUMP_TABLE_CLASS_set_reflectionfunctionabstract
 Variant c_reflectionfunctionabstract::o_set(CStrRef prop, CVarRef v, bool forInit, CStrRef context) {
   return o_setPublic(prop, v, forInit);
@@ -1075,30 +1075,30 @@ Variant c_reflectionobject::o_getPrivate(CStrRef s, bool error) {
   return o_getPublic(s, error);
 }
 #endif // OMIT_JUMP_TABLE_CLASS_get_PRIVATE_reflectionobject
-#ifndef OMIT_JUMP_TABLE_CLASS_exists_reflectionobject
-bool c_reflectionobject::o_exists(CStrRef prop, CStrRef context) const {
+#ifndef OMIT_JUMP_TABLE_CLASS_realProp_reflectionobject
+Variant * c_reflectionobject::o_realProp(CStrRef prop, int flags, CStrRef context) const {
   CStrRef s = context.isNull() ? FrameInjection::GetClassName(false) : context;
   int64 hash = s->hash();
   switch (hash & 1) {
     case 1:
-      HASH_GUARD_STRING(0x35A44A5E6AE2E71DLL, ReflectionClass) { return c_reflectionclass::o_existsPrivate(prop); }
+      HASH_GUARD_STRING(0x35A44A5E6AE2E71DLL, ReflectionClass) { return c_reflectionclass::o_realPropPrivate(prop, flags); }
       break;
     default:
       break;
   }
-  return o_existsPublic(prop);
+  return o_realPropPublic(prop, flags);
 }
-#endif // OMIT_JUMP_TABLE_CLASS_exists_reflectionobject
-#ifndef OMIT_JUMP_TABLE_CLASS_exists_PUBLIC_reflectionobject
-bool c_reflectionobject::o_existsPublic(CStrRef s) const {
-  return c_reflectionclass::o_existsPublic(s);
+#endif // OMIT_JUMP_TABLE_CLASS_realProp_reflectionobject
+#ifndef OMIT_JUMP_TABLE_CLASS_realProp_PUBLIC_reflectionobject
+Variant * c_reflectionobject::o_realPropPublic(CStrRef s, int flags) const {
+  return c_reflectionclass::o_realPropPublic(s, flags);
 }
-#endif // OMIT_JUMP_TABLE_CLASS_exists_PUBLIC_reflectionobject
-#ifndef OMIT_JUMP_TABLE_CLASS_exists_PRIVATE_reflectionobject
-bool c_reflectionobject::o_existsPrivate(CStrRef s) const {
-  return o_existsPublic(s);
+#endif // OMIT_JUMP_TABLE_CLASS_realProp_PUBLIC_reflectionobject
+#ifndef OMIT_JUMP_TABLE_CLASS_realProp_PRIVATE_reflectionobject
+Variant * c_reflectionobject::o_realPropPrivate(CStrRef s, int flags) const {
+  return o_realPropPublic(s, flags);
 }
-#endif // OMIT_JUMP_TABLE_CLASS_exists_PRIVATE_reflectionobject
+#endif // OMIT_JUMP_TABLE_CLASS_realProp_PRIVATE_reflectionobject
 #ifndef OMIT_JUMP_TABLE_CLASS_set_reflectionobject
 Variant c_reflectionobject::o_set(CStrRef prop, CVarRef v, bool forInit, CStrRef context) {
   CStrRef s = context.isNull() ? FrameInjection::GetClassName(false) : context;
@@ -3768,21 +3768,21 @@ Variant c_reflectionexception::o_getPrivate(CStrRef s, bool error) {
   return o_getPublic(s, error);
 }
 #endif // OMIT_JUMP_TABLE_CLASS_get_PRIVATE_reflectionexception
-#ifndef OMIT_JUMP_TABLE_CLASS_exists_reflectionexception
-bool c_reflectionexception::o_exists(CStrRef prop, CStrRef context) const {
-  return o_existsPublic(prop);
+#ifndef OMIT_JUMP_TABLE_CLASS_realProp_reflectionexception
+Variant * c_reflectionexception::o_realProp(CStrRef prop, int flags, CStrRef context) const {
+  return o_realPropPublic(prop, flags);
 }
-#endif // OMIT_JUMP_TABLE_CLASS_exists_reflectionexception
-#ifndef OMIT_JUMP_TABLE_CLASS_exists_PUBLIC_reflectionexception
-bool c_reflectionexception::o_existsPublic(CStrRef s) const {
-  return c_exception::o_existsPublic(s);
+#endif // OMIT_JUMP_TABLE_CLASS_realProp_reflectionexception
+#ifndef OMIT_JUMP_TABLE_CLASS_realProp_PUBLIC_reflectionexception
+Variant * c_reflectionexception::o_realPropPublic(CStrRef s, int flags) const {
+  return c_exception::o_realPropPublic(s, flags);
 }
-#endif // OMIT_JUMP_TABLE_CLASS_exists_PUBLIC_reflectionexception
-#ifndef OMIT_JUMP_TABLE_CLASS_exists_PRIVATE_reflectionexception
-bool c_reflectionexception::o_existsPrivate(CStrRef s) const {
-  return o_existsPublic(s);
+#endif // OMIT_JUMP_TABLE_CLASS_realProp_PUBLIC_reflectionexception
+#ifndef OMIT_JUMP_TABLE_CLASS_realProp_PRIVATE_reflectionexception
+Variant * c_reflectionexception::o_realPropPrivate(CStrRef s, int flags) const {
+  return o_realPropPublic(s, flags);
 }
-#endif // OMIT_JUMP_TABLE_CLASS_exists_PRIVATE_reflectionexception
+#endif // OMIT_JUMP_TABLE_CLASS_realProp_PRIVATE_reflectionexception
 #ifndef OMIT_JUMP_TABLE_CLASS_set_reflectionexception
 Variant c_reflectionexception::o_set(CStrRef prop, CVarRef v, bool forInit, CStrRef context) {
   return o_setPublic(prop, v, forInit);
@@ -4500,46 +4500,46 @@ Variant c_reflectionclass::o_getPrivate(CStrRef s, bool error) {
   return o_getPublic(s, error);
 }
 #endif // OMIT_JUMP_TABLE_CLASS_get_PRIVATE_reflectionclass
-#ifndef OMIT_JUMP_TABLE_CLASS_exists_reflectionclass
-bool c_reflectionclass::o_exists(CStrRef prop, CStrRef context) const {
+#ifndef OMIT_JUMP_TABLE_CLASS_realProp_reflectionclass
+Variant * c_reflectionclass::o_realProp(CStrRef prop, int flags, CStrRef context) const {
   CStrRef s = context.isNull() ? FrameInjection::GetClassName(false) : context;
   int64 hash = s->hash();
   switch (hash & 1) {
     case 1:
-      HASH_GUARD_STRING(0x35A44A5E6AE2E71DLL, ReflectionClass) { return o_existsPrivate(prop); }
+      HASH_GUARD_STRING(0x35A44A5E6AE2E71DLL, ReflectionClass) { return o_realPropPrivate(prop, flags); }
       break;
     default:
       break;
   }
-  return o_existsPublic(prop);
+  return o_realPropPublic(prop, flags);
 }
-#endif // OMIT_JUMP_TABLE_CLASS_exists_reflectionclass
-#ifndef OMIT_JUMP_TABLE_CLASS_exists_PUBLIC_reflectionclass
-bool c_reflectionclass::o_existsPublic(CStrRef s) const {
+#endif // OMIT_JUMP_TABLE_CLASS_realProp_reflectionclass
+#ifndef OMIT_JUMP_TABLE_CLASS_realProp_PUBLIC_reflectionclass
+Variant * c_reflectionclass::o_realPropPublic(CStrRef s, int flags) const {
   int64 hash = s->hash();
   switch (hash & 1) {
     case 0:
-      HASH_EXISTS_STRING(0x5655B4FF77E35232LL, "name", 4);
+      HASH_REALPROP_STRING(0x5655B4FF77E35232LL, "name", 4, name);
       break;
     default:
       break;
   }
-  return c_ObjectData::o_existsPublic(s);
+  return c_ObjectData::o_realPropPublic(s, flags);
 }
-#endif // OMIT_JUMP_TABLE_CLASS_exists_PUBLIC_reflectionclass
-#ifndef OMIT_JUMP_TABLE_CLASS_exists_PRIVATE_reflectionclass
-bool c_reflectionclass::o_existsPrivate(CStrRef s) const {
+#endif // OMIT_JUMP_TABLE_CLASS_realProp_PUBLIC_reflectionclass
+#ifndef OMIT_JUMP_TABLE_CLASS_realProp_PRIVATE_reflectionclass
+Variant * c_reflectionclass::o_realPropPrivate(CStrRef s, int flags) const {
   int64 hash = s->hash();
   switch (hash & 1) {
     case 1:
-      HASH_EXISTS_STRING(0x0F2EF58F157D479FLL, "info", 4);
+      HASH_REALPROP_STRING(0x0F2EF58F157D479FLL, "info", 4, info);
       break;
     default:
       break;
   }
-  return o_existsPublic(s);
+  return o_realPropPublic(s, flags);
 }
-#endif // OMIT_JUMP_TABLE_CLASS_exists_PRIVATE_reflectionclass
+#endif // OMIT_JUMP_TABLE_CLASS_realProp_PRIVATE_reflectionclass
 #ifndef OMIT_JUMP_TABLE_CLASS_set_reflectionclass
 Variant c_reflectionclass::o_set(CStrRef prop, CVarRef v, bool forInit, CStrRef context) {
   CStrRef s = context.isNull() ? FrameInjection::GetClassName(false) : context;
@@ -8290,41 +8290,41 @@ Variant c_reflectionextension::o_getPrivate(CStrRef s, bool error) {
   return o_getPublic(s, error);
 }
 #endif // OMIT_JUMP_TABLE_CLASS_get_PRIVATE_reflectionextension
-#ifndef OMIT_JUMP_TABLE_CLASS_exists_reflectionextension
-bool c_reflectionextension::o_exists(CStrRef prop, CStrRef context) const {
+#ifndef OMIT_JUMP_TABLE_CLASS_realProp_reflectionextension
+Variant * c_reflectionextension::o_realProp(CStrRef prop, int flags, CStrRef context) const {
   CStrRef s = context.isNull() ? FrameInjection::GetClassName(false) : context;
   int64 hash = s->hash();
   switch (hash & 1) {
     case 1:
-      HASH_GUARD_STRING(0x0B61E0BFCFA06573LL, ReflectionExtension) { return o_existsPrivate(prop); }
+      HASH_GUARD_STRING(0x0B61E0BFCFA06573LL, ReflectionExtension) { return o_realPropPrivate(prop, flags); }
       break;
     default:
       break;
   }
-  return o_existsPublic(prop);
+  return o_realPropPublic(prop, flags);
 }
-#endif // OMIT_JUMP_TABLE_CLASS_exists_reflectionextension
-#ifndef OMIT_JUMP_TABLE_CLASS_exists_PUBLIC_reflectionextension
-bool c_reflectionextension::o_existsPublic(CStrRef s) const {
-  return c_ObjectData::o_existsPublic(s);
+#endif // OMIT_JUMP_TABLE_CLASS_realProp_reflectionextension
+#ifndef OMIT_JUMP_TABLE_CLASS_realProp_PUBLIC_reflectionextension
+Variant * c_reflectionextension::o_realPropPublic(CStrRef s, int flags) const {
+  return c_ObjectData::o_realPropPublic(s, flags);
 }
-#endif // OMIT_JUMP_TABLE_CLASS_exists_PUBLIC_reflectionextension
-#ifndef OMIT_JUMP_TABLE_CLASS_exists_PRIVATE_reflectionextension
-bool c_reflectionextension::o_existsPrivate(CStrRef s) const {
+#endif // OMIT_JUMP_TABLE_CLASS_realProp_PUBLIC_reflectionextension
+#ifndef OMIT_JUMP_TABLE_CLASS_realProp_PRIVATE_reflectionextension
+Variant * c_reflectionextension::o_realPropPrivate(CStrRef s, int flags) const {
   int64 hash = s->hash();
   switch (hash & 3) {
     case 2:
-      HASH_EXISTS_STRING(0x5655B4FF77E35232LL, "name", 4);
+      HASH_REALPROP_STRING(0x5655B4FF77E35232LL, "name", 4, name);
       break;
     case 3:
-      HASH_EXISTS_STRING(0x0F2EF58F157D479FLL, "info", 4);
+      HASH_REALPROP_STRING(0x0F2EF58F157D479FLL, "info", 4, info);
       break;
     default:
       break;
   }
-  return o_existsPublic(s);
+  return o_realPropPublic(s, flags);
 }
-#endif // OMIT_JUMP_TABLE_CLASS_exists_PRIVATE_reflectionextension
+#endif // OMIT_JUMP_TABLE_CLASS_realProp_PRIVATE_reflectionextension
 #ifndef OMIT_JUMP_TABLE_CLASS_set_reflectionextension
 Variant c_reflectionextension::o_set(CStrRef prop, CVarRef v, bool forInit, CStrRef context) {
   CStrRef s = context.isNull() ? FrameInjection::GetClassName(false) : context;
@@ -9401,32 +9401,32 @@ Variant c_reflectionmethod::o_getPrivate(CStrRef s, bool error) {
   return o_getPublic(s, error);
 }
 #endif // OMIT_JUMP_TABLE_CLASS_get_PRIVATE_reflectionmethod
-#ifndef OMIT_JUMP_TABLE_CLASS_exists_reflectionmethod
-bool c_reflectionmethod::o_exists(CStrRef prop, CStrRef context) const {
-  return o_existsPublic(prop);
+#ifndef OMIT_JUMP_TABLE_CLASS_realProp_reflectionmethod
+Variant * c_reflectionmethod::o_realProp(CStrRef prop, int flags, CStrRef context) const {
+  return o_realPropPublic(prop, flags);
 }
-#endif // OMIT_JUMP_TABLE_CLASS_exists_reflectionmethod
-#ifndef OMIT_JUMP_TABLE_CLASS_exists_PUBLIC_reflectionmethod
-bool c_reflectionmethod::o_existsPublic(CStrRef s) const {
+#endif // OMIT_JUMP_TABLE_CLASS_realProp_reflectionmethod
+#ifndef OMIT_JUMP_TABLE_CLASS_realProp_PUBLIC_reflectionmethod
+Variant * c_reflectionmethod::o_realPropPublic(CStrRef s, int flags) const {
   int64 hash = s->hash();
   switch (hash & 3) {
     case 0:
-      HASH_EXISTS_STRING(0x2E3A246D1F74C210LL, "class", 5);
+      HASH_REALPROP_STRING(0x2E3A246D1F74C210LL, "class", 5, class);
       break;
     case 2:
-      HASH_EXISTS_STRING(0x5655B4FF77E35232LL, "name", 4);
+      HASH_REALPROP_STRING(0x5655B4FF77E35232LL, "name", 4, name);
       break;
     default:
       break;
   }
-  return c_reflectionfunctionabstract::o_existsPublic(s);
+  return c_reflectionfunctionabstract::o_realPropPublic(s, flags);
 }
-#endif // OMIT_JUMP_TABLE_CLASS_exists_PUBLIC_reflectionmethod
-#ifndef OMIT_JUMP_TABLE_CLASS_exists_PRIVATE_reflectionmethod
-bool c_reflectionmethod::o_existsPrivate(CStrRef s) const {
-  return o_existsPublic(s);
+#endif // OMIT_JUMP_TABLE_CLASS_realProp_PUBLIC_reflectionmethod
+#ifndef OMIT_JUMP_TABLE_CLASS_realProp_PRIVATE_reflectionmethod
+Variant * c_reflectionmethod::o_realPropPrivate(CStrRef s, int flags) const {
+  return o_realPropPublic(s, flags);
 }
-#endif // OMIT_JUMP_TABLE_CLASS_exists_PRIVATE_reflectionmethod
+#endif // OMIT_JUMP_TABLE_CLASS_realProp_PRIVATE_reflectionmethod
 #ifndef OMIT_JUMP_TABLE_CLASS_set_reflectionmethod
 Variant c_reflectionmethod::o_set(CStrRef prop, CVarRef v, bool forInit, CStrRef context) {
   return o_setPublic(prop, v, forInit);
@@ -11565,35 +11565,35 @@ Variant c_reflectionproperty::o_getPrivate(CStrRef s, bool error) {
   return o_getPublic(s, error);
 }
 #endif // OMIT_JUMP_TABLE_CLASS_get_PRIVATE_reflectionproperty
-#ifndef OMIT_JUMP_TABLE_CLASS_exists_reflectionproperty
-bool c_reflectionproperty::o_exists(CStrRef prop, CStrRef context) const {
-  return o_existsPublic(prop);
+#ifndef OMIT_JUMP_TABLE_CLASS_realProp_reflectionproperty
+Variant * c_reflectionproperty::o_realProp(CStrRef prop, int flags, CStrRef context) const {
+  return o_realPropPublic(prop, flags);
 }
-#endif // OMIT_JUMP_TABLE_CLASS_exists_reflectionproperty
-#ifndef OMIT_JUMP_TABLE_CLASS_exists_PUBLIC_reflectionproperty
-bool c_reflectionproperty::o_existsPublic(CStrRef s) const {
+#endif // OMIT_JUMP_TABLE_CLASS_realProp_reflectionproperty
+#ifndef OMIT_JUMP_TABLE_CLASS_realProp_PUBLIC_reflectionproperty
+Variant * c_reflectionproperty::o_realPropPublic(CStrRef s, int flags) const {
   int64 hash = s->hash();
   switch (hash & 7) {
     case 0:
-      HASH_EXISTS_STRING(0x2E3A246D1F74C210LL, "class", 5);
+      HASH_REALPROP_STRING(0x2E3A246D1F74C210LL, "class", 5, class);
       break;
     case 2:
-      HASH_EXISTS_STRING(0x5655B4FF77E35232LL, "name", 4);
+      HASH_REALPROP_STRING(0x5655B4FF77E35232LL, "name", 4, name);
       break;
     case 7:
-      HASH_EXISTS_STRING(0x0F2EF58F157D479FLL, "info", 4);
+      HASH_REALPROP_STRING(0x0F2EF58F157D479FLL, "info", 4, info);
       break;
     default:
       break;
   }
-  return c_ObjectData::o_existsPublic(s);
+  return c_ObjectData::o_realPropPublic(s, flags);
 }
-#endif // OMIT_JUMP_TABLE_CLASS_exists_PUBLIC_reflectionproperty
-#ifndef OMIT_JUMP_TABLE_CLASS_exists_PRIVATE_reflectionproperty
-bool c_reflectionproperty::o_existsPrivate(CStrRef s) const {
-  return o_existsPublic(s);
+#endif // OMIT_JUMP_TABLE_CLASS_realProp_PUBLIC_reflectionproperty
+#ifndef OMIT_JUMP_TABLE_CLASS_realProp_PRIVATE_reflectionproperty
+Variant * c_reflectionproperty::o_realPropPrivate(CStrRef s, int flags) const {
+  return o_realPropPublic(s, flags);
 }
-#endif // OMIT_JUMP_TABLE_CLASS_exists_PRIVATE_reflectionproperty
+#endif // OMIT_JUMP_TABLE_CLASS_realProp_PRIVATE_reflectionproperty
 #ifndef OMIT_JUMP_TABLE_CLASS_set_reflectionproperty
 Variant c_reflectionproperty::o_set(CStrRef prop, CVarRef v, bool forInit, CStrRef context) {
   return o_setPublic(prop, v, forInit);
@@ -13019,21 +13019,21 @@ Variant c_reflectionfunction::o_getPrivate(CStrRef s, bool error) {
   return o_getPublic(s, error);
 }
 #endif // OMIT_JUMP_TABLE_CLASS_get_PRIVATE_reflectionfunction
-#ifndef OMIT_JUMP_TABLE_CLASS_exists_reflectionfunction
-bool c_reflectionfunction::o_exists(CStrRef prop, CStrRef context) const {
-  return o_existsPublic(prop);
+#ifndef OMIT_JUMP_TABLE_CLASS_realProp_reflectionfunction
+Variant * c_reflectionfunction::o_realProp(CStrRef prop, int flags, CStrRef context) const {
+  return o_realPropPublic(prop, flags);
 }
-#endif // OMIT_JUMP_TABLE_CLASS_exists_reflectionfunction
-#ifndef OMIT_JUMP_TABLE_CLASS_exists_PUBLIC_reflectionfunction
-bool c_reflectionfunction::o_existsPublic(CStrRef s) const {
-  return c_reflectionfunctionabstract::o_existsPublic(s);
+#endif // OMIT_JUMP_TABLE_CLASS_realProp_reflectionfunction
+#ifndef OMIT_JUMP_TABLE_CLASS_realProp_PUBLIC_reflectionfunction
+Variant * c_reflectionfunction::o_realPropPublic(CStrRef s, int flags) const {
+  return c_reflectionfunctionabstract::o_realPropPublic(s, flags);
 }
-#endif // OMIT_JUMP_TABLE_CLASS_exists_PUBLIC_reflectionfunction
-#ifndef OMIT_JUMP_TABLE_CLASS_exists_PRIVATE_reflectionfunction
-bool c_reflectionfunction::o_existsPrivate(CStrRef s) const {
-  return o_existsPublic(s);
+#endif // OMIT_JUMP_TABLE_CLASS_realProp_PUBLIC_reflectionfunction
+#ifndef OMIT_JUMP_TABLE_CLASS_realProp_PRIVATE_reflectionfunction
+Variant * c_reflectionfunction::o_realPropPrivate(CStrRef s, int flags) const {
+  return o_realPropPublic(s, flags);
 }
-#endif // OMIT_JUMP_TABLE_CLASS_exists_PRIVATE_reflectionfunction
+#endif // OMIT_JUMP_TABLE_CLASS_realProp_PRIVATE_reflectionfunction
 #ifndef OMIT_JUMP_TABLE_CLASS_set_reflectionfunction
 Variant c_reflectionfunction::o_set(CStrRef prop, CVarRef v, bool forInit, CStrRef context) {
   return o_setPublic(prop, v, forInit);
@@ -14421,29 +14421,29 @@ Variant c_reflectionparameter::o_getPrivate(CStrRef s, bool error) {
   return o_getPublic(s, error);
 }
 #endif // OMIT_JUMP_TABLE_CLASS_get_PRIVATE_reflectionparameter
-#ifndef OMIT_JUMP_TABLE_CLASS_exists_reflectionparameter
-bool c_reflectionparameter::o_exists(CStrRef prop, CStrRef context) const {
-  return o_existsPublic(prop);
+#ifndef OMIT_JUMP_TABLE_CLASS_realProp_reflectionparameter
+Variant * c_reflectionparameter::o_realProp(CStrRef prop, int flags, CStrRef context) const {
+  return o_realPropPublic(prop, flags);
 }
-#endif // OMIT_JUMP_TABLE_CLASS_exists_reflectionparameter
-#ifndef OMIT_JUMP_TABLE_CLASS_exists_PUBLIC_reflectionparameter
-bool c_reflectionparameter::o_existsPublic(CStrRef s) const {
+#endif // OMIT_JUMP_TABLE_CLASS_realProp_reflectionparameter
+#ifndef OMIT_JUMP_TABLE_CLASS_realProp_PUBLIC_reflectionparameter
+Variant * c_reflectionparameter::o_realPropPublic(CStrRef s, int flags) const {
   int64 hash = s->hash();
   switch (hash & 1) {
     case 1:
-      HASH_EXISTS_STRING(0x0F2EF58F157D479FLL, "info", 4);
+      HASH_REALPROP_STRING(0x0F2EF58F157D479FLL, "info", 4, info);
       break;
     default:
       break;
   }
-  return c_ObjectData::o_existsPublic(s);
+  return c_ObjectData::o_realPropPublic(s, flags);
 }
-#endif // OMIT_JUMP_TABLE_CLASS_exists_PUBLIC_reflectionparameter
-#ifndef OMIT_JUMP_TABLE_CLASS_exists_PRIVATE_reflectionparameter
-bool c_reflectionparameter::o_existsPrivate(CStrRef s) const {
-  return o_existsPublic(s);
+#endif // OMIT_JUMP_TABLE_CLASS_realProp_PUBLIC_reflectionparameter
+#ifndef OMIT_JUMP_TABLE_CLASS_realProp_PRIVATE_reflectionparameter
+Variant * c_reflectionparameter::o_realPropPrivate(CStrRef s, int flags) const {
+  return o_realPropPublic(s, flags);
 }
-#endif // OMIT_JUMP_TABLE_CLASS_exists_PRIVATE_reflectionparameter
+#endif // OMIT_JUMP_TABLE_CLASS_realProp_PRIVATE_reflectionparameter
 #ifndef OMIT_JUMP_TABLE_CLASS_set_reflectionparameter
 Variant c_reflectionparameter::o_set(CStrRef prop, CVarRef v, bool forInit, CStrRef context) {
   return o_setPublic(prop, v, forInit);
diff --git a/src/system/gen/php/classes/splfile.cpp b/src/system/gen/php/classes/splfile.cpp
index 50f112cd8d..556d200833 100644
--- a/src/system/gen/php/classes/splfile.cpp
+++ b/src/system/gen/php/classes/splfile.cpp
@@ -70,21 +70,21 @@ Variant c_splfileobject::o_getPrivate(CStrRef s, bool error) {
   return o_getPublic(s, error);
 }
 #endif // OMIT_JUMP_TABLE_CLASS_get_PRIVATE_splfileobject
-#ifndef OMIT_JUMP_TABLE_CLASS_exists_splfileobject
-bool c_splfileobject::o_exists(CStrRef prop, CStrRef context) const {
-  return o_existsPublic(prop);
+#ifndef OMIT_JUMP_TABLE_CLASS_realProp_splfileobject
+Variant * c_splfileobject::o_realProp(CStrRef prop, int flags, CStrRef context) const {
+  return o_realPropPublic(prop, flags);
 }
-#endif // OMIT_JUMP_TABLE_CLASS_exists_splfileobject
-#ifndef OMIT_JUMP_TABLE_CLASS_exists_PUBLIC_splfileobject
-bool c_splfileobject::o_existsPublic(CStrRef s) const {
-  return c_splfileinfo::o_existsPublic(s);
+#endif // OMIT_JUMP_TABLE_CLASS_realProp_splfileobject
+#ifndef OMIT_JUMP_TABLE_CLASS_realProp_PUBLIC_splfileobject
+Variant * c_splfileobject::o_realPropPublic(CStrRef s, int flags) const {
+  return c_splfileinfo::o_realPropPublic(s, flags);
 }
-#endif // OMIT_JUMP_TABLE_CLASS_exists_PUBLIC_splfileobject
-#ifndef OMIT_JUMP_TABLE_CLASS_exists_PRIVATE_splfileobject
-bool c_splfileobject::o_existsPrivate(CStrRef s) const {
-  return o_existsPublic(s);
+#endif // OMIT_JUMP_TABLE_CLASS_realProp_PUBLIC_splfileobject
+#ifndef OMIT_JUMP_TABLE_CLASS_realProp_PRIVATE_splfileobject
+Variant * c_splfileobject::o_realPropPrivate(CStrRef s, int flags) const {
+  return o_realPropPublic(s, flags);
 }
-#endif // OMIT_JUMP_TABLE_CLASS_exists_PRIVATE_splfileobject
+#endif // OMIT_JUMP_TABLE_CLASS_realProp_PRIVATE_splfileobject
 #ifndef OMIT_JUMP_TABLE_CLASS_set_splfileobject
 Variant c_splfileobject::o_set(CStrRef prop, CVarRef v, bool forInit, CStrRef context) {
   return o_setPublic(prop, v, forInit);
@@ -3929,21 +3929,21 @@ Variant c_splfileinfo::o_getPrivate(CStrRef s, bool error) {
   return o_getPublic(s, error);
 }
 #endif // OMIT_JUMP_TABLE_CLASS_get_PRIVATE_splfileinfo
-#ifndef OMIT_JUMP_TABLE_CLASS_exists_splfileinfo
-bool c_splfileinfo::o_exists(CStrRef prop, CStrRef context) const {
-  return o_existsPublic(prop);
+#ifndef OMIT_JUMP_TABLE_CLASS_realProp_splfileinfo
+Variant * c_splfileinfo::o_realProp(CStrRef prop, int flags, CStrRef context) const {
+  return o_realPropPublic(prop, flags);
 }
-#endif // OMIT_JUMP_TABLE_CLASS_exists_splfileinfo
-#ifndef OMIT_JUMP_TABLE_CLASS_exists_PUBLIC_splfileinfo
-bool c_splfileinfo::o_existsPublic(CStrRef s) const {
-  return c_ObjectData::o_existsPublic(s);
+#endif // OMIT_JUMP_TABLE_CLASS_realProp_splfileinfo
+#ifndef OMIT_JUMP_TABLE_CLASS_realProp_PUBLIC_splfileinfo
+Variant * c_splfileinfo::o_realPropPublic(CStrRef s, int flags) const {
+  return c_ObjectData::o_realPropPublic(s, flags);
 }
-#endif // OMIT_JUMP_TABLE_CLASS_exists_PUBLIC_splfileinfo
-#ifndef OMIT_JUMP_TABLE_CLASS_exists_PRIVATE_splfileinfo
-bool c_splfileinfo::o_existsPrivate(CStrRef s) const {
-  return o_existsPublic(s);
+#endif // OMIT_JUMP_TABLE_CLASS_realProp_PUBLIC_splfileinfo
+#ifndef OMIT_JUMP_TABLE_CLASS_realProp_PRIVATE_splfileinfo
+Variant * c_splfileinfo::o_realPropPrivate(CStrRef s, int flags) const {
+  return o_realPropPublic(s, flags);
 }
-#endif // OMIT_JUMP_TABLE_CLASS_exists_PRIVATE_splfileinfo
+#endif // OMIT_JUMP_TABLE_CLASS_realProp_PRIVATE_splfileinfo
 #ifndef OMIT_JUMP_TABLE_CLASS_set_splfileinfo
 Variant c_splfileinfo::o_set(CStrRef prop, CVarRef v, bool forInit, CStrRef context) {
   return o_setPublic(prop, v, forInit);
diff --git a/src/system/gen/php/classes/splobjectstorage.cpp b/src/system/gen/php/classes/splobjectstorage.cpp
index 368c453e1f..b2321cc41f 100644
--- a/src/system/gen/php/classes/splobjectstorage.cpp
+++ b/src/system/gen/php/classes/splobjectstorage.cpp
@@ -106,41 +106,42 @@ Variant c_splobjectstorage::o_getPrivate(CStrRef s, bool error) {
   return o_getPublic(s, error);
 }
 #endif // OMIT_JUMP_TABLE_CLASS_get_PRIVATE_splobjectstorage
-#ifndef OMIT_JUMP_TABLE_CLASS_exists_splobjectstorage
-bool c_splobjectstorage::o_exists(CStrRef prop, CStrRef context) const {
+#ifndef OMIT_JUMP_TABLE_CLASS_realProp_splobjectstorage
+Variant * c_splobjectstorage::o_realProp(CStrRef prop, int flags, CStrRef context) const {
   CStrRef s = context.isNull() ? FrameInjection::GetClassName(false) : context;
   int64 hash = s->hash();
   switch (hash & 1) {
     case 1:
-      HASH_GUARD_STRING(0x5BA243B9FBA7A64FLL, SplObjectStorage) { return o_existsPrivate(prop); }
+      HASH_GUARD_STRING(0x5BA243B9FBA7A64FLL, SplObjectStorage) { return o_realPropPrivate(prop, flags); }
       break;
     default:
       break;
   }
-  return o_existsPublic(prop);
+  return o_realPropPublic(prop, flags);
 }
-#endif // OMIT_JUMP_TABLE_CLASS_exists_splobjectstorage
-#ifndef OMIT_JUMP_TABLE_CLASS_exists_PUBLIC_splobjectstorage
-bool c_splobjectstorage::o_existsPublic(CStrRef s) const {
-  return c_ObjectData::o_existsPublic(s);
+#endif // OMIT_JUMP_TABLE_CLASS_realProp_splobjectstorage
+#ifndef OMIT_JUMP_TABLE_CLASS_realProp_PUBLIC_splobjectstorage
+Variant * c_splobjectstorage::o_realPropPublic(CStrRef s, int flags) const {
+  return c_ObjectData::o_realPropPublic(s, flags);
 }
-#endif // OMIT_JUMP_TABLE_CLASS_exists_PUBLIC_splobjectstorage
-#ifndef OMIT_JUMP_TABLE_CLASS_exists_PRIVATE_splobjectstorage
-bool c_splobjectstorage::o_existsPrivate(CStrRef s) const {
+#endif // OMIT_JUMP_TABLE_CLASS_realProp_PUBLIC_splobjectstorage
+#ifndef OMIT_JUMP_TABLE_CLASS_realProp_PRIVATE_splobjectstorage
+Variant * c_splobjectstorage::o_realPropPrivate(CStrRef s, int flags) const {
+  DECLARE_SYSTEM_GLOBALS(g);
   int64 hash = s->hash();
   switch (hash & 3) {
     case 2:
-      HASH_EXISTS_STRING(0x4B27521443880CAELL, "index", 5);
+      HASH_REALPROP_TYPED_STRING(0x4B27521443880CAELL, "index", 5, index);
       break;
     case 3:
-      HASH_EXISTS_STRING(0x17AC96477E2B6DC3LL, "storage", 7);
+      HASH_REALPROP_STRING(0x17AC96477E2B6DC3LL, "storage", 7, storage);
       break;
     default:
       break;
   }
-  return o_existsPublic(s);
+  return o_realPropPublic(s, flags);
 }
-#endif // OMIT_JUMP_TABLE_CLASS_exists_PRIVATE_splobjectstorage
+#endif // OMIT_JUMP_TABLE_CLASS_realProp_PRIVATE_splobjectstorage
 #ifndef OMIT_JUMP_TABLE_CLASS_set_splobjectstorage
 Variant c_splobjectstorage::o_set(CStrRef prop, CVarRef v, bool forInit, CStrRef context) {
   CStrRef s = context.isNull() ? FrameInjection::GetClassName(false) : context;
diff --git a/src/system/gen/php/classes/stdclass.cpp b/src/system/gen/php/classes/stdclass.cpp
index 0547d0e2c4..efe8a20646 100644
--- a/src/system/gen/php/classes/stdclass.cpp
+++ b/src/system/gen/php/classes/stdclass.cpp
@@ -65,21 +65,21 @@ Variant c_stdclass::o_getPrivate(CStrRef s, bool error) {
   return o_getPublic(s, error);
 }
 #endif // OMIT_JUMP_TABLE_CLASS_get_PRIVATE_stdclass
-#ifndef OMIT_JUMP_TABLE_CLASS_exists_stdclass
-bool c_stdclass::o_exists(CStrRef prop, CStrRef context) const {
-  return o_existsPublic(prop);
+#ifndef OMIT_JUMP_TABLE_CLASS_realProp_stdclass
+Variant * c_stdclass::o_realProp(CStrRef prop, int flags, CStrRef context) const {
+  return o_realPropPublic(prop, flags);
 }
-#endif // OMIT_JUMP_TABLE_CLASS_exists_stdclass
-#ifndef OMIT_JUMP_TABLE_CLASS_exists_PUBLIC_stdclass
-bool c_stdclass::o_existsPublic(CStrRef s) const {
-  return c_ObjectData::o_existsPublic(s);
+#endif // OMIT_JUMP_TABLE_CLASS_realProp_stdclass
+#ifndef OMIT_JUMP_TABLE_CLASS_realProp_PUBLIC_stdclass
+Variant * c_stdclass::o_realPropPublic(CStrRef s, int flags) const {
+  return c_ObjectData::o_realPropPublic(s, flags);
 }
-#endif // OMIT_JUMP_TABLE_CLASS_exists_PUBLIC_stdclass
-#ifndef OMIT_JUMP_TABLE_CLASS_exists_PRIVATE_stdclass
-bool c_stdclass::o_existsPrivate(CStrRef s) const {
-  return o_existsPublic(s);
+#endif // OMIT_JUMP_TABLE_CLASS_realProp_PUBLIC_stdclass
+#ifndef OMIT_JUMP_TABLE_CLASS_realProp_PRIVATE_stdclass
+Variant * c_stdclass::o_realPropPrivate(CStrRef s, int flags) const {
+  return o_realPropPublic(s, flags);
 }
-#endif // OMIT_JUMP_TABLE_CLASS_exists_PRIVATE_stdclass
+#endif // OMIT_JUMP_TABLE_CLASS_realProp_PRIVATE_stdclass
 #ifndef OMIT_JUMP_TABLE_CLASS_set_stdclass
 Variant c_stdclass::o_set(CStrRef prop, CVarRef v, bool forInit, CStrRef context) {
   return o_setPublic(prop, v, forInit);
@@ -214,21 +214,21 @@ Variant c___php_incomplete_class::o_getPrivate(CStrRef s, bool error) {
   return o_getPublic(s, error);
 }
 #endif // OMIT_JUMP_TABLE_CLASS_get_PRIVATE___php_incomplete_class
-#ifndef OMIT_JUMP_TABLE_CLASS_exists___php_incomplete_class
-bool c___php_incomplete_class::o_exists(CStrRef prop, CStrRef context) const {
-  return o_existsPublic(prop);
+#ifndef OMIT_JUMP_TABLE_CLASS_realProp___php_incomplete_class
+Variant * c___php_incomplete_class::o_realProp(CStrRef prop, int flags, CStrRef context) const {
+  return o_realPropPublic(prop, flags);
 }
-#endif // OMIT_JUMP_TABLE_CLASS_exists___php_incomplete_class
-#ifndef OMIT_JUMP_TABLE_CLASS_exists_PUBLIC___php_incomplete_class
-bool c___php_incomplete_class::o_existsPublic(CStrRef s) const {
-  return c_ObjectData::o_existsPublic(s);
+#endif // OMIT_JUMP_TABLE_CLASS_realProp___php_incomplete_class
+#ifndef OMIT_JUMP_TABLE_CLASS_realProp_PUBLIC___php_incomplete_class
+Variant * c___php_incomplete_class::o_realPropPublic(CStrRef s, int flags) const {
+  return c_ObjectData::o_realPropPublic(s, flags);
 }
-#endif // OMIT_JUMP_TABLE_CLASS_exists_PUBLIC___php_incomplete_class
-#ifndef OMIT_JUMP_TABLE_CLASS_exists_PRIVATE___php_incomplete_class
-bool c___php_incomplete_class::o_existsPrivate(CStrRef s) const {
-  return o_existsPublic(s);
+#endif // OMIT_JUMP_TABLE_CLASS_realProp_PUBLIC___php_incomplete_class
+#ifndef OMIT_JUMP_TABLE_CLASS_realProp_PRIVATE___php_incomplete_class
+Variant * c___php_incomplete_class::o_realPropPrivate(CStrRef s, int flags) const {
+  return o_realPropPublic(s, flags);
 }
-#endif // OMIT_JUMP_TABLE_CLASS_exists_PRIVATE___php_incomplete_class
+#endif // OMIT_JUMP_TABLE_CLASS_realProp_PRIVATE___php_incomplete_class
 #ifndef OMIT_JUMP_TABLE_CLASS_set___php_incomplete_class
 Variant c___php_incomplete_class::o_set(CStrRef prop, CVarRef v, bool forInit, CStrRef context) {
   return o_setPublic(prop, v, forInit);
diff --git a/src/system/gen/sys/dynamic_table_class.no.cpp b/src/system/gen/sys/dynamic_table_class.no.cpp
index acfd5b1664..42266b3d67 100644
--- a/src/system/gen/sys/dynamic_table_class.no.cpp
+++ b/src/system/gen/sys/dynamic_table_class.no.cpp
@@ -523,21 +523,21 @@ Variant c_pdoexception::o_getPrivate(CStrRef s, bool error) {
   return o_getPublic(s, error);
 }
 #endif // OMIT_JUMP_TABLE_CLASS_get_PRIVATE_pdoexception
-#ifndef OMIT_JUMP_TABLE_CLASS_exists_pdoexception
-bool c_pdoexception::o_exists(CStrRef prop, CStrRef context) const {
-  return o_existsPublic(prop);
+#ifndef OMIT_JUMP_TABLE_CLASS_realProp_pdoexception
+Variant * c_pdoexception::o_realProp(CStrRef prop, int flags, CStrRef context) const {
+  return o_realPropPublic(prop, flags);
 }
-#endif // OMIT_JUMP_TABLE_CLASS_exists_pdoexception
-#ifndef OMIT_JUMP_TABLE_CLASS_exists_PUBLIC_pdoexception
-bool c_pdoexception::o_existsPublic(CStrRef s) const {
-  return c_exception::o_existsPublic(s);
+#endif // OMIT_JUMP_TABLE_CLASS_realProp_pdoexception
+#ifndef OMIT_JUMP_TABLE_CLASS_realProp_PUBLIC_pdoexception
+Variant * c_pdoexception::o_realPropPublic(CStrRef s, int flags) const {
+  return c_exception::o_realPropPublic(s, flags);
 }
-#endif // OMIT_JUMP_TABLE_CLASS_exists_PUBLIC_pdoexception
-#ifndef OMIT_JUMP_TABLE_CLASS_exists_PRIVATE_pdoexception
-bool c_pdoexception::o_existsPrivate(CStrRef s) const {
-  return o_existsPublic(s);
+#endif // OMIT_JUMP_TABLE_CLASS_realProp_PUBLIC_pdoexception
+#ifndef OMIT_JUMP_TABLE_CLASS_realProp_PRIVATE_pdoexception
+Variant * c_pdoexception::o_realPropPrivate(CStrRef s, int flags) const {
+  return o_realPropPublic(s, flags);
 }
-#endif // OMIT_JUMP_TABLE_CLASS_exists_PRIVATE_pdoexception
+#endif // OMIT_JUMP_TABLE_CLASS_realProp_PRIVATE_pdoexception
 #ifndef OMIT_JUMP_TABLE_CLASS_set_pdoexception
 Variant c_pdoexception::o_set(CStrRef prop, CVarRef v, bool forInit, CStrRef context) {
   return o_setPublic(prop, v, forInit);
@@ -1254,21 +1254,21 @@ Variant c_domdocumentfragment::o_getPrivate(CStrRef s, bool error) {
   return o_getPublic(s, error);
 }
 #endif // OMIT_JUMP_TABLE_CLASS_get_PRIVATE_domdocumentfragment
-#ifndef OMIT_JUMP_TABLE_CLASS_exists_domdocumentfragment
-bool c_domdocumentfragment::o_exists(CStrRef prop, CStrRef context) const {
-  return o_existsPublic(prop);
+#ifndef OMIT_JUMP_TABLE_CLASS_realProp_domdocumentfragment
+Variant * c_domdocumentfragment::o_realProp(CStrRef prop, int flags, CStrRef context) const {
+  return o_realPropPublic(prop, flags);
 }
-#endif // OMIT_JUMP_TABLE_CLASS_exists_domdocumentfragment
-#ifndef OMIT_JUMP_TABLE_CLASS_exists_PUBLIC_domdocumentfragment
-bool c_domdocumentfragment::o_existsPublic(CStrRef s) const {
-  return c_domnode::o_existsPublic(s);
+#endif // OMIT_JUMP_TABLE_CLASS_realProp_domdocumentfragment
+#ifndef OMIT_JUMP_TABLE_CLASS_realProp_PUBLIC_domdocumentfragment
+Variant * c_domdocumentfragment::o_realPropPublic(CStrRef s, int flags) const {
+  return c_domnode::o_realPropPublic(s, flags);
 }
-#endif // OMIT_JUMP_TABLE_CLASS_exists_PUBLIC_domdocumentfragment
-#ifndef OMIT_JUMP_TABLE_CLASS_exists_PRIVATE_domdocumentfragment
-bool c_domdocumentfragment::o_existsPrivate(CStrRef s) const {
-  return o_existsPublic(s);
+#endif // OMIT_JUMP_TABLE_CLASS_realProp_PUBLIC_domdocumentfragment
+#ifndef OMIT_JUMP_TABLE_CLASS_realProp_PRIVATE_domdocumentfragment
+Variant * c_domdocumentfragment::o_realPropPrivate(CStrRef s, int flags) const {
+  return o_realPropPublic(s, flags);
 }
-#endif // OMIT_JUMP_TABLE_CLASS_exists_PRIVATE_domdocumentfragment
+#endif // OMIT_JUMP_TABLE_CLASS_realProp_PRIVATE_domdocumentfragment
 #ifndef OMIT_JUMP_TABLE_CLASS_set_domdocumentfragment
 Variant c_domdocumentfragment::o_set(CStrRef prop, CVarRef v, bool forInit, CStrRef context) {
   return o_setPublic(prop, v, forInit);
@@ -3025,21 +3025,21 @@ Variant c_domtext::o_getPrivate(CStrRef s, bool error) {
   return o_getPublic(s, error);
 }
 #endif // OMIT_JUMP_TABLE_CLASS_get_PRIVATE_domtext
-#ifndef OMIT_JUMP_TABLE_CLASS_exists_domtext
-bool c_domtext::o_exists(CStrRef prop, CStrRef context) const {
-  return o_existsPublic(prop);
+#ifndef OMIT_JUMP_TABLE_CLASS_realProp_domtext
+Variant * c_domtext::o_realProp(CStrRef prop, int flags, CStrRef context) const {
+  return o_realPropPublic(prop, flags);
 }
-#endif // OMIT_JUMP_TABLE_CLASS_exists_domtext
-#ifndef OMIT_JUMP_TABLE_CLASS_exists_PUBLIC_domtext
-bool c_domtext::o_existsPublic(CStrRef s) const {
-  return c_domcharacterdata::o_existsPublic(s);
+#endif // OMIT_JUMP_TABLE_CLASS_realProp_domtext
+#ifndef OMIT_JUMP_TABLE_CLASS_realProp_PUBLIC_domtext
+Variant * c_domtext::o_realPropPublic(CStrRef s, int flags) const {
+  return c_domcharacterdata::o_realPropPublic(s, flags);
 }
-#endif // OMIT_JUMP_TABLE_CLASS_exists_PUBLIC_domtext
-#ifndef OMIT_JUMP_TABLE_CLASS_exists_PRIVATE_domtext
-bool c_domtext::o_existsPrivate(CStrRef s) const {
-  return o_existsPublic(s);
+#endif // OMIT_JUMP_TABLE_CLASS_realProp_PUBLIC_domtext
+#ifndef OMIT_JUMP_TABLE_CLASS_realProp_PRIVATE_domtext
+Variant * c_domtext::o_realPropPrivate(CStrRef s, int flags) const {
+  return o_realPropPublic(s, flags);
 }
-#endif // OMIT_JUMP_TABLE_CLASS_exists_PRIVATE_domtext
+#endif // OMIT_JUMP_TABLE_CLASS_realProp_PRIVATE_domtext
 #ifndef OMIT_JUMP_TABLE_CLASS_set_domtext
 Variant c_domtext::o_set(CStrRef prop, CVarRef v, bool forInit, CStrRef context) {
   return o_setPublic(prop, v, forInit);
@@ -5292,21 +5292,21 @@ Variant c_debuggerclient::o_getPrivate(CStrRef s, bool error) {
   return o_getPublic(s, error);
 }
 #endif // OMIT_JUMP_TABLE_CLASS_get_PRIVATE_debuggerclient
-#ifndef OMIT_JUMP_TABLE_CLASS_exists_debuggerclient
-bool c_debuggerclient::o_exists(CStrRef prop, CStrRef context) const {
-  return o_existsPublic(prop);
+#ifndef OMIT_JUMP_TABLE_CLASS_realProp_debuggerclient
+Variant * c_debuggerclient::o_realProp(CStrRef prop, int flags, CStrRef context) const {
+  return o_realPropPublic(prop, flags);
 }
-#endif // OMIT_JUMP_TABLE_CLASS_exists_debuggerclient
-#ifndef OMIT_JUMP_TABLE_CLASS_exists_PUBLIC_debuggerclient
-bool c_debuggerclient::o_existsPublic(CStrRef s) const {
-  return c_ObjectData::o_existsPublic(s);
+#endif // OMIT_JUMP_TABLE_CLASS_realProp_debuggerclient
+#ifndef OMIT_JUMP_TABLE_CLASS_realProp_PUBLIC_debuggerclient
+Variant * c_debuggerclient::o_realPropPublic(CStrRef s, int flags) const {
+  return c_ObjectData::o_realPropPublic(s, flags);
 }
-#endif // OMIT_JUMP_TABLE_CLASS_exists_PUBLIC_debuggerclient
-#ifndef OMIT_JUMP_TABLE_CLASS_exists_PRIVATE_debuggerclient
-bool c_debuggerclient::o_existsPrivate(CStrRef s) const {
-  return o_existsPublic(s);
+#endif // OMIT_JUMP_TABLE_CLASS_realProp_PUBLIC_debuggerclient
+#ifndef OMIT_JUMP_TABLE_CLASS_realProp_PRIVATE_debuggerclient
+Variant * c_debuggerclient::o_realPropPrivate(CStrRef s, int flags) const {
+  return o_realPropPublic(s, flags);
 }
-#endif // OMIT_JUMP_TABLE_CLASS_exists_PRIVATE_debuggerclient
+#endif // OMIT_JUMP_TABLE_CLASS_realProp_PRIVATE_debuggerclient
 #ifndef OMIT_JUMP_TABLE_CLASS_set_debuggerclient
 Variant c_debuggerclient::o_set(CStrRef prop, CVarRef v, bool forInit, CStrRef context) {
   return o_setPublic(prop, v, forInit);
@@ -7616,21 +7616,21 @@ Variant c_domcdatasection::o_getPrivate(CStrRef s, bool error) {
   return o_getPublic(s, error);
 }
 #endif // OMIT_JUMP_TABLE_CLASS_get_PRIVATE_domcdatasection
-#ifndef OMIT_JUMP_TABLE_CLASS_exists_domcdatasection
-bool c_domcdatasection::o_exists(CStrRef prop, CStrRef context) const {
-  return o_existsPublic(prop);
+#ifndef OMIT_JUMP_TABLE_CLASS_realProp_domcdatasection
+Variant * c_domcdatasection::o_realProp(CStrRef prop, int flags, CStrRef context) const {
+  return o_realPropPublic(prop, flags);
 }
-#endif // OMIT_JUMP_TABLE_CLASS_exists_domcdatasection
-#ifndef OMIT_JUMP_TABLE_CLASS_exists_PUBLIC_domcdatasection
-bool c_domcdatasection::o_existsPublic(CStrRef s) const {
-  return c_domtext::o_existsPublic(s);
+#endif // OMIT_JUMP_TABLE_CLASS_realProp_domcdatasection
+#ifndef OMIT_JUMP_TABLE_CLASS_realProp_PUBLIC_domcdatasection
+Variant * c_domcdatasection::o_realPropPublic(CStrRef s, int flags) const {
+  return c_domtext::o_realPropPublic(s, flags);
 }
-#endif // OMIT_JUMP_TABLE_CLASS_exists_PUBLIC_domcdatasection
-#ifndef OMIT_JUMP_TABLE_CLASS_exists_PRIVATE_domcdatasection
-bool c_domcdatasection::o_existsPrivate(CStrRef s) const {
-  return o_existsPublic(s);
+#endif // OMIT_JUMP_TABLE_CLASS_realProp_PUBLIC_domcdatasection
+#ifndef OMIT_JUMP_TABLE_CLASS_realProp_PRIVATE_domcdatasection
+Variant * c_domcdatasection::o_realPropPrivate(CStrRef s, int flags) const {
+  return o_realPropPublic(s, flags);
 }
-#endif // OMIT_JUMP_TABLE_CLASS_exists_PRIVATE_domcdatasection
+#endif // OMIT_JUMP_TABLE_CLASS_realProp_PRIVATE_domcdatasection
 #ifndef OMIT_JUMP_TABLE_CLASS_set_domcdatasection
 Variant c_domcdatasection::o_set(CStrRef prop, CVarRef v, bool forInit, CStrRef context) {
   return o_setPublic(prop, v, forInit);
@@ -9865,21 +9865,21 @@ Variant c_locale::o_getPrivate(CStrRef s, bool error) {
   return o_getPublic(s, error);
 }
 #endif // OMIT_JUMP_TABLE_CLASS_get_PRIVATE_locale
-#ifndef OMIT_JUMP_TABLE_CLASS_exists_locale
-bool c_locale::o_exists(CStrRef prop, CStrRef context) const {
-  return o_existsPublic(prop);
+#ifndef OMIT_JUMP_TABLE_CLASS_realProp_locale
+Variant * c_locale::o_realProp(CStrRef prop, int flags, CStrRef context) const {
+  return o_realPropPublic(prop, flags);
 }
-#endif // OMIT_JUMP_TABLE_CLASS_exists_locale
-#ifndef OMIT_JUMP_TABLE_CLASS_exists_PUBLIC_locale
-bool c_locale::o_existsPublic(CStrRef s) const {
-  return c_ObjectData::o_existsPublic(s);
+#endif // OMIT_JUMP_TABLE_CLASS_realProp_locale
+#ifndef OMIT_JUMP_TABLE_CLASS_realProp_PUBLIC_locale
+Variant * c_locale::o_realPropPublic(CStrRef s, int flags) const {
+  return c_ObjectData::o_realPropPublic(s, flags);
 }
-#endif // OMIT_JUMP_TABLE_CLASS_exists_PUBLIC_locale
-#ifndef OMIT_JUMP_TABLE_CLASS_exists_PRIVATE_locale
-bool c_locale::o_existsPrivate(CStrRef s) const {
-  return o_existsPublic(s);
+#endif // OMIT_JUMP_TABLE_CLASS_realProp_PUBLIC_locale
+#ifndef OMIT_JUMP_TABLE_CLASS_realProp_PRIVATE_locale
+Variant * c_locale::o_realPropPrivate(CStrRef s, int flags) const {
+  return o_realPropPublic(s, flags);
 }
-#endif // OMIT_JUMP_TABLE_CLASS_exists_PRIVATE_locale
+#endif // OMIT_JUMP_TABLE_CLASS_realProp_PRIVATE_locale
 #ifndef OMIT_JUMP_TABLE_CLASS_set_locale
 Variant c_locale::o_set(CStrRef prop, CVarRef v, bool forInit, CStrRef context) {
   return o_setPublic(prop, v, forInit);
@@ -10189,21 +10189,21 @@ Variant c_domdocumenttype::o_getPrivate(CStrRef s, bool error) {
   return o_getPublic(s, error);
 }
 #endif // OMIT_JUMP_TABLE_CLASS_get_PRIVATE_domdocumenttype
-#ifndef OMIT_JUMP_TABLE_CLASS_exists_domdocumenttype
-bool c_domdocumenttype::o_exists(CStrRef prop, CStrRef context) const {
-  return o_existsPublic(prop);
+#ifndef OMIT_JUMP_TABLE_CLASS_realProp_domdocumenttype
+Variant * c_domdocumenttype::o_realProp(CStrRef prop, int flags, CStrRef context) const {
+  return o_realPropPublic(prop, flags);
 }
-#endif // OMIT_JUMP_TABLE_CLASS_exists_domdocumenttype
-#ifndef OMIT_JUMP_TABLE_CLASS_exists_PUBLIC_domdocumenttype
-bool c_domdocumenttype::o_existsPublic(CStrRef s) const {
-  return c_domnode::o_existsPublic(s);
+#endif // OMIT_JUMP_TABLE_CLASS_realProp_domdocumenttype
+#ifndef OMIT_JUMP_TABLE_CLASS_realProp_PUBLIC_domdocumenttype
+Variant * c_domdocumenttype::o_realPropPublic(CStrRef s, int flags) const {
+  return c_domnode::o_realPropPublic(s, flags);
 }
-#endif // OMIT_JUMP_TABLE_CLASS_exists_PUBLIC_domdocumenttype
-#ifndef OMIT_JUMP_TABLE_CLASS_exists_PRIVATE_domdocumenttype
-bool c_domdocumenttype::o_existsPrivate(CStrRef s) const {
-  return o_existsPublic(s);
+#endif // OMIT_JUMP_TABLE_CLASS_realProp_PUBLIC_domdocumenttype
+#ifndef OMIT_JUMP_TABLE_CLASS_realProp_PRIVATE_domdocumenttype
+Variant * c_domdocumenttype::o_realPropPrivate(CStrRef s, int flags) const {
+  return o_realPropPublic(s, flags);
 }
-#endif // OMIT_JUMP_TABLE_CLASS_exists_PRIVATE_domdocumenttype
+#endif // OMIT_JUMP_TABLE_CLASS_realProp_PRIVATE_domdocumenttype
 #ifndef OMIT_JUMP_TABLE_CLASS_set_domdocumenttype
 Variant c_domdocumenttype::o_set(CStrRef prop, CVarRef v, bool forInit, CStrRef context) {
   return o_setPublic(prop, v, forInit);
@@ -11899,21 +11899,21 @@ Variant c_sqlite3stmt::o_getPrivate(CStrRef s, bool error) {
   return o_getPublic(s, error);
 }
 #endif // OMIT_JUMP_TABLE_CLASS_get_PRIVATE_sqlite3stmt
-#ifndef OMIT_JUMP_TABLE_CLASS_exists_sqlite3stmt
-bool c_sqlite3stmt::o_exists(CStrRef prop, CStrRef context) const {
-  return o_existsPublic(prop);
+#ifndef OMIT_JUMP_TABLE_CLASS_realProp_sqlite3stmt
+Variant * c_sqlite3stmt::o_realProp(CStrRef prop, int flags, CStrRef context) const {
+  return o_realPropPublic(prop, flags);
 }
-#endif // OMIT_JUMP_TABLE_CLASS_exists_sqlite3stmt
-#ifndef OMIT_JUMP_TABLE_CLASS_exists_PUBLIC_sqlite3stmt
-bool c_sqlite3stmt::o_existsPublic(CStrRef s) const {
-  return c_ObjectData::o_existsPublic(s);
+#endif // OMIT_JUMP_TABLE_CLASS_realProp_sqlite3stmt
+#ifndef OMIT_JUMP_TABLE_CLASS_realProp_PUBLIC_sqlite3stmt
+Variant * c_sqlite3stmt::o_realPropPublic(CStrRef s, int flags) const {
+  return c_ObjectData::o_realPropPublic(s, flags);
 }
-#endif // OMIT_JUMP_TABLE_CLASS_exists_PUBLIC_sqlite3stmt
-#ifndef OMIT_JUMP_TABLE_CLASS_exists_PRIVATE_sqlite3stmt
-bool c_sqlite3stmt::o_existsPrivate(CStrRef s) const {
-  return o_existsPublic(s);
+#endif // OMIT_JUMP_TABLE_CLASS_realProp_PUBLIC_sqlite3stmt
+#ifndef OMIT_JUMP_TABLE_CLASS_realProp_PRIVATE_sqlite3stmt
+Variant * c_sqlite3stmt::o_realPropPrivate(CStrRef s, int flags) const {
+  return o_realPropPublic(s, flags);
 }
-#endif // OMIT_JUMP_TABLE_CLASS_exists_PRIVATE_sqlite3stmt
+#endif // OMIT_JUMP_TABLE_CLASS_realProp_PRIVATE_sqlite3stmt
 #ifndef OMIT_JUMP_TABLE_CLASS_set_sqlite3stmt
 Variant c_sqlite3stmt::o_set(CStrRef prop, CVarRef v, bool forInit, CStrRef context) {
   return o_setPublic(prop, v, forInit);
@@ -12722,21 +12722,21 @@ Variant c_domnodelist::o_getPrivate(CStrRef s, bool error) {
   return o_getPublic(s, error);
 }
 #endif // OMIT_JUMP_TABLE_CLASS_get_PRIVATE_domnodelist
-#ifndef OMIT_JUMP_TABLE_CLASS_exists_domnodelist
-bool c_domnodelist::o_exists(CStrRef prop, CStrRef context) const {
-  return o_existsPublic(prop);
+#ifndef OMIT_JUMP_TABLE_CLASS_realProp_domnodelist
+Variant * c_domnodelist::o_realProp(CStrRef prop, int flags, CStrRef context) const {
+  return o_realPropPublic(prop, flags);
 }
-#endif // OMIT_JUMP_TABLE_CLASS_exists_domnodelist
-#ifndef OMIT_JUMP_TABLE_CLASS_exists_PUBLIC_domnodelist
-bool c_domnodelist::o_existsPublic(CStrRef s) const {
-  return c_ObjectData::o_existsPublic(s);
+#endif // OMIT_JUMP_TABLE_CLASS_realProp_domnodelist
+#ifndef OMIT_JUMP_TABLE_CLASS_realProp_PUBLIC_domnodelist
+Variant * c_domnodelist::o_realPropPublic(CStrRef s, int flags) const {
+  return c_ObjectData::o_realPropPublic(s, flags);
 }
-#endif // OMIT_JUMP_TABLE_CLASS_exists_PUBLIC_domnodelist
-#ifndef OMIT_JUMP_TABLE_CLASS_exists_PRIVATE_domnodelist
-bool c_domnodelist::o_existsPrivate(CStrRef s) const {
-  return o_existsPublic(s);
+#endif // OMIT_JUMP_TABLE_CLASS_realProp_PUBLIC_domnodelist
+#ifndef OMIT_JUMP_TABLE_CLASS_realProp_PRIVATE_domnodelist
+Variant * c_domnodelist::o_realPropPrivate(CStrRef s, int flags) const {
+  return o_realPropPublic(s, flags);
 }
-#endif // OMIT_JUMP_TABLE_CLASS_exists_PRIVATE_domnodelist
+#endif // OMIT_JUMP_TABLE_CLASS_realProp_PRIVATE_domnodelist
 #ifndef OMIT_JUMP_TABLE_CLASS_set_domnodelist
 Variant c_domnodelist::o_set(CStrRef prop, CVarRef v, bool forInit, CStrRef context) {
   return o_setPublic(prop, v, forInit);
@@ -13306,21 +13306,21 @@ Variant c_normalizer::o_getPrivate(CStrRef s, bool error) {
   return o_getPublic(s, error);
 }
 #endif // OMIT_JUMP_TABLE_CLASS_get_PRIVATE_normalizer
-#ifndef OMIT_JUMP_TABLE_CLASS_exists_normalizer
-bool c_normalizer::o_exists(CStrRef prop, CStrRef context) const {
-  return o_existsPublic(prop);
+#ifndef OMIT_JUMP_TABLE_CLASS_realProp_normalizer
+Variant * c_normalizer::o_realProp(CStrRef prop, int flags, CStrRef context) const {
+  return o_realPropPublic(prop, flags);
 }
-#endif // OMIT_JUMP_TABLE_CLASS_exists_normalizer
-#ifndef OMIT_JUMP_TABLE_CLASS_exists_PUBLIC_normalizer
-bool c_normalizer::o_existsPublic(CStrRef s) const {
-  return c_ObjectData::o_existsPublic(s);
+#endif // OMIT_JUMP_TABLE_CLASS_realProp_normalizer
+#ifndef OMIT_JUMP_TABLE_CLASS_realProp_PUBLIC_normalizer
+Variant * c_normalizer::o_realPropPublic(CStrRef s, int flags) const {
+  return c_ObjectData::o_realPropPublic(s, flags);
 }
-#endif // OMIT_JUMP_TABLE_CLASS_exists_PUBLIC_normalizer
-#ifndef OMIT_JUMP_TABLE_CLASS_exists_PRIVATE_normalizer
-bool c_normalizer::o_existsPrivate(CStrRef s) const {
-  return o_existsPublic(s);
+#endif // OMIT_JUMP_TABLE_CLASS_realProp_PUBLIC_normalizer
+#ifndef OMIT_JUMP_TABLE_CLASS_realProp_PRIVATE_normalizer
+Variant * c_normalizer::o_realPropPrivate(CStrRef s, int flags) const {
+  return o_realPropPublic(s, flags);
 }
-#endif // OMIT_JUMP_TABLE_CLASS_exists_PRIVATE_normalizer
+#endif // OMIT_JUMP_TABLE_CLASS_realProp_PRIVATE_normalizer
 #ifndef OMIT_JUMP_TABLE_CLASS_set_normalizer
 Variant c_normalizer::o_set(CStrRef prop, CVarRef v, bool forInit, CStrRef context) {
   return o_setPublic(prop, v, forInit);
@@ -13987,21 +13987,21 @@ Variant c_domcharacterdata::o_getPrivate(CStrRef s, bool error) {
   return o_getPublic(s, error);
 }
 #endif // OMIT_JUMP_TABLE_CLASS_get_PRIVATE_domcharacterdata
-#ifndef OMIT_JUMP_TABLE_CLASS_exists_domcharacterdata
-bool c_domcharacterdata::o_exists(CStrRef prop, CStrRef context) const {
-  return o_existsPublic(prop);
+#ifndef OMIT_JUMP_TABLE_CLASS_realProp_domcharacterdata
+Variant * c_domcharacterdata::o_realProp(CStrRef prop, int flags, CStrRef context) const {
+  return o_realPropPublic(prop, flags);
 }
-#endif // OMIT_JUMP_TABLE_CLASS_exists_domcharacterdata
-#ifndef OMIT_JUMP_TABLE_CLASS_exists_PUBLIC_domcharacterdata
-bool c_domcharacterdata::o_existsPublic(CStrRef s) const {
-  return c_domnode::o_existsPublic(s);
+#endif // OMIT_JUMP_TABLE_CLASS_realProp_domcharacterdata
+#ifndef OMIT_JUMP_TABLE_CLASS_realProp_PUBLIC_domcharacterdata
+Variant * c_domcharacterdata::o_realPropPublic(CStrRef s, int flags) const {
+  return c_domnode::o_realPropPublic(s, flags);
 }
-#endif // OMIT_JUMP_TABLE_CLASS_exists_PUBLIC_domcharacterdata
-#ifndef OMIT_JUMP_TABLE_CLASS_exists_PRIVATE_domcharacterdata
-bool c_domcharacterdata::o_existsPrivate(CStrRef s) const {
-  return o_existsPublic(s);
+#endif // OMIT_JUMP_TABLE_CLASS_realProp_PUBLIC_domcharacterdata
+#ifndef OMIT_JUMP_TABLE_CLASS_realProp_PRIVATE_domcharacterdata
+Variant * c_domcharacterdata::o_realPropPrivate(CStrRef s, int flags) const {
+  return o_realPropPublic(s, flags);
 }
-#endif // OMIT_JUMP_TABLE_CLASS_exists_PRIVATE_domcharacterdata
+#endif // OMIT_JUMP_TABLE_CLASS_realProp_PRIVATE_domcharacterdata
 #ifndef OMIT_JUMP_TABLE_CLASS_set_domcharacterdata
 Variant c_domcharacterdata::o_set(CStrRef prop, CVarRef v, bool forInit, CStrRef context) {
   return o_setPublic(prop, v, forInit);
@@ -16091,21 +16091,21 @@ Variant c_domentityreference::o_getPrivate(CStrRef s, bool error) {
   return o_getPublic(s, error);
 }
 #endif // OMIT_JUMP_TABLE_CLASS_get_PRIVATE_domentityreference
-#ifndef OMIT_JUMP_TABLE_CLASS_exists_domentityreference
-bool c_domentityreference::o_exists(CStrRef prop, CStrRef context) const {
-  return o_existsPublic(prop);
+#ifndef OMIT_JUMP_TABLE_CLASS_realProp_domentityreference
+Variant * c_domentityreference::o_realProp(CStrRef prop, int flags, CStrRef context) const {
+  return o_realPropPublic(prop, flags);
 }
-#endif // OMIT_JUMP_TABLE_CLASS_exists_domentityreference
-#ifndef OMIT_JUMP_TABLE_CLASS_exists_PUBLIC_domentityreference
-bool c_domentityreference::o_existsPublic(CStrRef s) const {
-  return c_domnode::o_existsPublic(s);
+#endif // OMIT_JUMP_TABLE_CLASS_realProp_domentityreference
+#ifndef OMIT_JUMP_TABLE_CLASS_realProp_PUBLIC_domentityreference
+Variant * c_domentityreference::o_realPropPublic(CStrRef s, int flags) const {
+  return c_domnode::o_realPropPublic(s, flags);
 }
-#endif // OMIT_JUMP_TABLE_CLASS_exists_PUBLIC_domentityreference
-#ifndef OMIT_JUMP_TABLE_CLASS_exists_PRIVATE_domentityreference
-bool c_domentityreference::o_existsPrivate(CStrRef s) const {
-  return o_existsPublic(s);
+#endif // OMIT_JUMP_TABLE_CLASS_realProp_PUBLIC_domentityreference
+#ifndef OMIT_JUMP_TABLE_CLASS_realProp_PRIVATE_domentityreference
+Variant * c_domentityreference::o_realPropPrivate(CStrRef s, int flags) const {
+  return o_realPropPublic(s, flags);
 }
-#endif // OMIT_JUMP_TABLE_CLASS_exists_PRIVATE_domentityreference
+#endif // OMIT_JUMP_TABLE_CLASS_realProp_PRIVATE_domentityreference
 #ifndef OMIT_JUMP_TABLE_CLASS_set_domentityreference
 Variant c_domentityreference::o_set(CStrRef prop, CVarRef v, bool forInit, CStrRef context) {
   return o_setPublic(prop, v, forInit);
@@ -17830,21 +17830,21 @@ Variant c_simplexmlelementiterator::o_getPrivate(CStrRef s, bool error) {
   return o_getPublic(s, error);
 }
 #endif // OMIT_JUMP_TABLE_CLASS_get_PRIVATE_simplexmlelementiterator
-#ifndef OMIT_JUMP_TABLE_CLASS_exists_simplexmlelementiterator
-bool c_simplexmlelementiterator::o_exists(CStrRef prop, CStrRef context) const {
-  return o_existsPublic(prop);
+#ifndef OMIT_JUMP_TABLE_CLASS_realProp_simplexmlelementiterator
+Variant * c_simplexmlelementiterator::o_realProp(CStrRef prop, int flags, CStrRef context) const {
+  return o_realPropPublic(prop, flags);
 }
-#endif // OMIT_JUMP_TABLE_CLASS_exists_simplexmlelementiterator
-#ifndef OMIT_JUMP_TABLE_CLASS_exists_PUBLIC_simplexmlelementiterator
-bool c_simplexmlelementiterator::o_existsPublic(CStrRef s) const {
-  return c_ObjectData::o_existsPublic(s);
+#endif // OMIT_JUMP_TABLE_CLASS_realProp_simplexmlelementiterator
+#ifndef OMIT_JUMP_TABLE_CLASS_realProp_PUBLIC_simplexmlelementiterator
+Variant * c_simplexmlelementiterator::o_realPropPublic(CStrRef s, int flags) const {
+  return c_ObjectData::o_realPropPublic(s, flags);
 }
-#endif // OMIT_JUMP_TABLE_CLASS_exists_PUBLIC_simplexmlelementiterator
-#ifndef OMIT_JUMP_TABLE_CLASS_exists_PRIVATE_simplexmlelementiterator
-bool c_simplexmlelementiterator::o_existsPrivate(CStrRef s) const {
-  return o_existsPublic(s);
+#endif // OMIT_JUMP_TABLE_CLASS_realProp_PUBLIC_simplexmlelementiterator
+#ifndef OMIT_JUMP_TABLE_CLASS_realProp_PRIVATE_simplexmlelementiterator
+Variant * c_simplexmlelementiterator::o_realPropPrivate(CStrRef s, int flags) const {
+  return o_realPropPublic(s, flags);
 }
-#endif // OMIT_JUMP_TABLE_CLASS_exists_PRIVATE_simplexmlelementiterator
+#endif // OMIT_JUMP_TABLE_CLASS_realProp_PRIVATE_simplexmlelementiterator
 #ifndef OMIT_JUMP_TABLE_CLASS_set_simplexmlelementiterator
 Variant c_simplexmlelementiterator::o_set(CStrRef prop, CVarRef v, bool forInit, CStrRef context) {
   return o_setPublic(prop, v, forInit);
@@ -18411,21 +18411,21 @@ Variant c_datetimezone::o_getPrivate(CStrRef s, bool error) {
   return o_getPublic(s, error);
 }
 #endif // OMIT_JUMP_TABLE_CLASS_get_PRIVATE_datetimezone
-#ifndef OMIT_JUMP_TABLE_CLASS_exists_datetimezone
-bool c_datetimezone::o_exists(CStrRef prop, CStrRef context) const {
-  return o_existsPublic(prop);
+#ifndef OMIT_JUMP_TABLE_CLASS_realProp_datetimezone
+Variant * c_datetimezone::o_realProp(CStrRef prop, int flags, CStrRef context) const {
+  return o_realPropPublic(prop, flags);
 }
-#endif // OMIT_JUMP_TABLE_CLASS_exists_datetimezone
-#ifndef OMIT_JUMP_TABLE_CLASS_exists_PUBLIC_datetimezone
-bool c_datetimezone::o_existsPublic(CStrRef s) const {
-  return c_ObjectData::o_existsPublic(s);
+#endif // OMIT_JUMP_TABLE_CLASS_realProp_datetimezone
+#ifndef OMIT_JUMP_TABLE_CLASS_realProp_PUBLIC_datetimezone
+Variant * c_datetimezone::o_realPropPublic(CStrRef s, int flags) const {
+  return c_ObjectData::o_realPropPublic(s, flags);
 }
-#endif // OMIT_JUMP_TABLE_CLASS_exists_PUBLIC_datetimezone
-#ifndef OMIT_JUMP_TABLE_CLASS_exists_PRIVATE_datetimezone
-bool c_datetimezone::o_existsPrivate(CStrRef s) const {
-  return o_existsPublic(s);
+#endif // OMIT_JUMP_TABLE_CLASS_realProp_PUBLIC_datetimezone
+#ifndef OMIT_JUMP_TABLE_CLASS_realProp_PRIVATE_datetimezone
+Variant * c_datetimezone::o_realPropPrivate(CStrRef s, int flags) const {
+  return o_realPropPublic(s, flags);
 }
-#endif // OMIT_JUMP_TABLE_CLASS_exists_PRIVATE_datetimezone
+#endif // OMIT_JUMP_TABLE_CLASS_realProp_PRIVATE_datetimezone
 #ifndef OMIT_JUMP_TABLE_CLASS_set_datetimezone
 Variant c_datetimezone::o_set(CStrRef prop, CVarRef v, bool forInit, CStrRef context) {
   return o_setPublic(prop, v, forInit);
@@ -19177,21 +19177,21 @@ Variant c_domnodeiterator::o_getPrivate(CStrRef s, bool error) {
   return o_getPublic(s, error);
 }
 #endif // OMIT_JUMP_TABLE_CLASS_get_PRIVATE_domnodeiterator
-#ifndef OMIT_JUMP_TABLE_CLASS_exists_domnodeiterator
-bool c_domnodeiterator::o_exists(CStrRef prop, CStrRef context) const {
-  return o_existsPublic(prop);
+#ifndef OMIT_JUMP_TABLE_CLASS_realProp_domnodeiterator
+Variant * c_domnodeiterator::o_realProp(CStrRef prop, int flags, CStrRef context) const {
+  return o_realPropPublic(prop, flags);
 }
-#endif // OMIT_JUMP_TABLE_CLASS_exists_domnodeiterator
-#ifndef OMIT_JUMP_TABLE_CLASS_exists_PUBLIC_domnodeiterator
-bool c_domnodeiterator::o_existsPublic(CStrRef s) const {
-  return c_ObjectData::o_existsPublic(s);
+#endif // OMIT_JUMP_TABLE_CLASS_realProp_domnodeiterator
+#ifndef OMIT_JUMP_TABLE_CLASS_realProp_PUBLIC_domnodeiterator
+Variant * c_domnodeiterator::o_realPropPublic(CStrRef s, int flags) const {
+  return c_ObjectData::o_realPropPublic(s, flags);
 }
-#endif // OMIT_JUMP_TABLE_CLASS_exists_PUBLIC_domnodeiterator
-#ifndef OMIT_JUMP_TABLE_CLASS_exists_PRIVATE_domnodeiterator
-bool c_domnodeiterator::o_existsPrivate(CStrRef s) const {
-  return o_existsPublic(s);
+#endif // OMIT_JUMP_TABLE_CLASS_realProp_PUBLIC_domnodeiterator
+#ifndef OMIT_JUMP_TABLE_CLASS_realProp_PRIVATE_domnodeiterator
+Variant * c_domnodeiterator::o_realPropPrivate(CStrRef s, int flags) const {
+  return o_realPropPublic(s, flags);
 }
-#endif // OMIT_JUMP_TABLE_CLASS_exists_PRIVATE_domnodeiterator
+#endif // OMIT_JUMP_TABLE_CLASS_realProp_PRIVATE_domnodeiterator
 #ifndef OMIT_JUMP_TABLE_CLASS_set_domnodeiterator
 Variant c_domnodeiterator::o_set(CStrRef prop, CVarRef v, bool forInit, CStrRef context) {
   return o_setPublic(prop, v, forInit);
@@ -19758,21 +19758,21 @@ Variant c_domimplementation::o_getPrivate(CStrRef s, bool error) {
   return o_getPublic(s, error);
 }
 #endif // OMIT_JUMP_TABLE_CLASS_get_PRIVATE_domimplementation
-#ifndef OMIT_JUMP_TABLE_CLASS_exists_domimplementation
-bool c_domimplementation::o_exists(CStrRef prop, CStrRef context) const {
-  return o_existsPublic(prop);
+#ifndef OMIT_JUMP_TABLE_CLASS_realProp_domimplementation
+Variant * c_domimplementation::o_realProp(CStrRef prop, int flags, CStrRef context) const {
+  return o_realPropPublic(prop, flags);
 }
-#endif // OMIT_JUMP_TABLE_CLASS_exists_domimplementation
-#ifndef OMIT_JUMP_TABLE_CLASS_exists_PUBLIC_domimplementation
-bool c_domimplementation::o_existsPublic(CStrRef s) const {
-  return c_ObjectData::o_existsPublic(s);
+#endif // OMIT_JUMP_TABLE_CLASS_realProp_domimplementation
+#ifndef OMIT_JUMP_TABLE_CLASS_realProp_PUBLIC_domimplementation
+Variant * c_domimplementation::o_realPropPublic(CStrRef s, int flags) const {
+  return c_ObjectData::o_realPropPublic(s, flags);
 }
-#endif // OMIT_JUMP_TABLE_CLASS_exists_PUBLIC_domimplementation
-#ifndef OMIT_JUMP_TABLE_CLASS_exists_PRIVATE_domimplementation
-bool c_domimplementation::o_existsPrivate(CStrRef s) const {
-  return o_existsPublic(s);
+#endif // OMIT_JUMP_TABLE_CLASS_realProp_PUBLIC_domimplementation
+#ifndef OMIT_JUMP_TABLE_CLASS_realProp_PRIVATE_domimplementation
+Variant * c_domimplementation::o_realPropPrivate(CStrRef s, int flags) const {
+  return o_realPropPublic(s, flags);
 }
-#endif // OMIT_JUMP_TABLE_CLASS_exists_PRIVATE_domimplementation
+#endif // OMIT_JUMP_TABLE_CLASS_realProp_PRIVATE_domimplementation
 #ifndef OMIT_JUMP_TABLE_CLASS_set_domimplementation
 Variant c_domimplementation::o_set(CStrRef prop, CVarRef v, bool forInit, CStrRef context) {
   return o_setPublic(prop, v, forInit);
@@ -20363,21 +20363,21 @@ Variant c_soapheader::o_getPrivate(CStrRef s, bool error) {
   return o_getPublic(s, error);
 }
 #endif // OMIT_JUMP_TABLE_CLASS_get_PRIVATE_soapheader
-#ifndef OMIT_JUMP_TABLE_CLASS_exists_soapheader
-bool c_soapheader::o_exists(CStrRef prop, CStrRef context) const {
-  return o_existsPublic(prop);
+#ifndef OMIT_JUMP_TABLE_CLASS_realProp_soapheader
+Variant * c_soapheader::o_realProp(CStrRef prop, int flags, CStrRef context) const {
+  return o_realPropPublic(prop, flags);
 }
-#endif // OMIT_JUMP_TABLE_CLASS_exists_soapheader
-#ifndef OMIT_JUMP_TABLE_CLASS_exists_PUBLIC_soapheader
-bool c_soapheader::o_existsPublic(CStrRef s) const {
-  return c_ObjectData::o_existsPublic(s);
+#endif // OMIT_JUMP_TABLE_CLASS_realProp_soapheader
+#ifndef OMIT_JUMP_TABLE_CLASS_realProp_PUBLIC_soapheader
+Variant * c_soapheader::o_realPropPublic(CStrRef s, int flags) const {
+  return c_ObjectData::o_realPropPublic(s, flags);
 }
-#endif // OMIT_JUMP_TABLE_CLASS_exists_PUBLIC_soapheader
-#ifndef OMIT_JUMP_TABLE_CLASS_exists_PRIVATE_soapheader
-bool c_soapheader::o_existsPrivate(CStrRef s) const {
-  return o_existsPublic(s);
+#endif // OMIT_JUMP_TABLE_CLASS_realProp_PUBLIC_soapheader
+#ifndef OMIT_JUMP_TABLE_CLASS_realProp_PRIVATE_soapheader
+Variant * c_soapheader::o_realPropPrivate(CStrRef s, int flags) const {
+  return o_realPropPublic(s, flags);
 }
-#endif // OMIT_JUMP_TABLE_CLASS_exists_PRIVATE_soapheader
+#endif // OMIT_JUMP_TABLE_CLASS_realProp_PRIVATE_soapheader
 #ifndef OMIT_JUMP_TABLE_CLASS_set_soapheader
 Variant c_soapheader::o_set(CStrRef prop, CVarRef v, bool forInit, CStrRef context) {
   return o_setPublic(prop, v, forInit);
@@ -20819,21 +20819,21 @@ Variant c_domnotation::o_getPrivate(CStrRef s, bool error) {
   return o_getPublic(s, error);
 }
 #endif // OMIT_JUMP_TABLE_CLASS_get_PRIVATE_domnotation
-#ifndef OMIT_JUMP_TABLE_CLASS_exists_domnotation
-bool c_domnotation::o_exists(CStrRef prop, CStrRef context) const {
-  return o_existsPublic(prop);
+#ifndef OMIT_JUMP_TABLE_CLASS_realProp_domnotation
+Variant * c_domnotation::o_realProp(CStrRef prop, int flags, CStrRef context) const {
+  return o_realPropPublic(prop, flags);
 }
-#endif // OMIT_JUMP_TABLE_CLASS_exists_domnotation
-#ifndef OMIT_JUMP_TABLE_CLASS_exists_PUBLIC_domnotation
-bool c_domnotation::o_existsPublic(CStrRef s) const {
-  return c_domnode::o_existsPublic(s);
+#endif // OMIT_JUMP_TABLE_CLASS_realProp_domnotation
+#ifndef OMIT_JUMP_TABLE_CLASS_realProp_PUBLIC_domnotation
+Variant * c_domnotation::o_realPropPublic(CStrRef s, int flags) const {
+  return c_domnode::o_realPropPublic(s, flags);
 }
-#endif // OMIT_JUMP_TABLE_CLASS_exists_PUBLIC_domnotation
-#ifndef OMIT_JUMP_TABLE_CLASS_exists_PRIVATE_domnotation
-bool c_domnotation::o_existsPrivate(CStrRef s) const {
-  return o_existsPublic(s);
+#endif // OMIT_JUMP_TABLE_CLASS_realProp_PUBLIC_domnotation
+#ifndef OMIT_JUMP_TABLE_CLASS_realProp_PRIVATE_domnotation
+Variant * c_domnotation::o_realPropPrivate(CStrRef s, int flags) const {
+  return o_realPropPublic(s, flags);
 }
-#endif // OMIT_JUMP_TABLE_CLASS_exists_PRIVATE_domnotation
+#endif // OMIT_JUMP_TABLE_CLASS_realProp_PRIVATE_domnotation
 #ifndef OMIT_JUMP_TABLE_CLASS_set_domnotation
 Variant c_domnotation::o_set(CStrRef prop, CVarRef v, bool forInit, CStrRef context) {
   return o_setPublic(prop, v, forInit);
@@ -22529,21 +22529,21 @@ Variant c_debuggerproxy::o_getPrivate(CStrRef s, bool error) {
   return o_getPublic(s, error);
 }
 #endif // OMIT_JUMP_TABLE_CLASS_get_PRIVATE_debuggerproxy
-#ifndef OMIT_JUMP_TABLE_CLASS_exists_debuggerproxy
-bool c_debuggerproxy::o_exists(CStrRef prop, CStrRef context) const {
-  return o_existsPublic(prop);
+#ifndef OMIT_JUMP_TABLE_CLASS_realProp_debuggerproxy
+Variant * c_debuggerproxy::o_realProp(CStrRef prop, int flags, CStrRef context) const {
+  return o_realPropPublic(prop, flags);
 }
-#endif // OMIT_JUMP_TABLE_CLASS_exists_debuggerproxy
-#ifndef OMIT_JUMP_TABLE_CLASS_exists_PUBLIC_debuggerproxy
-bool c_debuggerproxy::o_existsPublic(CStrRef s) const {
-  return c_ObjectData::o_existsPublic(s);
+#endif // OMIT_JUMP_TABLE_CLASS_realProp_debuggerproxy
+#ifndef OMIT_JUMP_TABLE_CLASS_realProp_PUBLIC_debuggerproxy
+Variant * c_debuggerproxy::o_realPropPublic(CStrRef s, int flags) const {
+  return c_ObjectData::o_realPropPublic(s, flags);
 }
-#endif // OMIT_JUMP_TABLE_CLASS_exists_PUBLIC_debuggerproxy
-#ifndef OMIT_JUMP_TABLE_CLASS_exists_PRIVATE_debuggerproxy
-bool c_debuggerproxy::o_existsPrivate(CStrRef s) const {
-  return o_existsPublic(s);
+#endif // OMIT_JUMP_TABLE_CLASS_realProp_PUBLIC_debuggerproxy
+#ifndef OMIT_JUMP_TABLE_CLASS_realProp_PRIVATE_debuggerproxy
+Variant * c_debuggerproxy::o_realPropPrivate(CStrRef s, int flags) const {
+  return o_realPropPublic(s, flags);
 }
-#endif // OMIT_JUMP_TABLE_CLASS_exists_PRIVATE_debuggerproxy
+#endif // OMIT_JUMP_TABLE_CLASS_realProp_PRIVATE_debuggerproxy
 #ifndef OMIT_JUMP_TABLE_CLASS_set_debuggerproxy
 Variant c_debuggerproxy::o_set(CStrRef prop, CVarRef v, bool forInit, CStrRef context) {
   return o_setPublic(prop, v, forInit);
@@ -22972,21 +22972,21 @@ Variant c_domcomment::o_getPrivate(CStrRef s, bool error) {
   return o_getPublic(s, error);
 }
 #endif // OMIT_JUMP_TABLE_CLASS_get_PRIVATE_domcomment
-#ifndef OMIT_JUMP_TABLE_CLASS_exists_domcomment
-bool c_domcomment::o_exists(CStrRef prop, CStrRef context) const {
-  return o_existsPublic(prop);
+#ifndef OMIT_JUMP_TABLE_CLASS_realProp_domcomment
+Variant * c_domcomment::o_realProp(CStrRef prop, int flags, CStrRef context) const {
+  return o_realPropPublic(prop, flags);
 }
-#endif // OMIT_JUMP_TABLE_CLASS_exists_domcomment
-#ifndef OMIT_JUMP_TABLE_CLASS_exists_PUBLIC_domcomment
-bool c_domcomment::o_existsPublic(CStrRef s) const {
-  return c_domcharacterdata::o_existsPublic(s);
+#endif // OMIT_JUMP_TABLE_CLASS_realProp_domcomment
+#ifndef OMIT_JUMP_TABLE_CLASS_realProp_PUBLIC_domcomment
+Variant * c_domcomment::o_realPropPublic(CStrRef s, int flags) const {
+  return c_domcharacterdata::o_realPropPublic(s, flags);
 }
-#endif // OMIT_JUMP_TABLE_CLASS_exists_PUBLIC_domcomment
-#ifndef OMIT_JUMP_TABLE_CLASS_exists_PRIVATE_domcomment
-bool c_domcomment::o_existsPrivate(CStrRef s) const {
-  return o_existsPublic(s);
+#endif // OMIT_JUMP_TABLE_CLASS_realProp_PUBLIC_domcomment
+#ifndef OMIT_JUMP_TABLE_CLASS_realProp_PRIVATE_domcomment
+Variant * c_domcomment::o_realPropPrivate(CStrRef s, int flags) const {
+  return o_realPropPublic(s, flags);
 }
-#endif // OMIT_JUMP_TABLE_CLASS_exists_PRIVATE_domcomment
+#endif // OMIT_JUMP_TABLE_CLASS_realProp_PRIVATE_domcomment
 #ifndef OMIT_JUMP_TABLE_CLASS_set_domcomment
 Variant c_domcomment::o_set(CStrRef prop, CVarRef v, bool forInit, CStrRef context) {
   return o_setPublic(prop, v, forInit);
@@ -25120,21 +25120,21 @@ Variant c_sqlite3::o_getPrivate(CStrRef s, bool error) {
   return o_getPublic(s, error);
 }
 #endif // OMIT_JUMP_TABLE_CLASS_get_PRIVATE_sqlite3
-#ifndef OMIT_JUMP_TABLE_CLASS_exists_sqlite3
-bool c_sqlite3::o_exists(CStrRef prop, CStrRef context) const {
-  return o_existsPublic(prop);
+#ifndef OMIT_JUMP_TABLE_CLASS_realProp_sqlite3
+Variant * c_sqlite3::o_realProp(CStrRef prop, int flags, CStrRef context) const {
+  return o_realPropPublic(prop, flags);
 }
-#endif // OMIT_JUMP_TABLE_CLASS_exists_sqlite3
-#ifndef OMIT_JUMP_TABLE_CLASS_exists_PUBLIC_sqlite3
-bool c_sqlite3::o_existsPublic(CStrRef s) const {
-  return c_ObjectData::o_existsPublic(s);
+#endif // OMIT_JUMP_TABLE_CLASS_realProp_sqlite3
+#ifndef OMIT_JUMP_TABLE_CLASS_realProp_PUBLIC_sqlite3
+Variant * c_sqlite3::o_realPropPublic(CStrRef s, int flags) const {
+  return c_ObjectData::o_realPropPublic(s, flags);
 }
-#endif // OMIT_JUMP_TABLE_CLASS_exists_PUBLIC_sqlite3
-#ifndef OMIT_JUMP_TABLE_CLASS_exists_PRIVATE_sqlite3
-bool c_sqlite3::o_existsPrivate(CStrRef s) const {
-  return o_existsPublic(s);
+#endif // OMIT_JUMP_TABLE_CLASS_realProp_PUBLIC_sqlite3
+#ifndef OMIT_JUMP_TABLE_CLASS_realProp_PRIVATE_sqlite3
+Variant * c_sqlite3::o_realPropPrivate(CStrRef s, int flags) const {
+  return o_realPropPublic(s, flags);
 }
-#endif // OMIT_JUMP_TABLE_CLASS_exists_PRIVATE_sqlite3
+#endif // OMIT_JUMP_TABLE_CLASS_realProp_PRIVATE_sqlite3
 #ifndef OMIT_JUMP_TABLE_CLASS_set_sqlite3
 Variant c_sqlite3::o_set(CStrRef prop, CVarRef v, bool forInit, CStrRef context) {
   return o_setPublic(prop, v, forInit);
@@ -26593,21 +26593,21 @@ Variant c_domattr::o_getPrivate(CStrRef s, bool error) {
   return o_getPublic(s, error);
 }
 #endif // OMIT_JUMP_TABLE_CLASS_get_PRIVATE_domattr
-#ifndef OMIT_JUMP_TABLE_CLASS_exists_domattr
-bool c_domattr::o_exists(CStrRef prop, CStrRef context) const {
-  return o_existsPublic(prop);
+#ifndef OMIT_JUMP_TABLE_CLASS_realProp_domattr
+Variant * c_domattr::o_realProp(CStrRef prop, int flags, CStrRef context) const {
+  return o_realPropPublic(prop, flags);
 }
-#endif // OMIT_JUMP_TABLE_CLASS_exists_domattr
-#ifndef OMIT_JUMP_TABLE_CLASS_exists_PUBLIC_domattr
-bool c_domattr::o_existsPublic(CStrRef s) const {
-  return c_domnode::o_existsPublic(s);
+#endif // OMIT_JUMP_TABLE_CLASS_realProp_domattr
+#ifndef OMIT_JUMP_TABLE_CLASS_realProp_PUBLIC_domattr
+Variant * c_domattr::o_realPropPublic(CStrRef s, int flags) const {
+  return c_domnode::o_realPropPublic(s, flags);
 }
-#endif // OMIT_JUMP_TABLE_CLASS_exists_PUBLIC_domattr
-#ifndef OMIT_JUMP_TABLE_CLASS_exists_PRIVATE_domattr
-bool c_domattr::o_existsPrivate(CStrRef s) const {
-  return o_existsPublic(s);
+#endif // OMIT_JUMP_TABLE_CLASS_realProp_PUBLIC_domattr
+#ifndef OMIT_JUMP_TABLE_CLASS_realProp_PRIVATE_domattr
+Variant * c_domattr::o_realPropPrivate(CStrRef s, int flags) const {
+  return o_realPropPublic(s, flags);
 }
-#endif // OMIT_JUMP_TABLE_CLASS_exists_PRIVATE_domattr
+#endif // OMIT_JUMP_TABLE_CLASS_realProp_PRIVATE_domattr
 #ifndef OMIT_JUMP_TABLE_CLASS_set_domattr
 Variant c_domattr::o_set(CStrRef prop, CVarRef v, bool forInit, CStrRef context) {
   return o_setPublic(prop, v, forInit);
@@ -28412,21 +28412,21 @@ Variant c_soapvar::o_getPrivate(CStrRef s, bool error) {
   return o_getPublic(s, error);
 }
 #endif // OMIT_JUMP_TABLE_CLASS_get_PRIVATE_soapvar
-#ifndef OMIT_JUMP_TABLE_CLASS_exists_soapvar
-bool c_soapvar::o_exists(CStrRef prop, CStrRef context) const {
-  return o_existsPublic(prop);
+#ifndef OMIT_JUMP_TABLE_CLASS_realProp_soapvar
+Variant * c_soapvar::o_realProp(CStrRef prop, int flags, CStrRef context) const {
+  return o_realPropPublic(prop, flags);
 }
-#endif // OMIT_JUMP_TABLE_CLASS_exists_soapvar
-#ifndef OMIT_JUMP_TABLE_CLASS_exists_PUBLIC_soapvar
-bool c_soapvar::o_existsPublic(CStrRef s) const {
-  return c_ObjectData::o_existsPublic(s);
+#endif // OMIT_JUMP_TABLE_CLASS_realProp_soapvar
+#ifndef OMIT_JUMP_TABLE_CLASS_realProp_PUBLIC_soapvar
+Variant * c_soapvar::o_realPropPublic(CStrRef s, int flags) const {
+  return c_ObjectData::o_realPropPublic(s, flags);
 }
-#endif // OMIT_JUMP_TABLE_CLASS_exists_PUBLIC_soapvar
-#ifndef OMIT_JUMP_TABLE_CLASS_exists_PRIVATE_soapvar
-bool c_soapvar::o_existsPrivate(CStrRef s) const {
-  return o_existsPublic(s);
+#endif // OMIT_JUMP_TABLE_CLASS_realProp_PUBLIC_soapvar
+#ifndef OMIT_JUMP_TABLE_CLASS_realProp_PRIVATE_soapvar
+Variant * c_soapvar::o_realPropPrivate(CStrRef s, int flags) const {
+  return o_realPropPublic(s, flags);
 }
-#endif // OMIT_JUMP_TABLE_CLASS_exists_PRIVATE_soapvar
+#endif // OMIT_JUMP_TABLE_CLASS_realProp_PRIVATE_soapvar
 #ifndef OMIT_JUMP_TABLE_CLASS_set_soapvar
 Variant c_soapvar::o_set(CStrRef prop, CVarRef v, bool forInit, CStrRef context) {
   return o_setPublic(prop, v, forInit);
@@ -28899,21 +28899,21 @@ Variant c_domnamednodemap::o_getPrivate(CStrRef s, bool error) {
   return o_getPublic(s, error);
 }
 #endif // OMIT_JUMP_TABLE_CLASS_get_PRIVATE_domnamednodemap
-#ifndef OMIT_JUMP_TABLE_CLASS_exists_domnamednodemap
-bool c_domnamednodemap::o_exists(CStrRef prop, CStrRef context) const {
-  return o_existsPublic(prop);
+#ifndef OMIT_JUMP_TABLE_CLASS_realProp_domnamednodemap
+Variant * c_domnamednodemap::o_realProp(CStrRef prop, int flags, CStrRef context) const {
+  return o_realPropPublic(prop, flags);
 }
-#endif // OMIT_JUMP_TABLE_CLASS_exists_domnamednodemap
-#ifndef OMIT_JUMP_TABLE_CLASS_exists_PUBLIC_domnamednodemap
-bool c_domnamednodemap::o_existsPublic(CStrRef s) const {
-  return c_ObjectData::o_existsPublic(s);
+#endif // OMIT_JUMP_TABLE_CLASS_realProp_domnamednodemap
+#ifndef OMIT_JUMP_TABLE_CLASS_realProp_PUBLIC_domnamednodemap
+Variant * c_domnamednodemap::o_realPropPublic(CStrRef s, int flags) const {
+  return c_ObjectData::o_realPropPublic(s, flags);
 }
-#endif // OMIT_JUMP_TABLE_CLASS_exists_PUBLIC_domnamednodemap
-#ifndef OMIT_JUMP_TABLE_CLASS_exists_PRIVATE_domnamednodemap
-bool c_domnamednodemap::o_existsPrivate(CStrRef s) const {
-  return o_existsPublic(s);
+#endif // OMIT_JUMP_TABLE_CLASS_realProp_PUBLIC_domnamednodemap
+#ifndef OMIT_JUMP_TABLE_CLASS_realProp_PRIVATE_domnamednodemap
+Variant * c_domnamednodemap::o_realPropPrivate(CStrRef s, int flags) const {
+  return o_realPropPublic(s, flags);
 }
-#endif // OMIT_JUMP_TABLE_CLASS_exists_PRIVATE_domnamednodemap
+#endif // OMIT_JUMP_TABLE_CLASS_realProp_PRIVATE_domnamednodemap
 #ifndef OMIT_JUMP_TABLE_CLASS_set_domnamednodemap
 Variant c_domnamednodemap::o_set(CStrRef prop, CVarRef v, bool forInit, CStrRef context) {
   return o_setPublic(prop, v, forInit);
@@ -29633,21 +29633,21 @@ Variant c_sqlite3result::o_getPrivate(CStrRef s, bool error) {
   return o_getPublic(s, error);
 }
 #endif // OMIT_JUMP_TABLE_CLASS_get_PRIVATE_sqlite3result
-#ifndef OMIT_JUMP_TABLE_CLASS_exists_sqlite3result
-bool c_sqlite3result::o_exists(CStrRef prop, CStrRef context) const {
-  return o_existsPublic(prop);
+#ifndef OMIT_JUMP_TABLE_CLASS_realProp_sqlite3result
+Variant * c_sqlite3result::o_realProp(CStrRef prop, int flags, CStrRef context) const {
+  return o_realPropPublic(prop, flags);
 }
-#endif // OMIT_JUMP_TABLE_CLASS_exists_sqlite3result
-#ifndef OMIT_JUMP_TABLE_CLASS_exists_PUBLIC_sqlite3result
-bool c_sqlite3result::o_existsPublic(CStrRef s) const {
-  return c_ObjectData::o_existsPublic(s);
+#endif // OMIT_JUMP_TABLE_CLASS_realProp_sqlite3result
+#ifndef OMIT_JUMP_TABLE_CLASS_realProp_PUBLIC_sqlite3result
+Variant * c_sqlite3result::o_realPropPublic(CStrRef s, int flags) const {
+  return c_ObjectData::o_realPropPublic(s, flags);
 }
-#endif // OMIT_JUMP_TABLE_CLASS_exists_PUBLIC_sqlite3result
-#ifndef OMIT_JUMP_TABLE_CLASS_exists_PRIVATE_sqlite3result
-bool c_sqlite3result::o_existsPrivate(CStrRef s) const {
-  return o_existsPublic(s);
+#endif // OMIT_JUMP_TABLE_CLASS_realProp_PUBLIC_sqlite3result
+#ifndef OMIT_JUMP_TABLE_CLASS_realProp_PRIVATE_sqlite3result
+Variant * c_sqlite3result::o_realPropPrivate(CStrRef s, int flags) const {
+  return o_realPropPublic(s, flags);
 }
-#endif // OMIT_JUMP_TABLE_CLASS_exists_PRIVATE_sqlite3result
+#endif // OMIT_JUMP_TABLE_CLASS_realProp_PRIVATE_sqlite3result
 #ifndef OMIT_JUMP_TABLE_CLASS_set_sqlite3result
 Variant c_sqlite3result::o_set(CStrRef prop, CVarRef v, bool forInit, CStrRef context) {
   return o_setPublic(prop, v, forInit);
@@ -30326,21 +30326,21 @@ Variant c_simplexmlelement::o_getPrivate(CStrRef s, bool error) {
   return o_getPublic(s, error);
 }
 #endif // OMIT_JUMP_TABLE_CLASS_get_PRIVATE_simplexmlelement
-#ifndef OMIT_JUMP_TABLE_CLASS_exists_simplexmlelement
-bool c_simplexmlelement::o_exists(CStrRef prop, CStrRef context) const {
-  return o_existsPublic(prop);
+#ifndef OMIT_JUMP_TABLE_CLASS_realProp_simplexmlelement
+Variant * c_simplexmlelement::o_realProp(CStrRef prop, int flags, CStrRef context) const {
+  return o_realPropPublic(prop, flags);
 }
-#endif // OMIT_JUMP_TABLE_CLASS_exists_simplexmlelement
-#ifndef OMIT_JUMP_TABLE_CLASS_exists_PUBLIC_simplexmlelement
-bool c_simplexmlelement::o_existsPublic(CStrRef s) const {
-  return c_ObjectData::o_existsPublic(s);
+#endif // OMIT_JUMP_TABLE_CLASS_realProp_simplexmlelement
+#ifndef OMIT_JUMP_TABLE_CLASS_realProp_PUBLIC_simplexmlelement
+Variant * c_simplexmlelement::o_realPropPublic(CStrRef s, int flags) const {
+  return c_ObjectData::o_realPropPublic(s, flags);
 }
-#endif // OMIT_JUMP_TABLE_CLASS_exists_PUBLIC_simplexmlelement
-#ifndef OMIT_JUMP_TABLE_CLASS_exists_PRIVATE_simplexmlelement
-bool c_simplexmlelement::o_existsPrivate(CStrRef s) const {
-  return o_existsPublic(s);
+#endif // OMIT_JUMP_TABLE_CLASS_realProp_PUBLIC_simplexmlelement
+#ifndef OMIT_JUMP_TABLE_CLASS_realProp_PRIVATE_simplexmlelement
+Variant * c_simplexmlelement::o_realPropPrivate(CStrRef s, int flags) const {
+  return o_realPropPublic(s, flags);
 }
-#endif // OMIT_JUMP_TABLE_CLASS_exists_PRIVATE_simplexmlelement
+#endif // OMIT_JUMP_TABLE_CLASS_realProp_PRIVATE_simplexmlelement
 #ifndef OMIT_JUMP_TABLE_CLASS_set_simplexmlelement
 Variant c_simplexmlelement::o_set(CStrRef prop, CVarRef v, bool forInit, CStrRef context) {
   return o_setPublic(prop, v, forInit);
@@ -32348,21 +32348,21 @@ Variant c_memcache::o_getPrivate(CStrRef s, bool error) {
   return o_getPublic(s, error);
 }
 #endif // OMIT_JUMP_TABLE_CLASS_get_PRIVATE_memcache
-#ifndef OMIT_JUMP_TABLE_CLASS_exists_memcache
-bool c_memcache::o_exists(CStrRef prop, CStrRef context) const {
-  return o_existsPublic(prop);
+#ifndef OMIT_JUMP_TABLE_CLASS_realProp_memcache
+Variant * c_memcache::o_realProp(CStrRef prop, int flags, CStrRef context) const {
+  return o_realPropPublic(prop, flags);
 }
-#endif // OMIT_JUMP_TABLE_CLASS_exists_memcache
-#ifndef OMIT_JUMP_TABLE_CLASS_exists_PUBLIC_memcache
-bool c_memcache::o_existsPublic(CStrRef s) const {
-  return c_ObjectData::o_existsPublic(s);
+#endif // OMIT_JUMP_TABLE_CLASS_realProp_memcache
+#ifndef OMIT_JUMP_TABLE_CLASS_realProp_PUBLIC_memcache
+Variant * c_memcache::o_realPropPublic(CStrRef s, int flags) const {
+  return c_ObjectData::o_realPropPublic(s, flags);
 }
-#endif // OMIT_JUMP_TABLE_CLASS_exists_PUBLIC_memcache
-#ifndef OMIT_JUMP_TABLE_CLASS_exists_PRIVATE_memcache
-bool c_memcache::o_existsPrivate(CStrRef s) const {
-  return o_existsPublic(s);
+#endif // OMIT_JUMP_TABLE_CLASS_realProp_PUBLIC_memcache
+#ifndef OMIT_JUMP_TABLE_CLASS_realProp_PRIVATE_memcache
+Variant * c_memcache::o_realPropPrivate(CStrRef s, int flags) const {
+  return o_realPropPublic(s, flags);
 }
-#endif // OMIT_JUMP_TABLE_CLASS_exists_PRIVATE_memcache
+#endif // OMIT_JUMP_TABLE_CLASS_realProp_PRIVATE_memcache
 #ifndef OMIT_JUMP_TABLE_CLASS_set_memcache
 Variant c_memcache::o_set(CStrRef prop, CVarRef v, bool forInit, CStrRef context) {
   return o_setPublic(prop, v, forInit);
@@ -34561,21 +34561,21 @@ Variant c_domprocessinginstruction::o_getPrivate(CStrRef s, bool error) {
   return o_getPublic(s, error);
 }
 #endif // OMIT_JUMP_TABLE_CLASS_get_PRIVATE_domprocessinginstruction
-#ifndef OMIT_JUMP_TABLE_CLASS_exists_domprocessinginstruction
-bool c_domprocessinginstruction::o_exists(CStrRef prop, CStrRef context) const {
-  return o_existsPublic(prop);
+#ifndef OMIT_JUMP_TABLE_CLASS_realProp_domprocessinginstruction
+Variant * c_domprocessinginstruction::o_realProp(CStrRef prop, int flags, CStrRef context) const {
+  return o_realPropPublic(prop, flags);
 }
-#endif // OMIT_JUMP_TABLE_CLASS_exists_domprocessinginstruction
-#ifndef OMIT_JUMP_TABLE_CLASS_exists_PUBLIC_domprocessinginstruction
-bool c_domprocessinginstruction::o_existsPublic(CStrRef s) const {
-  return c_domnode::o_existsPublic(s);
+#endif // OMIT_JUMP_TABLE_CLASS_realProp_domprocessinginstruction
+#ifndef OMIT_JUMP_TABLE_CLASS_realProp_PUBLIC_domprocessinginstruction
+Variant * c_domprocessinginstruction::o_realPropPublic(CStrRef s, int flags) const {
+  return c_domnode::o_realPropPublic(s, flags);
 }
-#endif // OMIT_JUMP_TABLE_CLASS_exists_PUBLIC_domprocessinginstruction
-#ifndef OMIT_JUMP_TABLE_CLASS_exists_PRIVATE_domprocessinginstruction
-bool c_domprocessinginstruction::o_existsPrivate(CStrRef s) const {
-  return o_existsPublic(s);
+#endif // OMIT_JUMP_TABLE_CLASS_realProp_PUBLIC_domprocessinginstruction
+#ifndef OMIT_JUMP_TABLE_CLASS_realProp_PRIVATE_domprocessinginstruction
+Variant * c_domprocessinginstruction::o_realPropPrivate(CStrRef s, int flags) const {
+  return o_realPropPublic(s, flags);
 }
-#endif // OMIT_JUMP_TABLE_CLASS_exists_PRIVATE_domprocessinginstruction
+#endif // OMIT_JUMP_TABLE_CLASS_realProp_PRIVATE_domprocessinginstruction
 #ifndef OMIT_JUMP_TABLE_CLASS_set_domprocessinginstruction
 Variant c_domprocessinginstruction::o_set(CStrRef prop, CVarRef v, bool forInit, CStrRef context) {
   return o_setPublic(prop, v, forInit);
@@ -36334,21 +36334,21 @@ Variant c_pdostatement::o_getPrivate(CStrRef s, bool error) {
   return o_getPublic(s, error);
 }
 #endif // OMIT_JUMP_TABLE_CLASS_get_PRIVATE_pdostatement
-#ifndef OMIT_JUMP_TABLE_CLASS_exists_pdostatement
-bool c_pdostatement::o_exists(CStrRef prop, CStrRef context) const {
-  return o_existsPublic(prop);
+#ifndef OMIT_JUMP_TABLE_CLASS_realProp_pdostatement
+Variant * c_pdostatement::o_realProp(CStrRef prop, int flags, CStrRef context) const {
+  return o_realPropPublic(prop, flags);
 }
-#endif // OMIT_JUMP_TABLE_CLASS_exists_pdostatement
-#ifndef OMIT_JUMP_TABLE_CLASS_exists_PUBLIC_pdostatement
-bool c_pdostatement::o_existsPublic(CStrRef s) const {
-  return c_ObjectData::o_existsPublic(s);
+#endif // OMIT_JUMP_TABLE_CLASS_realProp_pdostatement
+#ifndef OMIT_JUMP_TABLE_CLASS_realProp_PUBLIC_pdostatement
+Variant * c_pdostatement::o_realPropPublic(CStrRef s, int flags) const {
+  return c_ObjectData::o_realPropPublic(s, flags);
 }
-#endif // OMIT_JUMP_TABLE_CLASS_exists_PUBLIC_pdostatement
-#ifndef OMIT_JUMP_TABLE_CLASS_exists_PRIVATE_pdostatement
-bool c_pdostatement::o_existsPrivate(CStrRef s) const {
-  return o_existsPublic(s);
+#endif // OMIT_JUMP_TABLE_CLASS_realProp_PUBLIC_pdostatement
+#ifndef OMIT_JUMP_TABLE_CLASS_realProp_PRIVATE_pdostatement
+Variant * c_pdostatement::o_realPropPrivate(CStrRef s, int flags) const {
+  return o_realPropPublic(s, flags);
 }
-#endif // OMIT_JUMP_TABLE_CLASS_exists_PRIVATE_pdostatement
+#endif // OMIT_JUMP_TABLE_CLASS_realProp_PRIVATE_pdostatement
 #ifndef OMIT_JUMP_TABLE_CLASS_set_pdostatement
 Variant c_pdostatement::o_set(CStrRef prop, CVarRef v, bool forInit, CStrRef context) {
   return o_setPublic(prop, v, forInit);
@@ -38491,21 +38491,21 @@ Variant c_soapclient::o_getPrivate(CStrRef s, bool error) {
   return o_getPublic(s, error);
 }
 #endif // OMIT_JUMP_TABLE_CLASS_get_PRIVATE_soapclient
-#ifndef OMIT_JUMP_TABLE_CLASS_exists_soapclient
-bool c_soapclient::o_exists(CStrRef prop, CStrRef context) const {
-  return o_existsPublic(prop);
+#ifndef OMIT_JUMP_TABLE_CLASS_realProp_soapclient
+Variant * c_soapclient::o_realProp(CStrRef prop, int flags, CStrRef context) const {
+  return o_realPropPublic(prop, flags);
 }
-#endif // OMIT_JUMP_TABLE_CLASS_exists_soapclient
-#ifndef OMIT_JUMP_TABLE_CLASS_exists_PUBLIC_soapclient
-bool c_soapclient::o_existsPublic(CStrRef s) const {
-  return c_ObjectData::o_existsPublic(s);
+#endif // OMIT_JUMP_TABLE_CLASS_realProp_soapclient
+#ifndef OMIT_JUMP_TABLE_CLASS_realProp_PUBLIC_soapclient
+Variant * c_soapclient::o_realPropPublic(CStrRef s, int flags) const {
+  return c_ObjectData::o_realPropPublic(s, flags);
 }
-#endif // OMIT_JUMP_TABLE_CLASS_exists_PUBLIC_soapclient
-#ifndef OMIT_JUMP_TABLE_CLASS_exists_PRIVATE_soapclient
-bool c_soapclient::o_existsPrivate(CStrRef s) const {
-  return o_existsPublic(s);
+#endif // OMIT_JUMP_TABLE_CLASS_realProp_PUBLIC_soapclient
+#ifndef OMIT_JUMP_TABLE_CLASS_realProp_PRIVATE_soapclient
+Variant * c_soapclient::o_realPropPrivate(CStrRef s, int flags) const {
+  return o_realPropPublic(s, flags);
 }
-#endif // OMIT_JUMP_TABLE_CLASS_exists_PRIVATE_soapclient
+#endif // OMIT_JUMP_TABLE_CLASS_realProp_PRIVATE_soapclient
 #ifndef OMIT_JUMP_TABLE_CLASS_set_soapclient
 Variant c_soapclient::o_set(CStrRef prop, CVarRef v, bool forInit, CStrRef context) {
   return o_setPublic(prop, v, forInit);
@@ -39730,21 +39730,21 @@ Variant c_soapparam::o_getPrivate(CStrRef s, bool error) {
   return o_getPublic(s, error);
 }
 #endif // OMIT_JUMP_TABLE_CLASS_get_PRIVATE_soapparam
-#ifndef OMIT_JUMP_TABLE_CLASS_exists_soapparam
-bool c_soapparam::o_exists(CStrRef prop, CStrRef context) const {
-  return o_existsPublic(prop);
+#ifndef OMIT_JUMP_TABLE_CLASS_realProp_soapparam
+Variant * c_soapparam::o_realProp(CStrRef prop, int flags, CStrRef context) const {
+  return o_realPropPublic(prop, flags);
 }
-#endif // OMIT_JUMP_TABLE_CLASS_exists_soapparam
-#ifndef OMIT_JUMP_TABLE_CLASS_exists_PUBLIC_soapparam
-bool c_soapparam::o_existsPublic(CStrRef s) const {
-  return c_ObjectData::o_existsPublic(s);
+#endif // OMIT_JUMP_TABLE_CLASS_realProp_soapparam
+#ifndef OMIT_JUMP_TABLE_CLASS_realProp_PUBLIC_soapparam
+Variant * c_soapparam::o_realPropPublic(CStrRef s, int flags) const {
+  return c_ObjectData::o_realPropPublic(s, flags);
 }
-#endif // OMIT_JUMP_TABLE_CLASS_exists_PUBLIC_soapparam
-#ifndef OMIT_JUMP_TABLE_CLASS_exists_PRIVATE_soapparam
-bool c_soapparam::o_existsPrivate(CStrRef s) const {
-  return o_existsPublic(s);
+#endif // OMIT_JUMP_TABLE_CLASS_realProp_PUBLIC_soapparam
+#ifndef OMIT_JUMP_TABLE_CLASS_realProp_PRIVATE_soapparam
+Variant * c_soapparam::o_realPropPrivate(CStrRef s, int flags) const {
+  return o_realPropPublic(s, flags);
 }
-#endif // OMIT_JUMP_TABLE_CLASS_exists_PRIVATE_soapparam
+#endif // OMIT_JUMP_TABLE_CLASS_realProp_PRIVATE_soapparam
 #ifndef OMIT_JUMP_TABLE_CLASS_set_soapparam
 Variant c_soapparam::o_set(CStrRef prop, CVarRef v, bool forInit, CStrRef context) {
   return o_setPublic(prop, v, forInit);
@@ -40093,21 +40093,21 @@ Variant c_datetime::o_getPrivate(CStrRef s, bool error) {
   return o_getPublic(s, error);
 }
 #endif // OMIT_JUMP_TABLE_CLASS_get_PRIVATE_datetime
-#ifndef OMIT_JUMP_TABLE_CLASS_exists_datetime
-bool c_datetime::o_exists(CStrRef prop, CStrRef context) const {
-  return o_existsPublic(prop);
+#ifndef OMIT_JUMP_TABLE_CLASS_realProp_datetime
+Variant * c_datetime::o_realProp(CStrRef prop, int flags, CStrRef context) const {
+  return o_realPropPublic(prop, flags);
 }
-#endif // OMIT_JUMP_TABLE_CLASS_exists_datetime
-#ifndef OMIT_JUMP_TABLE_CLASS_exists_PUBLIC_datetime
-bool c_datetime::o_existsPublic(CStrRef s) const {
-  return c_ObjectData::o_existsPublic(s);
+#endif // OMIT_JUMP_TABLE_CLASS_realProp_datetime
+#ifndef OMIT_JUMP_TABLE_CLASS_realProp_PUBLIC_datetime
+Variant * c_datetime::o_realPropPublic(CStrRef s, int flags) const {
+  return c_ObjectData::o_realPropPublic(s, flags);
 }
-#endif // OMIT_JUMP_TABLE_CLASS_exists_PUBLIC_datetime
-#ifndef OMIT_JUMP_TABLE_CLASS_exists_PRIVATE_datetime
-bool c_datetime::o_existsPrivate(CStrRef s) const {
-  return o_existsPublic(s);
+#endif // OMIT_JUMP_TABLE_CLASS_realProp_PUBLIC_datetime
+#ifndef OMIT_JUMP_TABLE_CLASS_realProp_PRIVATE_datetime
+Variant * c_datetime::o_realPropPrivate(CStrRef s, int flags) const {
+  return o_realPropPublic(s, flags);
 }
-#endif // OMIT_JUMP_TABLE_CLASS_exists_PRIVATE_datetime
+#endif // OMIT_JUMP_TABLE_CLASS_realProp_PRIVATE_datetime
 #ifndef OMIT_JUMP_TABLE_CLASS_set_datetime
 Variant c_datetime::o_set(CStrRef prop, CVarRef v, bool forInit, CStrRef context) {
   return o_setPublic(prop, v, forInit);
@@ -41108,21 +41108,21 @@ Variant c_collator::o_getPrivate(CStrRef s, bool error) {
   return o_getPublic(s, error);
 }
 #endif // OMIT_JUMP_TABLE_CLASS_get_PRIVATE_collator
-#ifndef OMIT_JUMP_TABLE_CLASS_exists_collator
-bool c_collator::o_exists(CStrRef prop, CStrRef context) const {
-  return o_existsPublic(prop);
+#ifndef OMIT_JUMP_TABLE_CLASS_realProp_collator
+Variant * c_collator::o_realProp(CStrRef prop, int flags, CStrRef context) const {
+  return o_realPropPublic(prop, flags);
 }
-#endif // OMIT_JUMP_TABLE_CLASS_exists_collator
-#ifndef OMIT_JUMP_TABLE_CLASS_exists_PUBLIC_collator
-bool c_collator::o_existsPublic(CStrRef s) const {
-  return c_ObjectData::o_existsPublic(s);
+#endif // OMIT_JUMP_TABLE_CLASS_realProp_collator
+#ifndef OMIT_JUMP_TABLE_CLASS_realProp_PUBLIC_collator
+Variant * c_collator::o_realPropPublic(CStrRef s, int flags) const {
+  return c_ObjectData::o_realPropPublic(s, flags);
 }
-#endif // OMIT_JUMP_TABLE_CLASS_exists_PUBLIC_collator
-#ifndef OMIT_JUMP_TABLE_CLASS_exists_PRIVATE_collator
-bool c_collator::o_existsPrivate(CStrRef s) const {
-  return o_existsPublic(s);
+#endif // OMIT_JUMP_TABLE_CLASS_realProp_PUBLIC_collator
+#ifndef OMIT_JUMP_TABLE_CLASS_realProp_PRIVATE_collator
+Variant * c_collator::o_realPropPrivate(CStrRef s, int flags) const {
+  return o_realPropPublic(s, flags);
 }
-#endif // OMIT_JUMP_TABLE_CLASS_exists_PRIVATE_collator
+#endif // OMIT_JUMP_TABLE_CLASS_realProp_PRIVATE_collator
 #ifndef OMIT_JUMP_TABLE_CLASS_set_collator
 Variant c_collator::o_set(CStrRef prop, CVarRef v, bool forInit, CStrRef context) {
   return o_setPublic(prop, v, forInit);
@@ -42446,21 +42446,21 @@ Variant c_pdo::o_getPrivate(CStrRef s, bool error) {
   return o_getPublic(s, error);
 }
 #endif // OMIT_JUMP_TABLE_CLASS_get_PRIVATE_pdo
-#ifndef OMIT_JUMP_TABLE_CLASS_exists_pdo
-bool c_pdo::o_exists(CStrRef prop, CStrRef context) const {
-  return o_existsPublic(prop);
+#ifndef OMIT_JUMP_TABLE_CLASS_realProp_pdo
+Variant * c_pdo::o_realProp(CStrRef prop, int flags, CStrRef context) const {
+  return o_realPropPublic(prop, flags);
 }
-#endif // OMIT_JUMP_TABLE_CLASS_exists_pdo
-#ifndef OMIT_JUMP_TABLE_CLASS_exists_PUBLIC_pdo
-bool c_pdo::o_existsPublic(CStrRef s) const {
-  return c_ObjectData::o_existsPublic(s);
+#endif // OMIT_JUMP_TABLE_CLASS_realProp_pdo
+#ifndef OMIT_JUMP_TABLE_CLASS_realProp_PUBLIC_pdo
+Variant * c_pdo::o_realPropPublic(CStrRef s, int flags) const {
+  return c_ObjectData::o_realPropPublic(s, flags);
 }
-#endif // OMIT_JUMP_TABLE_CLASS_exists_PUBLIC_pdo
-#ifndef OMIT_JUMP_TABLE_CLASS_exists_PRIVATE_pdo
-bool c_pdo::o_existsPrivate(CStrRef s) const {
-  return o_existsPublic(s);
+#endif // OMIT_JUMP_TABLE_CLASS_realProp_PUBLIC_pdo
+#ifndef OMIT_JUMP_TABLE_CLASS_realProp_PRIVATE_pdo
+Variant * c_pdo::o_realPropPrivate(CStrRef s, int flags) const {
+  return o_realPropPublic(s, flags);
 }
-#endif // OMIT_JUMP_TABLE_CLASS_exists_PRIVATE_pdo
+#endif // OMIT_JUMP_TABLE_CLASS_realProp_PRIVATE_pdo
 #ifndef OMIT_JUMP_TABLE_CLASS_set_pdo
 Variant c_pdo::o_set(CStrRef prop, CVarRef v, bool forInit, CStrRef context) {
   return o_setPublic(prop, v, forInit);
@@ -44136,21 +44136,21 @@ Variant c_domentity::o_getPrivate(CStrRef s, bool error) {
   return o_getPublic(s, error);
 }
 #endif // OMIT_JUMP_TABLE_CLASS_get_PRIVATE_domentity
-#ifndef OMIT_JUMP_TABLE_CLASS_exists_domentity
-bool c_domentity::o_exists(CStrRef prop, CStrRef context) const {
-  return o_existsPublic(prop);
+#ifndef OMIT_JUMP_TABLE_CLASS_realProp_domentity
+Variant * c_domentity::o_realProp(CStrRef prop, int flags, CStrRef context) const {
+  return o_realPropPublic(prop, flags);
 }
-#endif // OMIT_JUMP_TABLE_CLASS_exists_domentity
-#ifndef OMIT_JUMP_TABLE_CLASS_exists_PUBLIC_domentity
-bool c_domentity::o_existsPublic(CStrRef s) const {
-  return c_domnode::o_existsPublic(s);
+#endif // OMIT_JUMP_TABLE_CLASS_realProp_domentity
+#ifndef OMIT_JUMP_TABLE_CLASS_realProp_PUBLIC_domentity
+Variant * c_domentity::o_realPropPublic(CStrRef s, int flags) const {
+  return c_domnode::o_realPropPublic(s, flags);
 }
-#endif // OMIT_JUMP_TABLE_CLASS_exists_PUBLIC_domentity
-#ifndef OMIT_JUMP_TABLE_CLASS_exists_PRIVATE_domentity
-bool c_domentity::o_existsPrivate(CStrRef s) const {
-  return o_existsPublic(s);
+#endif // OMIT_JUMP_TABLE_CLASS_realProp_PUBLIC_domentity
+#ifndef OMIT_JUMP_TABLE_CLASS_realProp_PRIVATE_domentity
+Variant * c_domentity::o_realPropPrivate(CStrRef s, int flags) const {
+  return o_realPropPublic(s, flags);
 }
-#endif // OMIT_JUMP_TABLE_CLASS_exists_PRIVATE_domentity
+#endif // OMIT_JUMP_TABLE_CLASS_realProp_PRIVATE_domentity
 #ifndef OMIT_JUMP_TABLE_CLASS_set_domentity
 Variant c_domentity::o_set(CStrRef prop, CVarRef v, bool forInit, CStrRef context) {
   return o_setPublic(prop, v, forInit);
@@ -45846,21 +45846,21 @@ Variant c_xmlwriter::o_getPrivate(CStrRef s, bool error) {
   return o_getPublic(s, error);
 }
 #endif // OMIT_JUMP_TABLE_CLASS_get_PRIVATE_xmlwriter
-#ifndef OMIT_JUMP_TABLE_CLASS_exists_xmlwriter
-bool c_xmlwriter::o_exists(CStrRef prop, CStrRef context) const {
-  return o_existsPublic(prop);
+#ifndef OMIT_JUMP_TABLE_CLASS_realProp_xmlwriter
+Variant * c_xmlwriter::o_realProp(CStrRef prop, int flags, CStrRef context) const {
+  return o_realPropPublic(prop, flags);
 }
-#endif // OMIT_JUMP_TABLE_CLASS_exists_xmlwriter
-#ifndef OMIT_JUMP_TABLE_CLASS_exists_PUBLIC_xmlwriter
-bool c_xmlwriter::o_existsPublic(CStrRef s) const {
-  return c_ObjectData::o_existsPublic(s);
+#endif // OMIT_JUMP_TABLE_CLASS_realProp_xmlwriter
+#ifndef OMIT_JUMP_TABLE_CLASS_realProp_PUBLIC_xmlwriter
+Variant * c_xmlwriter::o_realPropPublic(CStrRef s, int flags) const {
+  return c_ObjectData::o_realPropPublic(s, flags);
 }
-#endif // OMIT_JUMP_TABLE_CLASS_exists_PUBLIC_xmlwriter
-#ifndef OMIT_JUMP_TABLE_CLASS_exists_PRIVATE_xmlwriter
-bool c_xmlwriter::o_existsPrivate(CStrRef s) const {
-  return o_existsPublic(s);
+#endif // OMIT_JUMP_TABLE_CLASS_realProp_PUBLIC_xmlwriter
+#ifndef OMIT_JUMP_TABLE_CLASS_realProp_PRIVATE_xmlwriter
+Variant * c_xmlwriter::o_realPropPrivate(CStrRef s, int flags) const {
+  return o_realPropPublic(s, flags);
 }
-#endif // OMIT_JUMP_TABLE_CLASS_exists_PRIVATE_xmlwriter
+#endif // OMIT_JUMP_TABLE_CLASS_realProp_PRIVATE_xmlwriter
 #ifndef OMIT_JUMP_TABLE_CLASS_set_xmlwriter
 Variant c_xmlwriter::o_set(CStrRef prop, CVarRef v, bool forInit, CStrRef context) {
   return o_setPublic(prop, v, forInit);
@@ -49213,21 +49213,21 @@ Variant c_domexception::o_getPrivate(CStrRef s, bool error) {
   return o_getPublic(s, error);
 }
 #endif // OMIT_JUMP_TABLE_CLASS_get_PRIVATE_domexception
-#ifndef OMIT_JUMP_TABLE_CLASS_exists_domexception
-bool c_domexception::o_exists(CStrRef prop, CStrRef context) const {
-  return o_existsPublic(prop);
+#ifndef OMIT_JUMP_TABLE_CLASS_realProp_domexception
+Variant * c_domexception::o_realProp(CStrRef prop, int flags, CStrRef context) const {
+  return o_realPropPublic(prop, flags);
 }
-#endif // OMIT_JUMP_TABLE_CLASS_exists_domexception
-#ifndef OMIT_JUMP_TABLE_CLASS_exists_PUBLIC_domexception
-bool c_domexception::o_existsPublic(CStrRef s) const {
-  return c_exception::o_existsPublic(s);
+#endif // OMIT_JUMP_TABLE_CLASS_realProp_domexception
+#ifndef OMIT_JUMP_TABLE_CLASS_realProp_PUBLIC_domexception
+Variant * c_domexception::o_realPropPublic(CStrRef s, int flags) const {
+  return c_exception::o_realPropPublic(s, flags);
 }
-#endif // OMIT_JUMP_TABLE_CLASS_exists_PUBLIC_domexception
-#ifndef OMIT_JUMP_TABLE_CLASS_exists_PRIVATE_domexception
-bool c_domexception::o_existsPrivate(CStrRef s) const {
-  return o_existsPublic(s);
+#endif // OMIT_JUMP_TABLE_CLASS_realProp_PUBLIC_domexception
+#ifndef OMIT_JUMP_TABLE_CLASS_realProp_PRIVATE_domexception
+Variant * c_domexception::o_realPropPrivate(CStrRef s, int flags) const {
+  return o_realPropPublic(s, flags);
 }
-#endif // OMIT_JUMP_TABLE_CLASS_exists_PRIVATE_domexception
+#endif // OMIT_JUMP_TABLE_CLASS_realProp_PRIVATE_domexception
 #ifndef OMIT_JUMP_TABLE_CLASS_set_domexception
 Variant c_domexception::o_set(CStrRef prop, CVarRef v, bool forInit, CStrRef context) {
   return o_setPublic(prop, v, forInit);
@@ -50022,21 +50022,21 @@ Variant c_domxpath::o_getPrivate(CStrRef s, bool error) {
   return o_getPublic(s, error);
 }
 #endif // OMIT_JUMP_TABLE_CLASS_get_PRIVATE_domxpath
-#ifndef OMIT_JUMP_TABLE_CLASS_exists_domxpath
-bool c_domxpath::o_exists(CStrRef prop, CStrRef context) const {
-  return o_existsPublic(prop);
+#ifndef OMIT_JUMP_TABLE_CLASS_realProp_domxpath
+Variant * c_domxpath::o_realProp(CStrRef prop, int flags, CStrRef context) const {
+  return o_realPropPublic(prop, flags);
 }
-#endif // OMIT_JUMP_TABLE_CLASS_exists_domxpath
-#ifndef OMIT_JUMP_TABLE_CLASS_exists_PUBLIC_domxpath
-bool c_domxpath::o_existsPublic(CStrRef s) const {
-  return c_ObjectData::o_existsPublic(s);
+#endif // OMIT_JUMP_TABLE_CLASS_realProp_domxpath
+#ifndef OMIT_JUMP_TABLE_CLASS_realProp_PUBLIC_domxpath
+Variant * c_domxpath::o_realPropPublic(CStrRef s, int flags) const {
+  return c_ObjectData::o_realPropPublic(s, flags);
 }
-#endif // OMIT_JUMP_TABLE_CLASS_exists_PUBLIC_domxpath
-#ifndef OMIT_JUMP_TABLE_CLASS_exists_PRIVATE_domxpath
-bool c_domxpath::o_existsPrivate(CStrRef s) const {
-  return o_existsPublic(s);
+#endif // OMIT_JUMP_TABLE_CLASS_realProp_PUBLIC_domxpath
+#ifndef OMIT_JUMP_TABLE_CLASS_realProp_PRIVATE_domxpath
+Variant * c_domxpath::o_realPropPrivate(CStrRef s, int flags) const {
+  return o_realPropPublic(s, flags);
 }
-#endif // OMIT_JUMP_TABLE_CLASS_exists_PRIVATE_domxpath
+#endif // OMIT_JUMP_TABLE_CLASS_realProp_PRIVATE_domxpath
 #ifndef OMIT_JUMP_TABLE_CLASS_set_domxpath
 Variant c_domxpath::o_set(CStrRef prop, CVarRef v, bool forInit, CStrRef context) {
   return o_setPublic(prop, v, forInit);
@@ -50844,21 +50844,21 @@ Variant c_soapserver::o_getPrivate(CStrRef s, bool error) {
   return o_getPublic(s, error);
 }
 #endif // OMIT_JUMP_TABLE_CLASS_get_PRIVATE_soapserver
-#ifndef OMIT_JUMP_TABLE_CLASS_exists_soapserver
-bool c_soapserver::o_exists(CStrRef prop, CStrRef context) const {
-  return o_existsPublic(prop);
+#ifndef OMIT_JUMP_TABLE_CLASS_realProp_soapserver
+Variant * c_soapserver::o_realProp(CStrRef prop, int flags, CStrRef context) const {
+  return o_realPropPublic(prop, flags);
 }
-#endif // OMIT_JUMP_TABLE_CLASS_exists_soapserver
-#ifndef OMIT_JUMP_TABLE_CLASS_exists_PUBLIC_soapserver
-bool c_soapserver::o_existsPublic(CStrRef s) const {
-  return c_ObjectData::o_existsPublic(s);
+#endif // OMIT_JUMP_TABLE_CLASS_realProp_soapserver
+#ifndef OMIT_JUMP_TABLE_CLASS_realProp_PUBLIC_soapserver
+Variant * c_soapserver::o_realPropPublic(CStrRef s, int flags) const {
+  return c_ObjectData::o_realPropPublic(s, flags);
 }
-#endif // OMIT_JUMP_TABLE_CLASS_exists_PUBLIC_soapserver
-#ifndef OMIT_JUMP_TABLE_CLASS_exists_PRIVATE_soapserver
-bool c_soapserver::o_existsPrivate(CStrRef s) const {
-  return o_existsPublic(s);
+#endif // OMIT_JUMP_TABLE_CLASS_realProp_PUBLIC_soapserver
+#ifndef OMIT_JUMP_TABLE_CLASS_realProp_PRIVATE_soapserver
+Variant * c_soapserver::o_realPropPrivate(CStrRef s, int flags) const {
+  return o_realPropPublic(s, flags);
 }
-#endif // OMIT_JUMP_TABLE_CLASS_exists_PRIVATE_soapserver
+#endif // OMIT_JUMP_TABLE_CLASS_realProp_PRIVATE_soapserver
 #ifndef OMIT_JUMP_TABLE_CLASS_set_soapserver
 Variant c_soapserver::o_set(CStrRef prop, CVarRef v, bool forInit, CStrRef context) {
   return o_setPublic(prop, v, forInit);
@@ -51848,21 +51848,21 @@ Variant c_domnode::o_getPrivate(CStrRef s, bool error) {
   return o_getPublic(s, error);
 }
 #endif // OMIT_JUMP_TABLE_CLASS_get_PRIVATE_domnode
-#ifndef OMIT_JUMP_TABLE_CLASS_exists_domnode
-bool c_domnode::o_exists(CStrRef prop, CStrRef context) const {
-  return o_existsPublic(prop);
+#ifndef OMIT_JUMP_TABLE_CLASS_realProp_domnode
+Variant * c_domnode::o_realProp(CStrRef prop, int flags, CStrRef context) const {
+  return o_realPropPublic(prop, flags);
 }
-#endif // OMIT_JUMP_TABLE_CLASS_exists_domnode
-#ifndef OMIT_JUMP_TABLE_CLASS_exists_PUBLIC_domnode
-bool c_domnode::o_existsPublic(CStrRef s) const {
-  return c_ObjectData::o_existsPublic(s);
+#endif // OMIT_JUMP_TABLE_CLASS_realProp_domnode
+#ifndef OMIT_JUMP_TABLE_CLASS_realProp_PUBLIC_domnode
+Variant * c_domnode::o_realPropPublic(CStrRef s, int flags) const {
+  return c_ObjectData::o_realPropPublic(s, flags);
 }
-#endif // OMIT_JUMP_TABLE_CLASS_exists_PUBLIC_domnode
-#ifndef OMIT_JUMP_TABLE_CLASS_exists_PRIVATE_domnode
-bool c_domnode::o_existsPrivate(CStrRef s) const {
-  return o_existsPublic(s);
+#endif // OMIT_JUMP_TABLE_CLASS_realProp_PUBLIC_domnode
+#ifndef OMIT_JUMP_TABLE_CLASS_realProp_PRIVATE_domnode
+Variant * c_domnode::o_realPropPrivate(CStrRef s, int flags) const {
+  return o_realPropPublic(s, flags);
 }
-#endif // OMIT_JUMP_TABLE_CLASS_exists_PRIVATE_domnode
+#endif // OMIT_JUMP_TABLE_CLASS_realProp_PRIVATE_domnode
 #ifndef OMIT_JUMP_TABLE_CLASS_set_domnode
 Variant c_domnode::o_set(CStrRef prop, CVarRef v, bool forInit, CStrRef context) {
   return o_setPublic(prop, v, forInit);
@@ -53558,21 +53558,21 @@ Variant c_domdocument::o_getPrivate(CStrRef s, bool error) {
   return o_getPublic(s, error);
 }
 #endif // OMIT_JUMP_TABLE_CLASS_get_PRIVATE_domdocument
-#ifndef OMIT_JUMP_TABLE_CLASS_exists_domdocument
-bool c_domdocument::o_exists(CStrRef prop, CStrRef context) const {
-  return o_existsPublic(prop);
+#ifndef OMIT_JUMP_TABLE_CLASS_realProp_domdocument
+Variant * c_domdocument::o_realProp(CStrRef prop, int flags, CStrRef context) const {
+  return o_realPropPublic(prop, flags);
 }
-#endif // OMIT_JUMP_TABLE_CLASS_exists_domdocument
-#ifndef OMIT_JUMP_TABLE_CLASS_exists_PUBLIC_domdocument
-bool c_domdocument::o_existsPublic(CStrRef s) const {
-  return c_domnode::o_existsPublic(s);
+#endif // OMIT_JUMP_TABLE_CLASS_realProp_domdocument
+#ifndef OMIT_JUMP_TABLE_CLASS_realProp_PUBLIC_domdocument
+Variant * c_domdocument::o_realPropPublic(CStrRef s, int flags) const {
+  return c_domnode::o_realPropPublic(s, flags);
 }
-#endif // OMIT_JUMP_TABLE_CLASS_exists_PUBLIC_domdocument
-#ifndef OMIT_JUMP_TABLE_CLASS_exists_PRIVATE_domdocument
-bool c_domdocument::o_existsPrivate(CStrRef s) const {
-  return o_existsPublic(s);
+#endif // OMIT_JUMP_TABLE_CLASS_realProp_PUBLIC_domdocument
+#ifndef OMIT_JUMP_TABLE_CLASS_realProp_PRIVATE_domdocument
+Variant * c_domdocument::o_realPropPrivate(CStrRef s, int flags) const {
+  return o_realPropPublic(s, flags);
 }
-#endif // OMIT_JUMP_TABLE_CLASS_exists_PRIVATE_domdocument
+#endif // OMIT_JUMP_TABLE_CLASS_realProp_PRIVATE_domdocument
 #ifndef OMIT_JUMP_TABLE_CLASS_set_domdocument
 Variant c_domdocument::o_set(CStrRef prop, CVarRef v, bool forInit, CStrRef context) {
   return o_setPublic(prop, v, forInit);
@@ -57512,21 +57512,21 @@ Variant c_libxmlerror::o_getPrivate(CStrRef s, bool error) {
   return o_getPublic(s, error);
 }
 #endif // OMIT_JUMP_TABLE_CLASS_get_PRIVATE_libxmlerror
-#ifndef OMIT_JUMP_TABLE_CLASS_exists_libxmlerror
-bool c_libxmlerror::o_exists(CStrRef prop, CStrRef context) const {
-  return o_existsPublic(prop);
+#ifndef OMIT_JUMP_TABLE_CLASS_realProp_libxmlerror
+Variant * c_libxmlerror::o_realProp(CStrRef prop, int flags, CStrRef context) const {
+  return o_realPropPublic(prop, flags);
 }
-#endif // OMIT_JUMP_TABLE_CLASS_exists_libxmlerror
-#ifndef OMIT_JUMP_TABLE_CLASS_exists_PUBLIC_libxmlerror
-bool c_libxmlerror::o_existsPublic(CStrRef s) const {
-  return c_ObjectData::o_existsPublic(s);
+#endif // OMIT_JUMP_TABLE_CLASS_realProp_libxmlerror
+#ifndef OMIT_JUMP_TABLE_CLASS_realProp_PUBLIC_libxmlerror
+Variant * c_libxmlerror::o_realPropPublic(CStrRef s, int flags) const {
+  return c_ObjectData::o_realPropPublic(s, flags);
 }
-#endif // OMIT_JUMP_TABLE_CLASS_exists_PUBLIC_libxmlerror
-#ifndef OMIT_JUMP_TABLE_CLASS_exists_PRIVATE_libxmlerror
-bool c_libxmlerror::o_existsPrivate(CStrRef s) const {
-  return o_existsPublic(s);
+#endif // OMIT_JUMP_TABLE_CLASS_realProp_PUBLIC_libxmlerror
+#ifndef OMIT_JUMP_TABLE_CLASS_realProp_PRIVATE_libxmlerror
+Variant * c_libxmlerror::o_realPropPrivate(CStrRef s, int flags) const {
+  return o_realPropPublic(s, flags);
 }
-#endif // OMIT_JUMP_TABLE_CLASS_exists_PRIVATE_libxmlerror
+#endif // OMIT_JUMP_TABLE_CLASS_realProp_PRIVATE_libxmlerror
 #ifndef OMIT_JUMP_TABLE_CLASS_set_libxmlerror
 Variant c_libxmlerror::o_set(CStrRef prop, CVarRef v, bool forInit, CStrRef context) {
   return o_setPublic(prop, v, forInit);
@@ -57827,21 +57827,21 @@ Variant c_soapfault::o_getPrivate(CStrRef s, bool error) {
   return o_getPublic(s, error);
 }
 #endif // OMIT_JUMP_TABLE_CLASS_get_PRIVATE_soapfault
-#ifndef OMIT_JUMP_TABLE_CLASS_exists_soapfault
-bool c_soapfault::o_exists(CStrRef prop, CStrRef context) const {
-  return o_existsPublic(prop);
+#ifndef OMIT_JUMP_TABLE_CLASS_realProp_soapfault
+Variant * c_soapfault::o_realProp(CStrRef prop, int flags, CStrRef context) const {
+  return o_realPropPublic(prop, flags);
 }
-#endif // OMIT_JUMP_TABLE_CLASS_exists_soapfault
-#ifndef OMIT_JUMP_TABLE_CLASS_exists_PUBLIC_soapfault
-bool c_soapfault::o_existsPublic(CStrRef s) const {
-  return c_exception::o_existsPublic(s);
+#endif // OMIT_JUMP_TABLE_CLASS_realProp_soapfault
+#ifndef OMIT_JUMP_TABLE_CLASS_realProp_PUBLIC_soapfault
+Variant * c_soapfault::o_realPropPublic(CStrRef s, int flags) const {
+  return c_exception::o_realPropPublic(s, flags);
 }
-#endif // OMIT_JUMP_TABLE_CLASS_exists_PUBLIC_soapfault
-#ifndef OMIT_JUMP_TABLE_CLASS_exists_PRIVATE_soapfault
-bool c_soapfault::o_existsPrivate(CStrRef s) const {
-  return o_existsPublic(s);
+#endif // OMIT_JUMP_TABLE_CLASS_realProp_PUBLIC_soapfault
+#ifndef OMIT_JUMP_TABLE_CLASS_realProp_PRIVATE_soapfault
+Variant * c_soapfault::o_realPropPrivate(CStrRef s, int flags) const {
+  return o_realPropPublic(s, flags);
 }
-#endif // OMIT_JUMP_TABLE_CLASS_exists_PRIVATE_soapfault
+#endif // OMIT_JUMP_TABLE_CLASS_realProp_PRIVATE_soapfault
 #ifndef OMIT_JUMP_TABLE_CLASS_set_soapfault
 Variant c_soapfault::o_set(CStrRef prop, CVarRef v, bool forInit, CStrRef context) {
   return o_setPublic(prop, v, forInit);
@@ -58730,21 +58730,21 @@ Variant c_domelement::o_getPrivate(CStrRef s, bool error) {
   return o_getPublic(s, error);
 }
 #endif // OMIT_JUMP_TABLE_CLASS_get_PRIVATE_domelement
-#ifndef OMIT_JUMP_TABLE_CLASS_exists_domelement
-bool c_domelement::o_exists(CStrRef prop, CStrRef context) const {
-  return o_existsPublic(prop);
+#ifndef OMIT_JUMP_TABLE_CLASS_realProp_domelement
+Variant * c_domelement::o_realProp(CStrRef prop, int flags, CStrRef context) const {
+  return o_realPropPublic(prop, flags);
 }
-#endif // OMIT_JUMP_TABLE_CLASS_exists_domelement
-#ifndef OMIT_JUMP_TABLE_CLASS_exists_PUBLIC_domelement
-bool c_domelement::o_existsPublic(CStrRef s) const {
-  return c_domnode::o_existsPublic(s);
+#endif // OMIT_JUMP_TABLE_CLASS_realProp_domelement
+#ifndef OMIT_JUMP_TABLE_CLASS_realProp_PUBLIC_domelement
+Variant * c_domelement::o_realPropPublic(CStrRef s, int flags) const {
+  return c_domnode::o_realPropPublic(s, flags);
 }
-#endif // OMIT_JUMP_TABLE_CLASS_exists_PUBLIC_domelement
-#ifndef OMIT_JUMP_TABLE_CLASS_exists_PRIVATE_domelement
-bool c_domelement::o_existsPrivate(CStrRef s) const {
-  return o_existsPublic(s);
+#endif // OMIT_JUMP_TABLE_CLASS_realProp_PUBLIC_domelement
+#ifndef OMIT_JUMP_TABLE_CLASS_realProp_PRIVATE_domelement
+Variant * c_domelement::o_realPropPrivate(CStrRef s, int flags) const {
+  return o_realPropPublic(s, flags);
 }
-#endif // OMIT_JUMP_TABLE_CLASS_exists_PRIVATE_domelement
+#endif // OMIT_JUMP_TABLE_CLASS_realProp_PRIVATE_domelement
 #ifndef OMIT_JUMP_TABLE_CLASS_set_domelement
 Variant c_domelement::o_set(CStrRef prop, CVarRef v, bool forInit, CStrRef context) {
   return o_setPublic(prop, v, forInit);

