commit 2e30244a7cc1ff09013a1238d415b4076406388e
Author: KOSAKI Motohiro <kosaki.motohiro@jp.fujitsu.com>
Date:   Tue Oct 26 14:21:46 2010 -0700

    vmscan,tmpfs: treat used once pages on tmpfs as used once
    
    When a page has PG_referenced, shrink_page_list() discards it only if it
    is not dirty.  This rule works fine if the backing filesystem is a regular
    one.  PG_dirty is a good signal that the page was used recently because
    the flusher threads clean pages periodically.  In addition, page writeback
    is costlier than simple page discard.
    
    However, when a page is on tmpfs this heuristic doesn't work because
    flusher threads don't write back tmpfs pages.  Consequently tmpfs pages
    always rotate around the lru twice at least and adds unnecessary lru
    churn.  Simple tmpfs streaming io shouldn't cause large anonymous page
    swap-out.
    
    Remove this unncessary reclaim bonus of tmpfs pages.
    
    Signed-off-by: KOSAKI Motohiro <kosaki.motohiro@jp.fujitsu.com>
    Cc: Hugh Dickins <hughd@google.com>
    Reviewed-by: Johannes Weiner <hannes@cmpxchg.org>
    Reviewed-by: Rik van Riel <riel@redhat.com>
    Cc: Minchan Kim <minchan.kim@gmail.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

diff --git a/mm/vmscan.c b/mm/vmscan.c
index 30fd658bb289..b8a6fdc21312 100644
--- a/mm/vmscan.c
+++ b/mm/vmscan.c
@@ -651,7 +651,7 @@ static enum page_references page_check_references(struct page *page,
 	}
 
 	/* Reclaim if clean, defer dirty pages to writeback */
-	if (referenced_page)
+	if (referenced_page && !PageSwapBacked(page))
 		return PAGEREF_RECLAIM_CLEAN;
 
 	return PAGEREF_RECLAIM;

