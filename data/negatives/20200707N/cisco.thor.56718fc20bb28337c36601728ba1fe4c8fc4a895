commit 56718fc20bb28337c36601728ba1fe4c8fc4a895
Author: Arild Fuldseth <arilfuld@cisco.com>
Date:   Fri Feb 5 13:21:53 2016 +0100

    Minor tweak in conditions for CLPF with SB signlling

diff --git a/common/common_block.c b/common/common_block.c
index 35571f4..181561b 100644
--- a/common/common_block.c
+++ b/common/common_block.c
@@ -189,6 +189,11 @@ void find_block_contexts(int ypos, int xpos, int height, int width, int size, de
   }
 }
 
+int clpf_sample(int X, int A, int B, int C, int D) {
+  int delta = ((A>X) + (B>X) + (C>X) + (D>X) > 2) - ((A<X) + (B<X) + (C<X) + (D<X) > 2);
+  return delta;
+}
+
 void clpf_block(const uint8_t *src, uint8_t *dst, int sstride, int dstride, int x0, int y0, int size, int width, int height) {
   int left = x0 & ~(dstride-1);
   int top = y0 & ~(dstride-1);
@@ -202,7 +207,7 @@ void clpf_block(const uint8_t *src, uint8_t *dst, int sstride, int dstride, int
       int B = x == left ? X : src[(y+0)*sstride + x-1];
       int C = x == right ? X : src[(y+0)*sstride + x+1];
       int D = y == bottom ? X : src[(y+1)*sstride + x+0];
-      int delta = ((A>X)+(B>X)+(C>X)+(D>X) > 2) - ((A<X)+(B<X)+(C<X)+(D<X) > 2);
+      int delta = clpf_sample(X, A, B, C, D);
       dst[(y-top)*dstride + x-left] = X + delta;
     }
   }
diff --git a/common/common_block.h b/common/common_block.h
index 12c1c10..bcd5c44 100644
--- a/common/common_block.h
+++ b/common/common_block.h
@@ -42,4 +42,6 @@ void find_block_contexts(int ypos, int xpos, int height, int width, int size, de
 
 void clpf_block(const uint8_t *src, uint8_t *dst, int sstride, int dstride, int x0, int y0, int size, int width, int height);
 
+int clpf_sample(int X, int A, int B, int C, int D);
+
 #endif
diff --git a/common/common_frame.c b/common/common_frame.c
index 3e7a04f..66a8585 100644
--- a/common/common_frame.c
+++ b/common/common_frame.c
@@ -592,9 +592,8 @@ void create_reference_frame(yuv_frame_t  *ref,yuv_frame_t  *rec)
 
 }
 
-void clpf_frame(yuv_frame_t *rec, yuv_frame_t *org, const deblock_data_t *deblock_data, void *stream,
-                int (*decision)(int, int, yuv_frame_t *, yuv_frame_t *, const deblock_data_t *, int, void *)) {
-
+void clpf_frame(yuv_frame_t *rec, yuv_frame_t *org, const deblock_data_t *deblock_data, void *stream, int enable_sb_flag,
+                int(*decision)(int, int, yuv_frame_t *, yuv_frame_t *, const deblock_data_t *, int, void *)) {
   /* Constrained low-pass filter (CLPF) */
   int width = rec->width;
   int height = rec->height;
@@ -608,19 +607,17 @@ void clpf_frame(yuv_frame_t *rec, yuv_frame_t *org, const deblock_data_t *debloc
 
   for (k=0;k<num_sb_ver;k++){
     for (l=0;l<num_sb_hor;l++){
-      int cand = 0;
-
+      int numNoskip = 0;
       for (m=0;m<MAX_BLOCK_SIZE/block_size;m++){
         for (n=0;n<MAX_BLOCK_SIZE/block_size;n++){
           xpos = l*MAX_BLOCK_SIZE + n*block_size;
           ypos = k*MAX_BLOCK_SIZE + m*block_size;
           index = (ypos/MIN_PB_SIZE)*(width/MIN_PB_SIZE) + (xpos/MIN_PB_SIZE);
-          cand |= deblock_data[index].mode != MODE_BIPRED &&
-            (deblock_data[index].cbp.y || deblock_data[index].cbp.u || deblock_data[index].cbp.v);
+          numNoskip += deblock_data[index].mode != MODE_SKIP;
         }
       }
-
-      if (cand && decision(k, l, rec, org, deblock_data, block_size, stream)) {
+      //if (numNoskip > 16*enable_sb_flag && decision(k, l, rec, org, deblock_data, block_size, stream)) {
+      if (numNoskip > 0 * enable_sb_flag && decision(k, l, rec, org, deblock_data, block_size, stream)) { //Y
         uint8_t tmp[MAX_BLOCK_SIZE*MAX_BLOCK_SIZE*3/2];
         for (m=0; m<MAX_BLOCK_SIZE; m++)
           memcpy(tmp + m*MAX_BLOCK_SIZE, rec->y + (k*MAX_BLOCK_SIZE+m)*stride_y + l*MAX_BLOCK_SIZE, MAX_BLOCK_SIZE);
@@ -637,24 +634,20 @@ void clpf_frame(yuv_frame_t *rec, yuv_frame_t *org, const deblock_data_t *debloc
             xpos = l*MAX_BLOCK_SIZE + n*block_size;
             ypos = k*MAX_BLOCK_SIZE + m*block_size;
             index = (ypos/MIN_PB_SIZE)*(width/MIN_PB_SIZE) + (xpos/MIN_PB_SIZE);
-            int filter = deblock_data[index].mode != MODE_BIPRED;
-
+            //int filter = enable_sb_flag ? 1 : deblock_data[index].mode != MODE_BIPRED;
+            int filter = enable_sb_flag ? deblock_data[index].mode != MODE_SKIP : deblock_data[index].mode != MODE_BIPRED; //Z
             if (filter) {
-              /* Y */
-              if (deblock_data[index].cbp.y)
-                (use_simd ? clpf_block_simd : clpf_block)(rec->y,tmp,stride_y,MAX_BLOCK_SIZE, xpos,ypos,block_size,width, height);
-
-              /* C */
-              if (deblock_data[index].cbp.u)
-                (use_simd ? clpf_block_simd : clpf_block)(rec->u,tmp+MAX_BLOCK_SIZE*MAX_BLOCK_SIZE,stride_c,MAX_BLOCK_SIZE/2,xpos/2,ypos/2,block_size/2,width/2,height/2);
-              if (deblock_data[index].cbp.v)
-                (use_simd ? clpf_block_simd : clpf_block)(rec->v,tmp+MAX_BLOCK_SIZE*MAX_BLOCK_SIZE*5/4,stride_c,MAX_BLOCK_SIZE/2,xpos/2,ypos/2,block_size/2,width/2,height/2);
+              if (deblock_data[index].cbp.y || enable_sb_flag)
+                (use_simd ? clpf_block_simd : clpf_block)(rec->y, tmp, stride_y, MAX_BLOCK_SIZE, xpos, ypos, block_size, width, height);
+              if (deblock_data[index].cbp.u || enable_sb_flag)
+                (use_simd ? clpf_block_simd : clpf_block)(rec->u, tmp + MAX_BLOCK_SIZE*MAX_BLOCK_SIZE, stride_c, MAX_BLOCK_SIZE / 2, xpos / 2, ypos / 2, block_size / 2, width / 2, height / 2);
+              if (deblock_data[index].cbp.v || enable_sb_flag)
+                (use_simd ? clpf_block_simd : clpf_block)(rec->v, tmp + MAX_BLOCK_SIZE*MAX_BLOCK_SIZE * 5 / 4, stride_c, MAX_BLOCK_SIZE / 2, xpos / 2, ypos / 2, block_size / 2, width / 2, height / 2);
             }
           }
         }
         for (m=0; m<MAX_BLOCK_SIZE; m++)
           memcpy(rec->y + (k*MAX_BLOCK_SIZE+m)*stride_y + l*MAX_BLOCK_SIZE, tmp + m*MAX_BLOCK_SIZE, MAX_BLOCK_SIZE);
-
         for (m=0; m<MAX_BLOCK_SIZE/2; m++) {
           memcpy(rec->u + (k*MAX_BLOCK_SIZE/2+m)*stride_c + l*MAX_BLOCK_SIZE/2,
                  tmp+MAX_BLOCK_SIZE*MAX_BLOCK_SIZE + m*MAX_BLOCK_SIZE/2, MAX_BLOCK_SIZE/2);
diff --git a/common/common_frame.h b/common/common_frame.h
index 5b369fa..c36c493 100644
--- a/common/common_frame.h
+++ b/common/common_frame.h
@@ -35,7 +35,6 @@ void read_yuv_frame(yuv_frame_t  *frame, int width, int height, FILE *infile);
 void write_yuv_frame(yuv_frame_t  *frame, int width, int height, FILE *outfile);
 void pad_yuv_frame(yuv_frame_t* f);
 void create_reference_frame(yuv_frame_t  *ref,yuv_frame_t  *rec);
-void clpf_frame(yuv_frame_t *rec, yuv_frame_t *org, const deblock_data_t *deblock_data, void *stream,
-                int (*decision)(int, int, yuv_frame_t *, yuv_frame_t *, const deblock_data_t *, int, void *));
-
+void clpf_frame(yuv_frame_t *rec, yuv_frame_t *org, const deblock_data_t *deblock_data, void *stream,int enable_sb_flag,
+                int(*decision)(int, int, yuv_frame_t *, yuv_frame_t *, const deblock_data_t *, int, void *));
 #endif
diff --git a/dec/decode_frame.c b/dec/decode_frame.c
index 14085fe..c98bae5 100644
--- a/dec/decode_frame.c
+++ b/dec/decode_frame.c
@@ -133,8 +133,8 @@ void decode_frame(decoder_info_t *decoder_info, yuv_frame_t* rec_buffer)
   }
 
   if (decoder_info->clpf && get_flc(1, stream)){
-    clpf_frame(decoder_info->rec, 0, decoder_info->deblock_data, stream,
-               get_flc(1, stream) ? clpf_true : clpf_bit);
+    int enable_sb_flag = !get_flc(1, stream);
+    clpf_frame(decoder_info->rec, 0, decoder_info->deblock_data, stream, enable_sb_flag, enable_sb_flag ? clpf_bit : clpf_true);
   }
 
   /* Sliding window operation for reference frame buffer by circular buffer */
diff --git a/enc/encode_block.c b/enc/encode_block.c
index 375789a..291224e 100644
--- a/enc/encode_block.c
+++ b/enc/encode_block.c
@@ -2745,7 +2745,7 @@ void detect_clpf(const uint8_t *rec,const uint8_t *org,int x0, int y0, int width
       int B = x == left ? X : rec[(y+0)*stride + x-1];
       int C = x == right ? X : rec[(y+0)*stride + x+1];
       int D = y == bottom ? X : rec[(y+1)*stride + x+0];
-      int delta = ((A>X)+(B>X)+(C>X)+(D>X) > 2) - ((A<X)+(B<X)+(C<X)+(D<X) > 2);
+      int delta = clpf_sample(X, A, B, C, D);
       int F = X + delta;
       *sum0 += (O-X)*(O-X);
       *sum1 += (O-F)*(O-F);
diff --git a/enc/encode_frame.c b/enc/encode_frame.c
index f1dc576..1fa86f0 100644
--- a/enc/encode_frame.c
+++ b/enc/encode_frame.c
@@ -50,14 +50,14 @@ static int clpf_true(int k, int l, yuv_frame_t *r, yuv_frame_t *o, const deblock
 }
 
 static int clpf_decision(int k, int l, yuv_frame_t *rec, yuv_frame_t *org, const deblock_data_t *deblock_data, int block_size, void *stream) {
-    int sum0 = 0, sum1 = 0;
+  int sum0 = 0, sum1 = 0;
   for (int m=0;m<MAX_BLOCK_SIZE/block_size;m++){
     for (int n=0;n<MAX_BLOCK_SIZE/block_size;n++){
       int xpos = l*MAX_BLOCK_SIZE + n*block_size;
       int ypos = k*MAX_BLOCK_SIZE + m*block_size;
-      int index = (ypos/MIN_PB_SIZE)*(rec->width/MIN_PB_SIZE) + (xpos/MIN_PB_SIZE);
-      if (deblock_data[index].cbp.y && deblock_data[index].mode != MODE_BIPRED)
-        (use_simd ? detect_clpf_simd : detect_clpf)(rec->y,org->y,xpos,ypos,rec->width,rec->height,org->stride_y,rec->stride_y,&sum0,&sum1);
+      int index = (ypos / MIN_PB_SIZE)*(rec->width / MIN_PB_SIZE) + (xpos / MIN_PB_SIZE); //Z
+      if (deblock_data[index].mode != MODE_SKIP) //Z
+        (use_simd ? detect_clpf_simd : detect_clpf)(rec->y, org->y, xpos, ypos, rec->width, rec->height, org->stride_y, rec->stride_y, &sum0, &sum1);
     }
   }
   put_flc(1, sum1 < sum0, (stream_t*)stream);
@@ -185,13 +185,11 @@ void encode_frame(encoder_info_t *encoder_info)
     deblock_frame_uv(encoder_info->rec, encoder_info->deblock_data, width, height, qpc);
   }
 
-  int sb_signal = 1;
-
   if (encoder_info->params->clpf){
+    int enable_sb_flag = encoder_info->params->clpf==2 ? 0 : 1;
     put_flc(1, 1, stream);
-    put_flc(1, !sb_signal, stream);
-    clpf_frame(encoder_info->rec, encoder_info->orig, encoder_info->deblock_data, stream,
-               sb_signal ? clpf_decision : clpf_true);
+    put_flc(1, !enable_sb_flag, stream);
+    clpf_frame(encoder_info->rec, encoder_info->orig, encoder_info->deblock_data, stream, enable_sb_flag, enable_sb_flag ? clpf_decision : clpf_true);
   }
 
   if (encoder_info->params->bitrate > 0) {
diff --git a/enc/mainenc.c b/enc/mainenc.c
index 5514c39..3fa9423 100644
--- a/enc/mainenc.c
+++ b/enc/mainenc.c
@@ -209,7 +209,7 @@ int main(int argc, char **argv)
   put_flc(1,params->interp_ref,&stream);// Use an interpolated reference frame
   put_flc(1, (params->max_delta_qp || params->bitrate), &stream);
   put_flc(1,params->deblocking,&stream);
-  put_flc(1,params->clpf,&stream);
+  put_flc(1,params->clpf ? 1 : 0,&stream);
   put_flc(1,params->use_block_contexts,&stream);
   put_flc(1,params->enable_bipred,&stream);
   put_flc(1,params->qmtx,&stream);
diff --git a/enc/strings.c b/enc/strings.c
index 025ebcd..dca781e 100644
--- a/enc/strings.c
+++ b/enc/strings.c
@@ -332,7 +332,7 @@ enc_params *parse_config_params(int argc, char **argv)
   add_param_to_list(&list, "-encoder_speed",         "0", ARG_INTEGER,  &params->encoder_speed);
   add_param_to_list(&list, "-sync",                  "0", ARG_INTEGER,  &params->sync);
   add_param_to_list(&list, "-deblocking",            "1", ARG_INTEGER,  &params->deblocking);
-  add_param_to_list(&list, "-clpf",                  "1", ARG_INTEGER,  &params->clpf);
+  add_param_to_list(&list, "-clpf",                  "1", ARG_INTEGER,  &params->clpf); //0: off, 1: SB-level, 2: frame-level
   add_param_to_list(&list, "-snrcalc",               "1", ARG_INTEGER,  &params->snrcalc);
   add_param_to_list(&list, "-use_block_contexts",    "0", ARG_INTEGER,  &params->use_block_contexts);
   add_param_to_list(&list, "-enable_bipred",         "0", ARG_INTEGER,  &params->enable_bipred);

