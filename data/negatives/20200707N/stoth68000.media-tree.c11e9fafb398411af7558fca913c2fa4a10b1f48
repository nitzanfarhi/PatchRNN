commit c11e9fafb398411af7558fca913c2fa4a10b1f48
Author: Mark Fasheh <mark.fasheh@oracle.com>
Date:   Fri Jul 20 11:24:53 2007 -0700

    ocfs2: Restrict inode changes in ocfs2_update_inode_atime()
    
    ocfs2_update_inode_atime() calls ocfs2_mark_inode_dirty() to push changes
    from the struct inode into the ocfs2 disk inode. The problem is,
    ocfs2_mark_inode_dirty() might change other fields, depending on what
    happened to the struct inode. Since we don't always have locking to
    serialize changes to other fields (like i_size, etc), just fix things up to
    only touch the atime field.
    
    Signed-off-by: Mark Fasheh <mark.fasheh@oracle.com>

diff --git a/fs/ocfs2/file.c b/fs/ocfs2/file.c
index c4034f693e7b..992eb567cb4d 100644
--- a/fs/ocfs2/file.c
+++ b/fs/ocfs2/file.c
@@ -187,6 +187,7 @@ int ocfs2_update_inode_atime(struct inode *inode,
 	int ret;
 	struct ocfs2_super *osb = OCFS2_SB(inode->i_sb);
 	handle_t *handle;
+	struct ocfs2_dinode *di = (struct ocfs2_dinode *) bh->b_data;
 
 	mlog_entry_void();
 
@@ -197,11 +198,27 @@ int ocfs2_update_inode_atime(struct inode *inode,
 		goto out;
 	}
 
+	ret = ocfs2_journal_access(handle, inode, bh,
+				   OCFS2_JOURNAL_ACCESS_WRITE);
+	if (ret) {
+		mlog_errno(ret);
+		goto out_commit;
+	}
+
+	/*
+	 * Don't use ocfs2_mark_inode_dirty() here as we don't always
+	 * have i_mutex to guard against concurrent changes to other
+	 * inode fields.
+	 */
 	inode->i_atime = CURRENT_TIME;
-	ret = ocfs2_mark_inode_dirty(handle, inode, bh);
+	di->i_atime = cpu_to_le64(inode->i_atime.tv_sec);
+	di->i_atime_nsec = cpu_to_le32(inode->i_atime.tv_nsec);
+
+	ret = ocfs2_journal_dirty(handle, bh);
 	if (ret < 0)
 		mlog_errno(ret);
 
+out_commit:
 	ocfs2_commit_trans(OCFS2_SB(inode->i_sb), handle);
 out:
 	mlog_exit(ret);

