commit ad6baf0824f0169a0991fd7e14df532467f44360
Author: pancake <pancake@nopcode.org>
Date:   Fri Nov 27 20:35:40 2015 +0100

    Add rpath and scnperm in rabin2 -O

diff --git a/binr/rabin2/rabin2.c b/binr/rabin2/rabin2.c
index 4b9aa9e53..f6c3b2694 100644
--- a/binr/rabin2/rabin2.c
+++ b/binr/rabin2/rabin2.c
@@ -347,11 +347,23 @@ static int rabin_do_operation(const char *op) {
 			goto _rabin_do_operation_error;
 		}
 		break;
+	case 'R':
+		r_bin_wr_rpath_del (bin);
+		break;
 	case 'r':
 		r_bin_wr_scn_resize (bin, ptr, r_num_math (NULL, ptr2));
 		if (!output) output = "out";
 		r_bin_wr_output (bin, output);
 		break;
+	case 'p':
+		{
+			int perms = r_num_math (NULL, ptr2);
+			if (!perms) perms = r_str_rwx (ptr2);
+			r_bin_wr_scn_perms (bin, ptr, perms);
+			if (!output) output = "out";
+			r_bin_wr_output (bin, output);
+		}
+		break;
 	default:
 	_rabin_do_operation_error:
 		eprintf ("Unknown operation. use -O help\n");
@@ -548,13 +560,15 @@ int main(int argc, char **argv) {
 			set_action (ACTION_OPERATION);
 			if (op && !strcmp (op, "help")) {
 				printf ("Operation string:\n"
-						"  Dump symbols: d/s/1024\n"
-						"  Dump section: d/S/.text\n"
-						"  Resize section: r/.data/1024\n");
+					"  Dump symbols: d/s/1024\n"
+					"  Dump section: d/S/.text\n"
+					"  Resize section: r/.data/1024\n"
+					"  Remove RPATH: R\n"
+					"  Change permissions: p/.data/rwx\n");
 				r_core_fini (&core);
 				return 0;
 			}
-			if (optind==argc) {
+			if (optind == argc) {
 				eprintf ("Missing filename\n");
 				r_core_fini (&core);
 				return 1;
@@ -913,7 +927,7 @@ int main(int argc, char **argv) {
 		rabin_show_srcline (at);
 	if (action&ACTION_EXTRACT)
 		rabin_extract ((arch==NULL && arch_name==NULL && bits==0));
-	if (op != NULL && action&ACTION_OPERATION)
+	if (op != NULL && action & ACTION_OPERATION)
 		rabin_do_operation (op);
 	if (isradjson)
 		printf ("}");
diff --git a/libr/bin/bin_write.c b/libr/bin/bin_write.c
index 41dd66e7e..f698643a0 100644
--- a/libr/bin/bin_write.c
+++ b/libr/bin/bin_write.c
@@ -15,14 +15,23 @@ R_API ut64 r_bin_wr_scn_resize(RBin *bin, const char *name, ut64 size) {
 	return R_FALSE;
 }
 
-R_API int r_bin_wr_rpath_del(RBin *bin) {
+R_API bool r_bin_wr_scn_perms(RBin *bin, const char *name, int perms) {
+	RBinFile *binfile = r_bin_cur (bin);
+	RBinPlugin *plugin = r_bin_file_cur_plugin (binfile);
+	if (plugin && plugin->write && plugin->write->scn_perms) {
+		return plugin->write->scn_perms (bin->cur, name, perms);
+	}
+	return false;
+}
+
+R_API bool r_bin_wr_rpath_del(RBin *bin) {
 	RBinFile *binfile = r_bin_cur (bin);
 	RBinPlugin *plugin = r_bin_file_cur_plugin (binfile);
 	if (plugin && plugin->write &&
 		plugin->write->rpath_del){
 		return plugin->write->rpath_del (bin->cur);
 	}
-	return R_FALSE;
+	return false;
 }
 
 R_API int r_bin_wr_output(RBin *bin, const char *filename) {
diff --git a/libr/bin/format/elf/elf.c b/libr/bin/format/elf/elf.c
index e4f885925..8f2f2018f 100644
--- a/libr/bin/format/elf/elf.c
+++ b/libr/bin/format/elf/elf.c
@@ -89,10 +89,8 @@ static int init_phdr(struct Elf_(r_bin_elf_obj_t) *bin) {
 	if (bin->ehdr.e_phnum == 0)
 		return false;
 	if (bin->phdr) return true;
-
 	if (!UT32_MUL (&phdr_size, bin->ehdr.e_phnum, sizeof (Elf_(Phdr))))
 		return false;
-
 	if (!phdr_size)
 		return false;
 	if (phdr_size > bin->size)
@@ -101,7 +99,6 @@ static int init_phdr(struct Elf_(r_bin_elf_obj_t) *bin) {
 		return false;
 	if (bin->ehdr.e_phoff + phdr_size > bin->size)
 		return false;
-
 	if ((bin->phdr = calloc (phdr_size, 1)) == NULL) {
 		perror ("malloc (phdr)");
 		return false;
@@ -181,8 +178,7 @@ static int init_strtab(struct Elf_(r_bin_elf_obj_t) *bin) {
             (bin->ehdr.e_shstrndx >= SHN_LORESERVE && bin->ehdr.e_shstrndx <= SHN_HIRESERVE)))
             return false;
 
-	/* sh_size must be lower than UT32_MAX and not equal to zero, to avoid bugs
-	   on malloc() */
+	/* sh_size must be lower than UT32_MAX and not equal to zero, to avoid bugs on malloc() */
 	if (bin->shdr[bin->ehdr.e_shstrndx].sh_size > UT32_MAX)
 		return false;
 	if (!bin->shdr[bin->ehdr.e_shstrndx].sh_size)
@@ -1366,19 +1362,18 @@ struct r_bin_elf_section_t* Elf_(r_bin_elf_get_sections)(struct Elf_(r_bin_elf_o
 		//memset (ret[i].name, 0, sizeof (ret[i].name));
 		nidx = bin->shdr[i].sh_name;
 #define SHNAME (int)bin->shdr[i].sh_name
-#define SHNLEN ELF_STRING_LENGTH-4
+#define SHNLEN ELF_STRING_LENGTH - 4
 #define SHSIZE (int)bin->shstrtab_size
 		if (nidx<0 || !bin->shstrtab_section ||
 			!bin->shstrtab_size|| nidx > bin->shstrtab_size) {
-			snprintf(invalid_s, sizeof(invalid_s)-4, "invalid%d", invalid_c);
+			snprintf (invalid_s, sizeof (invalid_s) - 4, "invalid%d", invalid_c);
 			strncpy (ret[i].name, invalid_s, SHNLEN);
 			invalid_c++;
-		}
-		else {
+		} else {
 			if (bin->shstrtab && (SHNAME > 0) && (SHNAME+8 < SHSIZE)) {
 				strncpy (ret[i].name, &bin->shstrtab[SHNAME], SHNLEN);
 			} else {
-				snprintf(unknown_s, sizeof(unknown_s)-4, "unknown%d", unknown_c);
+				snprintf (unknown_s, sizeof (unknown_s)-4, "unknown%d", unknown_c);
 				strncpy (ret[i].name, unknown_s, sizeof (ret[i].name)-4);
 				unknown_c++;
 			}
diff --git a/libr/bin/format/elf/elf.h b/libr/bin/format/elf/elf.h
index 41e72abbe..7b1812358 100644
--- a/libr/bin/format/elf/elf.h
+++ b/libr/bin/format/elf/elf.h
@@ -129,6 +129,7 @@ void* Elf_(r_bin_elf_free)(struct Elf_(r_bin_elf_obj_t)* bin);
 struct Elf_(r_bin_elf_obj_t)* Elf_(r_bin_elf_new)(const char* file);
 struct Elf_(r_bin_elf_obj_t)* Elf_(r_bin_elf_new_buf)(struct r_buf_t *buf);
 ut64 Elf_(r_bin_elf_resize_section)(struct Elf_(r_bin_elf_obj_t) *bin, const char *name, ut64 size);
+bool Elf_(r_bin_elf_section_perms)(struct Elf_(r_bin_elf_obj_t) *bin, const char *name, int perms);
 int Elf_(r_bin_elf_del_rpath)(struct Elf_(r_bin_elf_obj_t) *bin);
 int Elf_(r_bin_elf_has_relro)(struct Elf_(r_bin_elf_obj_t) *bin);
 int Elf_(r_bin_elf_has_nx)(struct Elf_(r_bin_elf_obj_t) *bin);
diff --git a/libr/bin/format/elf/elf64_write.c b/libr/bin/format/elf/elf64_write.c
index 444882de4..bc987283d 100644
--- a/libr/bin/format/elf/elf64_write.c
+++ b/libr/bin/format/elf/elf64_write.c
@@ -1,4 +1,4 @@
-/* radare - LGPL - Copyright 2008-2010 nibble<.ds@gmail.com> */
+/* radare - LGPL - Copyright 2008-2015 nibble, pancake */
 
 #define R_BIN_ELF64 1
 #include "elf_write.c"
diff --git a/libr/bin/format/elf/elf_write.c b/libr/bin/format/elf/elf_write.c
index 6a4ecc567..143b6ab59 100644
--- a/libr/bin/format/elf/elf_write.c
+++ b/libr/bin/format/elf/elf_write.c
@@ -1,4 +1,4 @@
-/* radare - LGPL - Copyright 2010 nibble<.ds@gmail.com> */
+/* radare - LGPL - Copyright 2010-2015 pancake, nibble */
 
 #include <stdio.h>
 #include <stdlib.h>
@@ -15,14 +15,14 @@ ut64 Elf_(r_bin_elf_resize_section)(struct Elf_(r_bin_elf_obj_t) *bin, const cha
 	Elf_(Ehdr) *ehdr = &bin->ehdr;
 	Elf_(Phdr) *phdr = bin->phdr, *phdrp;
 	Elf_(Shdr) *shdr = bin->shdr, *shdrp;
-	const char *strtab = bin->strtab;
+	const char *strtab = bin->shstrtab;
 	ut8 *buf;
 	ut64 off, got_offset = 0, got_addr = 0, rsz_offset = 0, delta = 0;
 	ut64 rsz_osize = 0, rsz_size = size, rest_size = 0;
 	int i, j, done = 0;
 
 	if (size == 0) {
-		printf("0 size section?\n");
+		eprintf ("0 size section?\n");
 		return 0;
 	}
 
@@ -35,11 +35,11 @@ ut64 Elf_(r_bin_elf_resize_section)(struct Elf_(r_bin_elf_obj_t) *bin, const cha
 		}
 
 	if (delta == 0) {
-		printf("Cannot find section\n");
+		eprintf ("Cannot find section\n");
 		return 0;
 	}
  
-	printf("delta: %"PFMT64d"\n", delta);
+	eprintf ("delta: %"PFMT64d"\n", delta);
 	
 	/* rewrite rel's (imports) */
 	for (i = 0, shdrp = shdr; i < ehdr->e_shnum; i++, shdrp++) {
@@ -53,14 +53,14 @@ ut64 Elf_(r_bin_elf_resize_section)(struct Elf_(r_bin_elf_obj_t) *bin, const cha
 	}
 
 	for (i = 0, shdrp = shdr; i < ehdr->e_shnum; i++, shdrp++) {
-		if (!strcmp(&strtab[shdrp->sh_name], ".rel.plt")) {
+		if (!strcmp (&strtab[shdrp->sh_name], ".rel.plt")) {
 			Elf_(Rel) *rel, *relp;
 			rel = (Elf_(Rel) *)malloc (1+shdrp->sh_size);
 			if (rel == NULL) {
 				perror ("malloc");
 				return 0;
 			}
-			if (r_buf_read_at(bin->b, shdrp->sh_offset, (ut8*)rel, shdrp->sh_size) == -1)
+			if (r_buf_read_at (bin->b, shdrp->sh_offset, (ut8*)rel, shdrp->sh_size) == -1)
 				perror("read (rel)");
 
 			for (j = 0, relp = rel; j < shdrp->sh_size; j += sizeof(Elf_(Rel)), relp++) {
@@ -76,7 +76,7 @@ ut64 Elf_(r_bin_elf_resize_section)(struct Elf_(r_bin_elf_obj_t) *bin, const cha
 			}
 			free(rel);
 			break;
-		} else if (!strcmp(&strtab[shdrp->sh_name], ".rela.plt")) {
+		} else if (!strcmp (&strtab[shdrp->sh_name], ".rela.plt")) {
 			Elf_(Rela) *rel, *relp;
 			rel = (Elf_(Rela) *)malloc (1+shdrp->sh_size);
 			if (rel == NULL) {
@@ -206,3 +206,39 @@ int Elf_(r_bin_elf_del_rpath)(struct Elf_(r_bin_elf_obj_t) *bin) {
 		}
 	return true;
 }
+
+bool Elf_(r_bin_elf_section_perms)(struct Elf_(r_bin_elf_obj_t) *bin, const char *name, int perms) {
+	Elf_(Ehdr) *ehdr = &bin->ehdr;
+	Elf_(Shdr) *shdr = bin->shdr, *shdrp;
+	const char *strtab = bin->shstrtab;
+	int patchoff;
+	int i;
+
+	/* calculate delta */
+	for (i = 0, shdrp = shdr; i < ehdr->e_shnum; i++, shdrp++) {
+		const char *shname = &strtab[shdrp->sh_name];
+		int operms = shdrp->sh_flags;
+		if (!strncmp (name, shname, ELF_STRING_LENGTH)) {
+			ut8 newperms = (ut8)operms;
+			// SHF_EXECINSTR
+			if (perms & 1) {
+				R_BIT_SET (&newperms, 2);
+			} else {
+				R_BIT_UNSET (&newperms, 2);
+			}
+			// SHF_WRITE
+			if (perms & 2) {
+				R_BIT_SET (&newperms, 0);
+			} else {
+				R_BIT_UNSET (&newperms, 0);
+			}
+			patchoff = bin->ehdr.e_shoff;
+			patchoff += ((const ut8*)shdrp - (const ut8*)bin->shdr);
+			patchoff += r_offsetof (Elf_(Shdr), sh_flags);
+			printf ("wx %02x @ 0x%x\n", newperms, patchoff);
+			r_buf_write_at (bin->b, patchoff, (ut8*)&newperms, 1);
+			return true;
+		}
+	}
+	return false;
+}
diff --git a/libr/bin/p/bin_write_elf.c b/libr/bin/p/bin_write_elf.c
index e3fe64fa4..03a12202b 100644
--- a/libr/bin/p/bin_write_elf.c
+++ b/libr/bin/p/bin_write_elf.c
@@ -8,13 +8,18 @@ static ut64 scn_resize(RBinFile *arch, const char *name, ut64 size) {
 	return Elf_(r_bin_elf_resize_section) (arch->o->bin_obj, name, size);
 }
 
+static bool scn_perms(RBinFile *arch, const char *name, int perms) {
+	return Elf_(r_bin_elf_section_perms) (arch->o->bin_obj, name, perms);
+}
+
 static int rpath_del(RBinFile *arch) {
 	return Elf_(r_bin_elf_del_rpath) (arch->o->bin_obj);
 }
 
 #if !R_BIN_ELF64
-struct r_bin_write_t r_bin_write_elf = {
+RBinWrite r_bin_write_elf = {
 	.scn_resize = &scn_resize,
+	.scn_perms = &scn_perms,
 	.rpath_del = &rpath_del,
 };
 #endif
diff --git a/libr/bin/p/bin_write_elf64.c b/libr/bin/p/bin_write_elf64.c
index 63eb08ba3..a83f26826 100644
--- a/libr/bin/p/bin_write_elf64.c
+++ b/libr/bin/p/bin_write_elf64.c
@@ -1,9 +1,10 @@
-/* radare - LGPL - Copyright 2009-2011 nibble<.ds@gmail.com> */
+/* radare - LGPL - Copyright 2009-2015 pancake, nibble */
 
 #define R_BIN_ELF64 1
 #include "bin_write_elf.c"
 
-struct r_bin_write_t r_bin_write_elf64 = {
+RBinWrite r_bin_write_elf64 = {
 	.scn_resize = &scn_resize,
+	.scn_perms = &scn_perms,
 	.rpath_del = &rpath_del,
 };
diff --git a/libr/include/r_bin.h b/libr/include/r_bin.h
index 162d53de6..f1b8404c0 100644
--- a/libr/include/r_bin.h
+++ b/libr/include/r_bin.h
@@ -374,6 +374,7 @@ typedef struct r_bin_dbginfo_t {
 
 typedef struct r_bin_write_t {
 	ut64 (*scn_resize)(RBinFile *arch, const char *name, ut64 size);
+	bool (*scn_perms)(RBinFile *arch, const char *name, int perms);
 	int (*rpath_del)(RBinFile *arch);
 } RBinWrite;
 
@@ -502,7 +503,8 @@ R_API char *r_bin_addr2text(RBin *bin, ut64 addr);
 R_API char *r_bin_addr2fileline(RBin *bin, ut64 addr);
 /* bin_write.c */
 R_API ut64 r_bin_wr_scn_resize(RBin *bin, const char *name, ut64 size);
-R_API int r_bin_wr_rpath_del(RBin *bin);
+R_API bool r_bin_wr_scn_perms(RBin *bin, const char *name, int perms);
+R_API bool r_bin_wr_rpath_del(RBin *bin);
 R_API int r_bin_wr_output(RBin *bin, const char *filename);
 R_API int r_bin_dwarf_parse_info(RBinDwarfDebugAbbrev *da, RBin *a, int mode);
 R_API RList *r_bin_dwarf_parse_line(RBin *a, int mode);
diff --git a/libr/util/buf.c b/libr/util/buf.c
index 5ddab4098..3fb15c5bc 100644
--- a/libr/util/buf.c
+++ b/libr/util/buf.c
@@ -451,7 +451,7 @@ R_API int r_buf_fread_at (RBuffer *b, ut64 addr, ut8 *buf, const char *fmt, int
 
 //ret 0 or -1 if failed; ret copied length if success
 R_API int r_buf_write_at(RBuffer *b, ut64 addr, const ut8 *buf, int len) {
-	if (!b) return 0;
+	if (!b || !buf || len < 1) return 0;
 	if (b->empty) {
 		b->empty = 0;
 		free (b->buf);

