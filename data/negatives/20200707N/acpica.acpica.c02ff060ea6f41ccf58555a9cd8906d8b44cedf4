commit c02ff060ea6f41ccf58555a9cd8906d8b44cedf4
Author: aystarik <aystarik>
Date:   Wed Jun 29 18:25:51 2005 +0000

    UtFormatException obsoleted;  AcpiFormatException substituted globally
    
    
    date    2001.07.06.22.16.00;    author rmoore1; state Exp;

diff --git a/source/components/namespace/nseval.c b/source/components/namespace/nseval.c
index a3498d760..ba47e01d5 100644
--- a/source/components/namespace/nseval.c
+++ b/source/components/namespace/nseval.c
@@ -2,7 +2,7 @@
  *
  * Module Name: nseval - Object evaluation interfaces -- includes control
  *                       method lookup and execution.
- *              $Revision: 1.88 $
+ *              $Revision: 1.93 $
  *
  ******************************************************************************/
 
@@ -186,12 +186,12 @@ AcpiNsEvaluateRelative (
 
     /* Get the prefix handle and Node */
 
-    AcpiCmAcquireMutex (ACPI_MTX_NAMESPACE);
+    AcpiUtAcquireMutex (ACPI_MTX_NAMESPACE);
 
     PrefixNode = AcpiNsConvertHandleToEntry (Handle);
     if (!PrefixNode)
     {
-        AcpiCmReleaseMutex (ACPI_MTX_NAMESPACE);
+        AcpiUtReleaseMutex (ACPI_MTX_NAMESPACE);
         Status = AE_BAD_PARAMETER;
         goto Cleanup;
     }
@@ -203,13 +203,12 @@ AcpiNsEvaluateRelative (
                             IMODE_EXECUTE, NS_NO_UPSEARCH, NULL,
                             &Node);
 
-    AcpiCmReleaseMutex (ACPI_MTX_NAMESPACE);
+    AcpiUtReleaseMutex (ACPI_MTX_NAMESPACE);
 
     if (ACPI_FAILURE (Status))
     {
-        DEBUG_PRINT (ACPI_INFO,
-            ("NsEvaluateRelative: Object [%s] not found [%s]\n",
-            Pathname, AcpiCmFormatException (Status)));
+        DEBUG_PRINTP (ACPI_INFO, ("Object [%s] not found [%s]\n",
+            Pathname, AcpiFormatException (Status)));
         goto Cleanup;
     }
 
@@ -218,22 +217,17 @@ AcpiNsEvaluateRelative (
      * to evaluate it.
      */
 
-    DEBUG_PRINT (ACPI_INFO,
-        ("NsEvaluateRelative: %s [%p] Value %p\n",
+    DEBUG_PRINTP (ACPI_INFO, ("%s [%p] Value %p\n",
         Pathname, Node, Node->Object));
 
     Status = AcpiNsEvaluateByHandle (Node, Params, ReturnObject);
 
-    DEBUG_PRINT (ACPI_INFO,
-        ("NsEvaluateRelative: *** Completed eval of object %s ***\n",
+    DEBUG_PRINTP (ACPI_INFO, ("*** Completed eval of object %s ***\n",
         Pathname));
 
 Cleanup:
 
-    /* Cleanup */
-
-    AcpiCmFree (InternalPath);
-
+    ACPI_MEM_FREE (InternalPath);
     return_ACPI_STATUS (Status);
 }
 
@@ -280,7 +274,7 @@ AcpiNsEvaluateByName (
         return_ACPI_STATUS (Status);
     }
 
-    AcpiCmAcquireMutex (ACPI_MTX_NAMESPACE);
+    AcpiUtAcquireMutex (ACPI_MTX_NAMESPACE);
 
     /* Lookup the name in the namespace */
 
@@ -288,12 +282,11 @@ AcpiNsEvaluateByName (
                             IMODE_EXECUTE, NS_NO_UPSEARCH, NULL,
                             &Node);
 
-    AcpiCmReleaseMutex (ACPI_MTX_NAMESPACE);
+    AcpiUtReleaseMutex (ACPI_MTX_NAMESPACE);
 
     if (ACPI_FAILURE (Status))
     {
-        DEBUG_PRINT (ACPI_INFO,
-            ("NsEvaluateByName: Object at [%s] was not found, status=%.4X\n",
+        DEBUG_PRINTP (ACPI_INFO, ("Object at [%s] was not found, status=%.4X\n",
             Pathname, Status));
         goto Cleanup;
     }
@@ -303,14 +296,12 @@ AcpiNsEvaluateByName (
      * to evaluate it.
      */
 
-    DEBUG_PRINT (ACPI_INFO,
-        ("NsEvaluateByName: %s [%p] Value %p\n",
+    DEBUG_PRINTP (ACPI_INFO, ("%s [%p] Value %p\n", 
         Pathname, Node, Node->Object));
 
     Status = AcpiNsEvaluateByHandle (Node, Params, ReturnObject);
 
-    DEBUG_PRINT (ACPI_INFO,
-        ("NsEvaluateByName: *** Completed eval of object %s ***\n",
+    DEBUG_PRINTP (ACPI_INFO, ("*** Completed eval of object %s ***\n",
         Pathname));
 
 
@@ -320,7 +311,7 @@ Cleanup:
 
     if (InternalPath)
     {
-        AcpiCmFree (InternalPath);
+        ACPI_MEM_FREE (InternalPath);
     }
 
     return_ACPI_STATUS (Status);
@@ -383,12 +374,12 @@ AcpiNsEvaluateByHandle (
 
     /* Get the prefix handle and Node */
 
-    AcpiCmAcquireMutex (ACPI_MTX_NAMESPACE);
+    AcpiUtAcquireMutex (ACPI_MTX_NAMESPACE);
 
     Node = AcpiNsConvertHandleToEntry (Handle);
     if (!Node)
     {
-        AcpiCmReleaseMutex (ACPI_MTX_NAMESPACE);
+        AcpiUtReleaseMutex (ACPI_MTX_NAMESPACE);
         return_ACPI_STATUS (AE_BAD_PARAMETER);
     }
 
@@ -493,26 +484,23 @@ AcpiNsExecuteControlMethod (
 
     /* Verify that there is a method associated with this object */
 
-    ObjDesc = AcpiNsGetAttachedObject ((ACPI_HANDLE) MethodNode);
+    ObjDesc = AcpiNsGetAttachedObject (MethodNode);
     if (!ObjDesc)
     {
-        DEBUG_PRINT (ACPI_ERROR,
-            ("Control method is undefined (nil value)\n"));
+        DEBUG_PRINTP (ACPI_ERROR, ("No attached method object\n"));
 
-        AcpiCmReleaseMutex (ACPI_MTX_NAMESPACE);
+        AcpiUtReleaseMutex (ACPI_MTX_NAMESPACE);
         return_ACPI_STATUS (AE_ERROR);
     }
 
 
-    DEBUG_PRINT (ACPI_INFO, ("Control method at Offset %x Length %lx]\n",
-                    ObjDesc->Method.Pcode + 1,
-                    ObjDesc->Method.PcodeLength - 1));
+    DEBUG_PRINTP (ACPI_INFO, ("Control method at Offset %x Length %lx]\n",
+        ObjDesc->Method.Pcode + 1, ObjDesc->Method.PcodeLength - 1));
 
     DUMP_PATHNAME (MethodNode, "NsExecuteControlMethod: Executing",
-                    TRACE_NAMES, _COMPONENT);
+        TRACE_NAMES, _COMPONENT);
 
-    DEBUG_PRINT (TRACE_NAMES,
-        ("At offset %8XH\n", ObjDesc->Method.Pcode + 1));
+    DEBUG_PRINTP (TRACE_NAMES, ("At offset %8XH\n", ObjDesc->Method.Pcode + 1));
 
 
     /*
@@ -522,12 +510,12 @@ AcpiNsExecuteControlMethod (
      * interpreter locks to ensure that no thread is using the portion of the
      * namespace that is being deleted.
      */
-    AcpiCmReleaseMutex (ACPI_MTX_NAMESPACE);
+    AcpiUtReleaseMutex (ACPI_MTX_NAMESPACE);
 
     /*
      * Execute the method via the interpreter
      */
-    Status = AcpiAmlExecuteMethod (MethodNode, Params, ReturnObjDesc);
+    Status = AcpiExExecuteMethod (MethodNode, Params, ReturnObjDesc);
 
     return_ACPI_STATUS (Status);
 }
@@ -570,7 +558,7 @@ AcpiNsGetObjectValue (
         /*
          *  Create a Reference object to contain the object
          */
-        ObjDesc = AcpiCmCreateInternalObject (Node->Type);
+        ObjDesc = AcpiUtCreateInternalObject (Node->Type);
         if (!ObjDesc)
         {
            Status = AE_NO_MEMORY;
@@ -597,7 +585,7 @@ AcpiNsGetObjectValue (
 
         MEMCPY (ObjDesc, ValDesc, sizeof (ACPI_OPERAND_OBJECT));
         ObjDesc->Common.ReferenceCount = 1;
-        AcpiCmReleaseMutex (ACPI_MTX_NAMESPACE);
+        AcpiUtReleaseMutex (ACPI_MTX_NAMESPACE);
     }
 
 
@@ -609,7 +597,7 @@ AcpiNsGetObjectValue (
     {
         /* Create an Reference object to contain the object */
 
-        ObjDesc = AcpiCmCreateInternalObject (INTERNAL_TYPE_REFERENCE);
+        ObjDesc = AcpiUtCreateInternalObject (INTERNAL_TYPE_REFERENCE);
         if (!ObjDesc)
         {
            Status = AE_NO_MEMORY;
@@ -638,18 +626,18 @@ AcpiNsGetObjectValue (
          * intepreter.
          */
 
-        AcpiCmReleaseMutex (ACPI_MTX_NAMESPACE);
-        Status = AcpiAmlEnterInterpreter ();
+        AcpiUtReleaseMutex (ACPI_MTX_NAMESPACE);
+        Status = AcpiExEnterInterpreter ();
         if (ACPI_SUCCESS (Status))
         {
-            Status = AcpiAmlResolveToValue (&ObjDesc, NULL);
+            Status = AcpiExResolveToValue (&ObjDesc, NULL);
 
-            AcpiAmlExitInterpreter ();
+            AcpiExExitInterpreter ();
         }
     }
 
     /*
-     * If AcpiAmlResolveToValue() succeeded, the return value was
+     * If AcpiExResolveToValue() succeeded, the return value was
      * placed in ObjDesc.
      */
 
@@ -658,8 +646,7 @@ AcpiNsGetObjectValue (
         Status = AE_CTRL_RETURN_VALUE;
 
         *ReturnObjDesc = ObjDesc;
-        DEBUG_PRINT (ACPI_INFO,
-            ("NsGetObjectValue: Returning obj %p\n", *ReturnObjDesc));
+        DEBUG_PRINTP (ACPI_INFO, ("Returning obj %p\n", *ReturnObjDesc));
     }
 
     /* Namespace is unlocked */
@@ -671,6 +658,6 @@ UnlockAndExit:
 
     /* Unlock the namespace */
 
-    AcpiCmReleaseMutex (ACPI_MTX_NAMESPACE);
+    AcpiUtReleaseMutex (ACPI_MTX_NAMESPACE);
     return_ACPI_STATUS (Status);
 }
diff --git a/source/components/namespace/nsinit.c b/source/components/namespace/nsinit.c
index 7c747935c..a5ad75cea 100644
--- a/source/components/namespace/nsinit.c
+++ b/source/components/namespace/nsinit.c
@@ -1,7 +1,7 @@
 /******************************************************************************
  *
  * Module Name: nsinit - namespace initialization
- *              $Revision: 1.16 $
+ *              $Revision: 1.28 $
  *
  *****************************************************************************/
 
@@ -120,8 +120,9 @@
 #include "acpi.h"
 #include "acnamesp.h"
 #include "acdispat.h"
+#include "acinterp.h"
 
-#define _COMPONENT          NAMESPACE
+#define _COMPONENT          ACPI_NAMESPACE
         MODULE_NAME         ("nsinit")
 
 
@@ -149,8 +150,8 @@ AcpiNsInitializeObjects (
     FUNCTION_TRACE ("NsInitializeObjects");
 
 
-    DEBUG_PRINT (TRACE_DISPATCH,
-        ("NsInitializeObjects: **** Starting initialization of namespace objects ****\n"));
+    DEBUG_PRINTP (TRACE_DISPATCH,
+        ("**** Starting initialization of namespace objects ****\n"));
     DEBUG_PRINT_RAW (ACPI_OK, ("Completing Region and Field initialization:"));
 
 
@@ -168,23 +169,23 @@ AcpiNsInitializeObjects (
                                 &Info, NULL);
     if (ACPI_FAILURE (Status))
     {
-        DEBUG_PRINT (ACPI_ERROR,
-            ("NsInitializeObjects: WalkNamespace failed! %x\n", Status));
+        DEBUG_PRINTP (ACPI_ERROR, ("WalkNamespace failed! %x\n", Status));
     }
 
     DEBUG_PRINT_RAW (ACPI_OK,
         ("\n%d/%d Regions, %d/%d Fields initialized (%d nodes total)\n",
-        Info.OpRegionInit, Info.OpRegionCount, Info.FieldInit, Info.FieldCount, Info.ObjectCount));
-    DEBUG_PRINT (TRACE_DISPATCH,
-        ("NsInitializeObjects: %d Control Methods found\n", Info.MethodCount));
-    DEBUG_PRINT (TRACE_DISPATCH,
-        ("NsInitializeObjects: %d Op Regions found\n", Info.OpRegionCount));
+        Info.OpRegionInit, Info.OpRegionCount, Info.FieldInit,
+        Info.FieldCount, Info.ObjectCount));
+    DEBUG_PRINTP (TRACE_DISPATCH,
+        ("%d Control Methods found\n", Info.MethodCount));
+    DEBUG_PRINTP (TRACE_DISPATCH,
+        ("%d Op Regions found\n", Info.OpRegionCount));
 
     return_ACPI_STATUS (AE_OK);
 }
 
 
-/******************************************************************************
+/*******************************************************************************
  *
  * FUNCTION:    AcpiNsInitializeDevices
  *
@@ -195,11 +196,10 @@ AcpiNsInitializeObjects (
  * DESCRIPTION: Walk the entire namespace and initialize all ACPI devices.
  *              This means running _INI on all present devices.
  *
- *              Also: Install PCI config space handler for all PCI root bridges.
- *              A PCI root bridge is found by searching for devices containing
- *              a HID with the value EISAID("PNP0A03")
+ *              Note: We install PCI config space handler on region access,
+ *              not here.
  *
- *****************************************************************************/
+ ******************************************************************************/
 
 ACPI_STATUS
 AcpiNsInitializeDevices (
@@ -219,13 +219,12 @@ AcpiNsInitializeDevices (
 
     DEBUG_PRINT_RAW (ACPI_OK, ("Executing device _INI methods:"));
 
-    Status = AcpiNsWalkNamespace (ACPI_TYPE_DEVICE, ACPI_ROOT_OBJECT, ACPI_UINT32_MAX,
-                        FALSE, AcpiNsInitOneDevice, &Info, NULL);
+    Status = AcpiNsWalkNamespace (ACPI_TYPE_DEVICE, ACPI_ROOT_OBJECT,
+                    ACPI_UINT32_MAX, FALSE, AcpiNsInitOneDevice, &Info, NULL);
 
     if (ACPI_FAILURE (Status))
     {
-        DEBUG_PRINT (ACPI_ERROR,
-            ("NsInitializeDevices: WalkNamespace failed! %x\n", Status));
+        DEBUG_PRINTP (ACPI_ERROR, ("WalkNamespace failed! %x\n", Status));
     }
 
 
@@ -264,7 +263,7 @@ AcpiNsInitOneObject (
     void                    *Context,
     void                    **ReturnValue)
 {
-    OBJECT_TYPE_INTERNAL    Type;
+    ACPI_OBJECT_TYPE8       Type;
     ACPI_STATUS             Status;
     ACPI_INIT_WALK_INFO     *Info = (ACPI_INIT_WALK_INFO *) Context;
     ACPI_NAMESPACE_NODE     *Node = (ACPI_NAMESPACE_NODE *) ObjHandle;
@@ -283,6 +282,22 @@ AcpiNsInitOneObject (
         return (AE_OK);
     }
 
+    if ((Type != ACPI_TYPE_REGION) &&
+        (Type != ACPI_TYPE_BUFFER_FIELD))
+    {
+        return (AE_OK);
+    }
+
+
+    /*
+     * Must lock the interpreter before executing AML code
+     */
+    Status = AcpiExEnterInterpreter ();
+    if (ACPI_FAILURE (Status))
+    {
+        return (Status);
+    }
+
     switch (Type)
     {
 
@@ -299,8 +314,9 @@ AcpiNsInitOneObject (
         if (ACPI_FAILURE (Status))
         {
             DEBUG_PRINT_RAW (ACPI_ERROR, ("\n"));
-            DEBUG_PRINT (ACPI_ERROR, ("%s while getting region arguments [%4.4s]\n",
-                            AcpiCmFormatException (Status), &Node->Name));
+            DEBUG_PRINT (ACPI_ERROR,
+                    ("%s while getting region arguments [%4.4s]\n",
+                    AcpiFormatException (Status), &Node->Name));
         }
 
         if (!(AcpiDbgLevel & TRACE_INIT))
@@ -311,7 +327,7 @@ AcpiNsInitOneObject (
         break;
 
 
-    case ACPI_TYPE_FIELD_UNIT:
+    case ACPI_TYPE_BUFFER_FIELD:
 
         Info->FieldCount++;
         if (ObjDesc->Common.Flags & AOPOBJ_DATA_VALID)
@@ -320,12 +336,13 @@ AcpiNsInitOneObject (
         }
 
         Info->FieldInit++;
-        Status = AcpiDsGetFieldUnitArguments (ObjDesc);
+        Status = AcpiDsGetBufferFieldArguments (ObjDesc);
         if (ACPI_FAILURE (Status))
         {
             DEBUG_PRINT_RAW (ACPI_ERROR, ("\n"));
-            DEBUG_PRINT (ACPI_ERROR, ("%s while getting field arguments [%4.4s]\n",
-                            AcpiCmFormatException (Status), &Node->Name));
+            DEBUG_PRINT (ACPI_ERROR,
+                    ("%s while getting buffer field arguments [%4.4s]\n",
+                    AcpiFormatException (Status), &Node->Name));
         }
         if (!(AcpiDbgLevel & TRACE_INIT))
         {
@@ -339,19 +356,21 @@ AcpiNsInitOneObject (
         break;
     }
 
+
     /*
      * We ignore errors from above, and always return OK, since
      * we don't want to abort the walk on a single error.
      */
+    AcpiExExitInterpreter ();
     return (AE_OK);
 }
 
 
-/******************************************************************************
+/*******************************************************************************
  *
  * FUNCTION:    AcpiNsInitOneDevice
  *
- * PARAMETERS:  WALK_CALLBACK
+ * PARAMETERS:  ACPI_WALK_CALLBACK
  *
  * RETURN:      ACPI_STATUS
  *
@@ -359,7 +378,7 @@ AcpiNsInitOneObject (
  *              to initialize each device. It determines if the device is
  *              present, and if so, calls _INI.
  *
- *****************************************************************************/
+ ******************************************************************************/
 
 ACPI_STATUS
 AcpiNsInitOneDevice (
@@ -384,23 +403,23 @@ AcpiNsInitOneDevice (
 
     Info->DeviceCount++;
 
-    AcpiCmAcquireMutex (ACPI_MTX_NAMESPACE);
+    AcpiUtAcquireMutex (ACPI_MTX_NAMESPACE);
 
     Node = AcpiNsConvertHandleToEntry (ObjHandle);
     if (!Node)
     {
-        AcpiCmReleaseMutex (ACPI_MTX_NAMESPACE);
+        AcpiUtReleaseMutex (ACPI_MTX_NAMESPACE);
         return (AE_BAD_PARAMETER);
     }
 
-    AcpiCmReleaseMutex (ACPI_MTX_NAMESPACE);
+    AcpiUtReleaseMutex (ACPI_MTX_NAMESPACE);
 
     /*
      * Run _STA to determine if we can run _INI on the device.
      */
 
-    DEBUG_EXEC(AcpiCmDisplayInitPathname (Node, "_STA  [Method]"));
-    Status = AcpiCmExecute_STA (Node, &Flags);
+    DEBUG_EXEC (AcpiUtDisplayInitPathname (Node, "_STA  [Method]"));
+    Status = AcpiUtExecute_STA (Node, &Flags);
     if (ACPI_FAILURE (Status))
     {
         /* Ignore error and move on to next device */
@@ -413,6 +432,7 @@ AcpiNsInitOneDevice (
     if (!(Flags & 0x01))
     {
         /* don't look at children of a not present device */
+
         return_ACPI_STATUS(AE_CTRL_DEPTH);
     }
 
@@ -420,12 +440,12 @@ AcpiNsInitOneDevice (
     /*
      * The device is present. Run _INI.
      */
-
-    DEBUG_EXEC(AcpiCmDisplayInitPathname (ObjHandle, "_INI  [Method]"));
+    DEBUG_EXEC (AcpiUtDisplayInitPathname (ObjHandle, "_INI  [Method]"));
     Status = AcpiNsEvaluateRelative (ObjHandle, "_INI", NULL, NULL);
     if (AE_NOT_FOUND == Status)
     {
         /* No _INI means device requires no initialization */
+
         Status = AE_OK;
     }
 
@@ -436,16 +456,16 @@ AcpiNsInitOneDevice (
 #ifdef ACPI_DEBUG
         NATIVE_CHAR *ScopeName = AcpiNsGetTablePathname (ObjHandle);
 
-        DEBUG_PRINT (ACPI_WARN, ("%s._INI failed: %s\n",
-                ScopeName, AcpiCmFormatException (Status)));
+        DEBUG_PRINTP (ACPI_WARN, ("%s._INI failed: %s\n",
+                ScopeName, AcpiFormatException (Status)));
 
-        AcpiCmFree (ScopeName);
+        ACPI_MEM_FREE (ScopeName);
 #endif
     }
 
     else
     {
-        /* Count of successfull INIs */
+        /* Count of successful INIs */
 
         Info->Num_INI++;
     }

