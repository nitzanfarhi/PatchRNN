commit c1a72e2dbb4abb90bd408480d7c48ba40cb799ce
Author: Miquel Raynal <miquel.raynal@free-electrons.com>
Date:   Fri Jan 19 19:11:27 2018 +0100

    mtd: nand: Fix build issues due to an anonymous union
    
    GCC-4.4.4 raises errors when assigning a parameter in an anonymous
    union, leading to this kind of failure:
    
    drivers/mtd/nand/marvell_nand.c:1936:
        warning: missing braces around initializer
        warning: (near initialization for '(anonymous)[1].<anonymous>')
        error: unknown field 'data' specified in initializer
        error: unknown field 'addr' specified in initializer
    
    Work around the situation by naming these unions.
    
    Fixes: 8878b126df76 ("mtd: nand: add ->exec_op() implementation")
    Reported-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Miquel Raynal <miquel.raynal@free-electrons.com>
    Tested-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Boris Brezillon <boris.brezillon@free-electrons.com>

diff --git a/drivers/mtd/nand/nand_base.c b/drivers/mtd/nand/nand_base.c
index 3ff77bef9739..66b67014508f 100644
--- a/drivers/mtd/nand/nand_base.c
+++ b/drivers/mtd/nand/nand_base.c
@@ -2335,23 +2335,24 @@ nand_op_parser_must_split_instr(const struct nand_op_parser_pattern_elem *pat,
 {
 	switch (pat->type) {
 	case NAND_OP_ADDR_INSTR:
-		if (!pat->addr.maxcycles)
+		if (!pat->ctx.addr.maxcycles)
 			break;
 
 		if (instr->ctx.addr.naddrs - *start_offset >
-		    pat->addr.maxcycles) {
-			*start_offset += pat->addr.maxcycles;
+		    pat->ctx.addr.maxcycles) {
+			*start_offset += pat->ctx.addr.maxcycles;
 			return true;
 		}
 		break;
 
 	case NAND_OP_DATA_IN_INSTR:
 	case NAND_OP_DATA_OUT_INSTR:
-		if (!pat->data.maxlen)
+		if (!pat->ctx.data.maxlen)
 			break;
 
-		if (instr->ctx.data.len - *start_offset > pat->data.maxlen) {
-			*start_offset += pat->data.maxlen;
+		if (instr->ctx.data.len - *start_offset >
+		    pat->ctx.data.maxlen) {
+			*start_offset += pat->ctx.data.maxlen;
 			return true;
 		}
 		break;
diff --git a/include/linux/mtd/rawnand.h b/include/linux/mtd/rawnand.h
index 469dc724f5df..56c5570aadbe 100644
--- a/include/linux/mtd/rawnand.h
+++ b/include/linux/mtd/rawnand.h
@@ -962,7 +962,7 @@ struct nand_op_parser_pattern_elem {
 	union {
 		struct nand_op_parser_addr_constraints addr;
 		struct nand_op_parser_data_constraints data;
-	};
+	} ctx;
 };
 
 #define NAND_OP_PARSER_PAT_CMD_ELEM(_opt)			\
@@ -975,21 +975,21 @@ struct nand_op_parser_pattern_elem {
 	{							\
 		.type = NAND_OP_ADDR_INSTR,			\
 		.optional = _opt,				\
-		.addr.maxcycles = _maxcycles,			\
+		.ctx.addr.maxcycles = _maxcycles,		\
 	}
 
 #define NAND_OP_PARSER_PAT_DATA_IN_ELEM(_opt, _maxlen)		\
 	{							\
 		.type = NAND_OP_DATA_IN_INSTR,			\
 		.optional = _opt,				\
-		.data.maxlen = _maxlen,				\
+		.ctx.data.maxlen = _maxlen,			\
 	}
 
 #define NAND_OP_PARSER_PAT_DATA_OUT_ELEM(_opt, _maxlen)		\
 	{							\
 		.type = NAND_OP_DATA_OUT_INSTR,			\
 		.optional = _opt,				\
-		.data.maxlen = _maxlen,				\
+		.ctx.data.maxlen = _maxlen,			\
 	}
 
 #define NAND_OP_PARSER_PAT_WAITRDY_ELEM(_opt)			\

