commit f2c0b6548d63dfbae020ff588b5e5344ddbc31e2
Author: JÃ¶rn Heusipp <manxorist@users.sourceforge.net>
Date:   Tue Dec 30 10:53:38 2014 +0000

    [Ref] sounddev: Add MPT_TRACE() to SoundDevice::BAse and SoundDevice::CSoundDeviceWithThread.
    
    git-svn-id: https://source.openmpt.org/svn/openmpt/trunk/OpenMPT@4685 56274372-70c3-4bfc-bfc3-4c3a0b034d27

diff --git a/sounddev/SoundDevice.cpp b/sounddev/SoundDevice.cpp
index f399347a9..234b01c63 100644
--- a/sounddev/SoundDevice.cpp
+++ b/sounddev/SoundDevice.cpp
@@ -146,6 +146,7 @@ Base::Base(SoundDevice::Info info)
 	, m_MessageReceiver(nullptr)
 	, m_Info(info)
 {
+	MPT_TRACE();
 
 	m_DeviceUnavailableOnOpen = false;
 
@@ -165,6 +166,7 @@ Base::Base(SoundDevice::Info info)
 Base::~Base()
 //-----------
 {
+	MPT_TRACE();
 	return;
 }
 
@@ -172,6 +174,7 @@ Base::~Base()
 SoundDevice::DynamicCaps Base::GetDeviceDynamicCaps(const std::vector<uint32> &baseSampleRates)
 //---------------------------------------------------------------------------------------------
 {
+	MPT_TRACE();
 	SoundDevice::DynamicCaps result;
 	result.supportedSampleRates = baseSampleRates;
 	return result;
@@ -214,6 +217,7 @@ bool FillWaveFormatExtensible(WAVEFORMATEXTENSIBLE &WaveFormat, const SoundDevic
 void Base::UpdateBufferAttributes(SoundDevice::BufferAttributes attributes)
 //-------------------------------------------------------------------------
 {
+	MPT_TRACE();
 	m_BufferAttributes = attributes;
 }
 
@@ -221,6 +225,7 @@ void Base::UpdateBufferAttributes(SoundDevice::BufferAttributes attributes)
 void Base::UpdateTimeInfo(SoundDevice::TimeInfo timeInfo)
 //-------------------------------------------------------
 {
+	MPT_TRACE();
 	m_TimeInfo = timeInfo;
 }
 
@@ -228,6 +233,7 @@ void Base::UpdateTimeInfo(SoundDevice::TimeInfo timeInfo)
 bool Base::Init()
 //---------------
 {
+	MPT_TRACE();
 	if(IsInited())
 	{
 		return true;
@@ -240,6 +246,7 @@ bool Base::Init()
 bool Base::Open(const SoundDevice::Settings &settings)
 //----------------------------------------------------
 {
+	MPT_TRACE();
 	if(IsOpen())
 	{
 		Close();
@@ -277,6 +284,7 @@ bool Base::Open(const SoundDevice::Settings &settings)
 bool Base::Close()
 //----------------
 {
+	MPT_TRACE();
 	if(!IsOpen()) return true;
 	Stop();
 	bool result = InternalClose();
@@ -288,6 +296,7 @@ bool Base::Close()
 void Base::FillAudioBuffer()
 //--------------------------
 {
+	MPT_TRACE();
 	InternalFillAudioBuffer();
 }
 
@@ -295,6 +304,7 @@ void Base::FillAudioBuffer()
 void Base::SourceFillAudioBufferLocked()
 //--------------------------------------
 {
+	MPT_TRACE();
 	if(m_Source)
 	{
 		m_Source->FillAudioBufferLocked(*this);
@@ -305,6 +315,7 @@ void Base::SourceFillAudioBufferLocked()
 void Base::SourceAudioPreRead(std::size_t numFrames)
 //--------------------------------------------------
 {
+	MPT_TRACE();
 	if(!InternalHasTimeInfo())
 	{
 		if(InternalHasGetStreamPosition())
@@ -343,6 +354,7 @@ void Base::SourceAudioRead(void *buffer, std::size_t numFrames)
 void Base::SourceAudioDone(std::size_t numFrames, int32 framesLatency)
 //--------------------------------------------------------------------
 {
+	MPT_TRACE();
 	if(numFrames <= 0)
 	{
 		return;
@@ -362,6 +374,7 @@ void Base::SourceAudioDone(std::size_t numFrames, int32 framesLatency)
 void Base::AudioSendMessage(const std::string &str)
 //-------------------------------------------------
 {
+	MPT_TRACE();
 	if(m_MessageReceiver)
 	{
 		m_MessageReceiver->AudioMessage(str);
@@ -372,6 +385,7 @@ void Base::AudioSendMessage(const std::string &str)
 bool Base::Start()
 //----------------
 {
+	MPT_TRACE();
 	if(!IsOpen()) return false; 
 	if(!IsPlaying())
 	{
@@ -397,6 +411,7 @@ bool Base::Start()
 void Base::Stop(bool force)
 //-------------------------
 {
+	MPT_TRACE();
 	if(!IsOpen()) return;
 	if(IsPlaying())
 	{
@@ -423,6 +438,7 @@ void Base::Stop(bool force)
 double Base::GetCurrentUpdateInterval() const
 //-------------------------------------------
 {
+	MPT_TRACE();
 	Util::lock_guard<Util::mutex> lock(m_StreamPositionMutex);
 	return m_CurrentUpdateInterval;
 }
@@ -431,6 +447,7 @@ double Base::GetCurrentUpdateInterval() const
 int64 Base::GetStreamPositionFrames() const
 //-----------------------------------------
 {
+	MPT_TRACE();
 	if(!IsOpen()) return 0;
 	if(InternalHasGetStreamPosition())
 	{
diff --git a/sounddev/SoundDeviceThread.cpp b/sounddev/SoundDeviceThread.cpp
index 3395f6114..d374b0014 100644
--- a/sounddev/SoundDeviceThread.cpp
+++ b/sounddev/SoundDeviceThread.cpp
@@ -262,6 +262,7 @@ DWORD WINAPI CAudioThread::AudioThreadWrapper(LPVOID user)
 DWORD CAudioThread::AudioThread()
 //-------------------------------
 {
+	MPT_TRACE();
 
 	bool terminate = false;
 	while(!terminate)
@@ -336,6 +337,7 @@ DWORD CAudioThread::AudioThread()
 void CAudioThread::SetWakeupEvent(HANDLE ev)
 //------------------------------------------
 {
+	MPT_TRACE();
 	m_hHardwareWakeupEvent = ev;
 }
 
@@ -343,6 +345,7 @@ void CAudioThread::SetWakeupEvent(HANDLE ev)
 void CAudioThread::SetWakeupInterval(double seconds)
 //--------------------------------------------------
 {
+	MPT_TRACE();
 	m_WakeupInterval = seconds;
 }
 
@@ -350,6 +353,7 @@ void CAudioThread::SetWakeupInterval(double seconds)
 void CAudioThread::Activate()
 //---------------------------
 {
+	MPT_TRACE();
 	if(InterlockedExchangeAdd(&m_AudioThreadActive, 0))
 	{
 		MPT_ASSERT_ALWAYS(false);
@@ -364,6 +368,7 @@ void CAudioThread::Activate()
 void CAudioThread::Deactivate()
 //-----------------------------
 {
+	MPT_TRACE();
 	if(!InterlockedExchangeAdd(&m_AudioThreadActive, 0))
 	{
 		MPT_ASSERT_ALWAYS(false);
@@ -377,6 +382,7 @@ void CAudioThread::Deactivate()
 void CSoundDeviceWithThread::FillAudioBufferLocked()
 //--------------------------------------------------
 {
+	MPT_TRACE();
 	SourceFillAudioBufferLocked();
 }
 
@@ -384,6 +390,7 @@ void CSoundDeviceWithThread::FillAudioBufferLocked()
 void CSoundDeviceWithThread::SetWakeupEvent(HANDLE ev)
 //----------------------------------------------------
 {
+	MPT_TRACE();
 	m_AudioThread.SetWakeupEvent(ev);
 }
 
@@ -391,6 +398,7 @@ void CSoundDeviceWithThread::SetWakeupEvent(HANDLE ev)
 void CSoundDeviceWithThread::SetWakeupInterval(double seconds)
 //------------------------------------------------------------
 {
+	MPT_TRACE();
 	m_AudioThread.SetWakeupInterval(seconds);
 }
 
@@ -398,6 +406,7 @@ void CSoundDeviceWithThread::SetWakeupInterval(double seconds)
 bool CSoundDeviceWithThread::InternalStart()
 //------------------------------------------
 {
+	MPT_TRACE();
 	m_AudioThread.Activate();
 	return true;
 }
@@ -406,6 +415,7 @@ bool CSoundDeviceWithThread::InternalStart()
 void CSoundDeviceWithThread::InternalStop()
 //-----------------------------------------
 {
+	MPT_TRACE();
 	m_AudioThread.Deactivate();
 }
 

