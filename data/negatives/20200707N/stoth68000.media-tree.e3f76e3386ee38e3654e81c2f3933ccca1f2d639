commit e3f76e3386ee38e3654e81c2f3933ccca1f2d639
Author: Baruch Siach <baruch@tkos.co.il>
Date:   Mon Aug 9 17:20:53 2010 -0700

    list debugging: warn when deleting a deleted entry
    
    Use the magic LIST_POISON* values to detect an incorrect use of list_del
    on a deleted entry.  This DEBUG_LIST specific warning is easier to
    understand than the generic Oops message caused by LIST_POISON
    dereference.
    
    Signed-off-by: Baruch Siach <baruch@tkos.co.il>
    Cc: Dave Jones <davej@codemonkey.org.uk>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

diff --git a/lib/list_debug.c b/lib/list_debug.c
index 1a39f4e3ae1f..344c710d16ca 100644
--- a/lib/list_debug.c
+++ b/lib/list_debug.c
@@ -43,6 +43,12 @@ EXPORT_SYMBOL(__list_add);
  */
 void list_del(struct list_head *entry)
 {
+	WARN(entry->next == LIST_POISON1,
+		"list_del corruption, next is LIST_POISON1 (%p)\n",
+		LIST_POISON1);
+	WARN(entry->next != LIST_POISON1 && entry->prev == LIST_POISON2,
+		"list_del corruption, prev is LIST_POISON2 (%p)\n",
+		LIST_POISON2);
 	WARN(entry->prev->next != entry,
 		"list_del corruption. prev->next should be %p, "
 		"but was %p\n", entry, entry->prev->next);

