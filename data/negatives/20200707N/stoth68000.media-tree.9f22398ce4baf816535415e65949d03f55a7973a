commit 9f22398ce4baf816535415e65949d03f55a7973a
Author: Johan Hedberg <johan.hedberg@intel.com>
Date:   Mon Apr 29 19:35:38 2013 +0300

    Bluetooth: Fix hardcoding ATT CID in __l2cap_chan_add()
    
    Since in the future more than the ATT CID may be permissible we should
    not be hardcoding it for all LE connections in __l2cap_chan_add().
    Instead, the source ATT CID should only be set if the destination is
    also ATT, and in other cases we should just use the existing dynamic CID
    allocation function.
    
    Assigning scid based on dcid means that whenever __l2cap_chan_add() is
    called that chan->dcid is properly initialized. l2cap_le_conn_ready()
    wasn't initializing is properly so this is also taken care of in this
    patch.
    
    Signed-off-by: Johan Hedberg <johan.hedberg@intel.com>
    Acked-by: Marcel Holtmann <marcel@holtmann.org>
    Signed-off-by: Gustavo Padovan <gustavo.padovan@collabora.co.uk>

diff --git a/net/bluetooth/l2cap_core.c b/net/bluetooth/l2cap_core.c
index 640423b4f411..4803610187ed 100644
--- a/net/bluetooth/l2cap_core.c
+++ b/net/bluetooth/l2cap_core.c
@@ -504,8 +504,10 @@ void __l2cap_chan_add(struct l2cap_conn *conn, struct l2cap_chan *chan)
 		if (conn->hcon->type == LE_LINK) {
 			/* LE connection */
 			chan->omtu = L2CAP_DEFAULT_MTU;
-			chan->scid = L2CAP_CID_ATT;
-			chan->dcid = L2CAP_CID_ATT;
+			if (chan->dcid == L2CAP_CID_ATT)
+				chan->scid = L2CAP_CID_ATT;
+			else
+				chan->scid = l2cap_alloc_cid(conn);
 		} else {
 			/* Alloc CID for connection-oriented socket */
 			chan->scid = l2cap_alloc_cid(conn);
@@ -1357,6 +1359,8 @@ static void l2cap_le_conn_ready(struct l2cap_conn *conn)
 	if (!chan)
 		goto clean;
 
+	chan->dcid = L2CAP_CID_ATT;
+
 	sk = chan->sk;
 
 	hci_conn_hold(conn->hcon);

