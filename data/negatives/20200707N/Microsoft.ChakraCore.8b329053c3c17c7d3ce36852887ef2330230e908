commit 8b329053c3c17c7d3ce36852887ef2330230e908
Author: Michael Ferris <micfer@microsoft.com>
Date:   Thu Sep 15 17:00:36 2016 -0700

    Do not use the IRType's size to determine if it's an int64 type

diff --git a/lib/Backend/IR.cpp b/lib/Backend/IR.cpp
index c7a3c422f..c00121c93 100644
--- a/lib/Backend/IR.cpp
+++ b/lib/Backend/IR.cpp
@@ -3299,6 +3299,22 @@ bool Instr::HasAnySideEffects() const
     return false;
 }
 
+bool Instr::HasAnyInt64Opnd() const
+{
+    bool isDstInt64 = m_dst && IRType_IsInt64(m_dst->GetType());
+    bool isSrc1Int64 = m_src1 && IRType_IsInt64(m_src1->GetType());
+    bool isSrc2Int64 = m_src2 && IRType_IsInt64(m_src2->GetType());
+    return isDstInt64 || isSrc1Int64 || isSrc2Int64;
+}
+
+bool Instr::AreAllOpndInt64() const
+{
+    bool isDstInt64 = !m_dst || IRType_IsInt64(m_dst->GetType());
+    bool isSrc1Int64 = !m_src1 || IRType_IsInt64(m_src1->GetType());
+    bool isSrc2Int64 = !m_src2 || IRType_IsInt64(m_src2->GetType());
+    return isDstInt64 && isSrc1Int64 && isSrc2Int64;
+}
+
 Js::JavascriptFunction* Instr::GetFixedFunction() const
 {
     Assert(HasFixedFunctionAddressTarget());
diff --git a/lib/Backend/IR.h b/lib/Backend/IR.h
index 61a4bab12..7bf69b622 100644
--- a/lib/Backend/IR.h
+++ b/lib/Backend/IR.h
@@ -211,6 +211,8 @@ class Instr
     bool            ShouldCheckForNon32BitOverflow() const;
     bool            HasAnyImplicitCalls() const;
     bool            HasAnySideEffects() const;
+    bool            HasAnyInt64Opnd() const;
+    bool            AreAllOpndInt64() const;
 
     IRKind          GetKind() const;
     Opnd *          GetDst() const;
diff --git a/lib/Backend/IRType.cpp b/lib/Backend/IRType.cpp
index 30ca14ed8..41315090c 100644
--- a/lib/Backend/IRType.cpp
+++ b/lib/Backend/IRType.cpp
@@ -45,6 +45,7 @@ bool IRType_IsNativeInt(IRType type)
 {
     return TyBaseType[type] > IRBaseType_Illegal && TyBaseType[type] < IRBaseType_Float;
 }
+bool IRType_IsInt64(IRType type) { return type == TyInt64 || type == TyUint64; }
 
 bool IRType_IsSimd(IRType type)
 {
@@ -54,7 +55,6 @@ bool IRType_IsSimd(IRType type)
 bool IRType_IsSimd128(IRType type)
 {
     return type >= TySimd128F4 && type <= TySimd128D2;
-           
 }
 
 #if DBG_DUMP || defined(ENABLE_IR_VIEWER)
diff --git a/lib/Backend/IRType.h b/lib/Backend/IRType.h
index 2f6e3fe36..8d742d026 100644
--- a/lib/Backend/IRType.h
+++ b/lib/Backend/IRType.h
@@ -29,6 +29,7 @@ extern bool IRType_IsUnsignedInt(IRType type);
 extern bool IRType_IsFloat(IRType type);
 extern bool IRType_IsNative(IRType type);
 extern bool IRType_IsNativeInt(IRType type);
+extern bool IRType_IsInt64(IRType type);
 extern bool IRType_IsSimd(IRType type);
 extern bool IRType_IsSimd128(IRType type);
 
diff --git a/lib/Backend/Lower.cpp b/lib/Backend/Lower.cpp
index c892d7a05..c1c627f9c 100644
--- a/lib/Backend/Lower.cpp
+++ b/lib/Backend/Lower.cpp
@@ -21702,7 +21702,7 @@ Lowerer::LowerDivI4Common(IR::Instr * instr)
         // we need to check for INT_MIN/-1 if divisor is either -1 or variable, and dividend is either INT_MIN or variable
         
         bool needsMinOverNeg1Check = !(src2->IsImmediateOpnd() && src2->GetImmediateValue() != -1);
-        int64 intMin = TySize[src1->GetType()] == 4 ? INT_MIN : LONGLONG_MIN;
+        int64 intMin = IRType_IsInt64(src1->GetType()) ? LONGLONG_MIN : INT_MIN;
         if (src1->IsImmediateOpnd())
         {
             if (needsMinOverNeg1Check && src1->GetImmediateValue() == intMin)
diff --git a/lib/Backend/amd64/LowererMDArch.cpp b/lib/Backend/amd64/LowererMDArch.cpp
index 0adc373d6..68a2e5441 100644
--- a/lib/Backend/amd64/LowererMDArch.cpp
+++ b/lib/Backend/amd64/LowererMDArch.cpp
@@ -1989,10 +1989,7 @@ LowererMDArch::EmitInt4Instr(IR::Instr *instr, bool signExtend /* = false */)
     IR::RegOpnd *regEDX;
 
     bool legalize = false;
-    int dstInstrSize = dst ? TySize[dst->GetType()] : 0;
-    int src1InstrSize = src1 ? TySize[src1->GetType()] : 0;
-    int src2InstrSize = src2 ? TySize[src2->GetType()] : 0;
-    bool isInt64Instr = ((dstInstrSize | src1InstrSize | src2InstrSize) & 8) != 0;
+    bool isInt64Instr = instr->HasAnyInt64Opnd();
     if (!isInt64Instr)
     {
         if (dst && !dst->IsUInt32())
@@ -2010,8 +2007,7 @@ LowererMDArch::EmitInt4Instr(IR::Instr *instr, bool signExtend /* = false */)
     }
     else
     {
-        Assert(!dstInstrSize || dstInstrSize == src1InstrSize);
-        Assert(!src2InstrSize || src2InstrSize == src1InstrSize);
+        Assert(instr->AreAllOpndInt64());
         legalize = true;
     }
 

