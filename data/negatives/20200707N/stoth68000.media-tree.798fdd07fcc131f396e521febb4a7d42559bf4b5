commit 798fdd07fcc131f396e521febb4a7d42559bf4b5
Author: Stephen Hemminger <shemminger@linux-foundation.org>
Date:   Fri Dec 7 15:22:15 2007 -0800

    sky2: RX lockup fix
    
    I'm using a Marvell 88E8062 on a custom PPC64 blade and ran into RX
    lockups while validating the sky2 driver.  The receive MAC FIFO would
    become stuck during testing with high traffic.  One port of the 88E8062
    would lockup, while the other port remained functional.  Re-inserting
    the sky2 module would not fix the problem - only a power cycle would.
    
    I looked over Marvell's most recent sk98lin driver and it looks like
    they had a "workaround" for the Yukon XL that the sky2 doesn't have yet.
    The sk98lin driver disables the RX MAC FIFO flush feature for all
    revisions of the Yukon XL.
    
    According to skgeinit.c of the sk98lin driver, "Flushing must be enabled
    (needed for ASF see dev. #4.29), but the flushing mask should be
    disabled (see dev. #4.115)".  Nice. I implemented this same change in
    the sky2 driver and verified that the RX lockup I was seeing was
    resolved.
    
    Signed-off-by: Peter Tyser <ptyser@xes-inc.com>
    Signed-off-by: Stephen Hemminger <shemminger@linux-foundation.org>
    Signed-off-by: Jeff Garzik <jeff@garzik.org>

diff --git a/drivers/net/sky2.c b/drivers/net/sky2.c
index 6197afb3ed83..a74fc11a6482 100644
--- a/drivers/net/sky2.c
+++ b/drivers/net/sky2.c
@@ -822,8 +822,13 @@ static void sky2_mac_init(struct sky2_hw *hw, unsigned port)
 
 	sky2_write32(hw, SK_REG(port, RX_GMF_CTRL_T), rx_reg);
 
-	/* Flush Rx MAC FIFO on any flow control or error */
-	sky2_write16(hw, SK_REG(port, RX_GMF_FL_MSK), GMR_FS_ANY_ERR);
+	if (hw->chip_id == CHIP_ID_YUKON_XL) {
+		/* Hardware errata - clear flush mask */
+		sky2_write16(hw, SK_REG(port, RX_GMF_FL_MSK), 0);
+	} else {
+		/* Flush Rx MAC FIFO on any flow control or error */
+		sky2_write16(hw, SK_REG(port, RX_GMF_FL_MSK), GMR_FS_ANY_ERR);
+	}
 
 	/* Set threshold to 0xa (64 bytes) + 1 to workaround pause bug  */
 	reg = RX_GMF_FL_THR_DEF + 1;

