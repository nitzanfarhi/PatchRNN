commit 78b9bc947b18ed16b6c2c573d774e6d54ad9452d
Author: Taku Izumi <izumi.taku@jp.fujitsu.com>
Date:   Fri Oct 23 11:48:17 2015 +0200

    efi: Fix warning of int-to-pointer-cast on x86 32-bit builds
    
    Commit:
    
      0f96a99dab36 ("efi: Add "efi_fake_mem" boot option")
    
    introduced the following warning message:
    
      drivers/firmware/efi/fake_mem.c:186:20: warning: cast to pointer from integer of different size [-Wint-to-pointer-cast]
    
    new_memmap_phy was defined as a u64 value and cast to void*,
    causing a int-to-pointer-cast warning on x86 32-bit builds.
    However, since the void* type is inappropriate for a physical
    address, the definition of struct efi_memory_map::phys_map has
    been changed to phys_addr_t in the previous patch, and so the
    cast can be dropped entirely.
    
    This patch also changes the type of the "new_memmap_phy"
    variable from "u64" to "phys_addr_t" to align with the types of
    memblock_alloc() and struct efi_memory_map::phys_map.
    
    Reported-by: Ingo Molnar <mingo@kernel.org>
    Signed-off-by: Taku Izumi <izumi.taku@jp.fujitsu.com>
    [ Removed void* cast, updated commit log]
    Signed-off-by: Ard Biesheuvel <ard.biesheuvel@linaro.org>
    Reviewed-by: Matt Fleming <matt@codeblueprint.co.uk>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: kamezawa.hiroyu@jp.fujitsu.com
    Cc: linux-efi@vger.kernel.org
    Cc: matt.fleming@intel.com
    Link: http://lkml.kernel.org/r/1445593697-1342-2-git-send-email-ard.biesheuvel@linaro.org
    Signed-off-by: Ingo Molnar <mingo@kernel.org>

diff --git a/drivers/firmware/efi/fake_mem.c b/drivers/firmware/efi/fake_mem.c
index 32bcb14df2c8..ed3a854950cc 100644
--- a/drivers/firmware/efi/fake_mem.c
+++ b/drivers/firmware/efi/fake_mem.c
@@ -59,7 +59,7 @@ void __init efi_fake_memmap(void)
 	u64 start, end, m_start, m_end, m_attr;
 	int new_nr_map = memmap.nr_map;
 	efi_memory_desc_t *md;
-	u64 new_memmap_phy;
+	phys_addr_t new_memmap_phy;
 	void *new_memmap;
 	void *old, *new;
 	int i;
@@ -183,7 +183,7 @@ void __init efi_fake_memmap(void)
 	/* swap into new EFI memmap */
 	efi_unmap_memmap();
 	memmap.map = new_memmap;
-	memmap.phys_map = (void *)new_memmap_phy;
+	memmap.phys_map = new_memmap_phy;
 	memmap.nr_map = new_nr_map;
 	memmap.map_end = memmap.map + memmap.nr_map * memmap.desc_size;
 	set_bit(EFI_MEMMAP, &efi.flags);

