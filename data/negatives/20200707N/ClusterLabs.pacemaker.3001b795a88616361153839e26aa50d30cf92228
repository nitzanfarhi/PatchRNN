commit 3001b795a88616361153839e26aa50d30cf92228
Author: Andrew Beekhof <andrew@beekhof.net>
Date:   Thu Oct 20 14:13:00 2005 +0000

    Mapping function that will get used one day
    
    CVS patchset: 7910
    CVS date: 2005/10/20 14:13:00
    
    Mercurial revision: 6b2787f201c69c1db6e0efcc3bbeb81a4189d583

diff --git a/include/crm/common/util.h b/include/crm/common/util.h
index 22dff4f26..4974683b3 100644
--- a/include/crm/common/util.h
+++ b/include/crm/common/util.h
@@ -1,4 +1,4 @@
-/* $Id: util.h,v 1.24 2005/09/26 07:48:53 andrew Exp $ */
+/* $Id: util.h,v 1.25 2005/10/20 14:13:00 andrew Exp $ */
 /* 
  * Copyright (C) 2004 Andrew Beekhof <andrew@beekhof.net>
  * 
@@ -69,6 +69,7 @@ extern void alter_debug(int nsig);
 extern void g_hash_destroy_str(gpointer data);
 
 extern const char *get_uuid(ll_cluster_t *hb, const char *uname);
+extern const char *get_uname(ll_cluster_t *hb, const char *uuid);
 
 extern void set_uuid(
 	ll_cluster_t* hb, crm_data_t *node, const char *attr, const char *uname);
diff --git a/lib/crm/common/utils.c b/lib/crm/common/utils.c
index 565fe71fa..ee41219e2 100644
--- a/lib/crm/common/utils.c
+++ b/lib/crm/common/utils.c
@@ -1,4 +1,4 @@
-/* $Id: utils.c,v 1.26 2005/09/30 12:53:44 andrew Exp $ */
+/* $Id: utils.c,v 1.27 2005/10/20 14:13:00 andrew Exp $ */
 /* 
  * Copyright (C) 2004 Andrew Beekhof <andrew@beekhof.net>
  * 
@@ -512,6 +512,7 @@ crm_strdup(const char *a)
 } 
 
 static GHashTable *crm_uuid_cache = NULL;
+static GHashTable *crm_uname_cache = NULL;
 
 const char *
 get_uuid(ll_cluster_t *hb, const char *uname) 
@@ -557,6 +558,47 @@ get_uuid(ll_cluster_t *hb, const char *uname)
 	return NULL;
 }
 
+const char *
+get_uname(ll_cluster_t *hb, const char *uuid) 
+{
+	char *uname = NULL;
+
+	if(crm_uuid_cache == NULL) {
+		crm_uname_cache = g_hash_table_new_full(
+			g_str_hash, g_str_equal,
+			g_hash_destroy_str, g_hash_destroy_str);
+	}
+	
+	CRM_DEV_ASSERT(uuid != NULL);
+
+	/* avoid blocking calls where possible */
+	uname = g_hash_table_lookup(crm_uname_cache, uuid);
+	if(uname != NULL) {
+		return uname;
+	}
+	
+	if(uname != NULL) {
+		cl_uuid_t uuid_raw;
+		char *uuid_copy = crm_strdup(uuid);
+		cl_uuid_parse(uuid_copy, &uuid_raw);
+		
+		if(hb->llc_ops->get_name_by_uuid(
+			   hb, &uuid_raw, uname, 256) == HA_FAIL) {
+			crm_err("Could not calculate UUID for %s", uname);
+			uname = NULL;
+			crm_free(uuid_copy);
+			
+		} else {
+			g_hash_table_insert(
+				crm_uuid_cache,
+				uuid_copy, crm_strdup(uname));
+			uname = g_hash_table_lookup(crm_uname_cache, uuid);
+		}
+		return uname;
+	}
+	return NULL;
+}
+
 void
 set_uuid(ll_cluster_t *hb,crm_data_t *node,const char *attr,const char *uname) 
 {

