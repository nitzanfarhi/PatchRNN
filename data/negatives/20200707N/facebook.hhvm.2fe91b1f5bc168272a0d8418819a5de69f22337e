commit 2fe91b1f5bc168272a0d8418819a5de69f22337e
Author: Rick Lavoie <rlavoie@fb.com>
Date:   Fri Nov 4 18:05:38 2016 -0700

    Update BCMarker before generating inlined function return block
    
    Summary:
    When generating the return block for an inlined function, update the
    current BCMarker to point to one of the Ret* bytecodes in that
    function. Otherwise, the marker for all the IR instructions generated in that
    block will point to whatever bytecode we happened to last process. In most
    cases, that will happen to be one of the Ret* bytecodes in the function, but if
    the function contains loops it may not be. This can cause problems because we
    may not then have accurate stack depth information. Fix this by explicitly
    setting the marker to the same as the last IR instruction in one of the return
    block's predecessors.
    
    Reviewed By: mxw
    
    Differential Revision: D4130095
    
    fbshipit-source-id: 7d029be16aee740e41f01f9e48029e39bf7fcc5f

diff --git a/hphp/runtime/vm/jit/ir-builder.h b/hphp/runtime/vm/jit/ir-builder.h
index 064bb88e5e..6987640625 100644
--- a/hphp/runtime/vm/jit/ir-builder.h
+++ b/hphp/runtime/vm/jit/ir-builder.h
@@ -85,7 +85,7 @@ struct IRBuilder {
    * Update the current BCContext.
    */
   void setCurMarker(BCMarker);
-  void resetCurIROff() { m_curBCContext.iroff = 0; }
+  void resetCurIROff(uint16_t off = 0) { m_curBCContext.iroff = off; }
 
   /*
    * Exception handling and IRBuilder.
diff --git a/hphp/runtime/vm/jit/irgen-inlining.cpp b/hphp/runtime/vm/jit/irgen-inlining.cpp
index 78871129ee..fb0d4a9c57 100644
--- a/hphp/runtime/vm/jit/irgen-inlining.cpp
+++ b/hphp/runtime/vm/jit/irgen-inlining.cpp
@@ -284,6 +284,15 @@ void implInlineReturn(IRGS& env) {
 }
 
 void endInlining(IRGS& env) {
+  // The IR instructions should be associated with one of the return bytecodes,
+  // which should be one of the predecessors of this block.
+  auto const curBlock = env.irb->curBlock();
+  always_assert(curBlock && !curBlock->preds().empty());
+  auto const bcContext = curBlock->preds().front().inst()->bcctx();
+  env.bcStateStack.back().setOffset(bcContext.marker.sk().offset());
+  updateMarker(env);
+  env.irb->resetCurIROff(bcContext.iroff + 1);
+
   decRefLocalsInline(env);
   decRefThis(env);
 

