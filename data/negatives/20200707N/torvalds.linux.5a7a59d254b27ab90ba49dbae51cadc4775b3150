commit 5a7a59d254b27ab90ba49dbae51cadc4775b3150
Author: Hante Meuleman <meuleman@broadcom.com>
Date:   Wed Nov 14 18:46:22 2012 -0800

    brcmfmac: limit hex dump on fwil.
    
    When debug is turned on for fwil then the whole data buffer is
    dumped. In some cases this gives excessive amount of debug. With
    this patch the dumps are limited to 64 bytes.
    
    Reviewed-by: Arend Van Spriel <arend@broadcom.com>
    Signed-off-by: Hante Meuleman <meuleman@broadcom.com>
    Signed-off-by: Franky Lin <frankyl@broadcom.com>
    Signed-off-by: John W. Linville <linville@tuxdriver.com>

diff --git a/drivers/net/wireless/brcm80211/brcmfmac/fwil.c b/drivers/net/wireless/brcm80211/brcmfmac/fwil.c
index 62e0960c1d3e..7e678e9362ed 100644
--- a/drivers/net/wireless/brcm80211/brcmfmac/fwil.c
+++ b/drivers/net/wireless/brcm80211/brcmfmac/fwil.c
@@ -29,6 +29,9 @@
 #include "fwil.h"
 
 
+#define MAX_HEX_DUMP_LEN	64
+
+
 static s32
 brcmf_fil_cmd_data(struct brcmf_if *ifp, u32 cmd, void *data, u32 len, bool set)
 {
@@ -64,7 +67,8 @@ brcmf_fil_cmd_data_set(struct brcmf_if *ifp, u32 cmd, void *data, u32 len)
 	mutex_lock(&ifp->drvr->proto_block);
 
 	brcmf_dbg(FIL, "cmd=%d, len=%d\n", cmd, len);
-	brcmf_dbg_hex_dump(BRCMF_FIL_ON(), data, len, "data");
+	brcmf_dbg_hex_dump(BRCMF_FIL_ON(), data,
+			   min_t(uint, len, MAX_HEX_DUMP_LEN), "data");
 
 	err = brcmf_fil_cmd_data(ifp, cmd, data, len, true);
 	mutex_unlock(&ifp->drvr->proto_block);
@@ -81,7 +85,8 @@ brcmf_fil_cmd_data_get(struct brcmf_if *ifp, u32 cmd, void *data, u32 len)
 	err = brcmf_fil_cmd_data(ifp, cmd, data, len, false);
 
 	brcmf_dbg(FIL, "cmd=%d, len=%d\n", cmd, len);
-	brcmf_dbg_hex_dump(BRCMF_FIL_ON(), data, len, "data");
+	brcmf_dbg_hex_dump(BRCMF_FIL_ON(), data,
+			   min_t(uint, len, MAX_HEX_DUMP_LEN), "data");
 
 	mutex_unlock(&ifp->drvr->proto_block);
 
@@ -147,7 +152,8 @@ brcmf_fil_iovar_data_set(struct brcmf_if *ifp, char *name, void *data,
 	mutex_lock(&drvr->proto_block);
 
 	brcmf_dbg(FIL, "name=%s, len=%d\n", name, len);
-	brcmf_dbg_hex_dump(BRCMF_FIL_ON(), data, len, "data");
+	brcmf_dbg_hex_dump(BRCMF_FIL_ON(), data,
+			   min_t(uint, len, MAX_HEX_DUMP_LEN), "data");
 
 	buflen = brcmf_create_iovar(name, data, len, drvr->proto_buf,
 				    sizeof(drvr->proto_buf));
@@ -186,7 +192,8 @@ brcmf_fil_iovar_data_get(struct brcmf_if *ifp, char *name, void *data,
 	}
 
 	brcmf_dbg(FIL, "name=%s, len=%d\n", name, len);
-	brcmf_dbg_hex_dump(BRCMF_FIL_ON(), data, len, "data");
+	brcmf_dbg_hex_dump(BRCMF_FIL_ON(), data,
+			   min_t(uint, len, MAX_HEX_DUMP_LEN), "data");
 
 	mutex_unlock(&drvr->proto_block);
 	return err;
@@ -268,7 +275,8 @@ brcmf_fil_bsscfg_data_set(struct brcmf_if *ifp, char *name,
 	mutex_lock(&drvr->proto_block);
 
 	brcmf_dbg(FIL, "bssidx=%d, name=%s, len=%d\n", ifp->bssidx, name, len);
-	brcmf_dbg_hex_dump(BRCMF_FIL_ON(), data, len, "data");
+	brcmf_dbg_hex_dump(BRCMF_FIL_ON(), data,
+			   min_t(uint, len, MAX_HEX_DUMP_LEN), "data");
 
 	buflen = brcmf_create_bsscfg(ifp->bssidx, name, data, len,
 				     drvr->proto_buf, sizeof(drvr->proto_buf));
@@ -306,7 +314,8 @@ brcmf_fil_bsscfg_data_get(struct brcmf_if *ifp, char *name,
 		brcmf_dbg(ERROR, "Creating bsscfg failed\n");
 	}
 	brcmf_dbg(FIL, "bssidx=%d, name=%s, len=%d\n", ifp->bssidx, name, len);
-	brcmf_dbg_hex_dump(BRCMF_FIL_ON(), data, len, "data");
+	brcmf_dbg_hex_dump(BRCMF_FIL_ON(), data,
+			   min_t(uint, len, MAX_HEX_DUMP_LEN), "data");
 
 	mutex_unlock(&drvr->proto_block);
 	return err;

