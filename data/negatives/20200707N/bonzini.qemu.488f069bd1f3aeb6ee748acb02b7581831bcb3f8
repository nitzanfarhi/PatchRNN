commit 488f069bd1f3aeb6ee748acb02b7581831bcb3f8
Author: Michael S. Tsirkin <mst@redhat.com>
Date:   Thu Jul 11 16:06:46 2013 +0300

    virtio-net: add feature bit for any header s/g
    
    Old qemu versions required that 1st s/g entry is the header.
    
    Since QEMU 1.5, patchset titled "virtio-net: iovec handling cleanup"
    removed this limitation but a feature bit is needed so guests know it's
    safe to lay out header differently.
    
    This patch applies on top and adds such a feature bit to QEMU.
    It is set by default for virtio-net.
    virtio net header inline with the data is beneficial
    for latency and small packet bandwidth - guest driver
    code utilizing this feature has been acked but missed 3.11
    by a narrow margin, it's pending for 3.12.
    
    This feature bit is cleared by default when compatibility with old
    machine types is requested.
    
    Other performance-sensitive devices (blk and scsi)
    don't yet support arbitrary s/g layouts, so
    we only set this bit for virtio-net for now.
    There are plans to allow arbitrary layouts there, but
    no code has been posted yet.
    
    Cc: Rusty Russell <rusty@rustcorp.com.au>
    Reviewed-by: Laszlo Ersek <lersek@redhat.com>
    Signed-off-by: Michael S. Tsirkin <mst@redhat.com>

diff --git a/include/hw/i386/pc.h b/include/hw/i386/pc.h
index 5949e7ec5f..751592a1e7 100644
--- a/include/hw/i386/pc.h
+++ b/include/hw/i386/pc.h
@@ -229,6 +229,10 @@ int e820_add_entry(uint64_t, uint64_t, uint32_t);
             .driver   = "Nehalem-" TYPE_X86_CPU,\
             .property = "level",\
             .value    = stringify(2),\
+        },{\
+            .driver   = "virtio-net-pci",\
+            .property = "any_layout",\
+            .value    = "off",\
         }
 
 #define PC_COMPAT_1_4 \
diff --git a/include/hw/virtio/virtio-net.h b/include/hw/virtio/virtio-net.h
index b315ac91a4..df60f16a3e 100644
--- a/include/hw/virtio/virtio-net.h
+++ b/include/hw/virtio/virtio-net.h
@@ -243,6 +243,7 @@ struct virtio_net_ctrl_mq {
 
 #define DEFINE_VIRTIO_NET_FEATURES(_state, _field) \
         DEFINE_VIRTIO_COMMON_FEATURES(_state, _field), \
+        DEFINE_PROP_BIT("any_layout", _state, _field, VIRTIO_F_ANY_LAYOUT, true), \
         DEFINE_PROP_BIT("csum", _state, _field, VIRTIO_NET_F_CSUM, true), \
         DEFINE_PROP_BIT("guest_csum", _state, _field, VIRTIO_NET_F_GUEST_CSUM, true), \
         DEFINE_PROP_BIT("gso", _state, _field, VIRTIO_NET_F_GSO, true), \
diff --git a/include/hw/virtio/virtio.h b/include/hw/virtio/virtio.h
index a6c5c5380c..5d1d2be295 100644
--- a/include/hw/virtio/virtio.h
+++ b/include/hw/virtio/virtio.h
@@ -43,6 +43,8 @@
 /* We notify when the ring is completely used, even if the guest is suppressing
  * callbacks */
 #define VIRTIO_F_NOTIFY_ON_EMPTY        24
+/* Can the device handle any descriptor layout? */
+#define VIRTIO_F_ANY_LAYOUT             27
 /* We support indirect buffer descriptors */
 #define VIRTIO_RING_F_INDIRECT_DESC     28
 /* The Guest publishes the used index for which it expects an interrupt

