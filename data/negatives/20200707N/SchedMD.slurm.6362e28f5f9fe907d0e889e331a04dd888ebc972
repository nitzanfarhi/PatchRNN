commit 6362e28f5f9fe907d0e889e331a04dd888ebc972
Author: Moe Jette <jette1@llnl.gov>
Date:   Wed Dec 22 00:32:32 2010 +0000

    get some more functions playing nice in front-end mode

diff --git a/src/slurmctld/job_scheduler.c b/src/slurmctld/job_scheduler.c
index deabbf6444..043af0b146 100644
--- a/src/slurmctld/job_scheduler.c
+++ b/src/slurmctld/job_scheduler.c
@@ -626,11 +626,6 @@ extern void launch_job(struct job_record *job_ptr)
 {
 	batch_job_launch_msg_t *launch_msg_ptr;
 	agent_arg_t *agent_arg_ptr;
-	struct node_record *node_ptr;
-
-	node_ptr = find_first_node_record(job_ptr->node_bitmap);
-	if (node_ptr == NULL)
-		return;
 
 	/* Initialization of data structures */
 	launch_msg_ptr = (batch_job_launch_msg_t *)
@@ -693,7 +688,8 @@ extern void launch_job(struct job_record *job_ptr)
 	agent_arg_ptr = (agent_arg_t *) xmalloc(sizeof(agent_arg_t));
 	agent_arg_ptr->node_count = 1;
 	agent_arg_ptr->retry = 0;
-	agent_arg_ptr->hostlist = hostlist_create(node_ptr->name);
+	xassert(job_ptr->batch_host);
+	agent_arg_ptr->hostlist = hostlist_create(job_ptr->batch_host);
 	agent_arg_ptr->msg_type = REQUEST_BATCH_JOB_LAUNCH;
 	agent_arg_ptr->msg_args = (void *) launch_msg_ptr;
 
diff --git a/src/slurmctld/srun_comm.c b/src/slurmctld/srun_comm.c
index da0e3ae09e..3e15484fa8 100644
--- a/src/slurmctld/srun_comm.c
+++ b/src/slurmctld/srun_comm.c
@@ -142,7 +142,9 @@ extern void srun_allocate_abort(struct job_record *job_ptr)
  */
 extern void srun_node_fail (uint32_t job_id, char *node_name)
 {
+#ifndef HAVE_FRONT_END
 	struct node_record *node_ptr;
+#endif
 	struct job_record *job_ptr = find_job_record (job_id);
 	int bit_position = -1;
 	slurm_addr_t * addr;
@@ -303,21 +305,31 @@ extern int srun_user_message(struct job_record *job_ptr, char *msg)
 				   msg_arg);
 		return SLURM_SUCCESS;
 	} else if (job_ptr->batch_flag && IS_JOB_RUNNING(job_ptr)) {
+#ifndef HAVE_FRONT_END
 		struct node_record *node_ptr;
+#endif
 		job_notify_msg_t *notify_msg_ptr;
 		agent_arg_t *agent_arg_ptr;
-
+#ifdef HAVE_FRONT_END
+		if (job_ptr->batch_host == NULL)
+			return ESLURM_DISABLED;	/* no allocated nodes */
+		agent_arg_ptr = (agent_arg_t *) xmalloc(sizeof(agent_arg_t));
+		agent_arg_ptr->hostlist = hostlist_create(job_ptr->batch_host);
+#else
 		node_ptr = find_first_node_record(job_ptr->node_bitmap);
 		if (node_ptr == NULL)
 			return ESLURM_DISABLED;	/* no allocated nodes */
+		agent_arg_ptr = (agent_arg_t *) xmalloc(sizeof(agent_arg_t));
+		agent_arg_ptr->hostlist = hostlist_create(node_ptr->name);
+#endif
+		if (agent_arg_ptr->hostlist == NULL)
+			fatal("hostlist_create: malloc failure");
 		notify_msg_ptr = (job_notify_msg_t *) 
 				 xmalloc(sizeof(job_notify_msg_t));
 		notify_msg_ptr->job_id = job_ptr->job_id;
 		notify_msg_ptr->message = xstrdup(msg);
-		agent_arg_ptr = (agent_arg_t *) xmalloc(sizeof(agent_arg_t));
 		agent_arg_ptr->node_count = 1;
 		agent_arg_ptr->retry = 0;
-		agent_arg_ptr->hostlist = hostlist_create(node_ptr->name);
 		agent_arg_ptr->msg_type = REQUEST_JOB_NOTIFY;
 		agent_arg_ptr->msg_args = (void *) notify_msg_ptr;
 		/* Launch the RPC via agent */

