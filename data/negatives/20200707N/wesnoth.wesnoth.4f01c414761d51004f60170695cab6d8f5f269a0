commit 4f01c414761d51004f60170695cab6d8f5f269a0
Author: J. Tyne <jt_coding@verizon.net>
Date:   Fri Dec 21 23:38:14 2012 +0000

    Add support for an undo_action with an invalid type.
    
    (This is not used yet, but will be soon.)

diff --git a/src/actions/undo.cpp b/src/actions/undo.cpp
index 22ff3729f5..4b464e007a 100644
--- a/src/actions/undo.cpp
+++ b/src/actions/undo.cpp
@@ -182,7 +182,7 @@ void undo_list::undo()
 		// to also do the ovelerlapped hexes
 		gui.invalidate(recruit_loc);
 		units.erase(recruit_loc);
-	} else {
+	} else if ( action.is_move() ) {
 		// Undo a move action
 		const int starting_moves = action.starting_moves;
 		std::vector<map_location> route = action.route;
@@ -219,6 +219,9 @@ void undo_list::undo()
 		u->set_standing();
 
 		gui.invalidate_unit_after_move(route.front(), route.back());
+	} else {
+		// Invalid/unknown action type.
+		return;
 	}
 	recorder.undo();
 	redos_.push_back(action);
@@ -347,7 +350,7 @@ void undo_list::redo()
 			gui::dialog(gui, "", msg,gui::OK_ONLY).show();
 			return;
 		}
-	} else {
+	} else if ( action.is_move() ) {
 		// Redo movement action
 		const int starting_moves = action.starting_moves;
 		const std::vector<map_location> & route = action.route;
@@ -382,6 +385,9 @@ void undo_list::redo()
 		gui.invalidate_unit_after_move(route.front(), route.back());
 
 		recorder.add_movement(route);
+	} else {
+		// Invalid/unknown action type.
+		return;
 	}
 	undos_.push_back(action);
 	resources::whiteboard->on_gamestate_change();
diff --git a/src/actions/undo.hpp b/src/actions/undo.hpp
index 769eb3b1b0..c4665c6197 100644
--- a/src/actions/undo.hpp
+++ b/src/actions/undo.hpp
@@ -31,7 +31,7 @@
 class undo_list {
 	/// Records information to be able to undo an action.
 	struct undo_action {
-		enum ACTION_TYPE { MOVE, RECRUIT, RECALL, DISMISS };
+		enum ACTION_TYPE { NONE, MOVE, RECRUIT, RECALL, DISMISS };
 
 		/// Constructor for move actions.
 		undo_action(const unit& u,
@@ -75,6 +75,15 @@ class undo_list {
 				starting_dir(map_location::NDIRECTIONS)
 			{}
 
+		// Shortcuts for identifying the type of action:
+		bool is_dismiss() const { return type == DISMISS; }
+		bool is_recall()  const { return type == RECALL; }
+		bool is_recruit() const { return type == RECRUIT; }
+		bool is_move()    const { return type == MOVE; }
+		bool valid()      const { return type != NONE; }
+
+
+		// Data:
 		/// The hexes occupied by affected_unit during this action.
 		std::vector<map_location> route;
 		int starting_moves;
@@ -84,10 +93,6 @@ class undo_list {
 		unit affected_unit;
 		int countdown_time_bonus;
 		map_location::DIRECTION starting_dir;
-
-		bool is_dismiss() const { return type == DISMISS; }
-		bool is_recall() const { return type == RECALL; }
-		bool is_recruit() const { return type == RECRUIT; }
 	};
 	typedef std::vector<undo_action> action_list;
 

