commit 97535ffb9795f59c4fbfacfe1541d752ed47218e
Author: Ronald S. Bultje <rsbultje@gmail.com>
Date:   Sun Jun 26 14:41:44 2011 -0700

    swscale: remove unused xInc/srcW arguments from hScale().

diff --git a/libswscale/ppc/swscale_altivec.c b/libswscale/ppc/swscale_altivec.c
index 42e965de9..47fe54c08 100644
--- a/libswscale/ppc/swscale_altivec.c
+++ b/libswscale/ppc/swscale_altivec.c
@@ -222,8 +222,7 @@ yuv2yuvX_altivec_real(SwsContext *c,
 }
 
 static void hScale_altivec_real(int16_t *dst, int dstW,
-                                const uint8_t *src, int srcW,
-                                int xInc, const int16_t *filter,
+                                const uint8_t *src, const int16_t *filter,
                                 const int16_t *filterPos, int filterSize)
 {
     register int i;
diff --git a/libswscale/swscale.c b/libswscale/swscale.c
index f729c117a..731f1320b 100644
--- a/libswscale/swscale.c
+++ b/libswscale/swscale.c
@@ -1804,10 +1804,8 @@ static void rgb24ToUV_half_c(uint8_t *dstU, uint8_t *dstV, const uint8_t *src1,
     }
 }
 
-
 // bilinear / bicubic scaling
 static void hScale_c(int16_t *dst, int dstW, const uint8_t *src,
-                     int srcW, int xInc,
                      const int16_t *filter, const int16_t *filterPos,
                      int filterSize)
 {
@@ -1886,7 +1884,7 @@ static av_always_inline void hyscale(SwsContext *c, uint16_t *dst, int dstWidth,
     }
 
     if (!c->hyscale_fast) {
-        c->hScale(dst, dstWidth, src, srcW, xInc, hLumFilter, hLumFilterPos, hLumFilterSize);
+        c->hScale(dst, dstWidth, src, hLumFilter, hLumFilterPos, hLumFilterSize);
     } else { // fast bilinear upscale / crap downscale
         c->hyscale_fast(c, dst, dstWidth, src, srcW, xInc);
     }
@@ -1924,8 +1922,8 @@ static av_always_inline void hcscale(SwsContext *c, uint16_t *dst1, uint16_t *ds
     }
 
     if (!c->hcscale_fast) {
-        c->hScale(dst1, dstWidth, src1, srcW, xInc, hChrFilter, hChrFilterPos, hChrFilterSize);
-        c->hScale(dst2, dstWidth, src2, srcW, xInc, hChrFilter, hChrFilterPos, hChrFilterSize);
+        c->hScale(dst1, dstWidth, src1, hChrFilter, hChrFilterPos, hChrFilterSize);
+        c->hScale(dst2, dstWidth, src2, hChrFilter, hChrFilterPos, hChrFilterSize);
     } else { // fast bilinear upscale / crap downscale
         c->hcscale_fast(c, dst1, dst2, dstWidth, src1, src2, srcW, xInc);
     }
diff --git a/libswscale/swscale_internal.h b/libswscale/swscale_internal.h
index ea34d8ce0..9967c99ed 100644
--- a/libswscale/swscale_internal.h
+++ b/libswscale/swscale_internal.h
@@ -306,8 +306,8 @@ typedef struct SwsContext {
                          const uint8_t *src1, const uint8_t *src2,
                          int srcW, int xInc);
 
-    void (*hScale)(int16_t *dst, int dstW, const uint8_t *src, int srcW,
-                   int xInc, const int16_t *filter, const int16_t *filterPos,
+    void (*hScale)(int16_t *dst, int dstW, const uint8_t *src,
+                   const int16_t *filter, const int16_t *filterPos,
                    int filterSize);
 
     void (*lumConvertRange)(int16_t *dst, int width); ///< Color range conversion function for luma plane if needed.
diff --git a/libswscale/x86/swscale_template.c b/libswscale/x86/swscale_template.c
index 8fad257dd..79bf2a4c8 100644
--- a/libswscale/x86/swscale_template.c
+++ b/libswscale/x86/swscale_template.c
@@ -1906,8 +1906,7 @@ static void RENAME(rgb24ToUV)(uint8_t *dstU, uint8_t *dstV,
 #if !COMPILE_TEMPLATE_MMX2
 // bilinear / bicubic scaling
 static void RENAME(hScale)(int16_t *dst, int dstW,
-                           const uint8_t *src, int srcW,
-                           int xInc, const int16_t *filter,
+                           const uint8_t *src, const int16_t *filter,
                            const int16_t *filterPos, int filterSize)
 {
     assert(filterSize % 4 == 0 && filterSize>0);

