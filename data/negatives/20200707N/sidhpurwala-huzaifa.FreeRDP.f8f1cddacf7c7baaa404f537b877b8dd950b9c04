commit f8f1cddacf7c7baaa404f537b877b8dd950b9c04
Author: Marc-Andr√© Moreau <marcandre.moreau@gmail.com>
Date:   Tue Aug 28 18:01:42 2012 -0400

    wfreerdp: Windows 8 fixes

diff --git a/client/Windows/wfreerdp.c b/client/Windows/wfreerdp.c
index 2fe643dc..c6acbbf5 100644
--- a/client/Windows/wfreerdp.c
+++ b/client/Windows/wfreerdp.c
@@ -324,7 +324,7 @@ boolean wf_post_connect(freerdp* instance)
 	}
 
 	if (settings->window_title != NULL)
-		_snwprintf(win_title, sizeof(win_title), L"%S", settings->window_title);
+		_snwprintf(win_title, ARRAY_SIZE(win_title), L"%S", settings->window_title);
 	else if (settings->port == 3389)
 		_snwprintf(win_title, ARRAY_SIZE(win_title), L"FreeRDP: %S", settings->hostname);
 	else
diff --git a/libfreerdp/core/settings.c b/libfreerdp/core/settings.c
index 4f38d597..9935f4f2 100644
--- a/libfreerdp/core/settings.c
+++ b/libfreerdp/core/settings.c
@@ -50,30 +50,39 @@ void settings_client_load_hkey_local_machine(rdpSettings* settings)
 	if (status != ERROR_SUCCESS)
 		return;
 
+	dwSize = sizeof(DWORD);
 	if (RegQueryValueEx(hKey, _T("DesktopWidth"), NULL, &dwType, (BYTE*) &dwValue, &dwSize) == ERROR_SUCCESS)
 		settings->width = dwValue;
 
+	dwSize = sizeof(DWORD);
 	if (RegQueryValueEx(hKey, _T("DesktopHeight"), NULL, &dwType, (BYTE*) &dwValue, &dwSize) == ERROR_SUCCESS)
 		settings->height = dwValue;
 
+	dwSize = sizeof(DWORD);
 	if (RegQueryValueEx(hKey, _T("KeyboardType"), NULL, &dwType, (BYTE*) &dwValue, &dwSize) == ERROR_SUCCESS)
 		settings->kbd_type = dwValue;
 
+	dwSize = sizeof(DWORD);
 	if (RegQueryValueEx(hKey, _T("KeyboardSubType"), NULL, &dwType, (BYTE*) &dwValue, &dwSize) == ERROR_SUCCESS)
 		settings->kbd_subtype = dwValue;
 
+	dwSize = sizeof(DWORD);
 	if (RegQueryValueEx(hKey, _T("KeyboardFunctionKeys"), NULL, &dwType, (BYTE*) &dwValue, &dwSize) == ERROR_SUCCESS)
 		settings->kbd_fn_keys = dwValue;
 
+	dwSize = sizeof(DWORD);
 	if (RegQueryValueEx(hKey, _T("KeyboardLayout"), NULL, &dwType, (BYTE*) &dwValue, &dwSize) == ERROR_SUCCESS)
 		settings->kbd_layout = dwValue;
 
+	dwSize = sizeof(DWORD);
 	if (RegQueryValueEx(hKey, _T("NlaSecurity"), NULL, &dwType, (BYTE*) &dwValue, &dwSize) == ERROR_SUCCESS)
 		settings->nla_security = dwValue ? 1 : 0;
 
+	dwSize = sizeof(DWORD);
 	if (RegQueryValueEx(hKey, _T("TlsSecurity"), NULL, &dwType, (BYTE*) &dwValue, &dwSize) == ERROR_SUCCESS)
 		settings->tls_security = dwValue ? 1 : 0;
 
+	dwSize = sizeof(DWORD);
 	if (RegQueryValueEx(hKey, _T("RdpSecurity"), NULL, &dwType, (BYTE*) &dwValue, &dwSize) == ERROR_SUCCESS)
 		settings->rdp_security = dwValue ? 1 : 0;
 
diff --git a/libfreerdp/crypto/nla.c b/libfreerdp/crypto/nla.c
index e98663b3..274b44fd 100644
--- a/libfreerdp/crypto/nla.c
+++ b/libfreerdp/crypto/nla.c
@@ -128,6 +128,11 @@ int credssp_ntlm_client_init(rdpCredssp* credssp)
 
 	sspi_SetAuthIdentity(&(credssp->identity), settings->username, settings->domain, settings->password);
 
+#if 0
+	_tprintf(_T("User: %s Domain: %s Password: %s\n"),
+		credssp->identity.User, credssp->identity.Domain, credssp->identity.Password);
+#endif
+
 	sspi_SecBufferAlloc(&credssp->PublicKey, credssp->tls->public_key.length);
 	CopyMemory(credssp->PublicKey.pvBuffer, credssp->tls->public_key.data, credssp->tls->public_key.length);
 
@@ -174,7 +179,6 @@ int credssp_client_authenticate(rdpCredssp* credssp)
 	CredHandle credentials;
 	TimeStamp expiration;
 	PSecPkgInfo pPackageInfo;
-	PSecBuffer p_buffer;
 	SecBuffer input_buffer;
 	SecBuffer output_buffer;
 	SecBufferDesc input_buffer_desc;
@@ -245,9 +249,6 @@ int credssp_client_authenticate(rdpCredssp* credssp)
 
 	while (true)
 	{
-#ifdef WITH_DEBUG_CREDSSP
-		printf("credssp_client_authenticate loop");
-#endif
 		output_buffer_desc.ulVersion = SECBUFFER_VERSION;
 		output_buffer_desc.cBuffers = 1;
 		output_buffer_desc.pBuffers = &output_buffer;
@@ -261,11 +262,13 @@ int credssp_client_authenticate(rdpCredssp* credssp)
 				SECURITY_NATIVE_DREP, (have_input_buffer) ? &input_buffer_desc : NULL,
 				0, &credssp->context, &output_buffer_desc, &pfContextAttr, &expiration);
 
+#ifndef _WIN32
 		if (have_input_buffer && (input_buffer.pvBuffer != NULL))
 		{
 			free(input_buffer.pvBuffer);
 			input_buffer.pvBuffer = NULL;
 		}
+#endif
 
 		if ((status == SEC_I_COMPLETE_AND_CONTINUE) || (status == SEC_I_COMPLETE_NEEDED) || (status == SEC_E_OK))
 		{
@@ -292,10 +295,8 @@ int credssp_client_authenticate(rdpCredssp* credssp)
 
 		if (output_buffer.cbBuffer > 0)
 		{
-			p_buffer = &output_buffer_desc.pBuffers[0];
-
-			credssp->negoToken.pvBuffer = p_buffer->pvBuffer;
-			credssp->negoToken.cbBuffer = p_buffer->cbBuffer;
+			credssp->negoToken.pvBuffer = output_buffer.pvBuffer;
+			credssp->negoToken.cbBuffer = output_buffer.cbBuffer;
 
 #ifdef WITH_DEBUG_CREDSSP
 			printf("Sending Authentication Token\n");
@@ -303,7 +304,10 @@ int credssp_client_authenticate(rdpCredssp* credssp)
 #endif
 
 			credssp_send(credssp);
+
+#ifndef _WIN32
 			credssp_buffer_free(credssp);
+#endif
 		}
 
 		if (status != SEC_I_CONTINUE_NEEDED)
@@ -324,9 +328,8 @@ int credssp_client_authenticate(rdpCredssp* credssp)
 		winpr_HexDump(credssp->negoToken.pvBuffer, credssp->negoToken.cbBuffer);
 #endif
 
-		p_buffer = &input_buffer_desc.pBuffers[0];
-		p_buffer->pvBuffer = credssp->negoToken.pvBuffer;
-		p_buffer->cbBuffer = credssp->negoToken.cbBuffer;
+		input_buffer.pvBuffer = credssp->negoToken.pvBuffer;
+		input_buffer.cbBuffer = credssp->negoToken.cbBuffer;
 
 		have_input_buffer = true;
 		have_context = true;
@@ -339,7 +342,10 @@ int credssp_client_authenticate(rdpCredssp* credssp)
 	/* Verify Server Public Key Echo */
 
 	status = credssp_decrypt_public_key_echo(credssp);
+
+#ifndef _WIN32
 	credssp_buffer_free(credssp);
+#endif
 
 	if (status != SEC_E_OK)
 	{
@@ -358,7 +364,10 @@ int credssp_client_authenticate(rdpCredssp* credssp)
 	}
 
 	credssp_send(credssp);
+
+#ifndef _WIN32
 	credssp_buffer_free(credssp);
+#endif
 
 	/* Free resources */
 
@@ -1316,6 +1325,9 @@ void credssp_free(rdpCredssp* credssp)
 		free(credssp->identity.User);
 		free(credssp->identity.Domain);
 		free(credssp->identity.Password);
+
+#ifndef _WIN32
 		free(credssp);
+#endif
 	}
 }
diff --git a/winpr/libwinpr/sspi/sspi.c b/winpr/libwinpr/sspi/sspi.c
index 0703e5c0..3322c8f7 100644
--- a/winpr/libwinpr/sspi/sspi.c
+++ b/winpr/libwinpr/sspi/sspi.c
@@ -289,8 +289,9 @@ void sspi_SetAuthIdentity(SEC_WINNT_AUTH_IDENTITY* identity, char* user, char* d
 	if (user)
 	{
 		identity->UserLength = MultiByteToWideChar(CP_UTF8, 0, user, strlen(user), NULL, 0);
-		identity->User = (UINT16*) malloc(identity->UserLength * sizeof(WCHAR));
+		identity->User = (UINT16*) malloc((identity->UserLength + 1) * sizeof(WCHAR));
 		MultiByteToWideChar(CP_UTF8, 0, user, identity->UserLength, (LPWSTR) identity->User, identity->UserLength * sizeof(WCHAR));
+		identity->User[identity->UserLength] = 0;
 	}
 	else
 	{
@@ -301,8 +302,9 @@ void sspi_SetAuthIdentity(SEC_WINNT_AUTH_IDENTITY* identity, char* user, char* d
 	if (domain)
 	{
 		identity->DomainLength = MultiByteToWideChar(CP_UTF8, 0, domain, strlen(domain), NULL, 0);
-		identity->Domain = (UINT16*) malloc(identity->DomainLength * sizeof(WCHAR));
+		identity->Domain = (UINT16*) malloc((identity->DomainLength + 1) * sizeof(WCHAR));
 		MultiByteToWideChar(CP_UTF8, 0, domain, identity->DomainLength, (LPWSTR) identity->Domain, identity->DomainLength * sizeof(WCHAR));
+		identity->Domain[identity->DomainLength] = 0;
 	}
 	else
 	{
@@ -313,8 +315,9 @@ void sspi_SetAuthIdentity(SEC_WINNT_AUTH_IDENTITY* identity, char* user, char* d
 	if (password != NULL)
 	{
 		identity->PasswordLength = MultiByteToWideChar(CP_UTF8, 0, password, strlen(password), NULL, 0);
-		identity->Password = (UINT16*) malloc(identity->PasswordLength * sizeof(WCHAR));
+		identity->Password = (UINT16*) malloc((identity->PasswordLength + 1) * sizeof(WCHAR));
 		MultiByteToWideChar(CP_UTF8, 0, password, identity->PasswordLength, (LPWSTR) identity->Password, identity->PasswordLength * sizeof(WCHAR));
+		identity->Password[identity->PasswordLength] = 0;
 	}
 	else
 	{
@@ -337,17 +340,31 @@ void sspi_CopyAuthIdentity(SEC_WINNT_AUTH_IDENTITY* identity, SEC_WINNT_AUTH_IDE
 
 	identity->Flags = SEC_WINNT_AUTH_IDENTITY_UNICODE;
 
+	identity->User = identity->Domain = identity->Password = NULL;
+
 	identity->UserLength = srcIdentity->UserLength;
-	identity->User = (UINT16*) malloc(identity->UserLength * sizeof(WCHAR));
-	CopyMemory(identity->User, srcIdentity->User, identity->UserLength * sizeof(WCHAR));
+
+	if (identity->UserLength > 0)
+	{
+		identity->User = (UINT16*) malloc((identity->UserLength + 1) * sizeof(WCHAR));
+		CopyMemory(identity->User, srcIdentity->User, identity->UserLength * sizeof(WCHAR));
+	}
 
 	identity->DomainLength = srcIdentity->DomainLength;
-	identity->Domain = (UINT16*) malloc(identity->DomainLength * sizeof(WCHAR));
-	CopyMemory(identity->Domain, srcIdentity->Domain, identity->DomainLength * sizeof(WCHAR));
+
+	if (identity->DomainLength > 0)
+	{
+		identity->Domain = (UINT16*) malloc((identity->DomainLength + 1) * sizeof(WCHAR));
+		CopyMemory(identity->Domain, srcIdentity->Domain, identity->DomainLength * sizeof(WCHAR));
+	}
 
 	identity->PasswordLength = srcIdentity->PasswordLength;
-	identity->Password = (UINT16*) malloc(identity->PasswordLength * sizeof(WCHAR));
-	CopyMemory(identity->Password, srcIdentity->Password, identity->PasswordLength * sizeof(WCHAR));
+
+	if (identity->PasswordLength > 0)
+	{
+		identity->Password = (UINT16*) malloc((identity->PasswordLength + 1) * sizeof(WCHAR));
+		CopyMemory(identity->Password, srcIdentity->Password, identity->PasswordLength * sizeof(WCHAR));
+	}
 }
 
 void sspi_GlobalInit()

