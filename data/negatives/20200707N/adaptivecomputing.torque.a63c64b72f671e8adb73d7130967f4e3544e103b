commit a63c64b72f671e8adb73d7130967f4e3544e103b
Author: ataufer <ataufer@8f940c70-5916-0410-ac46-d1fa2fa6ea29>
Date:   Tue Mar 24 19:59:52 2009 +0000

    changed some log_err() for debuging to log_ext() with LOG_DEBUG flag

diff --git a/src/resmom/checkpoint.c b/src/resmom/checkpoint.c
index 7af75cc0d..b7edf7aa5 100644
--- a/src/resmom/checkpoint.c
+++ b/src/resmom/checkpoint.c
@@ -189,7 +189,7 @@ mom_checkpoint_execute_job(job *pjob, char *shell, char *arg[], struct var_table
 
     log_buffer[0] = '\0';
     sprintf(log_buffer, "execing checkpoint command (%s)\n", cmd);
-    log_err(-1, id, log_buffer);
+    log_ext(-1, id, log_buffer, LOG_DEBUG);
     }
 
   execve(checkpoint_run_exe_name, arg, vtable->v_envp);
@@ -404,7 +404,7 @@ int replace_checkpoint_path(
     strcpy(path, tmppath);
     sprintf(log_buffer,"Converted filename is (%s)\n",
         path);
-    log_err(-1, id, log_buffer);
+    log_ext(-1, id, log_buffer, LOG_DEBUG);
     rtnval = 1;
     }
 
@@ -438,7 +438,7 @@ int in_remote_checkpoint_dir(
         if ((LOGLEVEL >= 10) && (dindex == 0))
           {
           sprintf(log_buffer, "NO remote checkpoint directories configured");
-          log_err(-1, id, log_buffer);
+          log_ext(-1, id, log_buffer, LOG_DEBUG);
           }
       break;
       }
@@ -454,7 +454,7 @@ int in_remote_checkpoint_dir(
           "Checkpoint file %s matched in remote directory %s\n",
           ckpt_path,
           TRemChkptDirList[dindex]);
-          log_err(-1, id, log_buffer);
+          log_ext(-1, id, log_buffer, LOG_DEBUG);
           }
       return (TRUE);
       }
@@ -488,7 +488,7 @@ void delete_blcr_checkpoint_files(
     {
     sprintf(log_buffer,
       "No checkpoint directory specified for %s\n", pjob->ji_qs.ji_jobid);
-    log_err(-1, id, log_buffer);
+    log_ext(-1, id, log_buffer, LOG_DEBUG);
     return;
     }
 
@@ -522,7 +522,7 @@ void delete_blcr_checkpoint_files(
         {
         sprintf(log_buffer,
           "remtree for checkpoint %s\n",namebuf);
-        log_err(-1, id, log_buffer);
+        log_ext(-1, id, log_buffer, LOG_DEBUG);
         }
       remtree(namebuf);
       }
@@ -558,7 +558,7 @@ void delete_blcr_checkpoint_files(
         {
         sprintf(log_buffer,
           "remtree for restart %s\n",namebuf);
-        log_err(-1, id, log_buffer);
+        log_ext(-1, id, log_buffer, LOG_DEBUG);
         }
       remtree(namebuf);
       }
@@ -836,7 +836,7 @@ int blcr_checkpoint_job(
   
   strcat(buf, " 2>&1 1>/dev/null");
 
-  log_err(-1, id, buf);
+  log_ext(-1, id, buf, LOG_DEBUG);
   if (preq != NULL)
     {
     request_type = preq->rq_type;
@@ -1667,7 +1667,7 @@ int blcr_restart_job(
       strcat(buf, *ap);
       }
 
-    log_err(-1, id, buf);
+    log_ext(-1, id, buf, LOG_DEBUG);
 
     log_close(0);
 
@@ -1909,7 +1909,7 @@ int mom_checkpoint_job_has_checkpoint(
           }
         }
 
-      log_err(-1, "mom_checkpoint_job_has_checkpoint", "TRUE");
+      log_ext(-1, "mom_checkpoint_job_has_checkpoint", "TRUE", LOG_DEBUG);
 
       return(TRUE); /* Yes, there is a checkpoint. */
       break;
@@ -1918,14 +1918,14 @@ int mom_checkpoint_job_has_checkpoint(
 
       if (pjob->ji_wattr[(int)JOB_ATR_checkpoint_name].at_flags & ATR_VFLAG_SET)
         {
-        log_err(-1, "mom_checkpoint_job_has_checkpoint", "TRUE");
+        log_ext(-1, "mom_checkpoint_job_has_checkpoint", "TRUE", LOG_DEBUG);
         return(TRUE);
         }
 
       break;
     }
 
-  log_err(-1, "mom_checkpoint_job_has_checkpoint", "FALSE");
+  log_ext(-1, "mom_checkpoint_job_has_checkpoint", "FALSE", LOG_DEBUG);
 
   return(FALSE); /* No checkpoint attribute on job. */
   }
diff --git a/src/resmom/job_func.c b/src/resmom/job_func.c
index 6248f9861..7675c2993 100644
--- a/src/resmom/job_func.c
+++ b/src/resmom/job_func.c
@@ -324,7 +324,7 @@ int remtree(
         {
         sprintf(log_buffer, "unlink(1) succeeded on %s", namebuf);
 
-        log_err(-1, id, log_buffer);
+        log_ext(-1, id, log_buffer, LOG_DEBUG);
         }
       }    /* END while ((pdir = readdir(dir)) != NULL) */
 
@@ -346,7 +346,7 @@ int remtree(
       {
       sprintf(log_buffer, "rmdir succeeded on %s", dirname);
 
-      log_err(-1, id, log_buffer);
+      log_ext(-1, id, log_buffer, LOG_DEBUG);
       }
     }
   else if (unlink(dirname) < 0)
@@ -362,7 +362,7 @@ int remtree(
     {
     sprintf(log_buffer, "unlink(2) succeeded on %s", dirname);
 
-    log_err(-1, id, log_buffer);
+    log_ext(-1, id, log_buffer, LOG_DEBUG);
     }
 
   return(rtnv);
diff --git a/src/resmom/requests.c b/src/resmom/requests.c
index a88eb21d4..3d6560b98 100644
--- a/src/resmom/requests.c
+++ b/src/resmom/requests.c
@@ -877,7 +877,7 @@ static int told_to_cp(
             oldpath,
             nh);
 
-    log_err(-1, (char *)id, log_buffer);
+    log_ext(-1, (char *)id, log_buffer, LOG_DEBUG);
     }
 
   return(0);
@@ -2958,7 +2958,7 @@ static int sys_copy(
             ag2,
             ag3);
 
-    log_err(-1, id, log_buffer);
+    log_ext(-1, id, log_buffer, LOG_DEBUG);
     }
 
   for (loop = 1;loop < 4;++loop)
@@ -3830,7 +3830,7 @@ error:
         {
         sprintf(log_buffer,"copy succeeded (%s) from (%s) to (%s)\n",
           (dir == 0)? "In" : "Out", arg2, arg3);
-        log_err(-1, id, log_buffer);
+        log_ext(-1, id, log_buffer, LOG_DEBUG);
         }
 
       if (dir == STAGE_DIR_OUT)
@@ -3880,7 +3880,7 @@ error:
           if (LOGLEVEL >= 7)
             {
             sprintf(log_buffer,"removing checkpoint file directory (%s)\n", localname);
-            log_err(-1, id, log_buffer);
+            log_ext(-1, id, log_buffer, LOG_DEBUG);
             }
           }
         else
@@ -3888,7 +3888,7 @@ error:
           if (LOGLEVEL >= 7)
             {
             sprintf(log_buffer,"removing local checkpoint file (%s)\n", localname);
-            log_err(-1, id, log_buffer);
+            log_ext(-1, id, log_buffer, LOG_DEBUG);
             }
           }
 
diff --git a/src/resmom/start_exec.c b/src/resmom/start_exec.c
index 68277989d..619637e1d 100644
--- a/src/resmom/start_exec.c
+++ b/src/resmom/start_exec.c
@@ -1054,7 +1054,7 @@ int InitUserEnv(
             j,
             ebsize);
 
-    log_err(-1, id, log_buffer);
+    log_ext(-1, id, log_buffer, LOG_DEBUG);
     }
 
   vstrs = pjob->ji_wattr[(int)JOB_ATR_variables].at_val.at_arst;
@@ -1106,7 +1106,7 @@ int InitUserEnv(
     sprintf(log_buffer, "local env added, count: %d",
             j);
 
-    log_err(-1, id, log_buffer);
+    log_ext(-1, id, log_buffer, LOG_DEBUG);
     }
 
   /* Next, the variables passed with the job.  They may   */
@@ -1130,7 +1130,7 @@ int InitUserEnv(
       sprintf(log_buffer, "job env added, count: %d",
               j);
 
-      log_err(-1, id, log_buffer);
+      log_ext(-1, id, log_buffer, LOG_DEBUG);
       }
     }    /* END if (vstrs != NULL) */
 
@@ -1422,7 +1422,7 @@ int TMomFinalizeJob1(
       {
       /* SUCCESS */
 
-      log_err(-1, id, "Restart succeeded");
+      log_ext(-1, id, "Restart succeeded", LOG_DEBUG);
 
       /* reset mtime so walltime will not include held time */
       /* update to time now minus the time already used    */
@@ -1898,7 +1898,7 @@ int determine_umask(
       sprintf(log_buffer, "Using $job_output_file_umask value of %o",
               UMaskVal);
 
-      log_err(-1, id, log_buffer);
+      log_ext(-1, id, log_buffer, LOG_DEBUG);
       }
     }
 
@@ -1974,7 +1974,7 @@ int TMomFinalizeChild(
             messages will route to syslog via log_err() */
 
   if (LOGLEVEL >= 10)
-    log_err(-1, id, "starting");
+    log_ext(-1, id, "starting", LOG_DEBUG);
 
   if (lockfds >= 0)
     {
@@ -1994,7 +1994,7 @@ int TMomFinalizeChild(
   shell = set_shell(pjob, pwdp); /* in the machine dependent section */
 
   if (LOGLEVEL >= 10)
-    log_err(-1, id, "shell initialized");
+    log_ext(-1, id, "shell initialized", LOG_DEBUG);
 
   /* Setup user env */
 
@@ -2006,7 +2006,7 @@ int TMomFinalizeChild(
     }
 
   if (LOGLEVEL >= 10)
-    log_err(-1, id, "env initialized");
+    log_ext(-1, id, "env initialized", LOG_DEBUG);
 
   /* Create the job's nodefile */
 
@@ -2115,7 +2115,7 @@ int TMomFinalizeChild(
     }  /* END if (pjob->ji_flags & MOM_HAS_NODEFILE) */
 
   if (LOGLEVEL >= 10)
-    log_err(-1, id, "node file created");
+    log_ext(-1, id, "node file created", LOG_DEBUG);
 
   /* Set PBS_VNODENUM */
 
@@ -2128,7 +2128,7 @@ int TMomFinalizeChild(
   sprintf(log_buffer, "about to create cpuset for job %s.\n",
           pjob->ji_qs.ji_jobid);
 
-  log_err(-1, id, log_buffer);
+  log_ext(-1, id, log_buffer, LOG_DEBUG);
 
   if (create_jobset(pjob) != 0)
     {
@@ -2176,7 +2176,7 @@ int TMomFinalizeChild(
     }
 
   if (LOGLEVEL >= 10)
-    log_err(-1, id, "system vars set");
+    log_ext(-1, id, "system vars set", LOG_DEBUG);
 
   umask(determine_umask(pjob->ji_qs.ji_un.ji_momt.ji_exuid));
 
@@ -2554,7 +2554,7 @@ int TMomFinalizeChild(
 #endif  /* SHELL_USE_ARGV */
 
     if (LOGLEVEL >= 10)
-      log_err(-1, id, "opening script");
+      log_ext(-1, id, "opening script", LOG_DEBUG);
 
     if (script_in < 0)
       {
@@ -2592,7 +2592,7 @@ int TMomFinalizeChild(
       }
 
     if (LOGLEVEL >= 10)
-      log_err(-1, id, "stdout/stderr opened");
+      log_ext(-1, id, "stdout/stderr opened", LOG_DEBUG);
 
     /* run prolog - standard batch job */
 
@@ -2621,7 +2621,7 @@ int TMomFinalizeChild(
       }
 
     if (LOGLEVEL >= 10)
-      log_err(-1, id, "prolog complete");
+      log_ext(-1, id, "prolog complete", LOG_DEBUG);
 
 #ifdef ENABLE_CSA
     /*
@@ -2664,7 +2664,7 @@ int TMomFinalizeChild(
     j = set_job(pjob, &sjr);
 
     if (LOGLEVEL >= 10)
-      log_err(-1, id, "set_job complete");
+      log_ext(-1, id, "set_job complete", LOG_DEBUG);
 
     memcpy(TJE->sjr, &sjr, sizeof(sjr));
 
@@ -2741,7 +2741,7 @@ int TMomFinalizeChild(
     }
 
   if (LOGLEVEL >= 10)
-    log_err(-1, id, "setting system limits");
+    log_ext(-1, id, "setting system limits", LOG_DEBUG);
 
   log_buffer[0] = '\0';
 
@@ -2789,7 +2789,7 @@ int TMomFinalizeChild(
   endpwent();
 
   if (LOGLEVEL >= 10)
-    log_err(-1, id, "system limits set");
+    log_ext(-1, id, "system limits set", LOG_DEBUG);
 
   if ((idir = get_job_envvar(pjob, "PBS_O_ROOTDIR")) != NULL)
     {
@@ -2823,7 +2823,7 @@ int TMomFinalizeChild(
             pjob->ji_qs.ji_un.ji_momt.ji_exuid,
             pjob->ji_qs.ji_un.ji_momt.ji_exgid);
 
-    log_err(-1, id, log_buffer);
+    log_ext(-1, id, log_buffer, LOG_DEBUG);
     }
 
   if (setgroups(
@@ -2935,7 +2935,7 @@ int TMomFinalizeChild(
     }
 
   if (LOGLEVEL >= 10)
-    log_err(-1, id, "initial directory set");
+    log_ext(-1, id, "initial directory set", LOG_DEBUG);
 
   /* X11 forwarding init */
 
@@ -2971,7 +2971,7 @@ int TMomFinalizeChild(
   /* tell mom we are going */
 
   if (LOGLEVEL >= 10)
-    log_err(-1, id, "forking child");
+    log_ext(-1, id, "forking child", LOG_DEBUG);
 
   starter_return(TJE->upfds, TJE->downfds, JOB_EXEC_OK, &sjr);
 
@@ -3015,7 +3015,7 @@ int TMomFinalizeChild(
         sprintf(log_buffer, "bypass sourcing of login files for job %s",
                 pjob->ji_qs.ji_jobid);
 
-        log_err(-1, id, log_buffer);
+        log_ext(-1, id, log_buffer, LOG_DEBUG);
         }
 
       }
@@ -3097,7 +3097,7 @@ int TMomFinalizeChild(
         strcat(cmd,")");
 
         sprintf(log_buffer, "execing command (%s)\n", cmd);
-        log_err(-1, id, log_buffer);
+        log_ext(-1, id, log_buffer, LOG_DEBUG);
         }
       execve(shell, arg, vtable.v_envp);
       }
@@ -3763,7 +3763,7 @@ int start_process(
   /************************************************/
 
   if (LOGLEVEL >= 10)
-    log_err(-1, id, "child starting");
+    log_ext(-1, id, "child starting", LOG_DEBUG);
 
   if (lockfds >= 0)
     {
@@ -3792,7 +3792,7 @@ int start_process(
     }
 
   if (LOGLEVEL >= 10)
-    log_err(-1, id, "user env initialized");
+    log_ext(-1, id, "user env initialized", LOG_DEBUG);
 
   if (set_mach_vars(pjob, &vtable) != 0)
     {
@@ -3808,7 +3808,7 @@ int start_process(
     }
 
   if (LOGLEVEL >= 10)
-    log_err(-1, id, "mach vars set");
+    log_ext(-1, id, "mach vars set", LOG_DEBUG);
 
   umask(077);
 
@@ -3915,7 +3915,7 @@ int start_process(
       }
 
   if (LOGLEVEL >= 10)
-    log_err(-1, id, "MPI/TM variables set");
+    log_ext(-1, id, "MPI/TM variables set", LOG_DEBUG);
 
 #ifdef PENABLE_LINUX26_CPUSETS
     {
@@ -3937,7 +3937,7 @@ int start_process(
         sprintf(log_buffer, "about to move to taskset for job %s/%s.\n",
                 pjob->ji_qs.ji_jobid, nodeidbuf);
 
-        log_err(-1, id, log_buffer);
+        log_ext(-1, id, log_buffer, LOG_DEBUG);
 
         /* Move this mom process into the cpuset so the job will start in it. */
 
@@ -4077,7 +4077,7 @@ int start_process(
    *******************************************************/
 
   if (LOGLEVEL >= 10)
-    log_err(-1, id, "about to perform set_job");
+    log_ext(-1, id, "about to perform set_job", LOG_DEBUG);
 
   j = set_job(pjob, &sjr);
 
@@ -4132,7 +4132,7 @@ int start_process(
     }
 
   if (LOGLEVEL >= 10)
-    log_err(-1, id, "set_job complete");
+    log_ext(-1, id, "set_job complete", LOG_DEBUG);
 
   if ((idir = get_job_envvar(pjob, "PBS_O_ROOTDIR")) != NULL)
     {
@@ -4251,7 +4251,7 @@ int start_process(
     }
 
   if (LOGLEVEL >= 10)
-    log_err(-1, id, "done - writing pipe and exec'ing");
+    log_ext(-1, id, "done - writing pipe and exec'ing", LOG_DEBUG);
 
   starter_return(
     kid_write,
@@ -5300,7 +5300,7 @@ char *std_file_name(
       sprintf(log_buffer, "std_file_name path before NO_SPOOL_OUTPUT: %s",
               path);
 
-      log_err(-1, "std_file_name", log_buffer);
+      log_ext(-1, "std_file_name", log_buffer, LOG_DEBUG);
       }
 
 #if NO_SPOOL_OUTPUT == 1
@@ -5337,7 +5337,7 @@ char *std_file_name(
       sprintf(log_buffer, "std_file_name path in NO_SPOOL_OUTPUT: %s",
               path);
 
-      log_err(-1, "std_file_name", log_buffer);
+      log_ext(-1, "std_file_name", log_buffer, LOG_DEBUG);
       }
 
 #else /* NO_SPOOL_OUTPUT */
@@ -5355,7 +5355,7 @@ char *std_file_name(
         sprintf(log_buffer, "wdir: %s",
                 wdir);
 
-        log_err(-1, "std_file_name", log_buffer);
+        log_ext(-1, "std_file_name", log_buffer, LOG_DEBUG);
         }
 
       if (wdir != NULL)
@@ -5363,7 +5363,7 @@ char *std_file_name(
         /* check if job's work dir matches the no-spool directory list */
 
         if (LOGLEVEL >= 10)
-          log_err(-1, "std_file_name", "inside wdir != NULL");
+          log_ext(-1, "std_file_name", "inside wdir != NULL", LOG_DEBUG);
 
         for (dindex = 0;dindex < TMAX_NSDCOUNT;dindex++)
           {
@@ -5376,7 +5376,7 @@ char *std_file_name(
             havehomespool = 1;
 
             if (LOGLEVEL >= 10)
-              log_err(-1, "std_file_name", "inside !strcasecmp");
+              log_ext(-1, "std_file_name", "inside !strcasecmp", LOG_DEBUG);
 
             strncpy(path, wdir, sizeof(path));
 
@@ -5388,7 +5388,7 @@ char *std_file_name(
             havehomespool = 1;
 
             if (LOGLEVEL >= 10)
-              log_err(-1, "std_file_name", "inside !strncmp");
+              log_ext(-1, "std_file_name", "inside !strncmp", LOG_DEBUG);
 
             strncpy(path, wdir, sizeof(path));
 
@@ -5414,7 +5414,7 @@ char *std_file_name(
       sprintf(log_buffer, "std_file_name path in else NO_SPOOL_OUTPUT: %s",
               path);
 
-      log_err(-1, "std_file_name", log_buffer);
+      log_ext(-1, "std_file_name", log_buffer, LOG_DEBUG);
       }
 
 #endif /* NO_SPOOL_OUTPUT */
@@ -5430,7 +5430,7 @@ char *std_file_name(
               pjob->ji_qs.ji_fileprefix,
               suffix);
 
-      log_err(-1, "std_file_name", log_buffer);
+      log_ext(-1, "std_file_name", log_buffer, LOG_DEBUG);
       }
     }    /* END else ((pjob->ji_wattr[(int)JOB_ATR_keep].at_flags & ...)) */
 
@@ -5522,21 +5522,25 @@ int open_std_file(
       /* lstat failed - should we return failure in all cases? */
 
       if (errno == EINTR)
-        sprintf(log_buffer, "cannot stat stdout/stderr file '%s' (timeout)",
-                path);
-      else
-        sprintf(log_buffer, "cannot stat stdout/stderr file '%s' - file does not exist, will create",
-                path);
+        {
+          sprintf(log_buffer, "cannot stat stdout/stderr file '%s' (timeout)",
+                  path);
 
-      if (LOGLEVEL >= 6)
-        log_err(errno, "open_std_file", log_buffer);
+        if (LOGLEVEL >= 6)
+          log_err(errno, "open_std_file", log_buffer);
 
-      if (errno == EINTR)
-        {
         /* fail on timeout */
 
         return(-2);
         }
+      else
+        {
+          sprintf(log_buffer, "cannot stat stdout/stderr file '%s' - file does not exist, will create",
+                  path);
+
+        if (LOGLEVEL >= 6)
+          log_ext(errno, "open_std_file", log_buffer, LOG_DEBUG);
+        }
       }
     }    /* END else (keeping) */
 
@@ -5631,7 +5635,7 @@ int open_std_file(
       sprintf(log_buffer, "successfully created/opened stdout/stderr file '%s'",
               path);
 
-      log_err(-1, "open_std_file", log_buffer);
+      log_ext(-1, "open_std_file", log_buffer, LOG_DEBUG);
       }
     }
 
@@ -5715,7 +5719,7 @@ void bld_env_variables(
              name,
              (value != NULL) ? value : "NULL");
 
-    log_err(-1, "bld_env_variables", tmpLine);
+    log_ext(-1, "bld_env_variables", tmpLine, LOG_DEBUG);
     }
 
   amt = strlen(name) + 1;
@@ -5840,7 +5844,7 @@ int init_groups(
 
   if (LOGLEVEL >= 4)
     {
-    log_err(-1, id, "pre-sigprocmask");
+    log_ext(-1, id, "pre-sigprocmask", LOG_DEBUG);
     }
 
   /* Block signals while we do this or else the signal handler might
@@ -5868,7 +5872,7 @@ int init_groups(
 
   if (LOGLEVEL >= 4)
     {
-    log_err(-1, id, "post-initgroups");
+    log_ext(-1, id, "post-initgroups", LOG_DEBUG);
     }
 
   /* restore state */
@@ -6256,7 +6260,7 @@ uint64_t get_csa_jobid(
               csa_job_id,
               pbs_jobid);
 
-      log_err(-1, id, log_buffer);
+      log_ext(-1, id, log_buffer, LOG_DEBUG);
       }
     }
 
@@ -6395,7 +6399,7 @@ int create_WLM_Rec(
             "job_id = %llx, compCode = %d, pbs job %s",
             &rec_type, &sub_type, job_id, compCode, pbs_jobid);
 
-    log_err(-1, id, log_buffer);
+    log_ext(-1, id, log_buffer, LOG_DEBUG);
     }
 
   memset(&wkm, 0, sizeof(wkm));
@@ -6521,7 +6525,7 @@ void add_wkm_start(
                 job_id,
                 pbs_jobid);
 
-        log_err(-1, id, log_buffer);
+        log_ext(-1, id, log_buffer, LOG_DEBUG);
         }
       }
     else
@@ -6548,7 +6552,7 @@ void add_wkm_start(
                 job_id,
                 pbs_jobid);
 
-        log_err(-1, id, log_buffer);
+        log_ext(-1, id, log_buffer, LOG_DEBUG);
         }
       }
     else if (LOGLEVEL >= 2)
@@ -6590,7 +6594,7 @@ void add_wkm_end(
                 job_id,
                 pbs_jobid);
 
-        log_err(-1, id, log_buffer);
+        log_extt(-1, id, log_buffer, LOG_DEBUG);
         }
       }
     else if (LOGLEVEL >= 2)
diff --git a/src/server/job_func.c b/src/server/job_func.c
index 580f64042..9663f7289 100644
--- a/src/server/job_func.c
+++ b/src/server/job_func.c
@@ -316,7 +316,7 @@ int remtree(
         {
         sprintf(log_buffer, "unlink(1) succeeded on %s", namebuf);
 
-        log_err(-1, id, log_buffer);
+        log_ext(-1, id, log_buffer, LOG_DEBUG);
         }
       }    /* END while ((pdir = readdir(dir)) != NULL) */
 
@@ -338,7 +338,7 @@ int remtree(
       {
       sprintf(log_buffer, "rmdir succeeded on %s", dirname);
 
-      log_err(-1, id, log_buffer);
+      log_ext(-1, id, log_buffer, LOG_DEBUG);
       }
     }
   else if (unlink(dirname) < 0)
@@ -354,7 +354,7 @@ int remtree(
     {
     sprintf(log_buffer, "unlink(2) succeeded on %s", dirname);
 
-    log_err(-1, id, log_buffer);
+    log_ext(-1, id, log_buffer, LOG_DEBUG);
     }
 
   return(rtnv);
@@ -1260,7 +1260,7 @@ void remove_checkpoint(
     sprintf(log_buffer,"Removing checkpoint file (%s/%s)",
       pjob->ji_wattr[(int)JOB_ATR_checkpoint_dir].at_val.at_str,
       pjob->ji_wattr[(int)JOB_ATR_checkpoint_name].at_val.at_str);
-    log_err(-1, id, log_buffer);
+    log_ext(-1, id, log_buffer, LOG_DEBUG);
 
     /* change the request type from copy to delete  */
 
@@ -1394,7 +1394,7 @@ void cleanup_restart_file(
     sprintf(log_buffer,"Cleaning up restart file (%s/%s)",
       pjob->ji_wattr[(int)JOB_ATR_checkpoint_dir].at_flags & ATR_VFLAG_SET? pjob->ji_wattr[(int)JOB_ATR_checkpoint_dir].at_val.at_str : "NONE",
       pjob->ji_wattr[(int)JOB_ATR_restart_name].at_val.at_str);
-    log_err(-1, id, log_buffer);
+    log_ext(-1, id, log_buffer, LOG_DEBUG);
 
     /* change the request type from copy to delete  */
 

