commit 73219d178051691a56d57184d8c7f6d0cbe3c5c1
Author: Chris Wright <chrisw@osdl.org>
Date:   Tue Jun 21 17:14:52 2005 -0700

    [PATCH] mmap topdown fix for large stack limit, large allocation
    
    The topdown changes in 2.6.12-rc1 can cause large allocations with large
    stack limit to fail, despite there being space available.  The
    mmap_base-len is only valid when len >= mmap_base.  However, nothing in
    topdown allocator checks this.  It's only (now) caught at higher level,
    which will cause allocation to simply fail.  The following change restores
    the fallback to bottom-up path, which will allow large allocations with
    large stack limit to potentially still succeed.
    
    Signed-off-by: Chris Wright <chrisw@osdl.org>
    Signed-off-by: Andrew Morton <akpm@osdl.org>
    Signed-off-by: Linus Torvalds <torvalds@osdl.org>

diff --git a/mm/mmap.c b/mm/mmap.c
index 9da23c1ef9dc..da3fa90a0aae 100644
--- a/mm/mmap.c
+++ b/mm/mmap.c
@@ -1267,6 +1267,9 @@ arch_get_unmapped_area_topdown(struct file *filp, const unsigned long addr0,
 			return (mm->free_area_cache = addr-len);
 	}
 
+	if (mm->mmap_base < len)
+		goto bottomup;
+
 	addr = mm->mmap_base-len;
 
 	do {
@@ -1288,6 +1291,7 @@ arch_get_unmapped_area_topdown(struct file *filp, const unsigned long addr0,
 		addr = vma->vm_start-len;
 	} while (len < vma->vm_start);
 
+bottomup:
 	/*
 	 * A failed mmap() very likely causes application failure,
 	 * so fall back to the bottom-up function here. This scenario

