commit b35a6f91d2305f5356a107236bfc04d504e68140
Author: nobu <nobu@b2dd03c8-39d4-4d8f-98ff-823fe69b080e>
Date:   Thu Jun 12 04:09:26 2014 +0000

    string.c: shrink too big buffer
    
    * string.c (rb_str_resize): shrink the buffer even if new length
      is same but it is enough smaller than the capacity.
    
    git-svn-id: svn+ssh://ci.ruby-lang.org/ruby/trunk@46408 b2dd03c8-39d4-4d8f-98ff-823fe69b080e

diff --git a/string.c b/string.c
index 0e589243af..b7014f0a65 100644
--- a/string.c
+++ b/string.c
@@ -1969,9 +1969,10 @@ rb_str_resize(VALUE str, long len)
     ENC_CODERANGE_CLEAR(str);
     slen = RSTRING_LEN(str);
 
-    if (len != slen) {
+    {
 	const int termlen = TERM_LEN(str);
 	if (STR_EMBED_P(str)) {
+	    if (len == slen) return str;
 	    if (len + termlen <= RSTRING_EMBED_LEN_MAX + 1) {
 		STR_SET_EMBED_LEN(str, len);
 		TERM_FILL(RSTRING(str)->as.ary + len, termlen);
@@ -1990,11 +1991,13 @@ rb_str_resize(VALUE str, long len)
 	    return str;
 	}
 	else if (!independent) {
+	    if (len == slen) return str;
 	    str_make_independent_expand(str, len - slen);
 	}
 	else if (slen < len || slen - len > 1024) {
 	    REALLOC_N(RSTRING(str)->as.heap.ptr, char, len + termlen);
 	}
+	else if (len == slen) return str;
 	RSTRING(str)->as.heap.aux.capa = len;
 	RSTRING(str)->as.heap.len = len;
 	TERM_FILL(RSTRING(str)->as.heap.ptr + len, termlen); /* sentinel */

