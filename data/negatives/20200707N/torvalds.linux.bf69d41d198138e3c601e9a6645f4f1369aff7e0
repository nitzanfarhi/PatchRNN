commit bf69d41d198138e3c601e9a6645f4f1369aff7e0
Author: Eric Paris <eparis@redhat.com>
Date:   Thu Apr 28 15:55:52 2011 -0400

    flex_arrays: allow zero length flex arrays
    
    Just like kmalloc will allow one to allocate a 0 length segment of memory
    flex arrays should do the same thing.  It should bomb if you try to use
    something, but it should at least allow the allocation.
    
    This is needed because when SELinux switched to using flex_arrays in 2.6.38
    the inability to allocate a 0 length array resulted in SELinux policy load
    returning -ENOSPC when previously it worked.
    
    Based-on-patch-by: Steffen Klassert <steffen.klassert@secunet.com>
    Signed-off-by: Eric Paris <eparis@redhat.com>
    Tested-by: Chris Richards <gizmo@giz-works.com>
    Cc: stable@kernel.org [2.6.38+]

diff --git a/lib/flex_array.c b/lib/flex_array.c
index 0c33b24498ba..854b57bd7d9d 100644
--- a/lib/flex_array.c
+++ b/lib/flex_array.c
@@ -253,9 +253,16 @@ int flex_array_prealloc(struct flex_array *fa, unsigned int start,
 	unsigned int end;
 	struct flex_array_part *part;
 
+	if (!start && !nr_elements)
+		return 0;
+	if (start >= fa->total_nr_elements)
+		return -ENOSPC;
+	if (!nr_elements)
+		return 0;
+
 	end = start + nr_elements - 1;
 
-	if (start >= fa->total_nr_elements || end >= fa->total_nr_elements)
+	if (end >= fa->total_nr_elements)
 		return -ENOSPC;
 	if (elements_fit_in_base(fa))
 		return 0;
@@ -346,6 +353,8 @@ int flex_array_shrink(struct flex_array *fa)
 	int part_nr;
 	int ret = 0;
 
+	if (!fa->total_nr_elements)
+		return 0;
 	if (elements_fit_in_base(fa))
 		return ret;
 	for (part_nr = 0; part_nr < FLEX_ARRAY_NR_BASE_PTRS; part_nr++) {

