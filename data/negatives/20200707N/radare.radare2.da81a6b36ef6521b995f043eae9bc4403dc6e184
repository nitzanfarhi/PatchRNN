commit da81a6b36ef6521b995f043eae9bc4403dc6e184
Author: pancake <pancake@nopcode.org>
Date:   Sun Apr 15 10:35:05 2018 +0200

    Use r_meta_find_in() with asm.meta=false, the ranged sdb works now

diff --git a/libr/anal/meta.c b/libr/anal/meta.c
index 88801a300..71b9563e5 100644
--- a/libr/anal/meta.c
+++ b/libr/anal/meta.c
@@ -38,12 +38,15 @@ static char *meta_inrange_get (RAnal *a, ut64 addr, int size) {
 	// return string array of all the offsets where there are stuff
 	for (; base < base2; base += META_RANGE_SIZE) {
 		const char *key = sdb_fmt ("range.0x%"PFMT64x, base);
-		char *r = sdb_array_get (DB, key, 0, 0);
-		if (res) {
-			res = r_str_append (res, " ");
+		// char *r = sdb_array_get (DB, key, 0, 0);
+		char *r = sdb_get (DB, key, 0);
+		if (r) {
+			if (res) {
+				res = r_str_append (res, ",");
+			}
+			res = r_str_append (res, r);
+			free (r);
 		}
-		res = r_str_append (res, r);
-		free (r);
 	}
 	return res;
 }
@@ -63,16 +66,17 @@ static bool meta_inrange_add (RAnal *a, ut64 addr, int size) {
 	return set;
 }
 
-static int meta_inrange_del (RAnal *a, ut64 addr, int size) {
-	int set = 0;
+static bool meta_inrange_del (RAnal *a, ut64 addr, int size) {
+	bool set = false;
 	char key[64];
 	ut64 base = META_RANGE_BASE (addr);
 	ut64 base2 = META_RANGE_BASE (addr + size) + 1;
 // TODO: optimize this thing?
 	for (; base < base2; base += META_RANGE_SIZE) {
 		snprintf (key, sizeof (key)-1, "range.0x%"PFMT64x, base);
-		if (sdb_array_remove_num (DB, key, addr, 0))
-			set = 1;
+		if (sdb_array_remove_num (DB, key, addr, 0)) {
+			set = true;
+		}
 	}
 	//sdb_array_del (DB);
 	return set;
@@ -217,7 +221,6 @@ R_API int r_meta_del(RAnal *a, int type, ut64 addr, ut64 size) {
 					snprintf (key, sizeof (key)-1,
 						"meta.%c.0x%"PFMT64x,
 						type, sdb_atoi (s));
-					eprintf ("--> %s\n", key);
 					sdb_unset (DB, key, 0);
 					if (!next) break;
 				}
@@ -268,6 +271,7 @@ R_API int r_meta_del(RAnal *a, int type, ut64 addr, ut64 size) {
 	sdb_unset (DB, key, 0);
 	return false;
 }
+
 R_API int r_meta_var_comment_del(RAnal *a, int type, ut64 idx, ut64 addr) {
 	char *key;
 	key = r_str_newf ("meta.%c.0x%"PFMT64x"0x%"PFMT64x, type, addr, idx);
@@ -423,12 +427,19 @@ R_API RAnalMetaItem *r_meta_find_in(RAnal *a, ut64 at, int type, int where) {
 	if (!res) {
 		return NULL;
 	}
-	ut64 mia = r_num_math (NULL, res);
-	RAnalMetaItem *mi = r_meta_find (a, mia, type, where);
-	free (res);
-	if (at >= mi->from && at < mi->to) {
-		return mi;
+	RList *list = r_str_split_list (res, ",");
+	RListIter *iter;
+	const char *meta;
+	r_list_foreach (list, iter, meta) {
+		ut64 mia = r_num_math (NULL, meta);
+		RAnalMetaItem *mi = r_meta_find (a, mia, type, where);
+		if (mi && (at >= mi->from && at < mi->to)) {
+			free (res);
+			return mi;
+		}
 	}
+	r_list_free (list);
+	free (res);
 	return NULL;
 }
 
diff --git a/libr/core/disasm.c b/libr/core/disasm.c
index 910dadacb..ab0d2f651 100644
--- a/libr/core/disasm.c
+++ b/libr/core/disasm.c
@@ -1957,10 +1957,12 @@ static int ds_disassemble(RDisasmState *ds, ut8 *buf, int len) {
 #if 0
 		RAnalMetaItem *meta = r_meta_find (core->anal, ds->at,
 				R_META_TYPE_ANY, R_META_WHERE_HERE);
-#endif
+#else
 		RAnalMetaItem *meta = r_meta_find_in (core->anal, ds->at,
 				R_META_TYPE_ANY, R_META_WHERE_HERE);
+#endif
 		if (meta && meta->size > 0) {
+			// XXX this is just noise. should be rewritten
 			switch (meta->type) {
 			case R_META_TYPE_DATA:
 				if (meta->str) {
@@ -1987,8 +1989,6 @@ static int ds_disassemble(RDisasmState *ds, ut8 *buf, int len) {
 				/* TODO */
 				break;
 			}
-		}
-		if (meta) {
 			int sz = R_MIN (16, meta->size - (ds->at - meta->from));
 			ds->asmop.size = sz;
 			r_hex_bin2str (buf, sz, ds->asmop.buf_hex);

