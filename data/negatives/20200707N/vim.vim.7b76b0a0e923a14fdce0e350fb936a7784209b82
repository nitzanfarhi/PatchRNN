commit 7b76b0a0e923a14fdce0e350fb936a7784209b82
Author: Bram Moolenaar <Bram@vim.org>
Date:   Wed Jan 28 18:09:38 2009 +0000

    updated for version 7.2-092

diff --git a/src/eval.c b/src/eval.c
index bc86a5594..76a6044a8 100644
--- a/src/eval.c
+++ b/src/eval.c
@@ -7918,9 +7918,9 @@ get_func_tv(name, len, rettv, arg, firstline, lastline, doesrange,
     else if (!aborting())
     {
 	if (argcount == MAX_FUNC_ARGS)
-	    emsg_funcname("E740: Too many arguments for function %s", name);
+	    emsg_funcname(N_("E740: Too many arguments for function %s"), name);
 	else
-	    emsg_funcname("E116: Invalid arguments for function %s", name);
+	    emsg_funcname(N_("E116: Invalid arguments for function %s"), name);
     }
 
     while (--argcount >= 0)
@@ -8153,6 +8153,7 @@ call_func(name, len, rettv, argcount, argvars, firstline, lastline,
 
 /*
  * Give an error message with a function name.  Handle <SNR> things.
+ * "ermsg" is to be passed without translation, use N_() instead of _().
  */
     static void
 emsg_funcname(ermsg, name)
@@ -19867,7 +19868,7 @@ ex_function(eap)
 		}
 	    }
 	    else
-		emsg_funcname("E123: Undefined function: %s", name);
+		emsg_funcname(N_("E123: Undefined function: %s"), name);
 	}
 	goto ret_free;
     }
@@ -19911,7 +19912,7 @@ ex_function(eap)
 						      : eval_isnamec(arg[j])))
 		++j;
 	    if (arg[j] != NUL)
-		emsg_funcname(_(e_invarg2), arg);
+		emsg_funcname(e_invarg2, arg);
 	}
     }
 
@@ -20183,7 +20184,7 @@ ex_function(eap)
 	v = find_var(name, &ht);
 	if (v != NULL && v->di_tv.v_type == VAR_FUNC)
 	{
-	    emsg_funcname("E707: Function name conflicts with variable: %s",
+	    emsg_funcname(N_("E707: Function name conflicts with variable: %s"),
 									name);
 	    goto erret;
 	}
@@ -20198,7 +20199,7 @@ ex_function(eap)
 	    }
 	    if (fp->uf_calls > 0)
 	    {
-		emsg_funcname("E127: Cannot redefine function %s: It is in use",
+		emsg_funcname(N_("E127: Cannot redefine function %s: It is in use"),
 									name);
 		goto erret;
 	    }
@@ -21477,7 +21478,7 @@ call_user_func(fp, argcount, argvars, rettv, firstline, lastline, selfdict)
 
 /*
  * Return TRUE if items in "fc" do not have "copyID".  That means they are not
- * referenced from anywyere.
+ * referenced from anywhere.
  */
     static int
 can_free_funccal(fc, copyID)
diff --git a/src/version.c b/src/version.c
index 7c2e51bd7..ad17ab62e 100644
--- a/src/version.c
+++ b/src/version.c
@@ -676,6 +676,8 @@ static char *(features[]) =
 
 static int included_patches[] =
 {   /* Add new patch number below this line */
+/**/
+    92,
 /**/
     91,
 /**/

