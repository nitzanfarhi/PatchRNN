commit 855d30b402b91f09c90f65c34ec91debaae8cf3a
Author: Daniel Vetter <daniel.vetter@ffwll.ch>
Date:   Wed Sep 10 17:36:09 2014 +0200

    drm: Only update final vblank count when precise ts is available
    
    Drivers without a hardware vblank counter simply can't account for the
    vblanks that happened while the vblank interrupt was off. To check
    this grab a vblank timestamp and if the result is dubious follow the
    normal save-and-disable logic.
    
    Drivers should prevent this by setting vblank_disable_allowed = false,
    but since running vblank interrupts constantly is not good for power
    consumption most drivers lie. Testing for precise vblank timestamps is
    the next best thing we can check for.
    
    Suggested-by: Mario Kleiner <mario.kleiner.de@gmail.com>
    Cc: Mario Kleiner <mario.kleiner.de@gmail.com>
    Cc: Matt Roper <matthew.d.roper@intel.com>
    Cc: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Reviewed-by: Mario Kleiner <mario.kleiner.de@gmail.com>
    Signed-off-by: Daniel Vetter <daniel.vetter@intel.com>

diff --git a/drivers/gpu/drm/drm_irq.c b/drivers/gpu/drm/drm_irq.c
index 87d148cec877..ad699b729278 100644
--- a/drivers/gpu/drm/drm_irq.c
+++ b/drivers/gpu/drm/drm_irq.c
@@ -148,8 +148,15 @@ static void vblank_disable_and_save(struct drm_device *dev, int crtc)
 	 * has been ticking all along until this time. This makes the
 	 * count account for the entire time between drm_vblank_on() and
 	 * drm_vblank_off().
+	 *
+	 * But only do this if precise vblank timestamps are available.
+	 * Otherwise we might read a totally bogus timestamp since drivers
+	 * lacking precise timestamp support rely upon sampling the system clock
+	 * at vblank interrupt time. Which obviously won't work out well if the
+	 * vblank interrupt is disabled.
 	 */
-	if (!vblank->enabled) {
+	if (!vblank->enabled &&
+	    drm_get_last_vbltimestamp(dev, crtc, &tvblank, 0) > 0) {
 		drm_update_vblank_count(dev, crtc);
 		spin_unlock_irqrestore(&dev->vblank_time_lock, irqflags);
 		return;

