commit 96c5865559cee0f9cbc5173f3c949f6ce3525581
Author: David Woodhouse <dwmw2@infradead.org>
Date:   Wed Feb 6 01:36:27 2008 -0800

    Allow auto-destruction of loop devices
    
    This allows a flag to be set on loop devices so that when they are
    closed for the last time, they'll self-destruct.
    
    In general, so that we can automatically allocate loop devices (as with
    losetup -f) and have them disappear when we're done with them.
    
    In particular, right now, so that we can stop relying on the hackish
    special-case in umount(8) which kills off loop devices which were set up by
    'mount -oloop'.  That means we can stop putting crap in /etc/mtab which
    doesn't belong there, which means it can be a symlink to /proc/mounts, which
    means yet another writable file on the root filesystem is eliminated and the
    'stateless' folks get happier...  and OLPC trac #356 can be closed.
    
    The mount(8) side of that is at
    http://marc.info/?l=util-linux-ng&m=119362955431694&w=2
    
    [akpm@linux-foundation.org: coding-style fixes]
    Signed-off-by: David Woodhouse <dwmw2@infradead.org>
    Cc: Bernardo Innocenti <bernie@codewiz.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

diff --git a/drivers/block/loop.c b/drivers/block/loop.c
index b8af22e610df..91ebb007416c 100644
--- a/drivers/block/loop.c
+++ b/drivers/block/loop.c
@@ -973,6 +973,10 @@ loop_set_status(struct loop_device *lo, const struct loop_info64 *info)
 	lo->transfer = xfer->transfer;
 	lo->ioctl = xfer->ioctl;
 
+	if ((lo->lo_flags & LO_FLAGS_AUTOCLEAR) !=
+	     (info->lo_flags & LO_FLAGS_AUTOCLEAR))
+		lo->lo_flags ^= LO_FLAGS_AUTOCLEAR;
+
 	lo->lo_encrypt_key_size = info->lo_encrypt_key_size;
 	lo->lo_init[0] = info->lo_init[0];
 	lo->lo_init[1] = info->lo_init[1];
@@ -1331,6 +1335,10 @@ static int lo_release(struct inode *inode, struct file *file)
 
 	mutex_lock(&lo->lo_ctl_mutex);
 	--lo->lo_refcnt;
+
+	if ((lo->lo_flags & LO_FLAGS_AUTOCLEAR) && !lo->lo_refcnt)
+		loop_clr_fd(lo, inode->i_bdev);
+
 	mutex_unlock(&lo->lo_ctl_mutex);
 
 	return 0;
diff --git a/include/linux/loop.h b/include/linux/loop.h
index 26a0a103898f..46169a7b559b 100644
--- a/include/linux/loop.h
+++ b/include/linux/loop.h
@@ -76,6 +76,7 @@ struct loop_device {
 enum {
 	LO_FLAGS_READ_ONLY	= 1,
 	LO_FLAGS_USE_AOPS	= 2,
+	LO_FLAGS_AUTOCLEAR	= 4,
 };
 
 #include <asm/posix_types.h>	/* for __kernel_old_dev_t */

