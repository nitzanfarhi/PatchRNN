commit 8de78e359e2d6f616d7a10cac34eb7a2935fb18a
Author: Anca Vamanu <anca@voice-system.ro>
Date:   Fri Aug 3 10:19:39 2007 +0000

    - fixed bug of not updated PUACB_MAX macro value
    - enabled the usage of record id for subscribe requests also
    
    
    git-svn-id: https://openser.svn.sourceforge.net/svnroot/openser/trunk@2572 689a6050-402a-0410-94f2-e92a70836424

diff --git a/modules_k/pua/hash.c b/modules_k/pua/hash.c
index 760c9bdb9..75e466038 100644
--- a/modules_k/pua/hash.c
+++ b/modules_k/pua/hash.c
@@ -108,7 +108,6 @@ ua_pres_t* search_htable(str* pres_uri, str* watcher_uri, int FLAG,
 			str id, str* etag,  unsigned int hash_code)
 {
 	ua_pres_t* p= NULL,* L= NULL;
-	int ok;
 
 	L= HashT->p_records[hash_code].entity;
 	DBG("PUA: search_htable: core_hash= %u\n", hash_code);
@@ -119,7 +118,6 @@ ua_pres_t* search_htable(str* pres_uri, str* watcher_uri, int FLAG,
 
 	for(p= L->next; p; p=p->next)
 	{
-
 		if(p->flag & FLAG)
 		{
 			DBG("PUA: search_htable:pres_uri= %.*s len= %d\n",
@@ -129,6 +127,13 @@ ua_pres_t* search_htable(str* pres_uri, str* watcher_uri, int FLAG,
 			if((p->pres_uri->len==pres_uri->len) &&
 					(strncmp(p->pres_uri->s, pres_uri->s,pres_uri->len)==0))
 			{
+				if(id.s && id.len) 
+				{	
+					if(!(id.len== p->id.len &&
+						strncmp(p->id.s, id.s, id.len)==0))
+							continue;
+				}				
+
 				if(watcher_uri)
 				{
 					if(p->watcher_uri->len==watcher_uri->len &&
@@ -140,27 +145,17 @@ ua_pres_t* search_htable(str* pres_uri, str* watcher_uri, int FLAG,
 				}
 				else
 				{
-					ok= 1;
-					if(id.s && id.len) 
-					{	
-
-						if(!(id.len== p->id.len &&
-								strncmp(p->id.s, id.s, id.len)==0))
-							ok= 0;
-					}				
 					if(etag)
 					{
-						if(!(etag->len== p->etag.len &&
-								strncmp(p->etag.s, etag->s, etag->len)==0))
-							ok= 0;
-						
+						if(etag->len== p->etag.len &&
+								strncmp(p->etag.s, etag->s, etag->len)==0)
+							break;		
 					}	
-					if(ok== 1)
-						break;
 				}
 			}
 		}
 	}
+
 	if(p)
 		DBG("PUA:search_htable: found record\n");
 	else
@@ -306,7 +301,8 @@ ua_pres_t* get_dialog(ua_pres_t* dialog, unsigned int hash_code)
 
 			DBG("PUA: get_dialog: searched to_tag= %.*s\tfrom_tag= %.*s\n",
 				 p->to_tag.len, p->to_tag.s, p->from_tag.len, p->from_tag.s);
-	    	if((p->pres_uri->len== dialog->pres_uri->len) &&
+	    
+			if((p->pres_uri->len== dialog->pres_uri->len) &&
 				(strncmp(p->pres_uri->s, dialog->pres_uri->s,p->pres_uri->len)==0)&&
 				(p->watcher_uri->len== dialog->watcher_uri->len) &&
  	    		(strncmp(p->watcher_uri->s,dialog->watcher_uri->s,p->watcher_uri->len )==0)&&
diff --git a/modules_k/pua/pua.c b/modules_k/pua/pua.c
index 43b82fc0b..73cef4d1f 100644
--- a/modules_k/pua/pua.c
+++ b/modules_k/pua/pua.c
@@ -713,73 +713,73 @@ void db_update(unsigned int ticks,void *param)
 	DBG("PUA: db_update...\n");
 	/* cols and values used for insert */
 	q_cols[puri_col= n_query_cols] ="pres_uri";
-	q_vals[puri_col= n_query_cols].type = DB_STR;
-	q_vals[puri_col= n_query_cols].nul = 0;
+	q_vals[puri_col].type = DB_STR;
+	q_vals[puri_col].nul = 0;
 	n_query_cols++;
 	
 	q_cols[pid_col= n_query_cols] ="pres_id";	
-	q_vals[pid_col= n_query_cols].type = DB_STR;
-	q_vals[pid_col= n_query_cols].nul = 0;
+	q_vals[pid_col].type = DB_STR;
+	q_vals[pid_col].nul = 0;
 	n_query_cols++;
 
 	q_cols[flag_col= n_query_cols] ="flag";
-	q_vals[flag_col= n_query_cols].type = DB_INT;
-	q_vals[flag_col= n_query_cols].nul = 0;
+	q_vals[flag_col].type = DB_INT;
+	q_vals[flag_col].nul = 0;
 	n_query_cols++;
 
 	q_cols[event_col= n_query_cols] ="event";
-	q_vals[event_col= n_query_cols].type = DB_INT;
-	q_vals[event_col= n_query_cols].nul = 0;
+	q_vals[event_col].type = DB_INT;
+	q_vals[event_col].nul = 0;
 	n_query_cols++;
 
 	q_cols[watcher_col= n_query_cols] ="watcher_uri";
-	q_vals[watcher_col= n_query_cols].type = DB_STR;
-	q_vals[watcher_col= n_query_cols].nul = 0;
+	q_vals[watcher_col].type = DB_STR;
+	q_vals[watcher_col].nul = 0;
 	n_query_cols++;
 
 	q_cols[callid_col= n_query_cols] ="call_id";
-	q_vals[callid_col= n_query_cols].type = DB_STR;
-	q_vals[callid_col= n_query_cols].nul = 0;
+	q_vals[callid_col].type = DB_STR;
+	q_vals[callid_col].nul = 0;
 	n_query_cols++;
 
 	q_cols[totag_col= n_query_cols] ="to_tag";
-	q_vals[totag_col= n_query_cols].type = DB_STR;
-	q_vals[totag_col= n_query_cols].nul = 0;
+	q_vals[totag_col].type = DB_STR;
+	q_vals[totag_col].nul = 0;
 	n_query_cols++;
 
 	q_cols[fromtag_col= n_query_cols] ="from_tag";
-	q_vals[fromtag_col= n_query_cols].type = DB_STR;
-	q_vals[fromtag_col= n_query_cols].nul = 0;
+	q_vals[fromtag_col].type = DB_STR;
+	q_vals[fromtag_col].nul = 0;
 	n_query_cols++;
 
 	q_cols[etag_col= n_query_cols] ="etag";
-	q_vals[etag_col= n_query_cols].type = DB_STR;
-	q_vals[etag_col= n_query_cols].nul = 0;
+	q_vals[etag_col].type = DB_STR;
+	q_vals[etag_col].nul = 0;
 	n_query_cols++;	
 
 	q_cols[tuple_col= n_query_cols] ="tuple_id";
-	q_vals[tuple_col= n_query_cols].type = DB_STR;
-	q_vals[tuple_col= n_query_cols].nul = 0;
+	q_vals[tuple_col].type = DB_STR;
+	q_vals[tuple_col].nul = 0;
 	n_query_cols++;
 
 	q_cols[cseq_col= n_query_cols]="cseq";
-	q_vals[cseq_col= n_query_cols].type = DB_INT;
-	q_vals[cseq_col= n_query_cols].nul = 0;
+	q_vals[cseq_col].type = DB_INT;
+	q_vals[cseq_col].nul = 0;
 	n_query_cols++;
 
 	q_cols[expires_col= n_query_cols] ="expires";
-	q_vals[expires_col= n_query_cols].type = DB_INT;
-	q_vals[expires_col= n_query_cols].nul = 0;
+	q_vals[expires_col].type = DB_INT;
+	q_vals[expires_col].nul = 0;
 	n_query_cols++;
 
 	q_cols[record_route_col= n_query_cols] ="record_route";
-	q_vals[record_route_col= n_query_cols].type = DB_STR;
-	q_vals[record_route_col= n_query_cols].nul = 0;
+	q_vals[record_route_col].type = DB_STR;
+	q_vals[record_route_col].nul = 0;
 	n_query_cols++;
 	
 	q_cols[contact_col= n_query_cols] ="contact";
-	q_vals[contact_col= n_query_cols].type = DB_STR;
-	q_vals[contact_col= n_query_cols].nul = 0;
+	q_vals[contact_col].type = DB_STR;
+	q_vals[contact_col].nul = 0;
 	n_query_cols++;
 
 	/* cols and values used for update */
@@ -826,7 +826,6 @@ void db_update(unsigned int ticks,void *param)
 			{
 				case NO_UPDATEDB_FLAG:
 				{
-			
 					DBG("PUA: db_update: NO_UPDATEDB_FLAG\n");
 					break;			  
 				}
diff --git a/modules_k/pua/pua_callback.h b/modules_k/pua/pua_callback.h
index f2db31672..12e207b98 100644
--- a/modules_k/pua/pua_callback.h
+++ b/modules_k/pua/pua_callback.h
@@ -28,7 +28,7 @@
 #include "../../parser/parse_fline.h"
 #include "../pua/hash.h"
 
-#define PUACB_MAX    		(1<<7)
+#define PUACB_MAX    		(1<<8)
 
 /* callback function prototype */
 typedef void (pua_cb)(ua_pres_t* hentity, struct msg_start * fl);
diff --git a/modules_k/pua/send_subscribe.c b/modules_k/pua/send_subscribe.c
index e820ac500..d92f10665 100644
--- a/modules_k/pua/send_subscribe.c
+++ b/modules_k/pua/send_subscribe.c
@@ -341,7 +341,6 @@ void subs_cback_func(struct cell *t, int cb_type, struct tmcb_params *ps)
 			subs.flag= INSERT_TYPE;
 			subs.source_flag= flag;
 			subs.event= hentity->event;
-			DBG("PUA:subs_cback_func: event_parameter= %d\n",subs.event);
 			subs.id= hentity->id;
 			subs.outbound_proxy= hentity->outbound_proxy;
 			if(send_subscribe(&subs)< 0)
@@ -353,8 +352,8 @@ void subs_cback_func(struct cell *t, int cb_type, struct tmcb_params *ps)
 		else 
 		{
 			DBG("PUA:subs_cback_func: No dialog found\n");			
+			lock_release(&HashT->p_records[hash_code].lock);
 		}
-		lock_release(&HashT->p_records[hash_code].lock);
 		goto done;
 	}
 	/*if a 2XX reply handle the two cases- an existing dialog and a new one*/

