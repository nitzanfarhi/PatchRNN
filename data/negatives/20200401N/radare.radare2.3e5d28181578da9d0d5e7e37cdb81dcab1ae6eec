commit 3e5d28181578da9d0d5e7e37cdb81dcab1ae6eec
Author: Kitsu <mail@kitsu.me>
Date:   Sun Mar 27 15:55:22 2016 +0300

    Fix #4436 - more help for o subcommands

diff --git a/libr/core/cmd_open.c b/libr/core/cmd_open.c
index 85fb65117..8d7aa90a6 100644
--- a/libr/core/cmd_open.c
+++ b/libr/core/cmd_open.c
@@ -326,11 +326,37 @@ static int cmd_open(void *data, const char *input) {
 			r_cons_get_size (NULL), r_config_get_i (core->config, "scr.color"));
 		break;
 	case '\0':
+		r_core_file_list (core, (int)(*input));
+		break;
 	case '*':
+		if ('?' == input[1]) {
+			const char *help_msg[] = {
+				"Usage:", "o* [> files.r2]", "",
+				"o*", "", "list opened files in r2 commands", NULL
+			};
+			r_core_cmd_help (core, help_msg);
+			break;
+		}
 	case 'j':
+		if ('?' == input[1]) {
+			const char *help_msg[] = {
+				"Usage:", "oj [~{}]", " # Use ~{} to indent the JSON",
+				"oj", "", "list opened files in JSON format", NULL
+			};
+			r_core_cmd_help (core, help_msg);
+			break;
+		}
 		r_core_file_list (core, (int)(*input));
 		break;
 	case 'a':
+		if ('?' == input[1]) {
+			const char *help_msg[] = {
+				"Usage:", "oa [addr]", " #",
+				"oa", " [addr]", "Open bin info from the given address",NULL
+			};
+			r_core_cmd_help (core, help_msg);
+			break;
+		}
 		addr = core->offset;
 		if (input[1]) {
 			addr = r_num_math (core->num, input+1);
@@ -446,24 +472,58 @@ static int cmd_open(void *data, const char *input) {
 	case 'o':
 		switch (input[1]) {
 		case 'd': // "ood" : reopen in debugger
-			r_core_file_reopen_debug (core, input + 2);
+			if ('?' == input[2]) {
+				const char *help_msg[] = {
+					"ood"," [args]","reopen in debugger mode (with args)",NULL
+				};
+				r_core_cmd_help (core, help_msg);
+			} else {
+				r_core_file_reopen_debug (core, input + 2);
+			}
 			break;
 		case 'b': // "oob" : reopen with bin info
-			r_core_file_reopen (core, input + 2, 0, 2);
+			if ('?' == input[2]) {
+				const char *help_msg[] = {
+					"oob", "", "reopen loading rbin info",NULL
+				};
+				r_core_cmd_help (core, help_msg);
+			} else {
+				r_core_file_reopen (core, input + 2, 0, 2);
+			}
 			break;
 		case 'n':
-			if (input[2]=='n') {
-				perms = (input[3]=='+')? R_IO_READ|R_IO_WRITE: 0;
+			if ('n' == input[2]) {
+				if ('?' == input[3]) {
+					const char *help_msg[] = {
+						"oonn", "", "reopen without loading rbin info, but with header flags",NULL
+					};
+					r_core_cmd_help (core, help_msg);
+					break;
+				}
+				perms = (input[3] == '+')? R_IO_READ|R_IO_WRITE: 0;
 				r_core_file_reopen (core, input + 4, perms, 0);
 				// TODO: Use API instead of !rabin2 -rk
 				r_core_cmdf (core, ".!rabin2 -rk '' '%s'", core->file->desc->name);
-			} else {
-				perms = (input[2]=='+')? R_IO_READ|R_IO_WRITE: 0;
-				r_core_file_reopen (core, input + 3, perms, 0);
+			} else if ('?' == input[2]) {
+				const char *help_msg[] = {
+					"oon", "", "reopen without loading rbin info",NULL
+				};
+				r_core_cmd_help (core, help_msg);
+				break;
 			}
+
+			perms = ('+' == input[2])? R_IO_READ|R_IO_WRITE: 0;
+			r_core_file_reopen (core, input + 3, perms, 0);
 			break;
 		case '+':
-			r_core_file_reopen (core, input + 2, R_IO_READ | R_IO_WRITE, 1);
+			if ('?' == input[2]) {
+				const char *help_msg[] = {
+					"oo+", "", "reopen in read-write",NULL
+				};
+				r_core_cmd_help (core, help_msg);
+			} else {
+				r_core_file_reopen (core, input + 2, R_IO_READ | R_IO_WRITE, 1);
+			}
 			break;
 		case 0: // "oo"
 			r_core_file_reopen (core, input + 2, 0, 1);
@@ -475,6 +535,13 @@ static int cmd_open(void *data, const char *input) {
 		}
 		break;
 	case 'c':
+		if ('?' == input[1]) {
+			const char *help_msg[] = {
+				"oc"," [file]","open core file, like relaunching r2",NULL
+			};
+			r_core_cmd_help (core, help_msg);
+			break;
+		}
 		if (r_sandbox_enable (0)) {
 			eprintf ("This command is disabled in sandbox mode\n");
 			return 0;

