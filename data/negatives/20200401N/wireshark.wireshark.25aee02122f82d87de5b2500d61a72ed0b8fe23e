commit 25aee02122f82d87de5b2500d61a72ed0b8fe23e
Author: Bill Meier <wmeier@newsguy.com>
Date:   Thu Nov 13 22:50:05 2008 +0000

    From SUZUKI Shinsuke: Fix some non-ascii characters: Bug #3057
    
    svn path=/trunk/; revision=26775

diff --git a/epan/dissectors/packet-gsm_a_bssmap.c b/epan/dissectors/packet-gsm_a_bssmap.c
index 928abbdd9b..ccbf13437c 100644
--- a/epan/dissectors/packet-gsm_a_bssmap.c
+++ b/epan/dissectors/packet-gsm_a_bssmap.c
@@ -3438,7 +3438,7 @@ be_app_data_inf(tvbuff_t *tvb, proto_tree *tree, guint32 offset, guint len _U_,
 }
 /*
  * 3.2.2.101	MSISDN 
- * Octets 3-12 contain the digits of an MSISDN, coded as in 3GPP TS 24.008, Calling party BCD number, octets 4 – 13.
+ * Octets 3-12 contain the digits of an MSISDN, coded as in 3GPP TS 24.008, Calling party BCD number, octets 4 - 13.
  */
  /*
   * 3.2.2.102	AoIP Transport Layer Address 
@@ -3479,19 +3479,19 @@ be_aoip_trans_lay_add(tvbuff_t *tvb, proto_tree *tree, guint32 offset, guint len
  * 3.2.2.103	Speech Codec List
  */
 /*
-FR_AMR is coded ‘0011’. 
+FR_AMR is coded '011' 
 S11, S13 and S15 are reserved and coded with zeroes.  
-HR_AMR is coded ‘0100’. 
-S6 - S7 and S11 – S15 are reserved and coded with zeroes. 
-OHR_AMR is coded ‘1011’. 
+HR_AMR is coded '100' 
+S6 - S7 and S11 - S15 are reserved and coded with zeroes. 
+OHR_AMR is coded '011'
 S11, S13 and S15 are reserved and coded with zeroes.  
 
-FR_AMR-WB is coded ‘1001’.  
-S0 is set to ‘1’. S1 - S7 are reserved and coded with zeroes.
-OFR_AMR-WB is coded ‘1100’.  
+FR_AMR-WB is coded '001'
+S0 is set to '1' S1 - S7 are reserved and coded with zeroes.
+OFR_AMR-WB is coded '100'
 S0, S2, S4 indicates the supported Codec Configurations. S1, S3, S5, S6, S7 are reserved and coded with zeroes.
-OHR_AMR-WB is coded ‘1101’.  
-S0 is set to ‘1’. S1 - S7 are reserved and coded with zeroes.
+OHR_AMR-WB is coded '101'
+S0 is set to '1' S1 - S7 are reserved and coded with zeroes.
 
 
 8	7	6	5	4	3	2	1
@@ -3556,17 +3556,17 @@ be_speech_codec_lst(tvbuff_t *tvb, proto_tree *tree, guint32 offset, guint len _
 		curr_offset++;
 		consumed++;
 		if((codec==3)||(codec==4)||(codec==0xb)){
-			/* FR_AMR is coded ‘0011’. 
-			 * HR_AMR is coded ‘0100’.
-			 * OHR_AMR is coded ‘1011’.
+			/* FR_AMR is coded '011' 
+			 * HR_AMR is coded '100'
+			 * OHR_AMR is coded '011'
 			 */
 			proto_tree_add_text(subtree, tvb, curr_offset, 2, "S0 - S15");
 			curr_offset+=2;
 			consumed+=2;
 		}else{
-			/* FR_AMR-WB is coded ‘1001’.  
-			 * OFR_AMR-WB is coded ‘1100’.  
-			 * OHR_AMR-WB is coded ‘1101’.
+			/* FR_AMR-WB is coded '001'  
+			 * OFR_AMR-WB is coded '100'  
+			 * OHR_AMR-WB is coded '101'
 			 */
 			proto_tree_add_text(subtree, tvb, curr_offset, 1, "S0 - S7");
 			curr_offset++;
diff --git a/epan/dissectors/packet-mp4ves.c b/epan/dissectors/packet-mp4ves.c
index 651748d178..835f1b7c61 100644
--- a/epan/dissectors/packet-mp4ves.c
+++ b/epan/dissectors/packet-mp4ves.c
@@ -252,7 +252,7 @@ static const value_string mp4ves_video_object_type_indication_vals[] = {
 	{ 0xd,	"Advanced Scalable Texture" },
 	{ 0xe,	"Simple FBA" },
 	{ 0xf,	"Reserved" },
-	/* Reserved 00001111 – 11111111 */
+	/* Reserved 00001111 - 11111111 */
 	{ 0,	NULL }
 };
 /* 6.2.2.1 User data */
@@ -267,7 +267,7 @@ dissect_mp4ves_user_data(tvbuff_t *tvb, packet_info *pinfo _U_, proto_tree *tree
 	proto_tree_add_bits_item(tree, hf_mp4ves_start_code, tvb, bit_offset, 8, FALSE);
 	bit_offset+=8;
 	start_bit_offset = bit_offset;
-	/* while( next_bits() != ‘0000 0000 0000 0000 0000 0001’ ) { */
+	/* while( next_bits() != '000 0000 0000 0000 0000 0001') { */
 	while ( tvb_get_bits32(tvb,bit_offset, 24, FALSE) != 1){
 		bit_offset+=8;
 		/* user_data 8 bits */
@@ -423,7 +423,7 @@ dissect_mp4ves_VideoObjectLayer(tvbuff_t *tvb, packet_info *pinfo _U_, proto_tre
 	/* aspect_ratio_info 4 uimsbf */
 	aspect_ratio_info = tvb_get_bits8(tvb,bit_offset, 1);
 	proto_tree_add_bits_item(tree, hf_mp4ves_aspect_ratio_info, tvb, bit_offset, 4, FALSE);
-	if (aspect_ratio_info == 0xf /*“extended_PAR”*/ ) {
+	if (aspect_ratio_info == 0xf /*"extended_PAR"*/ ) {
 		/* par_width 8 uimsbf */
 		bit_offset+=8;
 		/* par_height 8 uimsbf */
@@ -448,30 +448,30 @@ VisualObject() {
 		visual_object_priority
 	}
 	visual_object_type
-	if (visual_object_type == “video ID” || visual_object_type == “still textureID“) {
+	if (visual_object_type == "Video ID" || visual_object_type == "still textureID") {
 		video_signal_type()
 	}
 	next_start_code()
 	while ( next_bits()== user_data_start_code){
 		user_data()
 	}
-	if (visual_object_type == “video ID”) {
+	if (visual_object_type == "Video ID") {
 		video_object_start_code 
 		VideoObjectLayer()
 	}
-	else if (visual_object_type == “still texture ID”) {
+	else if (visual_object_type == "still texture ID") {
 		StillTextureObject()
 	}
-	else if (visual_object_type == “mesh ID”) {
+	else if (visual_object_type == "mesh ID") {
 		MeshObject()
 	}
-	else if (visual_object_type == “FBA ID”) {
+	else if (visual_object_type == "FBA ID") {
 		FBAObject()
 	}
-	else if (visual_object_type == “3D mesh ID”) {
+	else if (visual_object_type == "3D mesh ID") {
 		3D_Mesh_Object()
 	}
-	if (next_bits() != “0000 0000 0000 0000 0000 0001”)
+	if (next_bits() != "0000 0000 0000 0000 0000 0001")
 		next_start_code()
 }
 */
@@ -495,7 +495,7 @@ dissect_mp4ves_VisualObject(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree,
 	visual_object_type = tvb_get_bits8(tvb,bit_offset,4);
 	proto_tree_add_bits_item(tree, hf_mp4ves_visual_object_type, tvb, bit_offset, 4, FALSE);
 	bit_offset+=4;
-	if ((visual_object_type == 1/*“video ID”*/) || (visual_object_type == 2/*“still textureID“*/)) {
+	if ((visual_object_type == 1/*"Video ID"*/) || (visual_object_type == 2/*"still textureID"*/)) {
 		/* video_signal_type() */
 		bit_offset = dissect_mp4ves_visual_object_type(tvb, pinfo, tree, bit_offset);
 	}
@@ -511,7 +511,7 @@ dissect_mp4ves_VisualObject(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree,
 		bit_offset = dissect_mp4ves_user_data(tvb, pinfo, tree, bit_offset);
 		dword = tvb_get_bits32(tvb,bit_offset, 32, FALSE);
 	}
-	if (visual_object_type == 1/*“video ID”*/) {
+	if (visual_object_type == 1/*"Video ID"*/) {
 		/* 
 		 * video_object_start_code
 		 */ 

