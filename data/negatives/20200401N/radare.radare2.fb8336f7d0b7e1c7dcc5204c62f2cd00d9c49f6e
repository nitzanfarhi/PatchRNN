commit fb8336f7d0b7e1c7dcc5204c62f2cd00d9c49f6e
Author: pancake <pancake@nopcode.org>
Date:   Thu Oct 9 01:21:49 2014 +0200

    Add dbg.{forks|clone|execs} ptrace options (linux-only atm)

diff --git a/libr/core/config.c b/libr/core/config.c
index 0535a4213..534079de6 100644
--- a/libr/core/config.c
+++ b/libr/core/config.c
@@ -346,6 +346,31 @@ static int cb_dbgbep(void *user, void *data) {
 	}
 	return R_TRUE;
 }
+
+static int cb_dbg_forks(void *user, void *data) {
+	RCore *core = (RCore*) user;
+	RConfigNode *node = (RConfigNode*) data;
+	core->dbg->trace_forks = node->i_value;
+	r_debug_attach (core->dbg, core->dbg->pid);
+	return R_TRUE;
+}
+
+static int cb_dbg_execs(void *user, void *data) {
+	RCore *core = (RCore*) user;
+	RConfigNode *node = (RConfigNode*) data;
+	core->dbg->trace_execs = node->i_value;
+	r_debug_attach (core->dbg, core->dbg->pid);
+	return R_TRUE;
+}
+
+static int cb_dbg_clone(void *user, void *data) {
+	RCore *core = (RCore*) user;
+	RConfigNode *node = (RConfigNode*) data;
+	core->dbg->trace_clone = node->i_value;
+	r_debug_attach (core->dbg, core->dbg->pid);
+	return R_TRUE;
+}
+
 static int cb_runprofile(void *user, void *data) {
 	RCore *r = (RCore*) user;
 	RConfigNode *node = (RConfigNode*) data;
@@ -843,6 +868,9 @@ R_API int r_core_config_init(RCore *core) {
 	SETI("stack.size", 64,  "Define size of anotated hexdump in visual debug");
 	SETI("stack.delta", 0,  "Define a delta for the stack dump");
 
+	SETCB("dbg.forks", "true", &cb_dbg_forks, "Stop execution if fork() is done");
+	SETCB("dbg.clone", "false", &cb_dbg_clone, "Stop execution if new thread is created");
+	SETCB("dbg.execs", "false", &cb_dbg_execs, "Stop execution if new thread is created");
 	SETCB("dbg.profile", "", &cb_runprofile, "Path to RRunProfile file");
 	/* debug */
 	SETCB("dbg.status", "false", &cb_dbgstatus, "Set cmd.prompt to '.dr*' or '.dr*;drd;sr pc;pi 1;s-'");
diff --git a/libr/debug/debug.c b/libr/debug/debug.c
index f262ca0bb..e0ebe2281 100644
--- a/libr/debug/debug.c
+++ b/libr/debug/debug.c
@@ -59,6 +59,9 @@ R_API RDebug *r_debug_new(int hard) {
 		// R_SYS_ARCH
 		dbg->arch = r_sys_arch_id (R_SYS_ARCH); // 0 is native by default
 		dbg->bits = R_SYS_BITS;
+		dbg->trace_forks = 1;
+		dbg->trace_clone = 0;
+		dbg->trace_execs = 0;
 		dbg->anal = NULL;
 		dbg->pid = -1;
 		dbg->bpsize = 1;
@@ -114,7 +117,7 @@ R_API int r_debug_attach(RDebug *dbg, int pid) {
 			r_debug_select (dbg, pid, ret); //dbg->pid, dbg->tid);
 		}// else if (pid != -1)
 		//	eprintf ("Cannot attach to this pid %d\n", pid);
-	} else eprintf ("dbg->attach = NULL\n");
+	}// else eprintf ("dbg->attach = NULL\n");
 	return ret;
 }
 
diff --git a/libr/debug/p/debug_native.c b/libr/debug/p/debug_native.c
index 232388acc..11ff44404 100644
--- a/libr/debug/p/debug_native.c
+++ b/libr/debug/p/debug_native.c
@@ -361,6 +361,27 @@ static int r_debug_native_step(RDebug *dbg) {
 // return thread id
 static int r_debug_native_attach(RDebug *dbg, int pid) {
 	int ret = -1;
+#if __linux__
+	int traceflags = 0;
+	if (dbg->trace_forks) {
+		traceflags |= PTRACE_O_TRACEFORK;
+		traceflags |= PTRACE_O_TRACEVFORK;
+		traceflags |= PTRACE_O_TRACEVFORKDONE;
+	}
+	if (dbg->trace_clone) {
+		// threads
+		traceflags |= PTRACE_O_TRACECLONE;
+	}
+	//traceflags |= PTRACE_O_TRACESYSGOOD; mark 0x80| on signal event, x86-only
+	if (dbg->trace_execs) {
+		traceflags |= PTRACE_O_TRACEEXEC;
+	}
+	traceflags |= PTRACE_O_TRACEEXIT;
+	if (ptrace (PTRACE_SETOPTIONS, pid, 0, traceflags) == -1) {
+		perror ("ptrace_setoptions");
+		return -1;
+	}
+#endif
 	if (pid == dbg->pid)
 		return pid;
 #if __WINDOWS__
@@ -657,13 +678,18 @@ static RList *r_debug_native_pids(int pid) {
 				continue;
 			}
 			cmdline[sizeof (cmdline)-1] = '\0';
-			ptr = strstr (cmdline, "PPid: ");
+			ptr = strstr (cmdline, "PPid:");
 			if (ptr) {
 				int ret, ppid = atoi (ptr+6);
 				close (fd);
+				if (i==pid) {
+					//eprintf ("PPid: %d\n", ppid);
+					r_list_append (list, r_debug_pid_new (
+						"(ppid)", ppid, 's', 0));
+				}
 				if (ppid != pid)
 					continue;
-				snprintf (cmdline, sizeof (cmdline), "/proc/%d/cmdline", ppid);
+				snprintf (cmdline, sizeof (cmdline)-1, "/proc/%d/cmdline", ppid);
 				fd = open (cmdline, O_RDONLY);
 				if (fd == -1)
 					continue;
diff --git a/libr/include/r_debug.h b/libr/include/r_debug.h
index cf33a6414..abaec1b3c 100644
--- a/libr/include/r_debug.h
+++ b/libr/include/r_debug.h
@@ -158,6 +158,9 @@ typedef struct r_debug_t {
 #if __WINDOWS__
 	HANDLE process_handle;
 #endif
+	int trace_forks;
+	int trace_execs;
+	int trace_clone;
 	/* TODO
 	- list of processes and their threads
 	- list of mapped memory (from /proc/XX/maps)

