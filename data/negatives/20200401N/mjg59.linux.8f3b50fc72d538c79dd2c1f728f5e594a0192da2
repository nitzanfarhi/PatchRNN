commit 8f3b50fc72d538c79dd2c1f728f5e594a0192da2
Author: Eric Sesterhenn <snakebyte@gmx.de>
Date:   Sun Mar 26 01:37:37 2006 -0800

    [PATCH] Fix compilation for sound/oss/vwsnd.c
    
    Fix compilation for sound/oss/vwsnd.o, by moving li_destroy() above
    li_create()
    
    sound/oss/vwsnd.c:275: warning: conflicting types for âli_destroyâ
    sound/oss/vwsnd.c:275: error: static declaration of âli_destroyâ follows non-static declaration
    sound/oss/vwsnd.c:264: error: previous implicit declaration of âli_destroyâ was here
    
    Signed-off-by: Eric Sesterhenn <snakebyte@gmx.de>
    Signed-off-by: Andrew Morton <akpm@osdl.org>
    Signed-off-by: Linus Torvalds <torvalds@osdl.org>

diff --git a/sound/oss/vwsnd.c b/sound/oss/vwsnd.c
index b372e88e857f..5f140c7586b3 100644
--- a/sound/oss/vwsnd.c
+++ b/sound/oss/vwsnd.c
@@ -247,27 +247,6 @@ typedef struct lithium {
 	spinlock_t	lock;		/* protects codec and UST/MSC access */
 } lithium_t;
 
-/*
- * li_create initializes the lithium_t structure and sets up vm mappings
- * to access the registers.
- * Returns 0 on success, -errno on failure.
- */
-
-static int __init li_create(lithium_t *lith, unsigned long baseaddr)
-{
-	static void li_destroy(lithium_t *);
-
-	spin_lock_init(&lith->lock);
-	lith->page0 = ioremap_nocache(baseaddr + LI_PAGE0_OFFSET, PAGE_SIZE);
-	lith->page1 = ioremap_nocache(baseaddr + LI_PAGE1_OFFSET, PAGE_SIZE);
-	lith->page2 = ioremap_nocache(baseaddr + LI_PAGE2_OFFSET, PAGE_SIZE);
-	if (!lith->page0 || !lith->page1 || !lith->page2) {
-		li_destroy(lith);
-		return -ENOMEM;
-	}
-	return 0;
-}
-
 /*
  * li_destroy destroys the lithium_t structure and vm mappings.
  */
@@ -288,6 +267,25 @@ static void li_destroy(lithium_t *lith)
 	}
 }
 
+/*
+ * li_create initializes the lithium_t structure and sets up vm mappings
+ * to access the registers.
+ * Returns 0 on success, -errno on failure.
+ */
+
+static int __init li_create(lithium_t *lith, unsigned long baseaddr)
+{
+	spin_lock_init(&lith->lock);
+	lith->page0 = ioremap_nocache(baseaddr + LI_PAGE0_OFFSET, PAGE_SIZE);
+	lith->page1 = ioremap_nocache(baseaddr + LI_PAGE1_OFFSET, PAGE_SIZE);
+	lith->page2 = ioremap_nocache(baseaddr + LI_PAGE2_OFFSET, PAGE_SIZE);
+	if (!lith->page0 || !lith->page1 || !lith->page2) {
+		li_destroy(lith);
+		return -ENOMEM;
+	}
+	return 0;
+}
+
 /*
  * basic register accessors - read/write long/byte
  */

