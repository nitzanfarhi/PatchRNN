commit ede90e4eb46e7301b7e01a45c595a28efe63d506
Author: Adam Midvidy <amidvidy@gmail.com>
Date:   Thu Oct 29 14:45:00 2015 -0400

    SERVER-21206 make ShardRegistry::_lookup an unordered_map

diff --git a/src/mongo/s/client/shard_registry.cpp b/src/mongo/s/client/shard_registry.cpp
index f3a7b55662..e8fe83c975 100644
--- a/src/mongo/s/client/shard_registry.cpp
+++ b/src/mongo/s/client/shard_registry.cpp
@@ -276,15 +276,22 @@ void ShardRegistry::getAllShardIds(vector<ShardId>* all) const {
 }
 
 void ShardRegistry::toBSON(BSONObjBuilder* result) {
-    BSONObjBuilder b(_lookup.size() + 50);
+    // Need to copy, then sort by shardId.
+    std::vector<std::pair<ShardId, std::string>> shards;
+    {
+        stdx::lock_guard<stdx::mutex> lk(_mutex);
+        shards.reserve(_lookup.size());
+        for (auto&& shard : _lookup) {
+            shards.emplace_back(shard.first, shard.second->getConnString().toString());
+        }
+    }
 
-    stdx::lock_guard<stdx::mutex> lk(_mutex);
+    std::sort(std::begin(shards), std::end(shards));
 
-    for (ShardMap::const_iterator i = _lookup.begin(); i != _lookup.end(); ++i) {
-        b.append(i->first, i->second->getConnString().toString());
+    BSONObjBuilder mapBob(result->subobjStart("map"));
+    for (auto&& shard : shards) {
+        mapBob.append(shard.first, shard.second);
     }
-
-    result->append("map", b.obj());
 }
 
 void ShardRegistry::_addConfigShard_inlock() {
diff --git a/src/mongo/s/client/shard_registry.h b/src/mongo/s/client/shard_registry.h
index fa54265ade..1422f4709f 100644
--- a/src/mongo/s/client/shard_registry.h
+++ b/src/mongo/s/client/shard_registry.h
@@ -31,6 +31,7 @@
 #include <boost/optional.hpp>
 #include <memory>
 #include <string>
+#include <unordered_map>
 #include <vector>
 
 #include "mongo/base/disallow_copying.h"
@@ -275,7 +276,7 @@ public:
                                      const Status& remoteCommandStatus);
 
 private:
-    typedef std::map<ShardId, std::shared_ptr<Shard>> ShardMap;
+    using ShardMap = std::unordered_map<ShardId, std::shared_ptr<Shard>>;
 
     struct CommandResponse {
         BSONObj response;

