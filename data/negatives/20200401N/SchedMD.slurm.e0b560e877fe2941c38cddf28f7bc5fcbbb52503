commit e0b560e877fe2941c38cddf28f7bc5fcbbb52503
Author: Morris Jette <jette@schedmd.com>
Date:   Wed Feb 15 13:52:51 2017 -0700

    Fix some recently introduced Coverity errors

diff --git a/src/common/slurm_protocol_pack.c b/src/common/slurm_protocol_pack.c
index 2f531fb9c3..fe0dec295a 100644
--- a/src/common/slurm_protocol_pack.c
+++ b/src/common/slurm_protocol_pack.c
@@ -2392,7 +2392,7 @@ _unpack_network_callerid_msg(network_callerid_msg_t **msg_ptr, Buf buffer,
 			     uint16_t protocol_version)
 {
 	uint32_t uint32_tmp;
-	char *charptr_tmp;
+	char *charptr_tmp = NULL;
 	network_callerid_msg_t *msg;
 	xassert(msg_ptr != NULL);
 
@@ -2400,11 +2400,17 @@ _unpack_network_callerid_msg(network_callerid_msg_t **msg_ptr, Buf buffer,
 	*msg_ptr = msg;
 	if (protocol_version >= SLURM_MIN_PROTOCOL_VERSION) {
 		safe_unpackmem_xmalloc(&charptr_tmp, &uint32_tmp, buffer);
-		if (uint32_tmp > NO_VAL32)
+		if (uint32_tmp > sizeof(msg->ip_src)) {
+			xfree(charptr_tmp);
 			goto unpack_error;
+		}
 		memcpy(msg->ip_src, charptr_tmp, uint32_tmp);
 		xfree(charptr_tmp);
 		safe_unpackmem_xmalloc(&charptr_tmp, &uint32_tmp, buffer);
+		if (uint32_tmp > sizeof(msg->ip_dst)) {
+			xfree(charptr_tmp);
+			goto unpack_error;
+		}
 		memcpy(msg->ip_dst, charptr_tmp, uint32_tmp);
 		xfree(charptr_tmp);
 		safe_unpack32(&msg->port_src,		buffer);
diff --git a/src/common/slurmdbd_defs.c b/src/common/slurmdbd_defs.c
index 11a4a62fec..9141d1dc8a 100644
--- a/src/common/slurmdbd_defs.c
+++ b/src/common/slurmdbd_defs.c
@@ -264,14 +264,14 @@ extern int slurm_send_recv_slurmdbd_msg(uint16_t rpc_version,
 	halt_agent = 1;
 	slurm_mutex_lock(&slurmdbd_lock);
 	halt_agent = 0;
-	if (!slurmdbd_conn || slurmdbd_conn->fd < 0) {
+	if (!slurmdbd_conn || (slurmdbd_conn->fd < 0)) {
 		/* Either slurm_open_slurmdbd_conn() was not executed or
 		 * the connection to Slurm DBD has been closed */
 		if (req->msg_type == DBD_GET_CONFIG)
 			_open_slurmdbd_conn(0);
 		else
 			_open_slurmdbd_conn(1);
-		if (slurmdbd_conn->fd < 0) {
+		if (!slurmdbd_conn || (slurmdbd_conn->fd < 0)) {
 			rc = SLURM_ERROR;
 			goto end_it;
 		}

