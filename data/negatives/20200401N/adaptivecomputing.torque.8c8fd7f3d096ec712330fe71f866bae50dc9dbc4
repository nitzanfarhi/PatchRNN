commit 8c8fd7f3d096ec712330fe71f866bae50dc9dbc4
Author: bdaw <bdaw@adaptivecomputing.com>
Date:   Fri Dec 7 16:47:52 2012 -0700

    Fixed a handful of coverity bugs.

diff --git a/src/resmom/mom_comm.c b/src/resmom/mom_comm.c
index 7baea715a..51e298e7a 100644
--- a/src/resmom/mom_comm.c
+++ b/src/resmom/mom_comm.c
@@ -1880,7 +1880,8 @@ void send_im_error(
       else
         rc = DIS_tcp_wflush(local_chan);
 
-      close(socket);
+      if(socket >= 0)
+        close(socket);
 
       if (local_chan != NULL)
         {
@@ -1963,7 +1964,8 @@ int reply_to_join_job_as_sister(
     else
       ret = DIS_tcp_wflush(local_chan);
 
-    close(socket);
+    if(socket >= 0)
+      close(socket);
 
     if (local_chan != NULL)
       {
@@ -2875,7 +2877,9 @@ int im_spawn_task(
         else
           ret = DIS_tcp_wflush(local_chan);
 
-        close(local_socket);
+        if(socket >= 0)
+          close(local_socket);
+
         if (local_chan != NULL)
           DIS_tcp_cleanup(local_chan);
         
@@ -3056,7 +3060,9 @@ int im_signal_task(
   else
     DIS_tcp_wflush(local_chan);
 
-  close(socket);
+  if(socket >= 0)
+    close(socket);
+
   if (local_chan != NULL)
     DIS_tcp_cleanup(local_chan);
 
@@ -8076,7 +8082,11 @@ void fork_demux(
   int               pipe_failed = FALSE;
   char              buf[MAXLINE];
 
-  maxfd = sysconf(_SC_OPEN_MAX);
+  if((maxfd = sysconf(_SC_OPEN_MAX)) < 0)
+    {
+	fprintf(stderr, "Unexpected return from sysconf.");
+   	return;
+	}
 
   routem = (struct routefd *)calloc(sizeof(struct routefd), maxfd);
   if (routem == NULL)
@@ -8108,7 +8118,7 @@ void fork_demux(
   close(pjob->ji_im_stdout);
 
   im_mom_stderr = dup(pjob->ji_im_stderr);
-  if (im_mom_stdout == -1)
+  if (im_mom_stderr == -1)
     {
     fprintf(stderr, "could not dup stdout in fork_demux");
     free(routem);
diff --git a/src/resmom/mom_server.c b/src/resmom/mom_server.c
index 94084e92b..7320a3abc 100644
--- a/src/resmom/mom_server.c
+++ b/src/resmom/mom_server.c
@@ -591,7 +591,8 @@ void mom_server_stream_error(
 
   log_record(PBSEVENT_SYSTEM, 0, id, log_buffer);
 
-  close(stream);
+  if(stream >= 0)
+    close(stream);
 
   return;
   }  /* END mom_server_stream_error() */
@@ -3071,7 +3072,7 @@ int mom_open_socket_to_jobs_server(
       }
    
     /* Associate a message handler with the connection */
-    if (message_handler != NULL)
+    if ((message_handler != NULL)&&(sock >= 0))
       {
       add_conn(
         sock,
diff --git a/src/resmom/pbs_demux.c b/src/resmom/pbs_demux.c
index 2a5df7121..61af02a13 100644
--- a/src/resmom/pbs_demux.c
+++ b/src/resmom/pbs_demux.c
@@ -253,7 +253,12 @@ int main(
   #endif
   */
 
-  maxfd = sysconf(_SC_OPEN_MAX);
+  if((maxfd = sysconf(_SC_OPEN_MAX)) < 0)
+    {
+    perror("unexpected return from sysconf.");
+
+    exit(5);
+    }
 
   routem = (struct routem *)calloc(maxfd, sizeof(struct routem));
 
diff --git a/src/resmom/prolog.c b/src/resmom/prolog.c
index 44f112f83..e9d69f86a 100644
--- a/src/resmom/prolog.c
+++ b/src/resmom/prolog.c
@@ -839,7 +839,7 @@ int run_pelog(
           fds2 = open_std_file(pjob, StdErr, O_WRONLY | O_APPEND,
                                pjob->ji_qs.ji_un.ji_momt.ji_exgid);
 
-          fds1 = dup(fds2);
+          fds1 = (fds2 < 0)?-1:dup(fds2);
 
           break;
 
@@ -848,7 +848,7 @@ int run_pelog(
           fds1 = open_std_file(pjob, StdOut, O_WRONLY | O_APPEND,
                                pjob->ji_qs.ji_un.ji_momt.ji_exgid);
 
-          fds2 = dup(fds1);
+          fds2 = (fds1 < 0)?-1:dup(fds1);
 
           break;
 
@@ -863,6 +863,9 @@ int run_pelog(
         }
       }
 
+    if((fds1 < 0)||(fds2 < 0))
+      return -1;
+
     if (pe_io_type != PE_IO_TYPE_ASIS)
       {
       /* If PE_IO_TYPE_ASIS, leave as is, already open to job */
@@ -871,18 +874,20 @@ int run_pelog(
         {
         close(1);
 
-        if (dup(fds1) == -1) {}
-
-        close(fds1);
+        if (dup(fds1) >= 0)
+          {
+          close(fds1);
+          }
         }
 
       if (fds2 != 2)
         {
         close(2);
 
-        if (dup(fds2) == -1) {}
-
-        close(fds2);
+        if (dup(fds2) >= 0)
+          {
+          close(fds2);
+          }
         }
       }
 

