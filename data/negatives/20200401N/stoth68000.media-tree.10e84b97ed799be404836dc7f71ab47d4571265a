commit 10e84b97ed799be404836dc7f71ab47d4571265a
Author: Dave Kleikamp <dave.kleikamp@oracle.com>
Date:   Wed Jul 31 13:53:35 2013 -0700

    mm: sched: numa: fix NUMA balancing when !SCHED_DEBUG
    
    Commit 3105b86a9fee ("mm: sched: numa: Control enabling and disabling of
    NUMA balancing if !SCHED_DEBUG") defined numabalancing_enabled to
    control the enabling and disabling of automatic NUMA balancing, but it
    is never used.
    
    I believe the intention was to use this in place of sched_feat_numa(NUMA).
    
    Currently, if SCHED_DEBUG is not defined, sched_feat_numa(NUMA) will
    never be changed from the initial "false".
    
    Signed-off-by: Dave Kleikamp <dave.kleikamp@oracle.com>
    Acked-by: Mel Gorman <mgorman@suse.de>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

diff --git a/kernel/sched/fair.c b/kernel/sched/fair.c
index bb456f44b7b1..9565645e3202 100644
--- a/kernel/sched/fair.c
+++ b/kernel/sched/fair.c
@@ -851,7 +851,7 @@ void task_numa_fault(int node, int pages, bool migrated)
 {
 	struct task_struct *p = current;
 
-	if (!sched_feat_numa(NUMA))
+	if (!numabalancing_enabled)
 		return;
 
 	/* FIXME: Allocate task-specific structure for placement policy here */
@@ -5786,7 +5786,7 @@ static void task_tick_fair(struct rq *rq, struct task_struct *curr, int queued)
 		entity_tick(cfs_rq, se, queued);
 	}
 
-	if (sched_feat_numa(NUMA))
+	if (numabalancing_enabled)
 		task_tick_numa(rq, curr);
 
 	update_rq_runnable_avg(rq, 1);

