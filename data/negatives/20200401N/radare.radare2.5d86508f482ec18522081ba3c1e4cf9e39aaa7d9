commit 5d86508f482ec18522081ba3c1e4cf9e39aaa7d9
Author: radare <pancake@nopcode.org>
Date:   Mon Apr 9 23:51:52 2018 +0200

    Some RBuffer.io fixes for ELF and enable PE (#9846)

diff --git a/libr/bin/format/elf/elf.c b/libr/bin/format/elf/elf.c
index a99329a51..5e50bb39b 100644
--- a/libr/bin/format/elf/elf.c
+++ b/libr/bin/format/elf/elf.c
@@ -30,8 +30,10 @@
 #define READ32(x, i) r_read_ble32(x + i, bin->endian); i += 4;
 #define READ64(x, i) r_read_ble64(x + i, bin->endian); i += 8;
 
-#define BREAD32(x, i) r_read_ble32(r_buf_get_at (x, i, NULL), bin->endian); i += 8;
-#define BREAD64(x, i) r_read_ble64(r_buf_get_at (x, i, NULL), bin->endian); i += 8;
+#define BREAD8(x, i) r_read_ble8(r_buf_get_at (x, (i), NULL)); i += 1;
+#define BREAD16(x, i) r_read_ble16(r_buf_get_at (x, (i), NULL), bin->endian); i += 2;
+#define BREAD32(x, i) r_read_ble32(r_buf_get_at (x, (i), NULL), bin->endian); i += 8;
+#define BREAD64(x, i) r_read_ble64(r_buf_get_at (x, (i), NULL), bin->endian); i += 8;
 
 #define GROWTH_FACTOR (1.5)
 
@@ -48,7 +50,7 @@ enum {
 typedef struct reginfo {
 	ut32 regsize;
 	ut32 regdelta;
-}reginfo_t;
+} reginfo_t;
 
 static reginfo_t reginf[ARCH_LEN] = {
 					{160, 0x5c},
@@ -981,7 +983,7 @@ static Sdb *store_versioninfo_gnu_verneed(ELFOBJ *bin, Elf_(Shdr) *shdr, int sz)
 		ut32 vn_cnt = entry->vn_cnt;
 		for (j = 0, isum = i + entry->vn_aux; j < vn_cnt && vstart + sizeof (Elf_(Vernaux)) <= end; ++j) {
 			int k;
-			Elf_(Vernaux) * aux = NULL;
+			Elf_(Vernaux) *aux = NULL;
 			Elf_(Vernaux) vaux = {0};
 			aux = (Elf_(Vernaux)*)&vaux;
 			k = 0;
@@ -2338,22 +2340,23 @@ static size_t get_relocs_num(ELFOBJ *bin) {
 }
 
 static int read_reloc(ELFOBJ *bin, RBinElfReloc *r, int is_rela, ut64 offset) {
-	ut8 *buf = bin->b->buf;
-	int j = 0;
-	if (offset + sizeof (Elf_ (Rela)) >
-		    bin->size || offset + sizeof (Elf_(Rela)) < offset) {
+	if (offset + sizeof (Elf_ (Rela)) > bin->size || offset + sizeof (Elf_(Rela)) < offset) {
 		return -1;
 	}
+	ut8 buf[sizeof (Elf_(Rela))] = {0};
+	int res = r_buf_read_at (bin->b, offset, buf, sizeof (Elf_(Rela)));
+	// TODO make a single read and work with the buffer
+	size_t i = 0;
 	if (is_rela == DT_RELA) {
 		Elf_(Rela) rela;
 #if R_BIN_ELF64
-		rela.r_offset = READ64 (buf + offset, j)
-		rela.r_info = READ64 (buf + offset, j)
-		rela.r_addend = READ64 (buf + offset, j)
+		rela.r_offset = READ64 (buf, i)
+		rela.r_info = READ64 (buf, i)
+		rela.r_addend = READ64 (buf, i)
 #else
-		rela.r_offset = READ32 (buf + offset, j)
-		rela.r_info = READ32 (buf + offset, j)
-		rela.r_addend = READ32 (buf + offset, j)
+		rela.r_offset = READ32 (buf, i)
+		rela.r_info = READ32 (buf, i)
+		rela.r_addend = READ32 (buf, i)
 #endif
 		r->is_rela = is_rela;
 		r->offset = rela.r_offset;
@@ -2365,11 +2368,11 @@ static int read_reloc(ELFOBJ *bin, RBinElfReloc *r, int is_rela, ut64 offset) {
 	} else {
 		Elf_(Rel) rel;
 #if R_BIN_ELF64
-		rel.r_offset = READ64 (buf + offset, j)
-		rel.r_info = READ64 (buf + offset, j)
+		rel.r_offset = READ64 (buf, i)
+		rel.r_info = READ64 (buf, i)
 #else
-		rel.r_offset = READ32 (buf + offset, j)
-		rel.r_info = READ32 (buf + offset, j)
+		rel.r_offset = READ32 (buf, i)
+		rel.r_info = READ32 (buf, i)
 #endif
 		r->is_rela = is_rela;
 		r->offset = rel.r_offset;
@@ -2382,13 +2385,12 @@ static int read_reloc(ELFOBJ *bin, RBinElfReloc *r, int is_rela, ut64 offset) {
 
 RBinElfReloc* Elf_(r_bin_elf_get_relocs)(ELFOBJ *bin) {
 	int res, rel, rela, i, j;
-	size_t reloc_num = 0;
 	RBinElfReloc *ret = NULL;
 
 	if (!bin || !bin->g_sections) {
 		return NULL;
 	}
-	reloc_num = get_relocs_num (bin);
+	size_t reloc_num = get_relocs_num (bin);
 	if (!reloc_num)	{
 		return NULL;
 	}
@@ -2760,8 +2762,7 @@ static RBinElfSymbol* get_symbols_from_phdr(ELFOBJ *bin, int type) {
 				toffset = 0;
 			}
 			tsize = 16;
-		} else if (type == R_BIN_ELF_SYMBOLS &&
-		           sym[i].st_shndx != STN_UNDEF) {
+		} else if (type == R_BIN_ELF_SYMBOLS && sym[i].st_shndx != STN_UNDEF) {
 			tsize = sym[i].st_size;
 			toffset = (ut64) sym[i].st_value;
 		} else {
@@ -3347,8 +3348,8 @@ static bool get_nt_file_maps (ELFOBJ *bin, RList *core_maps) {
 				n_maps = BREAD64 (bin->b, i);
 				page_size = BREAD64 (bin->b, i);
 			} else {
-				n_maps = READ32 (bin->b->buf, i);
-				page_size = READ32 (bin->b->buf, i);
+				n_maps = BREAD32 (bin->b, i);
+				page_size = BREAD32 (bin->b, i);
 			}
 			ut64 jump = ((size_of * 3) * n_maps) + i;
 			int len_str = 0;
diff --git a/libr/bin/format/mach0/mach0.c b/libr/bin/format/mach0/mach0.c
index 4676f65ae..bad0d0470 100644
--- a/libr/bin/format/mach0/mach0.c
+++ b/libr/bin/format/mach0/mach0.c
@@ -623,8 +623,9 @@ static int parse_thread(struct MACH0_(obj_t)* bin, struct load_command *lc, ut64
 		return false;
 
 	len = r_buf_read_at (bin->b, off, thc, 8);
-	if (len < 1)
+	if (len < 1) {
 		goto wrong_read;
+	}
 	bin->thread.cmd = r_read_ble32 (&thc[0], bin->big_endian);
 	bin->thread.cmdsize = r_read_ble32 (&thc[4], bin->big_endian);
 	flavor = r_read_ble32 (bin->b->buf + off + sizeof (struct thread_command), bin->big_endian);
diff --git a/libr/bin/p/bin_pe.c b/libr/bin/p/bin_pe.c
index b3109c219..b9523ee7a 100644
--- a/libr/bin/p/bin_pe.c
+++ b/libr/bin/p/bin_pe.c
@@ -1,4 +1,4 @@
-/* radare - LGPL - Copyright 2009-2017 - nibble, pancake, alvarofe */
+/* radare - LGPL - Copyright 2009-2018 - nibble, pancake, alvarofe */
 
 #include <r_types.h>
 #include <r_util.h>
@@ -16,7 +16,7 @@ static Sdb* get_sdb (RBinFile *bf) {
 	return bin? bin->kv: NULL;
 }
 
-static void * load_bytes(RBinFile *bf, const ut8 *buf, ut64 sz, ut64 loadaddr, Sdb *sdb){
+static void * load_bytes(RBinFile *bf, const ut8 *buf, ut64 sz, ut64 loadaddr, Sdb *sdb) {
 	struct PE_(r_bin_pe_obj_t) *res = NULL;
 	RBuffer *tbuf = NULL;
 	if (!buf || !sz || sz == UT64_MAX) {
@@ -32,6 +32,18 @@ static void * load_bytes(RBinFile *bf, const ut8 *buf, ut64 sz, ut64 loadaddr, S
 	return res;
 }
 
+static void * load_buffer(RBinFile *bf, RBuffer *buf, ut64 loadaddr, Sdb *sdb) {
+	struct PE_(r_bin_pe_obj_t) *res;
+	if (!buf) {
+		return NULL;
+	}
+	res = PE_(r_bin_pe_new_buf) (buf, bf->rbin->verbose);
+	if (res) {
+		sdb_ns_set (sdb, "info", res->kv);
+	}
+	return res;
+}
+
 static bool load(RBinFile *bf) {
 	void *res;
 	const ut8 *bytes;
@@ -801,6 +813,7 @@ RBinPlugin r_bin_plugin_pe = {
 	.license = "LGPL3",
 	.get_sdb = &get_sdb,
 	.load = &load,
+	.load_buffer = &load_buffer,
 	.load_bytes = &load_bytes,
 	.destroy = &destroy,
 	.check_bytes = &check_bytes,

