commit b4411457d5c9062f07f0762f1ddb513d90dd1379
Author: Eric Dumazet <edumazet@google.com>
Date:   Thu May 12 21:41:39 2016 -0700

    sunrpc: set SOCK_FASYNC
    
    sunrpc is using SOCKWQ_ASYNC_NOSPACE without setting SOCK_FASYNC,
    so the recent optimizations done in sk_set_bit() and sk_clear_bit()
    broke it.
    
    There is still the risk that a subsequent sock_fasync() call
    would clear SOCK_FASYNC, but sunrpc does not use this yet.
    
    Fixes: 9317bb69824e ("net: SOCKWQ_ASYNC_NOSPACE optimizations")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Reported-by: Jiri Pirko <jiri@resnulli.us>
    Reported-by: Huang, Ying <ying.huang@intel.com>
    Tested-by: Jiri Pirko <jiri@resnulli.us>
    Tested-by: Huang, Ying <ying.huang@intel.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

diff --git a/net/sunrpc/xprtsock.c b/net/sunrpc/xprtsock.c
index a6c68dc086af..b90c5397b5e1 100644
--- a/net/sunrpc/xprtsock.c
+++ b/net/sunrpc/xprtsock.c
@@ -1950,6 +1950,7 @@ static int xs_local_finish_connecting(struct rpc_xprt *xprt,
 		sk->sk_user_data = xprt;
 		sk->sk_data_ready = xs_data_ready;
 		sk->sk_write_space = xs_udp_write_space;
+		sock_set_flag(sk, SOCK_FASYNC);
 		sk->sk_error_report = xs_error_report;
 		sk->sk_allocation = GFP_NOIO;
 
@@ -2136,6 +2137,7 @@ static void xs_udp_finish_connecting(struct rpc_xprt *xprt, struct socket *sock)
 		sk->sk_user_data = xprt;
 		sk->sk_data_ready = xs_data_ready;
 		sk->sk_write_space = xs_udp_write_space;
+		sock_set_flag(sk, SOCK_FASYNC);
 		sk->sk_allocation = GFP_NOIO;
 
 		xprt_set_connected(xprt);
@@ -2237,6 +2239,7 @@ static int xs_tcp_finish_connecting(struct rpc_xprt *xprt, struct socket *sock)
 		sk->sk_data_ready = xs_tcp_data_ready;
 		sk->sk_state_change = xs_tcp_state_change;
 		sk->sk_write_space = xs_tcp_write_space;
+		sock_set_flag(sk, SOCK_FASYNC);
 		sk->sk_error_report = xs_error_report;
 		sk->sk_allocation = GFP_NOIO;
 

