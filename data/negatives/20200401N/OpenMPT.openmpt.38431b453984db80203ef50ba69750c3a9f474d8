commit 38431b453984db80203ef50ba69750c3a9f474d8
Author: Johannes Schultz <saga-games@users.sourceforge.net>
Date:   Mon Mar 8 14:26:04 2010 +0000

    [Fix] Sample Undo: If no custom value was set, the default value was set ridiculously high (tx Paul Legovitch)
    [Fix] Sample Undo: Fixed another possible problem when undoing actions with very little memory left.
    
    git-svn-id: https://source.openmpt.org/svn/openmpt/trunk/OpenMPT@519 56274372-70c3-4bfc-bfc3-4c3a0b034d27

diff --git a/mptrack/MainFrm.cpp b/mptrack/MainFrm.cpp
index f16a0e34c..0243c28da 100644
--- a/mptrack/MainFrm.cpp
+++ b/mptrack/MainFrm.cpp
@@ -203,7 +203,7 @@ DWORD CMainFrame::m_dwPatternSetup = PATTERN_PLAYNEWNOTE | PATTERN_EFFECTHILIGHT
 								   | PATTERN_SHOWPREVIOUS | PATTERN_CONTSCROLL | PATTERN_SYNCMUTE | PATTERN_AUTODELAY | PATTERN_NOTEFADE;
 DWORD CMainFrame::m_nRowSpacing = 16;
 DWORD CMainFrame::m_nRowSpacing2 = 4;
-UINT CMainFrame::m_nSampleUndoMaxBuffer = 100 << 20;
+UINT CMainFrame::m_nSampleUndoMaxBuffer = 0;	// Real sample buffer undo size will be set later.
 
 // GDI
 HICON CMainFrame::m_hIcon = NULL;
@@ -446,7 +446,7 @@ void CMainFrame::LoadIniSettings()
 	CSoundFile::s_DefaultPlugVolumeHandling = static_cast<uint8>(GetPrivateProfileInt("Misc", "DefaultPlugVolumeHandling", PLUGIN_VOLUMEHANDLING_IGNORE, iniFile));
 	if(CSoundFile::s_DefaultPlugVolumeHandling > 2) CSoundFile::s_DefaultPlugVolumeHandling = PLUGIN_VOLUMEHANDLING_IGNORE;
 
-	m_nSampleUndoMaxBuffer = GetPrivateProfileLong("Sample Editor" , "UndoBufferSize", m_nSampleUndoMaxBuffer, iniFile);
+	m_nSampleUndoMaxBuffer = GetPrivateProfileLong("Sample Editor" , "UndoBufferSize", m_nSampleUndoMaxBuffer >> 20, iniFile);
 	m_nSampleUndoMaxBuffer = max(1, m_nSampleUndoMaxBuffer) << 20;
 
 	TCHAR szPath[_MAX_PATH] = "";
diff --git a/mptrack/Undo.cpp b/mptrack/Undo.cpp
index fadc5426f..4a8f9b8c2 100644
--- a/mptrack/Undo.cpp
+++ b/mptrack/Undo.cpp
@@ -343,7 +343,7 @@ bool CSampleUndo::Undo(const SAMPLEINDEX nSmp)
 	case sundo_delete:
 		// insert deleted data
 		pNewSample = pSndFile->AllocateSample(pUndo->OldSample.GetSampleSizeInBytes() + 4 * nBytesPerSample);
-		if(pNewSample == nullptr && pUndo->OldSample.nLength > 0) return false;
+		if(pNewSample == nullptr) return false;
 		memcpy(pNewSample, pCurrentSample, pUndo->nChangeStart * nBytesPerSample);
 		memcpy(pNewSample + pUndo->nChangeStart * nBytesPerSample, pUndo->SamplePtr, nChangeLen * nBytesPerSample);
 		memcpy(pNewSample + pUndo->nChangeEnd * nBytesPerSample, pCurrentSample + pUndo->nChangeStart * nBytesPerSample, (pUndo->OldSample.nLength - pUndo->nChangeEnd) * nBytesPerSample);

