commit af3a23ef4e5fbaf33f0afdda7d26442f036ba795
Author: Sarah Sharp <sarah.a.sharp@linux.intel.com>
Date:   Mon Jun 25 08:24:30 2012 -0700

    xhci: Export Latency Tolerance Messaging capabilities.
    
    Some xHCI host controllers may have optional support for Latency
    Tolerance Messaging (LTM).  This allows USB 3.0 devices that support LTM
    to pass information about how much latency they can tolerate to the xHC.
    A PCI xHCI host will use this information to update the PCI Latency
    Tolerance Request (LTR) info.  The goal of this is to gather latency
    information for the system, to enable hardware-driven C states, and the
    shutting down of PLLs.
    
    Signed-off-by: Sarah Sharp <sarah.a.sharp@linux.intel.com>

diff --git a/drivers/usb/host/xhci-hub.c b/drivers/usb/host/xhci-hub.c
index 2732ef660c5c..6d21030e2b7b 100644
--- a/drivers/usb/host/xhci-hub.c
+++ b/drivers/usb/host/xhci-hub.c
@@ -508,12 +508,18 @@ int xhci_hub_control(struct usb_hcd *hcd, u16 typeReq, u16 wValue,
 		if (hcd->speed != HCD_USB3)
 			goto error;
 
+		/* Set the U1 and U2 exit latencies. */
 		memcpy(buf, &usb_bos_descriptor,
 				USB_DT_BOS_SIZE + USB_DT_USB_SS_CAP_SIZE);
 		temp = xhci_readl(xhci, &xhci->cap_regs->hcs_params3);
 		buf[12] = HCS_U1_LATENCY(temp);
 		put_unaligned_le16(HCS_U2_LATENCY(temp), &buf[13]);
 
+		/* Indicate whether the host has LTM support. */
+		temp = xhci_readl(xhci, &xhci->cap_regs->hcc_params);
+		if (HCC_LTC(temp))
+			buf[8] |= USB_LTM_SUPPORT;
+
 		spin_unlock_irqrestore(&xhci->lock, flags);
 		return USB_DT_BOS_SIZE + USB_DT_USB_SS_CAP_SIZE;
 	case GetPortStatus:

