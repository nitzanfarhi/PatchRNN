commit f613cbbf9d777afec118b2cdfde40a31853a26e2
Author: Ryan Bloom <rbb@apache.org>
Date:   Thu Sep 14 00:34:15 2000 +0000

    Add a pointer to the filter_rec_t from the filter_t.  This allows modules
    to get to the filter name from the filter itself.  This is useful for
    modules like mod_perl, which have one filter function that does different
    things based on the name used when the filter was inserted.
    
    
    git-svn-id: https://svn.apache.org/repos/asf/httpd/httpd/trunk@86221 13f79535-47bb-0310-9956-ffa450edef68

diff --git a/include/util_filter.h b/include/util_filter.h
index d19e4eff2c..c15fc18e06 100644
--- a/include/util_filter.h
+++ b/include/util_filter.h
@@ -168,22 +168,22 @@ typedef enum {
  * the state directly with the request. A callback should not change any of
  * the other fields.
  */
+
+typedef struct ap_filter_rec_t ap_filter_rec_t;
+
 /**
- * The internal representation of a filter chain.  Each request has a list
- * of these structures which are called in turn to filter the data.  Sub
- * requests get an exact copy of the main requests filter chain.
+ * This structure is used for recording information about the
+ * registered filters. It associates a name with the filter's callback
+ * and filter type.
+ *
+ * At the moment, these are simply linked in a chain, so a ->next pointer
+ * is available.
  */
-struct ap_filter_t {
-    /** The current filter function in the chain.  The prototype is:
-     * <PRE>  
-     * apr_status_t (*ap_filter_func)(ap_filter_t *f, ap_bucket_brigade *b);
-     * </PRE>
-     */
+struct ap_filter_rec_t {
+    /** The registered name for this filter */
+    const char *name;
+    /** The function to call when this filter is invoked. */
     ap_filter_func filter_func;
-
-    /** A place to store any data associated with the current filter */
-    void *ctx;
-
     /** The type of filter, either AP_FTYPE_CONTENT or AP_FTYPE_CONNECTION.  
      * An AP_FTYPE_CONTENT filter modifies the data based on information 
      * found in the content.  An AP_FTYPE_CONNECTION filter modifies the 
@@ -191,6 +191,24 @@ struct ap_filter_t {
      */
     ap_filter_type ftype;
 
+    /** The next filter_rec in the list */
+    struct ap_filter_rec_t *next;
+};
+
+/**
+ * The representation of a filter chain.  Each request has a list
+ * of these structures which are called in turn to filter the data.  Sub
+ * requests get an exact copy of the main requests filter chain.
+ */
+struct ap_filter_t {
+     /** The internal representation of this filter.  This includes
+      *  the filter's name, type, and the actual function pointer.
+     */
+    ap_filter_rec_t *frec;
+
+    /** A place to store any data associated with the current filter */
+    void *ctx;
+
     /** The next filter in the chain */
     ap_filter_t *next;
 
diff --git a/server/util_filter.c b/server/util_filter.c
index 64d8baff0f..3ebef147b2 100644
--- a/server/util_filter.c
+++ b/server/util_filter.c
@@ -55,24 +55,6 @@
 #include "httpd.h"
 #include "util_filter.h"
 
-/*
- * ap_filter_rec_t:
- *
- * This (internal) structure is used for recording information about the
- * registered filters. It associates a name with the filter's callback
- * and filter type.
- *
- * At the moment, these are simply linked in a chain, so a ->next pointer
- * is available.
- */
-typedef struct ap_filter_rec_t {
-    const char *name;
-    ap_filter_func filter_func;
-    ap_filter_type ftype;
-
-    struct ap_filter_rec_t *next;
-} ap_filter_rec_t;
-
 /* ### make this visible for direct manipulation?
  * ### use a hash table
  */
@@ -91,8 +73,8 @@ static ap_filter_rec_t *registered_filters = NULL;
 ** corresponds to a different request.
 */
 #define INSERT_BEFORE(f, before_this) ((before_this) == NULL \
-                                       || (before_this)->ftype > (f)->ftype \
-                                       || (before_this)->r != (f)->r)
+                           || (before_this)->frec->ftype > (f)->frec->ftype \
+                           || (before_this)->r != (f)->r)
 
 
 static apr_status_t filter_cleanup(void *ctx)
@@ -125,9 +107,8 @@ API_EXPORT(void) ap_add_filter(const char *name, request_rec *r)
         if (!strcasecmp(name, frec->name)) {
             ap_filter_t *f = apr_pcalloc(r->pool, sizeof(*f));
 
-            f->filter_func = frec->filter_func;
+            f->frec = frec;
             f->ctx = NULL;
-            f->ftype = frec->ftype;
             f->r = r;
 
             if (INSERT_BEFORE(f, r->filters)) {
@@ -158,7 +139,7 @@ API_EXPORT(apr_status_t) ap_pass_brigade(ap_filter_t *next, ap_bucket_brigade *b
         if (AP_BRIGADE_LAST(bb)->type == AP_BUCKET_EOS) {
             next->r->eos_sent = 1;
         }
-        return next->filter_func(next, bb);
+        return next->frec->filter_func(next, bb);
     }
     return AP_NOBODY_WROTE;
 }

