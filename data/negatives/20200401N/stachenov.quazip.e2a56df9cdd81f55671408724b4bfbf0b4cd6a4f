commit e2a56df9cdd81f55671408724b4bfbf0b4cd6a4f
Author: Sergei Tachenov <sergei@tachenov.name>
Date:   Wed Feb 12 06:41:16 2014 +0000

    Setting the flags before opening

diff --git a/quazip/quazip/quazip.cpp b/quazip/quazip/quazip.cpp
index 88f0e0e..2df2ddd 100644
--- a/quazip/quazip/quazip.cpp
+++ b/quazip/quazip/quazip.cpp
@@ -228,20 +228,25 @@ bool QuaZip::open(Mode mode, zlib_filefunc_def* ioApi)
       ioDevice = new QFile(p->zipName);
     }
   }
+  unsigned flags = 0;
   switch(mode) {
     case mdUnzip:
       if (ioApi == NULL) {
-          p->unzFile_f=unzOpen2_64(ioDevice, NULL);
+          if (p->autoClose)
+              flags |= UNZ_AUTO_CLOSE;
+          p->unzFile_f=unzOpenInternal(ioDevice, NULL, 1, flags);
       } else {
           // QuaZIP pre-zip64 compatibility mode
           p->unzFile_f=unzOpen2(ioDevice, ioApi);
+          if (p->unzFile_f != NULL) {
+              if (p->autoClose) {
+                  unzSetFlags(p->unzFile_f, UNZ_AUTO_CLOSE);
+              } else {
+                  unzClearFlags(p->unzFile_f, UNZ_AUTO_CLOSE);
+              }
+          }
       }
       if(p->unzFile_f!=NULL) {
-        if (p->autoClose) {
-            unzSetFlags(p->unzFile_f, UNZ_AUTO_CLOSE);
-        } else {
-            unzClearFlags(p->unzFile_f, UNZ_AUTO_CLOSE);
-        }
         if (ioDevice->isSequential()) {
             unzClose(p->unzFile_f);
             if (!p->zipName.isEmpty())
@@ -264,11 +269,15 @@ bool QuaZip::open(Mode mode, zlib_filefunc_def* ioApi)
     case mdAppend:
     case mdAdd:
       if (ioApi == NULL) {
-          p->zipFile_f=zipOpen2_64(ioDevice,
+          if (p->autoClose)
+              flags |= ZIP_AUTO_CLOSE;
+          if (p->dataDescriptorWritingEnabled)
+              flags |= ZIP_WRITE_DATA_DESCRIPTOR;
+          p->zipFile_f=zipOpen3(ioDevice,
               mode==mdCreate?APPEND_STATUS_CREATE:
               mode==mdAppend?APPEND_STATUS_CREATEAFTER:
               APPEND_STATUS_ADDINZIP,
-              NULL, NULL);
+              NULL, NULL, flags);
       } else {
           // QuaZIP pre-zip64 compatibility mode
           p->zipFile_f=zipOpen2(ioDevice,
@@ -277,13 +286,11 @@ bool QuaZip::open(Mode mode, zlib_filefunc_def* ioApi)
               APPEND_STATUS_ADDINZIP,
               NULL,
               ioApi);
+          if (p->zipFile_f != NULL) {
+              zipSetFlags(p->zipFile_f, flags);
+          }
       }
       if(p->zipFile_f!=NULL) {
-        if (p->autoClose) {
-            zipSetFlags(p->zipFile_f, ZIP_AUTO_CLOSE);
-        } else {
-            zipClearFlags(p->zipFile_f, ZIP_AUTO_CLOSE);
-        }
         if (ioDevice->isSequential()) {
             if (mode != mdCreate && mode != mdAppend) {
                 zipClose(p->zipFile_f, NULL);
diff --git a/quazip/quazip/quazip.h b/quazip/quazip/quazip.h
index 3f354a3..0dd4023 100644
--- a/quazip/quazip/quazip.h
+++ b/quazip/quazip/quazip.h
@@ -183,7 +183,9 @@ class QUAZIP_EXPORT QuaZip {
      *
      * \note If the \ref QuaZip::setAutoClose() "no-auto-close" feature is used,
      * then the \a ioApi argument \em should be NULL because the old API
-     * doesn't support the 'fake close' operation, causing slight memory leaks.
+     * doesn't support the 'fake close' operation, causing slight memory leaks
+     * and other possible troubles (like closing the output device in case
+     * when an error occurs during opening).
      *
      * In short: just forget about the \a ioApi argument and you'll be
      * fine.
diff --git a/quazip/quazip/unzip.c b/quazip/quazip/unzip.c
index 9433791..89405ae 100644
--- a/quazip/quazip/unzip.c
+++ b/quazip/quazip/unzip.c
@@ -584,9 +584,9 @@ local ZPOS64_T unz64local_SearchCentralDir64(const zlib_filefunc64_32_def* pzlib
      Else, the return value is a unzFile Handle, usable with other function
        of this unzip package.
 */
-local unzFile unzOpenInternal (voidpf file,
+extern unzFile unzOpenInternal (voidpf file,
                                zlib_filefunc64_32_def* pzlib_filefunc64_32_def,
-                               int is64bitOpenFunction)
+                               int is64bitOpenFunction, unsigned flags)
 {
     unz64_s us;
     unz64_s *s;
@@ -606,6 +606,7 @@ local unzFile unzOpenInternal (voidpf file,
     if (unz_copyright[0]!=' ')
         return NULL;
 
+    us.flags = flags;
     us.z_filefunc.zseek32_file = NULL;
     us.z_filefunc.ztell32_file = NULL;
     if (pzlib_filefunc64_32_def==NULL)
@@ -742,8 +743,6 @@ local unzFile unzOpenInternal (voidpf file,
         (err==UNZ_OK))
         err=UNZ_BADZIPFILE;
 
-    /* TODO: need to figure out a way to set these flags before unzOpen() */
-    us.flags = UNZ_AUTO_CLOSE;
     if (err!=UNZ_OK)
     {
         if ((us.flags & UNZ_AUTO_CLOSE) != 0)
@@ -777,10 +776,10 @@ extern unzFile ZEXPORT unzOpen2 (voidpf file,
     {
         zlib_filefunc64_32_def zlib_filefunc64_32_def_fill;
         fill_zlib_filefunc64_32_def_from_filefunc32(&zlib_filefunc64_32_def_fill,pzlib_filefunc32_def);
-        return unzOpenInternal(file, &zlib_filefunc64_32_def_fill, 0);
+        return unzOpenInternal(file, &zlib_filefunc64_32_def_fill, 0, UNZ_DEFAULT_FLAGS);
     }
     else
-        return unzOpenInternal(file, NULL, 0);
+        return unzOpenInternal(file, NULL, 0, UNZ_DEFAULT_FLAGS);
 }
 
 extern unzFile ZEXPORT unzOpen2_64 (voidpf file,
@@ -792,20 +791,20 @@ extern unzFile ZEXPORT unzOpen2_64 (voidpf file,
         zlib_filefunc64_32_def_fill.zfile_func64 = *pzlib_filefunc_def;
         zlib_filefunc64_32_def_fill.ztell32_file = NULL;
         zlib_filefunc64_32_def_fill.zseek32_file = NULL;
-        return unzOpenInternal(file, &zlib_filefunc64_32_def_fill, 1);
+        return unzOpenInternal(file, &zlib_filefunc64_32_def_fill, 1, UNZ_DEFAULT_FLAGS);
     }
     else
-        return unzOpenInternal(file, NULL, 1);
+        return unzOpenInternal(file, NULL, 1, UNZ_DEFAULT_FLAGS);
 }
 
 extern unzFile ZEXPORT unzOpen (voidpf file)
 {
-    return unzOpenInternal(file, NULL, 0);
+    return unzOpenInternal(file, NULL, 0, UNZ_DEFAULT_FLAGS);
 }
 
 extern unzFile ZEXPORT unzOpen64 (voidpf file)
 {
-    return unzOpenInternal(file, NULL, 1);
+    return unzOpenInternal(file, NULL, 1, UNZ_DEFAULT_FLAGS);
 }
 
 /*
diff --git a/quazip/quazip/unzip.h b/quazip/quazip/unzip.h
index 20b759e..da7b062 100644
--- a/quazip/quazip/unzip.h
+++ b/quazip/quazip/unzip.h
@@ -86,6 +86,7 @@ typedef voidp unzFile;
 #define UNZ_CRCERROR                    (-105)
 
 #define UNZ_AUTO_CLOSE 0x01u
+#define UNZ_DEFAULT_FLAGS UNZ_AUTO_CLOSE
 
 /* tm_unz contain date/time info */
 typedef struct tm_unz_s
@@ -202,6 +203,18 @@ extern unzFile ZEXPORT unzOpen2_64 OF((voidpf file,
       for read/write the zip file (see ioapi.h)
 */
 
+
+/*
+ * Exported by Sergey A. Tachenov to implement some QuaZIP features. This
+ * function MAY change signature in order to implement even more features.
+ * You have been warned!
+ * */
+extern unzFile unzOpenInternal (voidpf file,
+                               zlib_filefunc64_32_def* pzlib_filefunc64_32_def,
+                               int is64bitOpenFunction, unsigned flags);
+
+
+
 extern int ZEXPORT unzClose OF((unzFile file));
 /*
   Close a ZipFile opened with unzipOpen.
diff --git a/quazip/quazip/zip.c b/quazip/quazip/zip.c
index 9b66fe7..2e97eca 100644
--- a/quazip/quazip/zip.c
+++ b/quazip/quazip/zip.c
@@ -859,12 +859,14 @@ int LoadCentralDirectoryRecord(zip64_internal* pziinit)
 
 
 /************************************************************/
-extern zipFile ZEXPORT zipOpen3 (voidpf file, int append, zipcharpc* globalcomment, zlib_filefunc64_32_def* pzlib_filefunc64_32_def)
+extern zipFile ZEXPORT zipOpen3 (voidpf file, int append, zipcharpc* globalcomment, zlib_filefunc64_32_def* pzlib_filefunc64_32_def,
+                                 unsigned flags)
 {
     zip64_internal ziinit;
     zip64_internal* zi;
     int err=ZIP_OK;
 
+    ziinit.flags = flags;
     ziinit.z_filefunc.zseek32_file = NULL;
     ziinit.z_filefunc.ztell32_file = NULL;
     if (pzlib_filefunc64_32_def==NULL)
@@ -889,7 +891,6 @@ extern zipFile ZEXPORT zipOpen3 (voidpf file, int append, zipcharpc* globalcomme
     ziinit.ci.stream_initialised = 0;
     ziinit.number_entry = 0;
     ziinit.add_position_when_writting_offset = 0;
-    ziinit.flags = ZIP_WRITE_DATA_DESCRIPTOR | ZIP_AUTO_CLOSE;
     init_linkedlist(&(ziinit.central_dir));
 
 
@@ -941,10 +942,10 @@ extern zipFile ZEXPORT zipOpen2 (voidpf file, int append, zipcharpc* globalcomme
     {
         zlib_filefunc64_32_def zlib_filefunc64_32_def_fill;
         fill_zlib_filefunc64_32_def_from_filefunc32(&zlib_filefunc64_32_def_fill,pzlib_filefunc32_def);
-        return zipOpen3(file, append, globalcomment, &zlib_filefunc64_32_def_fill);
+        return zipOpen3(file, append, globalcomment, &zlib_filefunc64_32_def_fill, ZIP_DEFAULT_FLAGS);
     }
     else
-        return zipOpen3(file, append, globalcomment, NULL);
+        return zipOpen3(file, append, globalcomment, NULL, ZIP_DEFAULT_FLAGS);
 }
 
 extern zipFile ZEXPORT zipOpen2_64 (voidpf file, int append, zipcharpc* globalcomment, zlib_filefunc64_def* pzlib_filefunc_def)
@@ -955,22 +956,22 @@ extern zipFile ZEXPORT zipOpen2_64 (voidpf file, int append, zipcharpc* globalco
         zlib_filefunc64_32_def_fill.zfile_func64 = *pzlib_filefunc_def;
         zlib_filefunc64_32_def_fill.ztell32_file = NULL;
         zlib_filefunc64_32_def_fill.zseek32_file = NULL;
-        return zipOpen3(file, append, globalcomment, &zlib_filefunc64_32_def_fill);
+        return zipOpen3(file, append, globalcomment, &zlib_filefunc64_32_def_fill, ZIP_DEFAULT_FLAGS);
     }
     else
-        return zipOpen3(file, append, globalcomment, NULL);
+        return zipOpen3(file, append, globalcomment, NULL, ZIP_DEFAULT_FLAGS);
 }
 
 
 
 extern zipFile ZEXPORT zipOpen (voidpf file, int append)
 {
-    return zipOpen3(file,append,NULL,NULL);
+    return zipOpen3(file,append,NULL,NULL, ZIP_DEFAULT_FLAGS);
 }
 
 extern zipFile ZEXPORT zipOpen64 (voidpf file, int append)
 {
-    return zipOpen3(file,append,NULL,NULL);
+    return zipOpen3(file,append,NULL,NULL, ZIP_DEFAULT_FLAGS);
 }
 
 int Write_LocalFileHeader(zip64_internal* zi, const char* filename,
diff --git a/quazip/quazip/zip.h b/quazip/quazip/zip.h
index 7ac0ff9..a6617ad 100644
--- a/quazip/quazip/zip.h
+++ b/quazip/quazip/zip.h
@@ -85,6 +85,7 @@ typedef voidp zipFile;
 #define ZIP_WRITE_DATA_DESCRIPTOR 0x8u
 #define ZIP_AUTO_CLOSE 0x1u
 #define ZIP_SEQUENTIAL 0x2u
+#define ZIP_DEFAULT_FLAGS (ZIP_AUTO_CLOSE | ZIP_WRITE_DATA_DESCRIPTOR)
 
 #ifndef DEF_MEM_LEVEL
 #  if MAX_MEM_LEVEL >= 8
@@ -154,6 +155,17 @@ extern zipFile ZEXPORT zipOpen2_64 OF((voidpf file,
                                    zipcharpc* globalcomment,
                                    zlib_filefunc64_def* pzlib_filefunc_def));
 
+/*
+ * Exported by Sergey A. Tachenov to suit the needs of QuaZIP.
+ * Note that this function MAY change signature in order to
+ * provide new QuaZIP features. You have been warned!
+ * */
+extern zipFile ZEXPORT zipOpen3 (voidpf file,
+                                 int append,
+                                 zipcharpc* globalcomment,
+                                 zlib_filefunc64_32_def* pzlib_filefunc64_32_def,
+                                 unsigned flags);
+
 extern int ZEXPORT zipOpenNewFileInZip OF((zipFile file,
                        const char* filename,
                        const zip_fileinfo* zipfi,

