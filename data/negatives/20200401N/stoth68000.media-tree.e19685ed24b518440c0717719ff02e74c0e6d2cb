commit e19685ed24b518440c0717719ff02e74c0e6d2cb
Author: Davidlohr Bueso <dave@stgolabs.net>
Date:   Mon Sep 29 09:41:08 2014 -0700

    perf bench futex: Sanitize -q option in requeue
    
    When given the number of threads to requeue at once by user input,
    there's always the risk of this value being larger than the total number
    of threads.  This doesn't make any sense, and the kernel can easily deal
    with such sort of situations, hence no big deal. We should however
    prevent bogus output such as:
    
    ./perf bench --repeat 2 futex requeue -q 10
    Run summary [PID 22210]: Requeuing 4 threads (from [private] 0x99ef3c to 0x99ef38), 10 at a time.
    
    [Run 1]: Requeued 10 of 4 threads in 0.0040 ms
    [Run 2]: Requeued 10 of 4 threads in 0.0030 ms
    Requeued 10 of 4 threads in 0.0035 ms (+-14.29%)
    
    Signed-off-by: Davidlohr Bueso <dbueso@suse.de>
    Cc: Davidlohr Bueso <dbueso@suse.de>
    Link: http://lkml.kernel.org/r/1412008868-22328-2-git-send-email-dave@stgolabs.net
    Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>

diff --git a/tools/perf/bench/futex-requeue.c b/tools/perf/bench/futex-requeue.c
index 9837a8831406..bedff6b5b3cf 100644
--- a/tools/perf/bench/futex-requeue.c
+++ b/tools/perf/bench/futex-requeue.c
@@ -172,6 +172,9 @@ int bench_futex_requeue(int argc, const char **argv,
 		gettimeofday(&end, NULL);
 		timersub(&end, &start, &runtime);
 
+		if (nrequeued > nthreads)
+			nrequeued = nthreads;
+
 		update_stats(&requeued_stats, nrequeued);
 		update_stats(&requeuetime_stats, runtime.tv_usec);
 
@@ -190,7 +193,6 @@ int bench_futex_requeue(int argc, const char **argv,
 			if (ret)
 				err(EXIT_FAILURE, "pthread_join");
 		}
-
 	}
 
 	/* cleanup & report results */

