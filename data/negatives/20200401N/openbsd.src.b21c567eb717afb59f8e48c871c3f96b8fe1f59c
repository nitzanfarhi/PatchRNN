commit b21c567eb717afb59f8e48c871c3f96b8fe1f59c
Author: pedro <pedro@openbsd.org>
Date:   Sat Jul 8 20:53:31 2006 +0000

    Rename VTON() to VTOU()

diff --git a/sys/isofs/udf/udf.h b/sys/isofs/udf/udf.h
index 63e61d4fd1f..b1165da7114 100644
--- a/sys/isofs/udf/udf.h
+++ b/sys/isofs/udf/udf.h
@@ -1,4 +1,4 @@
-/*	$OpenBSD: udf.h,v 1.5 2006/07/05 17:57:50 pedro Exp $	*/
+/*	$OpenBSD: udf.h,v 1.6 2006/07/08 20:53:31 pedro Exp $	*/
 
 /*
  * Copyright (c) 2001, 2002 Scott Long <scottl@freebsd.org>
@@ -92,7 +92,7 @@ struct udf_dirstream {
 };
 
 #define	VFSTOUDFFS(mp)	((struct udf_mnt *)((mp)->mnt_data))
-#define	VTON(vp)	((struct udf_node *)((vp)->v_data))
+#define	VTOU(vp)	((struct udf_node *)((vp)->v_data))
 
 /*
  * The block layer refers to things in terms of 512 byte blocks by default.
diff --git a/sys/isofs/udf/udf_subr.c b/sys/isofs/udf/udf_subr.c
index 6d27148ed1e..18c38ce3232 100644
--- a/sys/isofs/udf/udf_subr.c
+++ b/sys/isofs/udf/udf_subr.c
@@ -1,4 +1,4 @@
-/*	$OpenBSD: udf_subr.c,v 1.5 2006/07/05 17:57:50 pedro Exp $	*/
+/*	$OpenBSD: udf_subr.c,v 1.6 2006/07/08 20:53:31 pedro Exp $	*/
 
 /*
  * Copyright (c) 2006, Miodrag Vallat
@@ -193,7 +193,7 @@ udf_vat_get(struct udf_mnt *ump)
 	if (error)
 		return (error);
 
-	unp = VTON(vp);
+	unp = VTOU(vp);
 	unp->vatlen = (letoh64(unp->fentry->inf_len) - 36) >> 2;
 
 	ump->im_vat = vp;
@@ -216,7 +216,7 @@ udf_vat_map(struct udf_mnt *ump, uint32_t *sector)
 	}
 
 	/* Sanity check the given sector */
-	if (*sector >= VTON(ump->im_vat)->vatlen)
+	if (*sector >= VTOU(ump->im_vat)->vatlen)
 		return (EINVAL);
 
 	return (udf_vat_read(ump, sector));
@@ -231,7 +231,7 @@ udf_vat_read(struct udf_mnt *ump, uint32_t *sector)
 	uint8_t *data;
 	int error, size;
 
-	unp = VTON(ump->im_vat);
+	unp = VTOU(ump->im_vat);
 	size = 4;
 
 	/*
diff --git a/sys/isofs/udf/udf_vfsops.c b/sys/isofs/udf/udf_vfsops.c
index e2e49f562ea..00431d7c9d7 100644
--- a/sys/isofs/udf/udf_vfsops.c
+++ b/sys/isofs/udf/udf_vfsops.c
@@ -1,4 +1,4 @@
-/*	$OpenBSD: udf_vfsops.c,v 1.14 2006/07/05 17:57:50 pedro Exp $	*/
+/*	$OpenBSD: udf_vfsops.c,v 1.15 2006/07/08 20:53:31 pedro Exp $	*/
 
 /*
  * Copyright (c) 2001, 2002 Scott Long <scottl@freebsd.org>
@@ -654,7 +654,7 @@ udf_vptofh(struct vnode *vp, struct fid *fhp)
 	struct udf_node *node;
 	struct ifid *ifhp;
 
-	node = VTON(vp);
+	node = VTOU(vp);
 	ifhp = (struct ifid *)fhp;
 	ifhp->ifid_len = sizeof(struct ifid);
 	ifhp->ifid_ino = node->hash_id;
diff --git a/sys/isofs/udf/udf_vnops.c b/sys/isofs/udf/udf_vnops.c
index e0243e2ddda..4e28e806fb4 100644
--- a/sys/isofs/udf/udf_vnops.c
+++ b/sys/isofs/udf/udf_vnops.c
@@ -1,4 +1,4 @@
-/*	$OpenBSD: udf_vnops.c,v 1.15 2006/07/05 17:57:50 pedro Exp $	*/
+/*	$OpenBSD: udf_vnops.c,v 1.16 2006/07/08 20:53:31 pedro Exp $	*/
 
 /*
  * Copyright (c) 2001, 2002 Scott Long <scottl@freebsd.org>
@@ -210,7 +210,7 @@ udf_access(void *v)
 	mode_t a_mode, mode;
 
 	vp = ap->a_vp;
-	node = VTON(vp);
+	node = VTOU(vp);
 	a_mode = ap->a_mode;
 
 	if (a_mode & VWRITE) {
@@ -327,7 +327,7 @@ udf_getattr(void *v)
 
 	vp = ap->a_vp;
 	vap = ap->a_vap;
-	node = VTON(vp);
+	node = VTOU(vp);
 	fentry = node->fentry;
 
 	vap->va_fsid = node->i_dev;
@@ -431,7 +431,7 @@ udf_read(void *v)
 	} */ *ap = v;
 	struct vnode *vp = ap->a_vp;
 	struct uio *uio = ap->a_uio;
-	struct udf_node *node = VTON(vp);
+	struct udf_node *node = VTOU(vp);
 	struct buf *bp;
 	uint8_t *data;
 	off_t fsize, offset;
@@ -734,7 +734,7 @@ udf_readdir(void *v)
 
 	vp = ap->a_vp;
 	uio = ap->a_uio;
-	node = VTON(vp);
+	node = VTOU(vp);
 	udfmp = node->udfmp;
 	uiodir.eofflag = 1;
 
@@ -860,7 +860,7 @@ udf_strategy(void *v)
 
 	bp = ap->a_bp;
 	vp = bp->b_vp;
-	node = VTON(vp);
+	node = VTOU(vp);
 
 	/* cd9660 has this test reversed, but it seems more logical this way */
 	if (bp->b_blkno != bp->b_lblkno) {
@@ -911,7 +911,7 @@ udf_lock(void *v)
 
 	struct vnode *vp = ap->a_vp;
 
-	return (lockmgr(&VTON(vp)->i_lock, ap->a_flags, &vp->v_interlock));
+	return (lockmgr(&VTOU(vp)->i_lock, ap->a_flags, &vp->v_interlock));
 }
 
 int
@@ -925,7 +925,7 @@ udf_unlock(void *v)
 
 	struct vnode *vp = ap->a_vp;
 
-	return (lockmgr(&VTON(vp)->i_lock, ap->a_flags | LK_RELEASE,
+	return (lockmgr(&VTOU(vp)->i_lock, ap->a_flags | LK_RELEASE,
 	    &vp->v_interlock));
 }
 
@@ -936,7 +936,7 @@ udf_islocked(void *v)
 		struct vnode *a_vp;
 	} */ *ap = v;
 
-	return (lockstatus(&VTON(ap->a_vp)->i_lock));
+	return (lockstatus(&VTOU(ap->a_vp)->i_lock));
 }
 
 int
@@ -946,7 +946,7 @@ udf_print(void *v)
 		struct vnode *a_vp;
 	} */ *ap = v;
 	struct vnode *vp = ap->a_vp;
-	struct udf_node *node = VTON(vp);
+	struct udf_node *node = VTOU(vp);
 
 	/*
 	 * Complete the information given by vprint().
@@ -973,7 +973,7 @@ udf_bmap(void *v)
 	daddr_t lsector;
 	int error;
 
-	node = VTON(ap->a_vp);
+	node = VTOU(ap->a_vp);
 
 	if (ap->a_vpp != NULL)
 		*ap->a_vpp = node->i_devvp;
@@ -1025,7 +1025,7 @@ udf_lookup(void *v)
 	extern struct nchstats nchstats;
 
 	dvp = ap->a_dvp;
-	node = VTON(dvp);
+	node = VTOU(dvp);
 	udfmp = node->udfmp;
 	nameiop = ap->a_cnp->cn_nameiop;
 	flags = ap->a_cnp->cn_flags;
@@ -1188,7 +1188,7 @@ udf_reclaim(void *v)
 	struct udf_node *unode;
 
 	vp = ap->a_vp;
-	unode = VTON(vp);
+	unode = VTOU(vp);
 
 	if (unode != NULL) {
 		udf_hashrem(unode);

