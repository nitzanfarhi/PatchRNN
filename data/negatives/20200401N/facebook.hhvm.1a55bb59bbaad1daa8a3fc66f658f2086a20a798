commit 1a55bb59bbaad1daa8a3fc66f658f2086a20a798
Author: Guilherme Ottoni <ottoni@fb.com>
Date:   Fri May 23 10:14:53 2014 -0700

    Fix XLS intervals representing caller-saved registers for native calls
    
    Summary: Intervals for caller-saved registers were ending past the native call,
    which then resulted in the these registers interfering with the dest
    registers of the native calls.  As a result, the dest registers of
    native-call instructions were always assigned to callee-saved
    registers, which had 2 bad side-effects: (1) it increased the pressure
    on these registers; and (2) it caused unnecessary register moves from
    the function-return regs (rax/rdx) to the assigned callee-saved regs.
    
    Reviewed By: @edwinsmith
    
    Differential Revision: D1343728

diff --git a/hphp/runtime/vm/jit/xls.cpp b/hphp/runtime/vm/jit/xls.cpp
index 586361599e..bc4badcfca 100644
--- a/hphp/runtime/vm/jit/xls.cpp
+++ b/hphp/runtime/vm/jit/xls.cpp
@@ -220,7 +220,7 @@ Interval::Interval(Interval* parent)
 
 // Add r to this interval, merging r with any existing overlapping ranges
 void Interval::add(LiveRange r) {
-  assert(r.start < r.end); // not empty
+  assert(blocked || scratch || r.start < r.end);
   while (!ranges.empty() && r.contains(ranges.back())) {
     ranges.pop_back();
   }
@@ -504,7 +504,11 @@ void XLS::buildIntervals() {
         if (RuntimeOption::EvalHHIREnableCalleeSavedOpt) {
           auto scratch = m_abi.gpUnreserved - m_abi.calleeSaved;
           scratch.forEach([&](PhysReg r) {
-            m_scratch[r].add(LiveRange(pos, pos + 1));
+            // Add an empty range to caller-saved intervals that will
+            // intersect with ordinary intervals that span calls,
+            // causing them to prefer callee-saved registers.  This is
+            // the only situation where an empty range is valid.
+            m_scratch[r].add(LiveRange(pos, pos));
           });
         }
       }

