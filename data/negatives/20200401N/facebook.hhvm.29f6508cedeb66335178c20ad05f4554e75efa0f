commit 29f6508cedeb66335178c20ad05f4554e75efa0f
Author: mwilliams <markw65@facebook.com>
Date:   Wed Sep 1 06:56:30 2010 -0700

    [Fix] Fix compilation error due to unused temporary.
    
    Summary:
    This code would result in a compilation error:
    
    <?php
    function bar($g) { return $g; }
    class X {
      static function foo() {
        echo $this->baz(bar(1), bar(""));
      }
    }
    
    because temporaries were output for the results of the two bar calls, but the
    temps were not used, because the call to baz was replaced with a call to
    throw_fatal.
    
    Instead, use GET_THIS_ARROW(), which will throw the fatal, and allow the rest
    of the expression to be output. A later diff will optimize this (and other)
    throw_fatal cases.
    
    Test Plan:
    slow_tests (including above test case). Build www.
    
    DiffCamp Revision: 153051
    Reviewed By: hzhao
    CC: hzhao, hphp-diffs@lists
    Revert Plan:
    OK

diff --git a/src/compiler/expression/object_method_expression.cpp b/src/compiler/expression/object_method_expression.cpp
index f7809e9286..c59c24ae0b 100644
--- a/src/compiler/expression/object_method_expression.cpp
+++ b/src/compiler/expression/object_method_expression.cpp
@@ -323,16 +323,12 @@ bool ObjectMethodExpression::directVariantProxy(AnalysisResultPtr ar) {
 void ObjectMethodExpression::outputCPPImpl(CodeGenerator &cg,
                                            AnalysisResultPtr ar) {
   bool isThis = m_object->isThis();
-
+  bool linemap = outputLineMap(cg, ar, true) ? 1 : 0;
   if (isThis && ar->getFunctionScope()->isStatic()) {
-    bool linemap = outputLineMap(cg, ar, true);
-    cg_printf("throw_fatal(\"Using $this when not in object context\")");
-    if (linemap) cg_printf(")");
-    return;
+    cg_printf("GET_THIS_ARROW()");
   }
 
   bool fewParams = canInvokeFewArgs();
-  bool linemap = outputLineMap(cg, ar, true);
 
   if (!isThis) {
     if (directVariantProxy(ar) && !m_object->hasCPPTemp()) {
diff --git a/src/test/test_code_run.cpp b/src/test/test_code_run.cpp
index 7de1cd4e97..89143a8fd2 100644
--- a/src/test/test_code_run.cpp
+++ b/src/test/test_code_run.cpp
@@ -6655,6 +6655,14 @@ bool TestCodeRun::TestCompilation() {
   MVCR("<?php "
        "call_user_func_array(array('Normalizer','normalize'),array('bar'));");
 
+  MVCR("<?php "
+       "function bar($g) { return $g; }"
+       "class X {"
+       "  static function foo() {"
+       "    echo $this->baz(bar(1), bar(''));"
+       "  }"
+       "}");
+
   return true;
 }
 

