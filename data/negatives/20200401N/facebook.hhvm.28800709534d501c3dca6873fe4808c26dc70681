commit 28800709534d501c3dca6873fe4808c26dc70681
Author: Drew Paroski <andrewparoski@fb.com>
Date:   Tue Nov 12 21:29:54 2013 -0800

    Avoid calling smart_malloc() to allocate 0 bytes in Vector
    
    Some of the logic in the Vector implementation was unnecessarily calling
    into smart_malloc() to allocate 0 bytes, which is wasteful. This diff fixes
    the issue appropriately.
    
    Reviewed By: anietoro
    
    Differential Revision: D1079298

diff --git a/hphp/runtime/ext/base_vector.h b/hphp/runtime/ext/base_vector.h
index 3be847905f..a11bfe9111 100644
--- a/hphp/runtime/ext/base_vector.h
+++ b/hphp/runtime/ext/base_vector.h
@@ -140,6 +140,9 @@ protected:
     auto thiz = static_cast<T*>(obj);
     auto target = static_cast<T*>(obj->cloneImpl());
     uint sz = thiz->m_size;
+    if (!sz) {
+      return target;
+    }
     TypedValue* data;
     target->m_capacity = target->m_size = sz;
     target->m_data = data = (TypedValue*)smart_malloc(sz * sizeof(TypedValue));
diff --git a/hphp/runtime/ext/ext_collections.cpp b/hphp/runtime/ext/ext_collections.cpp
index 92810dad32..8bf42faca4 100644
--- a/hphp/runtime/ext/ext_collections.cpp
+++ b/hphp/runtime/ext/ext_collections.cpp
@@ -535,6 +535,9 @@ Object c_Vector::ti_fromarray(CVarRef arr) {
   Object ret = target = NEWOBJ(c_Vector)();
   ArrayData* ad = arr.getArrayData();
   uint sz = ad->size();
+  if (!sz) {
+    return ret;
+  }
   target->m_capacity = target->m_size = sz;
   TypedValue* data;
   target->m_data = data = (TypedValue*)smart_malloc(sz * sizeof(TypedValue));

