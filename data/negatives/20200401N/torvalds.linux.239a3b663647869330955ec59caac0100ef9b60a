commit 239a3b663647869330955ec59caac0100ef9b60a
Author: Thomas Petazzoni <thomas.petazzoni@free-electrons.com>
Date:   Tue Feb 21 11:28:01 2017 +0100

    net: mvpp2: fix DMA address calculation in mvpp2_txq_inc_put()
    
    When TX descriptors are filled in, the buffer DMA address is split
    between the tx_desc->buf_phys_addr field (high-order bits) and
    tx_desc->packet_offset field (5 low-order bits).
    
    However, when we re-calculate the DMA address from the TX descriptor in
    mvpp2_txq_inc_put(), we do not take tx_desc->packet_offset into
    account. This means that when the DMA address is not aligned on a 32
    bytes boundary, we end up calling dma_unmap_single() with a DMA address
    that was not the one returned by dma_map_single().
    
    This inconsistency is detected by the kernel when DMA_API_DEBUG is
    enabled. We fix this problem by properly calculating the DMA address in
    mvpp2_txq_inc_put().
    
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Thomas Petazzoni <thomas.petazzoni@free-electrons.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

diff --git a/drivers/net/ethernet/marvell/mvpp2.c b/drivers/net/ethernet/marvell/mvpp2.c
index c48632048f71..a6992ce34565 100644
--- a/drivers/net/ethernet/marvell/mvpp2.c
+++ b/drivers/net/ethernet/marvell/mvpp2.c
@@ -991,7 +991,7 @@ static void mvpp2_txq_inc_put(struct mvpp2_txq_pcpu *txq_pcpu,
 		txq_pcpu->buffs + txq_pcpu->txq_put_index;
 	tx_buf->skb = skb;
 	tx_buf->size = tx_desc->data_size;
-	tx_buf->phys = tx_desc->buf_phys_addr;
+	tx_buf->phys = tx_desc->buf_phys_addr + tx_desc->packet_offset;
 	txq_pcpu->txq_put_index++;
 	if (txq_pcpu->txq_put_index == txq_pcpu->size)
 		txq_pcpu->txq_put_index = 0;

