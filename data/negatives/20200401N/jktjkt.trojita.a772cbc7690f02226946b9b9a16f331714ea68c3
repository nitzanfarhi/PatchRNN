commit a772cbc7690f02226946b9b9a16f331714ea68c3
Author: Jan Kundr√°t <jkt@gentoo.org>
Date:   Sat Jun 5 17:57:51 2010 +0200

    Implement metadata and flags serialization

diff --git a/src/Imap/Model/SQLCache.cpp b/src/Imap/Model/SQLCache.cpp
index 51be944f..d7ffcbd0 100644
--- a/src/Imap/Model/SQLCache.cpp
+++ b/src/Imap/Model/SQLCache.cpp
@@ -154,6 +154,25 @@ bool SQLCache::_createTables()
         return false;
     }
 
+    if ( ! q.exec( QLatin1String("CREATE TABLE msg_metadata ("
+                                 "mailbox STRING NOT NULL, "
+                                 "uid INT NOT NULL, "
+                                 "envelope BINARY, "
+                                 "size INT, "
+                                 "PRIMARY KEY (mailbox, uid)"
+                                 ")") ) ) {
+        emitError( tr("Can't create table msg_metadata"), q );
+    }
+
+    if ( ! q.exec( QLatin1String("CREATE TABLE flags ("
+                                 "mailbox STRING NOT NULL, "
+                                 "uid INT NOT NULL, "
+                                 "flags BINARY, "
+                                 "PRIMARY KEY (mailbox, uid)"
+                                 ")") ) ) {
+        emitError( tr("Can't create table flags"), q );
+    }
+
     return true;
 }
 
@@ -227,6 +246,30 @@ bool SQLCache::_prepareQueries()
         return false;
     }
 
+    queryMessageMetadata = QSqlQuery(db);
+    if ( ! queryMessageMetadata.prepare( QLatin1String("SELECT envelope, size FROM msg_metadata WHERE mailbox = ? AND uid = ?") ) ) {
+        emitError( tr("Failed to prepare queryMessageMetadata"), queryMessageMetadata );
+        return false;
+    }
+
+    querySetMessageMetadata = QSqlQuery(db);
+    if ( ! querySetMessageMetadata.prepare( QLatin1String("INSERT OR REPLACE INTO msg_metadata ( mailbox, uid, envelope, size ) VALUES ( ?, ?, ?, ? )") ) ) {
+        emitError( tr("Failed to prepare querySetMessageMetadata"), querySetMessageMetadata );
+        return false;
+    }
+
+    queryMessageFlags = QSqlQuery(db);
+    if ( ! queryMessageFlags.prepare( QLatin1String("SELECT flags FROM flags WHERE mailbox = ? AND uid = ?") ) ) {
+        emitError( tr("Failed to prepare queryMessageFlags"), queryMessageFlags );
+        return false;
+    }
+
+    querySetMessageFlags = QSqlQuery(db);
+    if ( ! querySetMessageFlags.prepare( QLatin1String("INSERT OR REPLACE INTO flags ( mailbox, uid, flags ) VALUES ( ?, ?, ? )") ) ) {
+        emitError( tr("Failed to prepare querySetMessageFlags"), querySetMessageFlags );
+        return false;
+    }
+
     return true;
 }
 
@@ -420,24 +463,65 @@ void SQLCache::clearMessage( const QString mailbox, uint uid )
 
 QStringList SQLCache::msgFlags( const QString& mailbox, uint uid ) const
 {
-    // FIXME
-    return QStringList();
+    QStringList res;
+    queryMessageFlags.bindValue( 0, mailbox.isEmpty() ? QString::fromAscii("") : mailbox );
+    queryMessageFlags.bindValue( 1, uid );
+    if ( ! queryMessageFlags.exec() ) {
+        emitError( tr("Query queryMessageFlags failed"), queryMessageFlags );
+        return res;
+    }
+    if ( queryMessageFlags.first() ) {
+        QDataStream stream( queryMessageFlags.value(0).toByteArray() );
+        stream >> res;
+    }
+    // "Not found" is not an error here
+    return res;
 }
 
 void SQLCache::setMsgFlags( const QString& mailbox, uint uid, const QStringList& flags )
 {
-    // FIXME
+    querySetMessageFlags.bindValue( 0, mailbox.isEmpty() ? QString::fromAscii("") : mailbox );
+    querySetMessageFlags.bindValue( 1, uid );
+    QByteArray buf;
+    QDataStream stream( &buf, QIODevice::ReadWrite );
+    stream << flags;
+    querySetMessageFlags.bindValue( 2, buf );
+    if ( ! querySetMessageFlags.exec() ) {
+        emitError( tr("Query querySetMessageFlags failed"), querySetMessageFlags );
+    }
 }
 
 AbstractCache::MessageDataBundle SQLCache::messageMetadata( const QString& mailbox, uint uid )
 {
-    // FIXME
-    return AbstractCache::MessageDataBundle();
+    AbstractCache::MessageDataBundle res;
+    queryMessageMetadata.bindValue( 0, mailbox.isEmpty() ? QString::fromAscii("") : mailbox );
+    queryMessageMetadata.bindValue( 1, uid );
+    if ( ! queryMessageMetadata.exec() ) {
+        emitError( tr("Query queryMessageMetadata failed"), queryMessageMetadata );
+        return res;
+    }
+    if ( queryMessageMetadata.first() ) {
+        res.uid = uid;
+        QDataStream stream( queryMessageMetadata.value(0).toByteArray() );
+        stream >> res.envelope;
+        res.size = queryMessageMetadata.value(1).toUInt();
+    }
+    // "Not found" is not an error here
+    return res;
 }
 
 void SQLCache::setMessageMetadata( const QString& mailbox, uint uid, const MessageDataBundle& metadata )
 {
-    // FIXME
+    querySetMessageMetadata.bindValue( 0, mailbox.isEmpty() ? QString::fromAscii("") : mailbox );
+    querySetMessageMetadata.bindValue( 1, uid );
+    QByteArray buf;
+    QDataStream stream( &buf, QIODevice::ReadWrite );
+    stream << metadata.envelope;
+    querySetMessageMetadata.bindValue( 2, buf );
+    querySetMessageMetadata.bindValue( 3, metadata.size );
+    if ( ! querySetMessageMetadata.exec() ) {
+        emitError( tr("Query querySetMessageMetadata failed"), querySetMessageMetadata );
+    }
 }
 
 QByteArray SQLCache::messagePart( const QString& mailbox, uint uid, const QString& partId )
diff --git a/src/Imap/Model/SQLCache.h b/src/Imap/Model/SQLCache.h
index 87257c6e..c11b74c1 100644
--- a/src/Imap/Model/SQLCache.h
+++ b/src/Imap/Model/SQLCache.h
@@ -97,6 +97,10 @@ private:
     mutable QSqlQuery queryUidMapping;
     mutable QSqlQuery querySetUidMapping;
     mutable QSqlQuery queryClearUidMapping;
+    mutable QSqlQuery queryMessageMetadata;
+    mutable QSqlQuery querySetMessageMetadata;
+    mutable QSqlQuery queryMessageFlags;
+    mutable QSqlQuery querySetMessageFlags;
 };
 
 }

