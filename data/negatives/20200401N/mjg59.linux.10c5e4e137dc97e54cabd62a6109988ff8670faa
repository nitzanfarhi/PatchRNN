commit 10c5e4e137dc97e54cabd62a6109988ff8670faa
Author: Paul Mundt <lethal@linux-sh.org>
Date:   Tue Apr 10 14:00:30 2012 +0900

    sh: kgdb: Fill out sleeping_thread_to_gdb_regs() state.
    
    Presently we're using a pretty dumbed-down implementation that copies
    over register state visible from the thread info, leaving the bulk of the
    switch_to state uncopied.
    
    Given that we're also depending on register bank toggling for switch_to
    optimization we ought to also explicitly zero out the GP regs that reside
    in an alternate bank in order to prevent handing back garbage.
    
    There are a few extra registers that we have state for in switch_to, so
    copy those over while we're at it.
    
    Signed-off-by: Paul Mundt <lethal@linux-sh.org>

diff --git a/arch/sh/kernel/kgdb.c b/arch/sh/kernel/kgdb.c
index d25b5ed68b24..ba8e76325d12 100644
--- a/arch/sh/kernel/kgdb.c
+++ b/arch/sh/kernel/kgdb.c
@@ -222,8 +222,31 @@ char *dbg_get_reg(int regno, void *mem, struct pt_regs *regs)
 
 void sleeping_thread_to_gdb_regs(unsigned long *gdb_regs, struct task_struct *p)
 {
+	struct pt_regs *thread_regs = task_pt_regs(p);
+	int reg;
+
+	/* Initialize to zero */
+	for (reg = 0; reg < DBG_MAX_REG_NUM; reg++)
+		gdb_regs[reg] = 0;
+
+	/*
+	 * Copy out GP regs 8 to 14.
+	 *
+	 * switch_to() relies on SR.RB toggling, so regs 0->7 are banked
+	 * and need privileged instructions to get to. The r15 value we
+	 * fetch from the thread info directly.
+	 */
+	for (reg = GDB_R8; reg < GDB_R15; reg++)
+		gdb_regs[reg] = thread_regs->regs[reg];
+
 	gdb_regs[GDB_R15] = p->thread.sp;
 	gdb_regs[GDB_PC] = p->thread.pc;
+
+	/*
+	 * Additional registers we have context for
+	 */
+	gdb_regs[GDB_PR] = thread_regs->pr;
+	gdb_regs[GDB_GBR] = thread_regs->gbr;
 }
 
 int kgdb_arch_handle_exception(int e_vector, int signo, int err_code,

