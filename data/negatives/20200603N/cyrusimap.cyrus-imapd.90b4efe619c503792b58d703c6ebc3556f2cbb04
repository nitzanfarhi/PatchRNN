commit 90b4efe619c503792b58d703c6ebc3556f2cbb04
Author: Bron Gondwana <brong@fastmail.fm>
Date:   Tue Jun 23 11:05:01 2015 +1000

    virusscan: make it actually compile and run

diff --git a/imap/cyr_virusscan.c b/imap/cyr_virusscan.c
index 8db6ec4fd..f7d0cb4b2 100644
--- a/imap/cyr_virusscan.c
+++ b/imap/cyr_virusscan.c
@@ -57,6 +57,7 @@
 #include "append.h"
 #include "index.h"
 #include "mailbox.h"
+#include "message.h"
 #include "xmalloc.h"
 #include "mboxlist.h"
 #include "prot.h"
@@ -80,7 +81,6 @@ struct infected_msg {
 
 struct infected_mbox {
     char *owner;
-    uint32_t recno; /* running count of which message we're scanning */
     struct infected_msg *msgs;
     struct infected_mbox *next;
 };
@@ -97,9 +97,6 @@ int notify = 0;
 struct infected_mbox *public = NULL;
 struct infected_mbox *user = NULL;
 
-/* current namespace */
-static struct namespace scan_namespace;
-
 int verbose = 1;
 
 /* abstract definition of a virus scan engine */
@@ -223,18 +220,16 @@ struct scan_engine engine = { NULL, NULL, NULL, NULL, NULL };
 
 /* forward declarations */
 int usage(char *name);
-int scan_me(char *, int, int, void *);
+int scan_me(const char *, int, int, void *);
 unsigned virus_check(struct mailbox *mailbox,
-                     struct index_record *record,
+                     const struct index_record *record,
                      void *rock);
 void append_notifications();
 
 
 int main (int argc, char *argv[]) {
     int option;         /* getopt() returns an int */
-    char buf[MAX_MAILBOX_PATH+1];
     char *alt_config = NULL;
-    int r;
 
     if ((geteuid()) == 0 && (become_cyrus(/*is_master*/0) != 0)) {
         fatal("must run as the Cyrus user", EC_USAGE);
@@ -269,12 +264,6 @@ int main (int argc, char *argv[]) {
 
     engine.state = engine.init();
 
-    /* Set namespace -- force standard (internal) */
-    if ((r = mboxname_init_namespace(&scan_namespace, 1)) != 0) {
-        syslog(LOG_ERR, "%s", error_message(r));
-        fatal(error_message(r), EC_CONFIG);
-    }
-
     mboxlist_init(0);
     mboxlist_open(NULL);
 
@@ -286,22 +275,16 @@ int main (int argc, char *argv[]) {
 
     /* setup for mailbox event notifications */
     mboxevent_init();
-    mboxevent_setnamespace(&scan_namespace);
 
     if (optind == argc) { /* do the whole partition */
-        strcpy(buf, "*");
-        (*scan_namespace.mboxlist_findall)(&scan_namespace, buf, 1, 0, 0,
-                                           scan_me, NULL);
+        mboxlist_findall(NULL, "*", 1, 0, 0, scan_me, NULL);
     } else {
+        strarray_t *array = strarray_new();
         for (; optind < argc; optind++) {
-            strncpy(buf, argv[optind], MAX_MAILBOX_BUFFER);
-            /* Translate any separators in mailboxname */
-            mboxname_hiersep_tointernal(&scan_namespace, buf,
-                                        config_virtdomains ?
-                                        strcspn(buf, "@") : 0);
-            (*scan_namespace.mboxlist_findall)(&scan_namespace, buf, 1, 0, 0,
-                                               scan_me, NULL);
+            strarray_append(array, argv[optind]);
         }
+        mboxlist_findallmulti(NULL, array, 1, 0, 0, scan_me, NULL);
+        strarray_free(array);
     }
 
     if (notify) append_notifications();
@@ -331,8 +314,7 @@ int usage(char *name)
     exit(0);
 }
 
-/* we don't check what comes in on matchlen and maycreate, should we? */
-int scan_me(char *name,
+int scan_me(const char *name,
             int matchlen __attribute__((unused)),
             int maycreate __attribute__((unused)),
             void *rock __attribute__((unused)))
@@ -342,34 +324,24 @@ int scan_me(char *name,
     struct infected_mbox *i_mbox = NULL;
 
     if (verbose) {
-        char mboxname[MAX_MAILBOX_BUFFER];
-
-        /* Convert internal name to external */
-        (*scan_namespace.mboxname_toexternal)(&scan_namespace, name,
-                                             "cyrus", mboxname);
-        printf("Working on %s...\n", mboxname);
+        printf("Working on %s...\n", name);
     }
 
     r = mailbox_open_iwl(name, &mailbox);
-    if (r) { /* did we find it? */
-        syslog(LOG_ERR, "Couldn't find %s, check spelling", name);
+    if (r) {
+        printf("failed to open %s (%s)\n", name, error_message(r));
         return 0;
     }
 
     if (notify) {
-        /* XXX  Need to handle virtdomains */
-        if (!strncmp(name, "user.", 5)) {
-            size_t ownerlen;
-
-            if (user && (ownerlen = strlen(user->owner)) &&
-                !strncmp(name, user->owner, ownerlen) &&
-                (name[ownerlen] == '.' || name[ownerlen] =='\0')) {
-                /* mailbox belongs to current owner */
+        const char *owner = mboxname_to_userid(name);
+        if (owner) {
+            if (!strcmp(owner, user->owner)) {
                 i_mbox = user;
             } else {
                 /* new owner (Inbox) */
                 struct infected_mbox *new = xzmalloc(sizeof(struct infected_mbox));
-                new->owner = xstrdup(name);
+                new->owner = xstrdup(owner);
                 new->next = user;
                 i_mbox = user = new;
             }
@@ -384,8 +356,6 @@ int scan_me(char *name,
             i_mbox = public;
         }
 #endif
-
-        if (i_mbox) i_mbox->recno = 1;
     }
 
     mailbox_expunge(mailbox, virus_check, i_mbox, NULL, EVENT_MESSAGE_EXPUNGE);
@@ -394,22 +364,19 @@ int scan_me(char *name,
     return 0;
 }
 
-void create_digest(struct infected_mbox *i_mbox, struct mailbox *mbox,
-                   uint32_t recno, unsigned long uid, const char *virname)
+void create_digest(struct infected_mbox *i_mbox, struct mailbox *mailbox,
+                   const struct index_record *record, const char *virname)
 {
-    struct infected_msg *i_msg = xmalloc(sizeof(struct infected_msg));
-    struct nntp_overview *over;
+    struct infected_msg *i_msg = xzmalloc(sizeof(struct infected_msg));
 
-    i_msg->mboxname = xstrdup(mbox->name);
+    i_msg->mboxname = xstrdup(mailbox->name);
     i_msg->virname = xstrdup(virname);
-    i_msg->uid= uid;
+    i_msg->uid = record->uid;
 
-    index_operatemailbox(mbox);
-    over = index_overview(mbox, recno);
-    i_msg->msgid = strdup(over->msgid);
-    i_msg->date = strdup(over->date);
-    i_msg->from = strdup(over->from);
-    i_msg->subj = strdup(over->subj);
+    i_msg->msgid = mailbox_cache_get_env(mailbox, record, ENV_MSGID);
+    i_msg->date = mailbox_cache_get_env(mailbox, record, ENV_DATE);
+    i_msg->from = mailbox_cache_get_env(mailbox, record, ENV_FROM);
+    i_msg->subj = mailbox_cache_get_env(mailbox, record, ENV_SUBJECT);
 
     i_msg->next = i_mbox->msgs;
     i_mbox->msgs = i_msg;
@@ -418,29 +385,26 @@ void create_digest(struct infected_mbox *i_mbox, struct mailbox *mbox,
 /* thumbs up routine, checks for virus and returns yes or no for deletion */
 /* 0 = no, 1 = yes */
 unsigned virus_check(struct mailbox *mailbox,
-                     struct index_record *record,
+                     const struct index_record *record,
                      void *deciderock)
 {
     struct infected_mbox *i_mbox = (struct infected_mbox *) deciderock;
-    char *fname;
     const char *virname;
     int r = 0;
 
-    fname = mailbox_record_fname(mailbox, record);
+    const char *fname = mailbox_record_fname(mailbox, record);
 
     if ((r = engine.scanfile(engine.state, fname, &virname))) {
         if (verbose) {
-            printf("Virus detected in message %lu: %s\n", record->uid, virname);
+            printf("Virus detected in message %u: %s\n", record->uid, virname);
         }
         if (disinfect) {
             if (notify && i_mbox) {
-                create_digest(i_mbox, mailbox, i_mbox->recno, record->uid, virname);
+                create_digest(i_mbox, mailbox, record, virname);
             }
         }
     }
 
-    if (i_mbox) i_mbox->recno++;
-
     return r;
 }
 
diff --git a/imap/index.c b/imap/index.c
index 16c5ac3a0..ee9537125 100644
--- a/imap/index.c
+++ b/imap/index.c
@@ -6174,7 +6174,7 @@ EXPORTED char *index_get_msgid(struct index_state *state,
     if (index_reload_record(state, msgno, &record))
         return NULL;
 
-    return mailbox_cache_get_msgid(mailbox, &record);
+    return mailbox_cache_get_env(mailbox, &record, ENV_MSGID);
 }
 
 static void massage_header(char *hdr)
diff --git a/imap/mailbox.c b/imap/mailbox.c
index 3a9a68f4e..9ac771588 100644
--- a/imap/mailbox.c
+++ b/imap/mailbox.c
@@ -499,12 +499,13 @@ static int cache_parserecord(struct mappedfile *cachefile, size_t cache_offset,
     return 0;
 }
 
-char *mailbox_cache_get_msgid(struct mailbox *mailbox,
-                              struct index_record *record)
+EXPORTED char *mailbox_cache_get_env(struct mailbox *mailbox,
+                                     const struct index_record *record,
+                                     int token)
 {
     char *env;
     char *envtokens[NUMENVTOKENS];
-    char *msgid;
+    char *field;
 
     if (mailbox_cacherecord(mailbox, record))
         return NULL;
@@ -512,7 +513,7 @@ char *mailbox_cache_get_msgid(struct mailbox *mailbox,
     if (cacheitem_size(record, CACHE_ENVELOPE) <= 2)
         return NULL;
 
-    /* get msgid out of the envelope
+    /* get field out of the envelope
      *
      * get a working copy; strip outer ()'s
      * +1 -> skip the leading paren
@@ -522,12 +523,12 @@ char *mailbox_cache_get_msgid(struct mailbox *mailbox,
                    cacheitem_size(record, CACHE_ENVELOPE) - 2);
     parse_cached_envelope(env, envtokens, VECTOR_SIZE(envtokens));
 
-    msgid = envtokens[ENV_MSGID] ? xstrdup(envtokens[ENV_MSGID]) : NULL;
+    field = xstrdupnull(envtokens[token]);
 
     /* free stuff */
     free(env);
 
-    return msgid;
+    return field;
 }
 
 EXPORTED int mailbox_index_islocked(struct mailbox *mailbox, int write)
diff --git a/imap/mailbox.h b/imap/mailbox.h
index b7de4bc2c..64c108192 100644
--- a/imap/mailbox.h
+++ b/imap/mailbox.h
@@ -494,8 +494,9 @@ extern int mailbox_map_record(struct mailbox *mailbox, const struct index_record
 /* cache record API */
 int mailbox_cacherecord(struct mailbox *mailbox,
                         const struct index_record *record);
-char *mailbox_cache_get_msgid(struct mailbox *mailbox,
-                              struct index_record *record);
+char *mailbox_cache_get_env(struct mailbox *mailbox,
+                            const struct index_record *record,
+                            int field);
 
 /* field-based lookup functions */
 const char *cacheitem_base(const struct index_record *record, int field);
diff --git a/imap/mboxevent.c b/imap/mboxevent.c
index d2126ab91..e9ab81090 100644
--- a/imap/mboxevent.c
+++ b/imap/mboxevent.c
@@ -815,7 +815,7 @@ EXPORTED void mboxevent_extract_record(struct mboxevent *event, struct mailbox *
 
     /* add Message-Id to midset or NIL if doesn't exists */
     if (mboxevent_expected_param(event->type, (EVENT_MIDSET))) {
-        msgid = mailbox_cache_get_msgid(mailbox, record);
+        msgid = mailbox_cache_get_env(mailbox, record, ENV_MSGID);
         strarray_add(&event->midset, msgid ? msgid : "NIL");
 
         if (msgid)

