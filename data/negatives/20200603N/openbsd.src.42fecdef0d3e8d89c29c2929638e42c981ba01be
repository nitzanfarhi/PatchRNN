commit 42fecdef0d3e8d89c29c2929638e42c981ba01be
Author: otto <otto@openbsd.org>
Date:   Thu Nov 22 11:01:04 2007 +0000

    Diff from Mark Lumsden: cleanup of reading strings and numbers, to
    make sure command line args and interactive reading of numbers use the
    same code. More concrete, interactive use of 'd' and 'n' now also
    interpret 'max', 'infinite' and 'all' and handle non-numbers
    correctly. tested by a few

diff --git a/usr.bin/top/display.c b/usr.bin/top/display.c
index 51fb3918399..c167ebd57bf 100644
--- a/usr.bin/top/display.c
+++ b/usr.bin/top/display.c
@@ -1,4 +1,4 @@
-/* $OpenBSD: display.c,v 1.31 2007/11/01 19:10:32 otto Exp $	 */
+/* $OpenBSD: display.c,v 1.32 2007/11/22 11:01:04 otto Exp $	 */
 
 /*
  *  Top users/processes display for Unix
@@ -74,7 +74,7 @@ static int      display_width = MAX_COLS;
 static char    *cpustates_tag(int);
 static int      string_count(char **);
 static void     summary_format(char *, size_t, int *, char **);
-static int	readlinedumb(char *, int, int);
+static int	readlinedumb(char *, int);
 
 #define lineindex(l) ((l)*display_width)
 
@@ -559,7 +559,7 @@ clear_message(void)
 
 
 static int
-readlinedumb(char *buffer, int size, int numeric)
+readlinedumb(char *buffer, int size)
 {
 	char *ptr = buffer, ch, cnt = 0, maxcnt = 0;
 	extern volatile sig_atomic_t leaveflag;
@@ -600,8 +600,7 @@ readlinedumb(char *buffer, int size, int numeric)
 			}
 		}
 		/* check for character validity and buffer overflow */
-		else if (cnt == size || (numeric && !isdigit(ch)) ||
-		    !isprint(ch)) {
+		else if (cnt == size || !isprint(ch)) {
 			/* not legal */
 			if (putchar('\7') == EOF)
 				exit(1);
@@ -621,11 +620,11 @@ readlinedumb(char *buffer, int size, int numeric)
 
 	/* return either inputted number or string length */
 	putr();
-	return (cnt == 0 ? -1 : numeric ? atoi(buffer) : cnt);
+	return (cnt == 0 ? -1 : cnt);
 }
 
 int
-readline(char *buffer, int size, int numeric)
+readline(char *buffer, int size)
 {
 	size_t cnt;
 
@@ -635,12 +634,12 @@ readline(char *buffer, int size, int numeric)
 	if (smart_terminal)
 		getnstr(buffer, size);
 	else
-		return readlinedumb(buffer, size, numeric);
+		return readlinedumb(buffer, size);
 
 	cnt = strlen(buffer);
 	if (cnt > 0 && buffer[cnt - 1] == '\n')
 		buffer[cnt - 1] = '\0';
-	return (cnt == 0 ? -1 : numeric ? atoi(buffer) : cnt);
+	return (cnt == 0 ? -1 : cnt);
 }
 
 /* internal support routines */
diff --git a/usr.bin/top/display.h b/usr.bin/top/display.h
index 1bb4437d7f8..5e23c3aa3b9 100644
--- a/usr.bin/top/display.h
+++ b/usr.bin/top/display.h
@@ -1,4 +1,4 @@
-/*	$OpenBSD: display.h,v 1.10 2007/07/27 13:59:27 deraadt Exp $	*/
+/*	$OpenBSD: display.h,v 1.11 2007/11/22 11:01:04 otto Exp $	*/
 
 /*
  *  Top users/processes display for Unix
@@ -54,7 +54,7 @@ void u_endscreen(void);
 void display_header(int);
 void new_message(int, const char *, ...);
 void clear_message(void);
-int readline(char *, int, int);
+int readline(char *, int);
 char *printable(char *);
 void show_help(void);
 void anykey(void);
diff --git a/usr.bin/top/top.c b/usr.bin/top/top.c
index 4c0599e66fb..03d7329c6b3 100644
--- a/usr.bin/top/top.c
+++ b/usr.bin/top/top.c
@@ -1,4 +1,4 @@
-/*	$OpenBSD: top.c,v 1.62 2007/11/06 06:56:59 otto Exp $	*/
+/*	$OpenBSD: top.c,v 1.63 2007/11/22 11:01:04 otto Exp $	*/
 
 /*
  *  Top users/processes display for Unix
@@ -431,6 +431,15 @@ restart:
 		/* update the header area */
 		i_header(header_text);
 
+		if (topn == Infinity) {
+#if Default_TOPN == Infinity
+			topn = smart_terminal ? Largest :
+			    (topn_specified ? Largest : Nominal_TOPN);
+#else
+			topn = Largest;
+#endif
+		}
+
 		if (topn > 0) {
 			/* determine number of processes to actually display */
 			/*
@@ -577,7 +586,6 @@ rundisplay(void)
 	    !(pfd[0].revents & (POLLERR|POLLHUP|POLLNVAL))) {
 		char *errmsg;
 		ssize_t len;
-		int newval;
 
 		clear_message();
 
@@ -650,28 +658,37 @@ rundisplay(void)
 		case CMD_number2:
 			new_message(MT_standout,
 			    "Number of processes to show: ");
-			newval = readline(tempbuf, 8, Yes);
-			if (newval > -1) {
-				if (newval > max_topn) {
-					new_message(MT_standout | MT_delayed,
-					    " This terminal can only "
-					    "display %d processes.",
-					    max_topn);
-					putr();
-				}
-				if (newval == 0)
-					display_header(No);
-				else if (newval > topn && topn == 0) {
-					/* redraw the header */
-					display_header(Yes);
+
+			if (readline(tempbuf, 8) > 0) {
+				char *ptr;
+				ptr = tempbuf;
+				if ((i = atoiwi(ptr)) != Invalid) {
+					if (i > max_topn) {
+						new_message(MT_standout | MT_delayed,
+						    " This terminal can only "
+						    "display %d processes.",
+						    max_topn);
+						putr();
+					} else if (i == 0)
+						display_header(No);
+					else if ((i > topn || i == -1) && topn == 0) {
+						/* redraw the header */
+						display_header(Yes);
+					}
+					topn = i;
+				} else {
+					new_message(MT_standout,
+					    "Processes should be a non-negative number");
+ 					putr();
+					no_command = Yes;
 				}
-				topn = newval;
-			}
+			} else
+				clear_message();
 			break;
 
 		case CMD_delay:	/* new seconds delay */
 			new_message(MT_standout, "Seconds to delay: ");
-			if (readline(tempbuf, sizeof(tempbuf), No) > 0) {
+			if (readline(tempbuf, sizeof(tempbuf)) > 0) {
 				char *endp;
 				double newdelay = strtod(tempbuf, &endp);
 
@@ -694,17 +711,27 @@ rundisplay(void)
 			    "Displays to show (currently %s): ",
 			    displays == -1 ? "infinite" :
 			    itoa(displays));
-			if ((i = readline(tempbuf, 10, Yes)) > 0)
-				displays = i;
-			else if (i == 0)
-				quit(0);
 
-			clear_message();
+			if (readline(tempbuf, 10) > 0) {
+				char *ptr;
+				ptr = tempbuf;				
+				if ((i = atoiwi(ptr)) != Invalid) {
+					if (i == 0)
+						quit(0);
+					displays = i;
+				} else {
+					new_message(MT_standout,
+					    "Displays should be a non-negative number");
+					putr();
+					no_command = Yes;
+				}
+			} else
+				clear_message();
 			break;
 
 		case CMD_kill:	/* kill program */
 			new_message(0, "kill ");
-			if (readline(tempbuf, sizeof(tempbuf), No) > 0) {
+			if (readline(tempbuf, sizeof(tempbuf)) > 0) {
 				if ((errmsg = kill_procs(tempbuf)) != NULL) {
 					new_message(MT_standout, "%s", errmsg);
 					putr();
@@ -716,7 +743,7 @@ rundisplay(void)
 
 		case CMD_renice:	/* renice program */
 			new_message(0, "renice ");
-			if (readline(tempbuf, sizeof(tempbuf), No) > 0) {
+			if (readline(tempbuf, sizeof(tempbuf)) > 0) {
 				if ((errmsg = renice_procs(tempbuf)) != NULL) {
 					new_message(MT_standout, "%s", errmsg);
 					putr();
@@ -738,7 +765,7 @@ rundisplay(void)
 		case CMD_user:
 			new_message(MT_standout,
 			    "Username to show: ");
-			if (readline(tempbuf, sizeof(tempbuf), No) > 0) {
+			if (readline(tempbuf, sizeof(tempbuf)) > 0) {
 				if (tempbuf[0] == '+' &&
 				    tempbuf[1] == '\0') {
 					ps.uid = (uid_t)-1;
@@ -764,7 +791,7 @@ rundisplay(void)
 		case CMD_order:
 			new_message(MT_standout,
 			    "Order to sort: ");
-			if (readline(tempbuf, sizeof(tempbuf), No) > 0) {
+			if (readline(tempbuf, sizeof(tempbuf)) > 0) {
 				if ((i = string_index(tempbuf,
 				    statics.order_names)) == -1) {
 					new_message(MT_standout,
@@ -780,7 +807,7 @@ rundisplay(void)
 
 		case CMD_pid:
 			new_message(MT_standout, "Process ID to show: ");
-			if (readline(tempbuf, sizeof(tempbuf), No) > 0) {
+			if (readline(tempbuf, sizeof(tempbuf)) > 0) {
 				if (tempbuf[0] == '+' &&
 				    tempbuf[1] == '\0') {
 					ps.pid = (pid_t)-1;
@@ -823,7 +850,7 @@ rundisplay(void)
 		case CMD_grep:
 			new_message(MT_standout,
 			    "Grep command name: ");
-			if (readline(tempbuf, sizeof(tempbuf), No) > 0) {
+			if (readline(tempbuf, sizeof(tempbuf)) > 0) {
 				free(ps.command);
 				if (tempbuf[0] == '+' &&
 				    tempbuf[1] == '\0')
@@ -837,7 +864,7 @@ rundisplay(void)
 
 		case CMD_hl:
 			new_message(MT_standout, "Process ID to highlight: ");
-			if (readline(tempbuf, sizeof(tempbuf), No) > 0) {
+			if (readline(tempbuf, sizeof(tempbuf)) > 0) {
 				if (tempbuf[0] == '+' &&
 				    tempbuf[1] == '\0') {
 					hlpid = -1;

