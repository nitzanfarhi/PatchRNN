commit 74cddaedcf0f6333ca625f6411c4f4b043b3eaa5
Author: Edwin Smith <smith@fb.com>
Date:   Sat Sep 20 16:25:07 2014 -0700

    Convert cgInstanceOf() and cgLdClsCtx() to SSA
    
    Reviewed By: @alexmalyshev
    
    Differential Revision: D1568392

diff --git a/hphp/runtime/vm/jit/code-gen-helpers-x64.cpp b/hphp/runtime/vm/jit/code-gen-helpers-x64.cpp
index 6bf506aa69..c2387b2f4e 100644
--- a/hphp/runtime/vm/jit/code-gen-helpers-x64.cpp
+++ b/hphp/runtime/vm/jit/code-gen-helpers-x64.cpp
@@ -242,15 +242,17 @@ void emitLea(Asm& as, MemoryRef mr, PhysReg dst) {
   }
 }
 
-void emitLdObjClass(Vout& v, Vreg objReg, Vreg dstReg) {
+Vreg emitLdObjClass(Vout& v, Vreg objReg, Vreg dstReg) {
   emitLdLowPtr(v, objReg[ObjectData::getVMClassOffset()],
                dstReg, sizeof(LowClassPtr));
+  return dstReg;
 }
 
-void emitLdClsCctx(Vout& v, Vreg srcReg, Vreg dstReg) {
+Vreg emitLdClsCctx(Vout& v, Vreg srcReg, Vreg dstReg) {
   auto t = v.makeReg();
   v << copy{srcReg, t};
   v << decq{t, dstReg};
+  return dstReg;
 }
 
 void emitCall(Asm& a, TCA dest, RegSet args) {
diff --git a/hphp/runtime/vm/jit/code-gen-helpers-x64.h b/hphp/runtime/vm/jit/code-gen-helpers-x64.h
index 0d7be77b84..6295c01dde 100644
--- a/hphp/runtime/vm/jit/code-gen-helpers-x64.h
+++ b/hphp/runtime/vm/jit/code-gen-helpers-x64.h
@@ -66,8 +66,8 @@ void emitAssertRefCount(Vout&, Vreg base);
 void emitMovRegReg(Asm& as, PhysReg srcReg, PhysReg dstReg);
 void emitLea(Asm& as, MemoryRef mr, PhysReg dst);
 
-void emitLdObjClass(Vout&, Vreg objReg, Vreg dstReg);
-void emitLdClsCctx(Vout&, Vreg srcReg, Vreg dstReg);
+Vreg emitLdObjClass(Vout&, Vreg objReg, Vreg dstReg);
+Vreg emitLdClsCctx(Vout&, Vreg srcReg, Vreg dstReg);
 
 void emitCall(Asm& as, TCA dest, RegSet args);
 void emitCall(Asm& as, CppCall call, RegSet args);
diff --git a/hphp/runtime/vm/jit/code-gen-x64.cpp b/hphp/runtime/vm/jit/code-gen-x64.cpp
index c3790a320b..c663798804 100644
--- a/hphp/runtime/vm/jit/code-gen-x64.cpp
+++ b/hphp/runtime/vm/jit/code-gen-x64.cpp
@@ -1937,27 +1937,31 @@ void CodeGenerator::cgSideExitJmpNInstanceOfBitmask(IRInstruction* inst) {
 }
 
 void CodeGenerator::cgInstanceOf(IRInstruction* inst) {
+  auto test = inst->src(1);
   auto testReg = srcLoc(1).reg();
   auto destReg = dstLoc(0).reg();
   auto& v = vmain();
 
-  if (testReg == InvalidReg) {
+  auto call_classof = [&](Vreg dst) {
+    cgCallHelper(v, CppCall::method(&Class::classof),
+    callDest(dst), SyncOptions::kNoSyncPoint, argGroup().ssa(0).ssa(1));
+    return dst;
+  };
+
+  if (test->isConst()) {
     // Don't need to do the null check when the class is const.
-    assert(inst->src(1)->clsVal() != nullptr);
-    cgCallNative(v, inst);
+    assert(test->clsVal() != nullptr);
+    call_classof(destReg);
     return;
   }
 
   v << testq{testReg, testReg};
-  ifThenElse(v, CC_NZ,
-    [&](Vout& v) {
-      cgCallNative(v, inst);
-    },
-    [&](Vout& v) {
-      // testReg == 0, set dest to false (0)
-      v << copy{testReg, destReg};
-    }
-  );
+  cond(v, CC_NZ, destReg, [&](Vout& v) {
+    return call_classof(v.makeReg());
+  }, [&](Vout& v) {
+    // testReg == 0, set dest to false (0)
+    return testReg;
+  });
 }
 
 /*
@@ -3679,10 +3683,12 @@ void CodeGenerator::cgLdClsCtx(IRInstruction* inst) {
   // Context could be either a this object or a class ptr
   auto& v = vmain();
   v << testbi{1, srcReg};
-  ifThenElse(v, CC_NZ,
-    [&](Vout& v) { emitLdClsCctx(v, srcReg, dstReg);  }, // ctx is a class
-    [&](Vout& v) { emitLdObjClass(v, srcReg, dstReg); }  // ctx is this ptr
-  );
+  cond(v, CC_NZ, dstReg,
+    [&](Vout& v) { // ctx is a class
+      return emitLdClsCctx(v, srcReg, v.makeReg());
+    }, [&](Vout& v) { // ctx is this ptr
+      return emitLdObjClass(v, srcReg, v.makeReg());
+    });
 }
 
 void CodeGenerator::cgLdClsCctx(IRInstruction* inst) {

