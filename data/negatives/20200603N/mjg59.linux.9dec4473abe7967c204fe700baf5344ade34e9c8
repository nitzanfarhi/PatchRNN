commit 9dec4473abe7967c204fe700baf5344ade34e9c8
Author: Andi Kleen <ak@linux.intel.com>
Date:   Fri Feb 26 16:27:56 2016 -0800

    perf stat: Check existence of frontend/backed stalled cycles
    
    Only put the frontend/backend stalled cycles into the default perf stat
    events when the CPU actually supports them.
    
    This avoids empty columns with --metric-only on newer Intel CPUs.
    
    Committer note:
    
    Before:
    
      $ perf stat ls
    
        Performance counter stats for 'ls':
    
              1.080893     task-clock (msec)      #    0.619 CPUs utilized
                     0     context-switches       #    0.000 K/sec
                     0     cpu-migrations         #    0.000 K/sec
                    97     page-faults            #    0.090 M/sec
             3,327,741     cycles                 #    3.079 GHz
       <not supported>     stalled-cycles-frontend
       <not supported>     stalled-cycles-backend
             1,609,544     instructions           #    0.48  insn per cycle
               319,117     branches               #  295.235 M/sec
                12,246     branch-misses          #    3.84% of all branches
    
           0.001746508 seconds time elapsed
      $
    
    After:
    
      $ perf stat ls
    
        Performance counter stats for 'ls':
    
              0.693948     task-clock (msec)      #    0.662 CPUs utilized
                     0     context-switches       #    0.000 K/sec
                     0     cpu-migrations         #    0.000 K/sec
                    95     page-faults            #    0.137 M/sec
             1,792,509     cycles                 #    2.583 GHz
             1,599,047     instructions           #    0.89  insn per cycle
               316,328     branches               #  455.838 M/sec
                12,453     branch-misses          #    3.94% of all branches
    
           0.001048987 seconds time elapsed
      $
    
    Signed-off-by: Andi Kleen <ak@linux.intel.com>
    Acked-by: Jiri Olsa <jolsa@kernel.org>
    Tested-by: Arnaldo Carvalho de Melo <acme@redhat.com>
    Cc: Stephane Eranian <eranian@google.com>
    Link: http://lkml.kernel.org/r/1456532881-26621-2-git-send-email-andi@firstfloor.org
    Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>

diff --git a/tools/perf/builtin-stat.c b/tools/perf/builtin-stat.c
index 8c0bc0fe5179..24f222dd2a8a 100644
--- a/tools/perf/builtin-stat.c
+++ b/tools/perf/builtin-stat.c
@@ -1441,7 +1441,7 @@ static int perf_stat_init_aggr_mode_file(struct perf_stat *st)
  */
 static int add_default_attributes(void)
 {
-	struct perf_event_attr default_attrs[] = {
+	struct perf_event_attr default_attrs0[] = {
 
   { .type = PERF_TYPE_SOFTWARE, .config = PERF_COUNT_SW_TASK_CLOCK		},
   { .type = PERF_TYPE_SOFTWARE, .config = PERF_COUNT_SW_CONTEXT_SWITCHES	},
@@ -1449,8 +1449,14 @@ static int add_default_attributes(void)
   { .type = PERF_TYPE_SOFTWARE, .config = PERF_COUNT_SW_PAGE_FAULTS		},
 
   { .type = PERF_TYPE_HARDWARE, .config = PERF_COUNT_HW_CPU_CYCLES		},
+};
+	struct perf_event_attr frontend_attrs[] = {
   { .type = PERF_TYPE_HARDWARE, .config = PERF_COUNT_HW_STALLED_CYCLES_FRONTEND	},
+};
+	struct perf_event_attr backend_attrs[] = {
   { .type = PERF_TYPE_HARDWARE, .config = PERF_COUNT_HW_STALLED_CYCLES_BACKEND	},
+};
+	struct perf_event_attr default_attrs1[] = {
   { .type = PERF_TYPE_HARDWARE, .config = PERF_COUNT_HW_INSTRUCTIONS		},
   { .type = PERF_TYPE_HARDWARE, .config = PERF_COUNT_HW_BRANCH_INSTRUCTIONS	},
   { .type = PERF_TYPE_HARDWARE, .config = PERF_COUNT_HW_BRANCH_MISSES		},
@@ -1567,7 +1573,19 @@ static int add_default_attributes(void)
 	}
 
 	if (!evsel_list->nr_entries) {
-		if (perf_evlist__add_default_attrs(evsel_list, default_attrs) < 0)
+		if (perf_evlist__add_default_attrs(evsel_list, default_attrs0) < 0)
+			return -1;
+		if (pmu_have_event("cpu", "stalled-cycles-frontend")) {
+			if (perf_evlist__add_default_attrs(evsel_list,
+						frontend_attrs) < 0)
+				return -1;
+		}
+		if (pmu_have_event("cpu", "stalled-cycles-backend")) {
+			if (perf_evlist__add_default_attrs(evsel_list,
+						backend_attrs) < 0)
+				return -1;
+		}
+		if (perf_evlist__add_default_attrs(evsel_list, default_attrs1) < 0)
 			return -1;
 	}
 

