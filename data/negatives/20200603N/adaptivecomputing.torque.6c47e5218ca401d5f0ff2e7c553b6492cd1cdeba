commit 6c47e5218ca401d5f0ff2e7c553b6492cd1cdeba
Author: David Beer <dbeer@adaptivecomputing.com>
Date:   Fri Jul 12 10:06:12 2013 -0600

    Make the $PBSAPITIMEOUT functionality work the same for when we are trying to get the active pbs_server from trqauthd. TRQ-2035.

diff --git a/src/lib/Libifl/trq_auth.c b/src/lib/Libifl/trq_auth.c
index db03b27e5..4bef63a2f 100644
--- a/src/lib/Libifl/trq_auth.c
+++ b/src/lib/Libifl/trq_auth.c
@@ -119,13 +119,21 @@ int get_active_pbs_server(
   int       local_socket;
   int       rc;
   char     *timeout_ptr;
+  bool      retry = true;
+  int       retries = 0;
 
   if ((timeout_ptr = getenv("PBSAPITIMEOUT")) != NULL)
     {
     time_t tmp_timeout = strtol(timeout_ptr, NULL, 0);
 
     if (tmp_timeout > 0)
+      {
       pbs_tcp_timeout = tmp_timeout;
+
+      if (tmp_timeout > 2)
+        retry = false;
+      }
+
     }
 
   /* the syntax for this call is a number followed by a | (pipe). The pipe indicates 
@@ -149,8 +157,14 @@ int get_active_pbs_server(
     return(PBSE_SYSTEM);
     }
 
-  rc = socket_read_str(local_socket, &read_buf, &read_buf_len);
-  if (rc != PBSE_NONE) 
+  do
+    {
+    rc = socket_read_str(local_socket, &read_buf, &read_buf_len);
+    if (rc == PBSE_NONE) 
+      break;
+    } while ((retry == true) && (++retries <= 5));
+
+  if (rc != PBSE_NONE)
     return(rc);
 
   if (read_buf_len == 0)
diff --git a/src/lib/Libnet/net_common.c b/src/lib/Libnet/net_common.c
index e32e04e52..edecedf1a 100644
--- a/src/lib/Libnet/net_common.c
+++ b/src/lib/Libnet/net_common.c
@@ -808,10 +808,11 @@ int socket_read_num(
       break;
     }
 
-  if (str_ll[0] == '\0')
+  if ((str_ll[0] == '\0') &&
+      (rc == PBSE_INTERNAL))
     rc = PBSE_SOCKET_READ;
 
-  return rc;
+  return(rc);
   } /* END socket_read_num() */
 
 

