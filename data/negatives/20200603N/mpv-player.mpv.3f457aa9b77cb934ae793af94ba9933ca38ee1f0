commit 3f457aa9b77cb934ae793af94ba9933ca38ee1f0
Author: alex <alex@b3059339-0415-0410-9bf9-f77b7e298cf2>
Date:   Thu Jul 11 19:16:30 2002 +0000

    support for external pp by divx4. some fixes/cosmetics?
    
    
    git-svn-id: svn://svn.mplayerhq.hu/mplayer/trunk@6709 b3059339-0415-0410-9bf9-f77b7e298cf2

diff --git a/libmpcodecs/vd.h b/libmpcodecs/vd.h
index 05da2ed4bf..c0be79ace5 100644
--- a/libmpcodecs/vd.h
+++ b/libmpcodecs/vd.h
@@ -26,3 +26,4 @@ extern int vd_use_slices;
 int mpcodecs_config_vo(sh_video_t *sh, int w, int h, unsigned int preferred_outfmt);
 mp_image_t* mpcodecs_get_image(sh_video_t *sh, int mp_imgtype, int mp_imgflag, int w, int h);
 
+#define VDFLAGS_DROPFRAME 3
diff --git a/libmpcodecs/vd_divx4.c b/libmpcodecs/vd_divx4.c
index 9d9c63e38f..b0023000b8 100644
--- a/libmpcodecs/vd_divx4.c
+++ b/libmpcodecs/vd_divx4.c
@@ -33,9 +33,12 @@ LIBVD_EXTERN(divx4)
 #include <decore.h>
 #endif
 
+#define USE_DIVX_BUILTIN_PP
+
 // to set/get/query special features/parameters
 static int control(sh_video_t *sh,int cmd,void* arg,...){
     switch(cmd){
+#ifdef USE_DIVX_BUILTIN_PP
     case VDCTRL_QUERY_MAX_PP_LEVEL:
 	return 9; // for divx4linux
     case VDCTRL_SET_PP_LEVEL: {
@@ -46,6 +49,7 @@ static int control(sh_video_t *sh,int cmd,void* arg,...){
 	decore(0x123,DEC_OPT_SETPP,&dec_set,NULL);
 	return CONTROL_OK;
     }
+#endif
 #ifdef DECORE_VERSION
 #if DECORE_VERSION >= 20011010
     case VDCTRL_SET_EQUALIZER: {
@@ -127,8 +131,10 @@ static int init(sh_video_t *sh){
     dec_param.y_dim = sh->disp_h;
     decore(0x123, DEC_OPT_INIT, &dec_param, NULL);
 
+#ifdef USE_DIVX_BUILTIN_PP
     dec_set.postproc_level = divx_quality;
     decore(0x123, DEC_OPT_SETPP, &dec_set, NULL);
+#endif
     
     mp_msg(MSGT_DECVIDEO,MSGL_V,"INFO: DivX4Linux video codec init OK!\n");
 
@@ -146,12 +152,15 @@ static void uninit(sh_video_t *sh){
 static mp_image_t* decode(sh_video_t *sh,void* data,int len,int flags){
     mp_image_t* mpi;
     DEC_FRAME dec_frame;
+#ifndef USE_DIVX_BUILTIN_PP
+    DEC_FRAME_INFO frameinfo;
+#endif
 
     if(len<=0) return NULL; // skipped frame
 
     dec_frame.length = len;
     dec_frame.bitstream = data;
-    dec_frame.render_flag = (flags&3)?0:1;
+    dec_frame.render_flag = (flags&VDFLAGS_DROPFRAME)?0:1;
 
     mpi=mpcodecs_get_image(sh, MP_IMGTYPE_TEMP, MP_IMGFLAG_PRESERVE | MP_IMGFLAG_ACCEPT_WIDTH,
 	sh->disp_w, sh->disp_h);
@@ -159,16 +168,27 @@ static mp_image_t* decode(sh_video_t *sh,void* data,int len,int flags){
 
     dec_frame.bmp=mpi->planes[0];
     dec_frame.stride=mpi->width;
-    
+
+    decore(0x123,
 #ifndef DEC_OPT_FRAME_311
-    decore(0x123, DEC_OPT_FRAME, &dec_frame, NULL);
+        DEC_OPT_FRAME,
 #else
-    decore(0x123, (sh->format==mmioFOURCC('D','I','V','3'))?DEC_OPT_FRAME_311:DEC_OPT_FRAME, &dec_frame, NULL);
+	(sh->format==mmioFOURCC('D','I','V','3'))?DEC_OPT_FRAME_311:DEC_OPT_FRAME,
+#endif
+	&dec_frame,
+#ifndef USE_DIVX_BUILTIN_PP
+	&frameinfo
+#else
+	NULL
+#endif
+    );
+
+#ifndef USE_DIVX_BUILTIN_PP
+    mpi->qscale = frameinfo.quant_store;
+    mpi->qstride = frameinfo.quant_stride;
 #endif
 
     return mpi;
 }
-
 #endif
 #endif
-
diff --git a/libmpcodecs/vf.c b/libmpcodecs/vf.c
index 790afcd05f..4641456e77 100644
--- a/libmpcodecs/vf.c
+++ b/libmpcodecs/vf.c
@@ -200,7 +200,7 @@ mp_image_t* vf_get_image(vf_instance_t* vf, unsigned int outfmt, int mp_imgtype,
 		  (mpi->type==MP_IMGTYPE_EXPORT)?"Exporting":
 	          ((mpi->flags&MP_IMGFLAG_DIRECT)?"Direct Rendering":"Allocating"),
 	          mpi->width,mpi->height,mpi->bpp,
-		  (mpi->flags&MP_IMGFLAG_YUV)?"YUV":"RGB",
+		  (mpi->flags&MP_IMGFLAG_YUV)?"YUV":((mpi->flags&MP_IMGFLAG_SWAPPED)?"BGR":"RGB"),
 		  (mpi->flags&MP_IMGFLAG_PLANAR)?"planar":"packed",
 	          mpi->bpp*mpi->width*mpi->height/8);
 	    mp_msg(MSGT_DECVIDEO,MSGL_DBG2,"(imgfmt: %x, planes: %x,%x,%x strides: %d,%d,%d, chroma: %dx%d, shift: h:%d,v:%d)\n",
diff --git a/libmpcodecs/vf_format.c b/libmpcodecs/vf_format.c
index b9cdd89fc6..56f384cdfa 100644
--- a/libmpcodecs/vf_format.c
+++ b/libmpcodecs/vf_format.c
@@ -40,6 +40,11 @@ static int open(vf_instance_t *vf, char* args){
 	if(!strcasecmp(args,"bgr16")) vf->priv->fmt=IMGFMT_BGR16; else
 	if(!strcasecmp(args,"bgr15")) vf->priv->fmt=IMGFMT_BGR15; else
 	if(!strcasecmp(args,"bgr8")) vf->priv->fmt=IMGFMT_BGR8; else
+	if(!strcasecmp(args,"rgb24")) vf->priv->fmt=IMGFMT_RGB24; else
+	if(!strcasecmp(args,"rgb32")) vf->priv->fmt=IMGFMT_RGB32; else
+	if(!strcasecmp(args,"rgb16")) vf->priv->fmt=IMGFMT_RGB16; else
+	if(!strcasecmp(args,"rgb15")) vf->priv->fmt=IMGFMT_RGB15; else
+	if(!strcasecmp(args,"rgb8")) vf->priv->fmt=IMGFMT_RGB8; else
 	{ printf("Unknown format name: '%s'\n",args);return 0;}
     } else
         vf->priv->fmt=IMGFMT_YUY2;
diff --git a/libmpcodecs/vf_scale.c b/libmpcodecs/vf_scale.c
index b9d1d95f62..0ab96bbca0 100644
--- a/libmpcodecs/vf_scale.c
+++ b/libmpcodecs/vf_scale.c
@@ -58,8 +58,8 @@ static unsigned int find_best_out(vf_instance_t *vf){
     while(*p){
 	int ret=vf_next_query_format(vf,*p);
 	mp_msg(MSGT_VFILTER,MSGL_V,"scale: query(%s) -> %d\n",vo_format_name(*p),ret&3);
-	if(ret&2){ best=*p; break;} // no conversion -> bingo!
-	if(ret&1 && !best) best=*p; // best with conversion
+	if(ret&VFCAP_CSP_SUPPORTED_BY_HW){ best=*p; break;} // no conversion -> bingo!
+	if(ret&VFCAP_CSP_SUPPORTED && !best) best=*p; // best with conversion
 	++p;
     }
     return best;

