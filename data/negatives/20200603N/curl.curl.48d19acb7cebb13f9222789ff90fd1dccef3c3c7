commit 48d19acb7cebb13f9222789ff90fd1dccef3c3c7
Author: Steve Holme <steve_holme@hotmail.com>
Date:   Sun Nov 9 14:55:41 2014 +0000

    http_ntlm: Use the SASL functions instead
    
    In preparation for moving the NTLM message code into the SASL module
    use the SASL functions in the HTTP code instead.

diff --git a/lib/curl_ntlm.c b/lib/curl_ntlm.c
index 06cf0ed91..5d83bbac1 100644
--- a/lib/curl_ntlm.c
+++ b/lib/curl_ntlm.c
@@ -85,7 +85,7 @@ CURLcode Curl_input_ntlm(struct connectdata *conn,
       header++;
 
     if(*header) {
-      result = Curl_ntlm_decode_type2_message(conn->data, header, ntlm);
+      result = Curl_sasl_decode_ntlm_type2_message(conn->data, header, ntlm);
       if(result)
         return result;
 
@@ -175,8 +175,8 @@ CURLcode Curl_output_ntlm(struct connectdata *conn, bool proxy)
   case NTLMSTATE_TYPE1:
   default: /* for the weird cases we (re)start here */
     /* Create a type-1 message */
-    result = Curl_ntlm_create_type1_message(userp, passwdp, ntlm, &base64,
-                                            &len);
+    result = Curl_sasl_create_ntlm_type1_message(userp, passwdp, ntlm, &base64,
+                                                 &len);
     if(result)
       return result;
 
@@ -195,8 +195,8 @@ CURLcode Curl_output_ntlm(struct connectdata *conn, bool proxy)
 
   case NTLMSTATE_TYPE2:
     /* We already received the type-2 message, create a type-3 message */
-    result = Curl_ntlm_create_type3_message(conn->data, userp, passwdp,
-                                            ntlm, &base64, &len);
+    result = Curl_sasl_create_ntlm_type3_message(conn->data, userp, passwdp,
+                                                 ntlm, &base64, &len);
     if(result)
       return result;
 

