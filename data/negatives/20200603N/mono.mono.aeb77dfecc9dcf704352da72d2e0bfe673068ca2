commit aeb77dfecc9dcf704352da72d2e0bfe673068ca2
Author: Miguel de Icaza <miguel@gnome.org>
Date:   Sun Nov 19 23:18:06 2006 +0000

    2006-11-19  Miguel de Icaza  <miguel@novell.com>
    
            * mini.c (type_from_op): Separate the conditions for OP_EQ as the
            verifier has different rules for it.   Fixes a few verifier issues
            in the test suite. + Documentation
    
    svn path=/trunk/mono/; revision=68162

diff --git a/mono/mini/mini.c b/mono/mini/mini.c
index d75dc120756..48384a56df1 100644
--- a/mono/mini/mini.c
+++ b/mono/mini/mini.c
@@ -228,13 +228,35 @@ get_method_from_ip (void *ip)
 	return res;
 }
 
+/** 
+ * mono_pmip:
+ * @ip: an instruction pointer address
+ *
+ * This method is used from a debugger to get the name of the
+ * method at address @ip.   This routine is typically invoked from
+ * a debugger like this:
+ *
+ * (gdb) print mono_pmip ($pc)
+ *
+ * Returns: the name of the method at address @ip.
+ */
 G_GNUC_UNUSED char *
 mono_pmip (void *ip)
 {
 	return get_method_from_ip (ip);
 }
 
-/* debug function */
+/** 
+ * mono_print_method_from_ip
+ * @ip: an instruction pointer address
+ *
+ * This method is used from a debugger to get the name of the
+ * method at address @ip.
+ *
+ * This prints the name of the method at address @ip in the standard
+ * output.  Unlike mono_pmip which returns a string, this routine
+ * prints the value on the standard output. 
+ */
 void
 mono_print_method_from_ip (void *ip)
 {
@@ -1318,11 +1340,15 @@ type_from_op (MonoInst *ins) {
 			ins->opcode = OP_LCOMPARE;
 		return;
 	case OP_CEQ:
+		ins->type = bin_comp_table [ins->inst_i0->type] [ins->inst_i1->type] ? STACK_I4: STACK_INV;
+		ins->opcode += ceqops_op_map [ins->inst_i0->type];
+		return;
+		
 	case OP_CGT:
 	case OP_CGT_UN:
 	case OP_CLT:
 	case OP_CLT_UN:
-		ins->type = bin_comp_table [ins->inst_i0->type] [ins->inst_i1->type] ? STACK_I4: STACK_INV;
+		ins->type = (bin_comp_table [ins->inst_i0->type] [ins->inst_i1->type] & 1) ? STACK_I4: STACK_INV;
 		ins->opcode += ceqops_op_map [ins->inst_i0->type];
 		return;
 	/* unops */

