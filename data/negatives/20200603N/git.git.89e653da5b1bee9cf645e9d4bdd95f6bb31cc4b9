commit 89e653da5b1bee9cf645e9d4bdd95f6bb31cc4b9
Author: Martin Ågren <martin.agren@gmail.com>
Date:   Sun May 20 12:17:34 2018 +0200

    merge: setup `opts` later in `checkout_fast_forward()`
    
    After we initialize the various fields in `opts` but before we actually
    use them, we might return early. Move the initialization further down,
    to immediately before we use `opts`.
    
    This limits the scope of `opts` and will help a later commit fix a
    memory leak without having to worry about those early returns.
    
    This patch is best viewed using something like this (note the tab!):
    --color-moved --anchored="      trees[nr_trees] = parse_tree_indirect"
    
    Signed-off-by: Martin Ågren <martin.agren@gmail.com>
    Signed-off-by: Junio C Hamano <gitster@pobox.com>

diff --git a/merge.c b/merge.c
index f06a4773d..f123658e5 100644
--- a/merge.c
+++ b/merge.c
@@ -94,8 +94,24 @@ int checkout_fast_forward(const struct object_id *head,
 		return -1;
 
 	memset(&trees, 0, sizeof(trees));
-	memset(&opts, 0, sizeof(opts));
 	memset(&t, 0, sizeof(t));
+
+	trees[nr_trees] = parse_tree_indirect(head);
+	if (!trees[nr_trees++]) {
+		rollback_lock_file(&lock_file);
+		return -1;
+	}
+	trees[nr_trees] = parse_tree_indirect(remote);
+	if (!trees[nr_trees++]) {
+		rollback_lock_file(&lock_file);
+		return -1;
+	}
+	for (i = 0; i < nr_trees; i++) {
+		parse_tree(trees[i]);
+		init_tree_desc(t+i, trees[i]->buffer, trees[i]->size);
+	}
+
+	memset(&opts, 0, sizeof(opts));
 	if (overwrite_ignore) {
 		memset(&dir, 0, sizeof(dir));
 		dir.flags |= DIR_SHOW_IGNORED;
@@ -112,20 +128,6 @@ int checkout_fast_forward(const struct object_id *head,
 	opts.fn = twoway_merge;
 	setup_unpack_trees_porcelain(&opts, "merge");
 
-	trees[nr_trees] = parse_tree_indirect(head);
-	if (!trees[nr_trees++]) {
-		rollback_lock_file(&lock_file);
-		return -1;
-	}
-	trees[nr_trees] = parse_tree_indirect(remote);
-	if (!trees[nr_trees++]) {
-		rollback_lock_file(&lock_file);
-		return -1;
-	}
-	for (i = 0; i < nr_trees; i++) {
-		parse_tree(trees[i]);
-		init_tree_desc(t+i, trees[i]->buffer, trees[i]->size);
-	}
 	if (unpack_trees(nr_trees, t, &opts)) {
 		rollback_lock_file(&lock_file);
 		return -1;

