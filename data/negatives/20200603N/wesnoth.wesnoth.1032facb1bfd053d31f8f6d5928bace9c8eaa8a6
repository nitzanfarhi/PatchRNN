commit 1032facb1bfd053d31f8f6d5928bace9c8eaa8a6
Author: Mark de Wever <koraq@xs4all.nl>
Date:   Sat Aug 23 11:34:26 2008 +0000

    Implemented the style to the ttext class.

diff --git a/src/text.cpp b/src/text.cpp
index 90b5027441..636f4b5964 100644
--- a/src/text.cpp
+++ b/src/text.cpp
@@ -18,6 +18,8 @@
 #include "font.hpp"
 #include "language.hpp"
 
+#include "SDL_ttf.h"
+
 #include <cassert>
 #include <cstring>
 
@@ -25,6 +27,11 @@
 
 namespace font {
 
+const unsigned ttext::STYLE_NORMAL = TTF_STYLE_NORMAL;
+const unsigned ttext::STYLE_BOLD = TTF_STYLE_BOLD;
+const unsigned ttext::STYLE_ITALIC = TTF_STYLE_ITALIC;
+const unsigned ttext::STYLE_UNDERLINE = TTF_STYLE_UNDERLINE;
+
 ttext::ttext() :
 	font_map_(reinterpret_cast<PangoCairoFontMap*>(pango_cairo_font_map_new())),
 	context_(pango_cairo_font_map_create_context(font_map_)),
@@ -34,6 +41,7 @@ ttext::ttext() :
 	text_(),
 	markedup_text_(false),
 	font_size_(14),
+	font_style_(STYLE_NORMAL),
 	foreground_colour_(0xFFFFFFFF), // solid white
 	maximum_width_(-1),
 	maximum_height_(-1),
@@ -120,6 +128,17 @@ ttext& ttext::set_font_size(const unsigned font_size)
 	return *this;
 }
 
+ttext& ttext::set_font_style(const unsigned font_style)
+{
+	if(font_style != font_style_) {
+		font_style_ = font_style;
+		calculation_dirty_ = true;
+		surface_dirty_ = true;
+	}
+
+	return *this;
+}
+
 ttext& ttext::set_foreground_colour(const Uint32 colour)
 {
 	if(colour != foreground_colour_) {
@@ -168,11 +187,23 @@ class tfont
 	tfont(const tfont&);
 	tfont& operator=(const tfont&);
 public:
-	tfont(const std::string& name, const unsigned size) :
+	tfont(const std::string& name, const unsigned size, const unsigned style) :
 		font_(pango_font_description_new())
 	{
 		pango_font_description_set_family(font_, name.c_str());
 		pango_font_description_set_size(font_, size * PANGO_SCALE);
+
+		if(style != ttext::STYLE_NORMAL) {
+			if(style & ttext::STYLE_ITALIC) {
+				pango_font_description_set_style(font_, PANGO_STYLE_ITALIC);
+			}
+			if(style & ttext::STYLE_BOLD) {
+				pango_font_description_set_weight(font_, PANGO_WEIGHT_BOLD);
+			}
+			if(style & ttext::STYLE_UNDERLINE) {
+				assert(false); // Not implemented yet
+			}
+		}
 	}
 
 	~tfont() { pango_font_description_free(font_); }
@@ -191,7 +222,7 @@ void ttext::recalculate(const bool force)
 		calculation_dirty_ = false;
 		surface_dirty_ = true;
 
-		tfont font(get_fonts(), font_size_);
+		tfont font(get_fonts(), font_size_, font_style_);
 		pango_layout_set_font_description(layout_, font.get());
 
 		// NOTE for now the setting of the ellipse is undocumented and
@@ -211,7 +242,6 @@ void ttext::rerender(const bool force)
 		recalculate(force);
 		surface_dirty_ = false;
 
-
 		const unsigned stride = rect_.width * 4;
 		create_surface_buffer(stride * rect_.height);
 
diff --git a/src/text.hpp b/src/text.hpp
index e34aa29ee1..a49b0583e0 100644
--- a/src/text.hpp
+++ b/src/text.hpp
@@ -64,12 +64,27 @@ public:
 	/** Has the text been truncated? */
 	bool is_truncated();
 
+	/***** ***** ***** ***** Font flags ***** ***** ***** *****/
+
+	/**
+	 * The flags have the same values as the ones in SDL_TTF so it's easy to mix
+	 * them for now. To avoid including SDL_TTF in the header they'r only
+	 * declared here. Once SDL_TTF is removed they can be moved in the header.
+	 */
+
+	static const unsigned STYLE_NORMAL;     /**< Normal text. */
+	static const unsigned STYLE_BOLD;       /**< Bold text. */
+	static const unsigned STYLE_ITALIC;     /**< Italicized text. */
+	static const unsigned STYLE_UNDERLINE;  /**< Underlined text. */
+
 	/***** ***** ***** ***** Setters ***** ***** ***** *****/
 
 	ttext& set_text(const t_string& text, const bool markedup);
 
 	ttext& set_font_size(const unsigned font_size);
 
+	ttext& set_font_style(const unsigned font_style);
+
 	ttext& set_foreground_colour(const Uint32 colour);
 
 	ttext& set_maximum_width(const int width);
@@ -96,6 +111,9 @@ private:
 	/** The font size to draw. */
 	unsigned font_size_;
 
+	/** The style of the font, this is an orred mask of the font flags. */
+	unsigned font_style_;
+
 	/** The foreground colour. */
 	Uint32 foreground_colour_;
 

