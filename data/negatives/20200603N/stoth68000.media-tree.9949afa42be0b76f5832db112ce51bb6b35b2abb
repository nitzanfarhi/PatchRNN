commit 9949afa42be0b76f5832db112ce51bb6b35b2abb
Author: Neal Cardwell <ncardwell@google.com>
Date:   Tue Mar 10 17:17:03 2015 -0400

    tcp: fix tcp_cong_avoid_ai() credit accumulation bug with decreases in w
    
    The recent change to tcp_cong_avoid_ai() to handle stretch ACKs
    introduced a bug where snd_cwnd_cnt could accumulate a very large
    value while w was large, and then if w was reduced snd_cwnd could be
    incremented by a large delta, leading to a large burst and high packet
    loss. This was tickled when CUBIC's bictcp_update() sets "ca->cnt =
    100 * cwnd".
    
    This bug crept in while preparing the upstream version of
    814d488c6126.
    
    Testing: This patch has been tested in datacenter netperf transfers
    and live youtube.com and google.com servers.
    
    Fixes: 814d488c6126 ("tcp: fix the timid additive increase on stretch ACKs")
    Signed-off-by: Neal Cardwell <ncardwell@google.com>
    Signed-off-by: Yuchung Cheng <ycheng@google.com>
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

diff --git a/net/ipv4/tcp_cong.c b/net/ipv4/tcp_cong.c
index d694088214cd..62856e185a93 100644
--- a/net/ipv4/tcp_cong.c
+++ b/net/ipv4/tcp_cong.c
@@ -378,6 +378,12 @@ EXPORT_SYMBOL_GPL(tcp_slow_start);
  */
 void tcp_cong_avoid_ai(struct tcp_sock *tp, u32 w, u32 acked)
 {
+	/* If credits accumulated at a higher w, apply them gently now. */
+	if (tp->snd_cwnd_cnt >= w) {
+		tp->snd_cwnd_cnt = 0;
+		tp->snd_cwnd++;
+	}
+
 	tp->snd_cwnd_cnt += acked;
 	if (tp->snd_cwnd_cnt >= w) {
 		u32 delta = tp->snd_cwnd_cnt / w;

