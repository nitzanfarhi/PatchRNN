commit c32ee7db78e63c3bbf11fd980290d07c694d5b2f
Author: Paul Wouters <pwouters@redhat.com>
Date:   Tue May 1 23:40:18 2018 -0400

    whack/addconn: Don't throw non-zero exit codes for informational messages
    
    Most of the starter and whack code return RC_ statuses. These are non-zero.
    Recently, it was fixed that return codes weren't always zero. But this lead
    to some RC_* codes like RC_INFORMATIONAL or RC_NEW_STATE based messages to
    return non-zero exit codes.
    
    Zero the exit code if the value is informational (< 20) or a new state
    message ( > 100)
    
    Example messages fixed:
    
    133 "westnet-eastnet-ikev2" #1: STATE_PARENT_I1: sent v2I1, expected v2R1
    
    005 "westnet-eastnet-ikev2" #3: ESP traffic information: in=0B out=0B

diff --git a/programs/addconn/addconn.c b/programs/addconn/addconn.c
index dff81bd03..df306655a 100644
--- a/programs/addconn/addconn.c
+++ b/programs/addconn/addconn.c
@@ -545,7 +545,7 @@ int main(int argc, char *argv[])
 			}
 
 			if (conn == NULL) {
-				exit_status++;
+				exit_status += RC_UNKNOWN_NAME; /* cause non-zero exit code */
 				if (!verbose) {
 					printf("conn '%s': not found (tried aliases)\n",
 						connname);
@@ -698,5 +698,11 @@ int main(int argc, char *argv[])
 #ifdef USE_DNSSEC
 	unbound_ctx_free();
 #endif
+	/*
+	 * Only RC_ codes between RC_DUPNAME and RC_NEW_STATE are errors
+	 * Some starter code above can also return -1 which is not a valid RC_ code
+	 */
+	if (exit_status > 0 && (exit_status < RC_DUPNAME || exit_status >= RC_NEW_STATE))
+		exit_status = 0;
 	exit(exit_status);
 }
diff --git a/programs/whack/whack.c b/programs/whack/whack.c
index fb1ced78a..b0ee4d711 100644
--- a/programs/whack/whack.c
+++ b/programs/whack/whack.c
@@ -2456,6 +2456,9 @@ int main(int argc, char **argv)
 				break;
 
 			default:
+				/* Only RC_ codes between RC_DUPNAME and RC_NEW_STATE are errors */
+				if (s > 0 && (s < RC_DUPNAME || s >= RC_NEW_STATE))
+					s = 0;
 				exit_status = msg.whack_async ?
 					0 : s;
 				break;

