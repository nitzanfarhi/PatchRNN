commit 2796abb60d53937b52382b56d4b7a639d4d6a722
Author: Rodrigo Kumpera <kumpera@gmail.com>
Date:   Thu Apr 14 17:39:44 2016 -0700

    [runtime] Fix mono_class_inflate_generic_method_full_checked handle of partially inflated generic methods. Fixes #29585.
    
    The problem here was that the function was not correctly setting is_generic when handling partially inflated methods.
    
    The working scenario was method 'Foo<A>::Bar<B>' inflated with (Something<Else>;)[1] resulting in Foo<Something<Else>>::Bar<B>.
    
    This would work because the is_generic check would verify that the supplied context has no method_inst, thus had to remain a GMD.
    
    The problematic one would be inflating Foo<Something<A>>::Bar<B> with (Else;) resulting too in Foo<Something<Else>>::Bar<B>.
    
    To handle this, we would first extract the root method definition [2] and then inflate the original method context with the supplied
    context. So we end up with Foo<A>::Bar<B> and inflate (Something<A>;B) with (Else;) resulting in (Something<Else>;B) *1*.
    
    Finally, we would inflate Foo<A>::Bar<B>  with that new context, resulting in Foo<Something<Else>>::Bar<B>.
    
    The resulting method is the same in both scenarios, but context used for inflation is different in that in the second case
    it includes the GMD method instantiation (The B in *1*).
    
    This would trip up the computation of whether we ended up with a GMD or not.
    
    The right check, though, is not whether the inflation context has a method instantiation or not, but whether the resulting method
    has the same method context as the root GMD[2].
    
    This affected #29585 since disabling some optimizations triggered things to be inflated in different ways.
    
    [1] (Something<Else>;) means a context with a class instantiation and no method instantiation
    [2] The GMD defined on the GTD.

diff --git a/mono/metadata/class.c b/mono/metadata/class.c
index 355d09916f8..17da478b5e9 100644
--- a/mono/metadata/class.c
+++ b/mono/metadata/class.c
@@ -1130,11 +1130,11 @@ mono_class_inflate_generic_method_full_checked (MonoMethod *method, MonoClass *k
 	result->sre_method = FALSE;
 	result->signature = NULL;
 
-	if (!context->method_inst) {
+	if (iresult->context.method_inst) {
 		/* Set the generic_container of the result to the generic_container of method */
 		MonoGenericContainer *generic_container = mono_method_get_generic_container (method);
 
-		if (generic_container) {
+		if (generic_container && iresult->context.method_inst == generic_container->context.method_inst) {
 			result->is_generic = 1;
 			mono_method_set_generic_container (result, generic_container);
 		}

