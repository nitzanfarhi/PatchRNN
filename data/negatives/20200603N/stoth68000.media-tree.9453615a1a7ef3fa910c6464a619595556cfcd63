commit 9453615a1a7ef3fa910c6464a619595556cfcd63
Author: Steven Whitehouse <swhiteho@redhat.com>
Date:   Tue Aug 23 10:19:25 2011 +0100

    GFS2: Fix lseek after SEEK_DATA, SEEK_HOLE have been added
    
    We need to take the inode's glock whenever the inode's size
    is referenced, otherwise it might not be uptodate. Even
    though generic_file_llseek_unlocked() doesn't implement
    SEEK_DATA, SEEK_HOLE directly, it does reference the inode's
    size in those cases, so we need to add them to the list
    of origins which need the glock.
    
    Signed-off-by: Steven Whitehouse <swhiteho@redhat.com>
    Cc: Andi Kleen <ak@linux.intel.com>

diff --git a/fs/gfs2/file.c b/fs/gfs2/file.c
index 4416a1cfa1fe..d717b72500a4 100644
--- a/fs/gfs2/file.c
+++ b/fs/gfs2/file.c
@@ -59,15 +59,24 @@ static loff_t gfs2_llseek(struct file *file, loff_t offset, int origin)
 	struct gfs2_holder i_gh;
 	loff_t error;
 
-	if (origin == 2) {
+	switch (origin) {
+	case SEEK_END: /* These reference inode->i_size */
+	case SEEK_DATA:
+	case SEEK_HOLE:
 		error = gfs2_glock_nq_init(ip->i_gl, LM_ST_SHARED, LM_FLAG_ANY,
 					   &i_gh);
 		if (!error) {
 			error = generic_file_llseek_unlocked(file, offset, origin);
 			gfs2_glock_dq_uninit(&i_gh);
 		}
-	} else
+		break;
+	case SEEK_CUR:
+	case SEEK_SET:
 		error = generic_file_llseek_unlocked(file, offset, origin);
+		break;
+	default:
+		error = -EINVAL;
+	}
 
 	return error;
 }

