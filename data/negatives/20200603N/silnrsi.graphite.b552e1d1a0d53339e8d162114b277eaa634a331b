commit b552e1d1a0d53339e8d162114b277eaa634a331b
Author: Martin Hosken <martin_hosken@sil.org>
Date:   Sat Aug 11 16:57:05 2012 +0700

    Add gr_face_is_char_supported

diff --git a/include/graphite2/Font.h b/include/graphite2/Font.h
index 82cb6cb..98f64e0 100644
--- a/include/graphite2/Font.h
+++ b/include/graphite2/Font.h
@@ -154,6 +154,15 @@ GR2_API void gr_face_destroy(gr_face *face);
 /** Returns the number of glyphs in the face **/
 GR2_API unsigned short gr_face_n_glyphs(const gr_face* pFace);
 
+/** Returns whether the font supports a given Unicode character
+  *
+  * @return true if the character is supported.
+  * @param pFace    face to test within
+  * @param usv      Unicode Scalar Value of character to test
+  * @param scrtip   Tag of script for selecting which set of pseudo glyphs to test. May be NULL.
+  */
+GR2_API int gr_face_is_char_supported(const gr_face *pFace, gr_uint32 usv, gr_uint32 script);
+
 #ifndef GRAPHITE2_NFILEFACE
 /** Create gr_face from a font file
   *
diff --git a/src/gr_face.cpp b/src/gr_face.cpp
index 382e0b5..35e0776 100644
--- a/src/gr_face.cpp
+++ b/src/gr_face.cpp
@@ -27,7 +27,8 @@ of the License or (at your option) any later version.
 #include "graphite2/Font.h"
 #include "inc/Face.h"
 #include "inc/CachedFace.h"
-
+#include "inc/CmapCache.h"
+#include "inc/Silf.h"
 
 using namespace graphite2;
 
@@ -193,6 +194,17 @@ unsigned short gr_face_n_glyphs(const gr_face* pFace)
     return pFace->getGlyphFaceCache()->numGlyphs();
 }
 
+int gr_face_is_char_supported(const gr_face* pFace, gr_uint32 usv, gr_uint32 script)
+{
+    const Cmap & cmap = pFace->cmap();
+    gr_uint16 gid = cmap[usv];
+    if (!gid)
+    {
+        const Silf * silf = pFace->chooseSilf(script);
+        gid = silf->findPseudo(usv);
+    }
+    return (gid != 0);
+}
 
 #ifndef GRAPHITE2_NFILEFACE
 gr_face* gr_make_file_face(const char *filename, unsigned int faceOptions)

