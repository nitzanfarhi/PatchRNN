commit 4a8b3c98a446225fcd722cffdd64c5aa88321325
Author: Aaron Turner <synfinatic@gmail.com>
Date:   Sun Feb 27 00:49:21 2005 +0000

    fix bug with looping and tracking time to sleep

diff --git a/src/send_packets.c b/src/send_packets.c
index 991d2758..3d9974d2 100644
--- a/src/send_packets.c
+++ b/src/send_packets.c
@@ -100,8 +100,7 @@ break_now(int signo)
 void
 send_packets(pcap_t *pcap)
 {
-    struct timeval last;
-    static int firsttime = 1;
+    struct timeval last = { 0, 0 };
     COUNTER packetnum = 0;
     struct pcap_pkthdr pkthdr;
     const u_char *pktdata = NULL;
@@ -117,12 +116,6 @@ send_packets(pcap_t *pcap)
         (void)signal(SIGINT, break_now);
     }
 
-    /* clear out the time we sent the last packet if this is the first packet */
-    if (firsttime) {
-        timerclear(&last);
-        firsttime = 0;
-    }
-
     /* MAIN LOOP 
      * Keep sending while we have packets or until
      * we've sent enough packets
@@ -178,6 +171,12 @@ send_packets(pcap_t *pcap)
         bytes_sent += pkthdr.caplen;
         pkts_sent++;
     
+        /* 
+         * track the time of the "last packet sent".  Again, because of OpenBSD
+         * we have to do a mempcy rather then assignment
+         */
+        memcpy(&last, &pkthdr.ts, sizeof(struct timeval));
+
     } /* while */
 }
 
@@ -314,6 +313,7 @@ do_sleep(struct timeval *time, struct timeval *last, int len, libnet_t *l)
          */
         if (timerisset(last) && timercmp(time, last, >)) {
             timersub(time, last, &nap);
+            timerdiv(&nap, options.speed.speed);
         }
         else {
             /* 
@@ -323,7 +323,6 @@ do_sleep(struct timeval *time, struct timeval *last, int len, libnet_t *l)
              */
             timerclear(&nap);
         }
-        timerdiv(&nap, options.speed.speed);
         break;
 
     case SPEED_MBPSRATE:

