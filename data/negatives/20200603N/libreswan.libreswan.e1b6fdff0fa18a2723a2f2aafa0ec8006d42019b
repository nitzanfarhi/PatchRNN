commit e1b6fdff0fa18a2723a2f2aafa0ec8006d42019b
Author: Bart Trojanowski <bart@jukie.net>
Date:   Fri Apr 9 21:16:19 2010 -0400

    fix eroute_type to satype conversion for pfkey
    
    This is a rework of 9fc2e74c61aa5c861eeeee0b71d4003c47df53eb.
    
    Before these changes the type assigned to SAs would use ET_* numbers
    instead of K_SADB_SATYPE_* numbers.
    
    Added eroute_type_to_pfkey_satype() to do the conversion and report
    proper errors.
    
    Signed-off-by: Bart Trojanowski <bart@jukie.net>

diff --git a/programs/pluto/kernel.c b/programs/pluto/kernel.c
index c9be9a45b..5bf73b5fb 100644
--- a/programs/pluto/kernel.c
+++ b/programs/pluto/kernel.c
@@ -1316,7 +1316,7 @@ setup_half_ipsec_sa(struct state *st, bool inbound)
     {
         inner_spi = 256;
         proto = SA_IPIP;
-        esatype = ET_IPIP;
+        esatype = ET_IPIP; // XXX bart: used to be "UNSPEC"
     }
     else if (encapsulation == ENCAPSULATION_MODE_TUNNEL)
     {
diff --git a/programs/pluto/kernel.h b/programs/pluto/kernel.h
index ff18614dd..23a42dc3e 100644
--- a/programs/pluto/kernel.h
+++ b/programs/pluto/kernel.h
@@ -61,11 +61,11 @@ struct sadb_msg;
 /* replaces SADB_X_SATYPE_* for non-KLIPS code. Assumes normal SADB_SATYPE values */
 enum eroute_type {
 	ET_UNSPEC = 0,
-	ET_AH    = SA_AH,
-	ET_ESP   = SA_ESP,
-	ET_IPCOMP= SA_COMP,
-	ET_INT   = SA_INT,    /* internal type */
-	ET_IPIP  = SA_IPIP,   /* turn on tunnel type */
+	ET_AH    = SA_AH,     /* (51)  authentication */
+	ET_ESP   = SA_ESP,    /* (50)  encryption/auth */
+	ET_IPCOMP= SA_COMP,   /* (108) compression */
+	ET_INT   = SA_INT,    /* (61)  internal type */
+	ET_IPIP  = SA_IPIP,   /* (4)   turn on tunnel type */
 };
 #define esatype2proto(X) (int)X
 #define proto2esatype(X) (enum eroute_type)X
diff --git a/programs/pluto/kernel_netlink.c b/programs/pluto/kernel_netlink.c
index 1f90dc73f..0bc2d0371 100644
--- a/programs/pluto/kernel_netlink.c
+++ b/programs/pluto/kernel_netlink.c
@@ -89,7 +89,6 @@ static const struct pfkey_proto_info broad_proto_info[2] = {
         }
 };
 
-
 /* Minimum priority number in SPD used by pluto. */
 #define MIN_SPD_PRIORITY 1024
 
diff --git a/programs/pluto/kernel_pfkey.c b/programs/pluto/kernel_pfkey.c
index 2f0a353bc..1753017e3 100644
--- a/programs/pluto/kernel_pfkey.c
+++ b/programs/pluto/kernel_pfkey.c
@@ -149,6 +149,28 @@ static sparse_names pfkey_ext_names = {
 
 #undef NE
 
+/* convert ET_* enums to K_SADB_SATYPE_* numbers */
+static inline unsigned eroute_type_to_pfkey_satype(enum eroute_type esatype)
+{
+	switch(esatype) {
+	default:
+		bad_case(esatype);
+		return -1;
+	case ET_UNSPEC:
+		return K_SADB_SATYPE_UNSPEC;
+	case ET_AH:
+		return K_SADB_SATYPE_AH;
+	case ET_ESP:
+		return K_SADB_SATYPE_ESP;
+	case ET_IPCOMP:
+		return K_SADB_X_SATYPE_COMP;
+	case ET_INT:
+		return K_SADB_X_SATYPE_INT;
+	case ET_IPIP:
+		return K_SADB_X_SATYPE_IPIP;
+	}
+}
+
 void
 init_pfkey(void)
 {
@@ -851,30 +873,10 @@ pfkey_raw_eroute(const ip_address *this_host
     maskof(that_client, &dmask_ska);
     setportof(dport ? ~0:0, &dmask_ska);
 
-    switch(esatype) {
-    case ET_UNSPEC:
-	    satype = K_SADB_SATYPE_UNSPEC;
-	    break;
-
-    case ET_AH:
-	    satype = K_SADB_SATYPE_AH;
-	    break;
-
-    case ET_ESP:
-	    satype = K_SADB_SATYPE_ESP;
-	    break;
-
-    case ET_IPCOMP:
-	    satype = K_SADB_X_SATYPE_COMP;
-	    break;
-
-    case ET_INT:
-	    satype = K_SADB_X_SATYPE_INT;
-	    break;
-
-    case ET_IPIP:
-	    satype = K_SADB_X_SATYPE_IPIP;
-	    break;
+    satype = eroute_type_to_pfkey_satype(esatype);
+    if (satype < 0 || satype > K_SADB_SATYPE_MAX) {
+	impossible();
+	return FALSE;
     }
 
     if (!pfkey_msg_start(klips_op & KLIPS_OP_MASK, satype
@@ -941,11 +943,16 @@ pfkey_raw_eroute(const ip_address *this_host
 
 bool pfkey_add_sa(struct kernel_sa *sa, bool replace)
 {
+    unsigned klips_satype;
     struct sadb_ext *extensions[K_SADB_EXT_MAX + 1];
     pfkey_buf pfb;
     bool success = FALSE;
 
-    int klips_satype = proto2satype(sa->esatype);
+    klips_satype = eroute_type_to_pfkey_satype(sa->esatype);
+    if (klips_satype > K_SADB_SATYPE_MAX) {
+	impossible();
+	return FALSE;
+    }
 
     success = pfkey_msg_start(replace ? K_SADB_UPDATE : K_SADB_ADD, klips_satype
 			      , "pfkey_msg_hdr Add SA"
@@ -1081,9 +1088,19 @@ bool pfkey_add_sa(struct kernel_sa *sa, bool replace)
 bool pfkey_grp_sa(const struct kernel_sa *sa0, const struct kernel_sa *sa1)
 {
     struct sadb_ext *extensions[K_SADB_EXT_MAX + 1];
-    int klips_satype0 = proto2satype(sa0->esatype);
-    int klips_satype1 = proto2satype(sa1->esatype);
+    unsigned klips_satype0, klips_satype1;
+
+    klips_satype0 = eroute_type_to_pfkey_satype(sa0->esatype);
+    if (klips_satype0 > K_SADB_SATYPE_MAX) {
+	impossible();
+	return FALSE;
+    }
 
+    klips_satype1 = eroute_type_to_pfkey_satype(sa1->esatype);
+    if (klips_satype1 > K_SADB_SATYPE_MAX) {
+	impossible();
+	return FALSE;
+    }
 
     return pfkey_msg_start(K_SADB_X_GRPSA, klips_satype1
 	, "pfkey_msg_hdr group", sa1->text_said, extensions)

