commit 8b9fb9fb7ea37341b065c688edbb919acc749d7d
Author: Victor Zverovich <victor.zverovich@gmail.com>
Date:   Sat Aug 11 09:13:54 2018 -0700

    Fix ambiguous instantiation with formatter in fmt/ostream.h (#830)

diff --git a/include/fmt/ostream.h b/include/fmt/ostream.h
index 480ddfc..0b1a4a0 100644
--- a/include/fmt/ostream.h
+++ b/include/fmt/ostream.h
@@ -68,9 +68,7 @@ class is_streamable {
   typedef decltype(test<T>(0)) result;
 
  public:
-  // std::string operator<< is not considered user-defined because we handle strings
-  // specially.
-  static const bool value = result::value && !std::is_same<T, std::string>::value;
+  static const bool value = result::value;
 };
 
 // Disable conversion to int if T has an overloaded operator<< which is a free
@@ -111,7 +109,10 @@ void format_value(basic_buffer<Char> &buffer, const T &value) {
 // Formats an object of type T that has an overloaded ostream operator<<.
 template <typename T, typename Char>
 struct formatter<T, Char,
-    typename std::enable_if<internal::is_streamable<T, Char>::value>::type>
+    typename std::enable_if<
+      internal::is_streamable<T, Char>::value &&
+      !internal::format_type<
+        typename buffer_context<Char>::type, T>::value>::type>
     : formatter<basic_string_view<Char>, Char> {
 
   template <typename Context>
diff --git a/test/ostream-test.cc b/test/ostream-test.cc
index 3623d7e..0f6bb79 100644
--- a/test/ostream-test.cc
+++ b/test/ostream-test.cc
@@ -191,3 +191,10 @@ TEST(FormatTest, FormatToN) {
   EXPECT_EQ(buffer + 3, result.out);
   EXPECT_EQ("xABx", fmt::string_view(buffer, 4));
 }
+
+#if FMT_USE_USER_DEFINED_LITERALS
+TEST(FormatTest, UDL) {
+  using namespace fmt::literals;
+  EXPECT_EQ("{}"_format("test"), "test");
+}
+#endif

