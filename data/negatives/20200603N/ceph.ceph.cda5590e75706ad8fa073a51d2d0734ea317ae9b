commit cda5590e75706ad8fa073a51d2d0734ea317ae9b
Author: Greg Farnum <greg@inktank.com>
Date:   Tue Feb 5 13:25:41 2013 -0800

    mds: rename struct default_file_layout to file_layout_policy_t
    
    Signed-off-by: Sage Weil <sage@inktank.com>
    Signed-off-by: Greg Farnum <greg@inktank.com>

diff --git a/src/mds/CInode.cc b/src/mds/CInode.cc
index 33b4bfd234..b6e6ea4449 100644
--- a/src/mds/CInode.cc
+++ b/src/mds/CInode.cc
@@ -315,7 +315,7 @@ inode_t *CInode::project_inode(map<string,bufferptr> *px)
       *px = xattrs;
     projected_nodes.back()->dir_layout = default_layout;
   } else {
-    default_file_layout *last_dl = projected_nodes.back()->dir_layout;
+    file_layout_policy_t *last_dl = projected_nodes.back()->dir_layout;
     projected_nodes.push_back(new projected_inode_t(
         new inode_t(*projected_nodes.back()->inode)));
     if (px)
@@ -1445,7 +1445,7 @@ void CInode::decode_lock_state(int type, bufferlist& bl)
       ::decode(default_layout_exists, p);
       if (default_layout_exists) {
         delete default_layout;
-        default_layout = new default_file_layout;
+        default_layout = new file_layout_policy_t;
         decode(*default_layout, p);
       }
     }
diff --git a/src/mds/CInode.h b/src/mds/CInode.h
index 7001c93393..de783546e2 100644
--- a/src/mds/CInode.h
+++ b/src/mds/CInode.h
@@ -211,7 +211,7 @@ public:
   //bool hack_accessed;
   //utime_t hack_load_stamp;
 
-  default_file_layout *default_layout;
+  file_layout_policy_t *default_layout;
 
   /**
    * Projection methods, used to store inode changes until they have been journaled,
@@ -230,13 +230,13 @@ public:
     inode_t *inode;
     map<string,bufferptr> *xattrs;
     sr_t *snapnode;
-    default_file_layout *dir_layout;
+    file_layout_policy_t *dir_layout;
 
     projected_inode_t() : inode(NULL), xattrs(NULL), snapnode(NULL), dir_layout(NULL) {}
     projected_inode_t(inode_t *in, sr_t *sn) : inode(in), xattrs(NULL), snapnode(sn),
         dir_layout(NULL) {}
     projected_inode_t(inode_t *in, map<string, bufferptr> *xp = NULL, sr_t *sn = NULL,
-                      default_file_layout *dl = NULL) :
+                      file_layout_policy_t *dl = NULL) :
       inode(in), xattrs(xp), snapnode(sn), dir_layout(dl) {}
   };
   list<projected_inode_t*> projected_nodes;   // projected values (only defined while dirty)
@@ -589,7 +589,7 @@ private:
       ::decode(default_layout_exists, bl);
       if (default_layout_exists) {
         delete default_layout;
-        default_layout = new default_file_layout;
+        default_layout = new file_layout_policy_t;
         ::decode(*default_layout, bl);
       }
     }
@@ -625,7 +625,7 @@ private:
       ::decode(default_layout_exists, p);
       if (default_layout_exists) {
         delete default_layout;
-        default_layout = new default_file_layout;
+        default_layout = new file_layout_policy_t;
         ::decode(*default_layout, p);
       }
     }
diff --git a/src/mds/MDCache.cc b/src/mds/MDCache.cc
index 2eb8220b3f..f6115b8a63 100644
--- a/src/mds/MDCache.cc
+++ b/src/mds/MDCache.cc
@@ -312,7 +312,7 @@ CInode *MDCache::create_system_inode(inodeno_t ino, int mode)
 CInode *MDCache::create_root_inode()
 {
   CInode *i = create_system_inode(MDS_INO_ROOT, S_IFDIR|0755);
-  i->default_layout = new struct default_file_layout;
+  i->default_layout = new struct file_layout_policy_t;
   i->default_layout->layout = default_file_layout;
   i->default_layout->layout.fl_pg_pool = mds->mdsmap->get_first_data_pool();
   return i;
diff --git a/src/mds/Server.cc b/src/mds/Server.cc
index 92f5bf6426..1402888111 100644
--- a/src/mds/Server.cc
+++ b/src/mds/Server.cc
@@ -3443,7 +3443,7 @@ void Server::handle_client_setdirlayout(MDRequest *mdr)
     return;
 
   // validate layout
-  default_file_layout *layout = new default_file_layout;
+  file_layout_policy_t *layout = new file_layout_policy_t;
   if (cur->get_projected_dir_layout())
     layout->layout = *cur->get_projected_dir_layout();
   else if (dir_layout)
@@ -3570,7 +3570,7 @@ void Server::handle_set_vxattr(MDRequest *mdr, CInode *cur,
 	return;
       }
 
-      default_file_layout *dlayout = new default_file_layout;
+      file_layout_policy_t *dlayout = new file_layout_policy_t;
       if (cur->get_projected_dir_layout())
 	dlayout->layout = *cur->get_projected_dir_layout();
       else if (dir_layout)
diff --git a/src/mds/events/EMetaBlob.h b/src/mds/events/EMetaBlob.h
index bd0a8f7b4d..d0279c8dc8 100644
--- a/src/mds/events/EMetaBlob.h
+++ b/src/mds/events/EMetaBlob.h
@@ -68,7 +68,7 @@ public:
     string symlink;
     bufferlist snapbl;
     bool dirty;
-    struct default_file_layout *dir_layout;
+    struct file_layout_policy_t *dir_layout;
     typedef map<snapid_t, old_inode_t> old_inodes_t;
     old_inodes_t old_inodes;
 
@@ -80,7 +80,7 @@ public:
     fullbit(const string& d, snapid_t df, snapid_t dl, 
 	    version_t v, inode_t& i, fragtree_t &dft, 
 	    map<string,bufferptr> &xa, const string& sym,
-	    bufferlist &sbl, bool dr, default_file_layout *defl = NULL,
+	    bufferlist &sbl, bool dr, file_layout_policy_t *defl = NULL,
 	    old_inodes_t *oi = NULL) :
       //dn(d), dnfirst(df), dnlast(dl), dnv(v), 
       //inode(i), dirfragtree(dft), xattrs(xa), symlink(sym), snapbl(sbl), dirty(dr) 
@@ -138,7 +138,7 @@ public:
 	  bool dir_layout_exists;
 	  ::decode(dir_layout_exists, bl);
 	  if (dir_layout_exists) {
-	    dir_layout = new default_file_layout;
+	    dir_layout = new file_layout_policy_t;
 	    ::decode(*dir_layout, bl);
 	  }
 	}
@@ -562,7 +562,7 @@ private:
     //cout << "journaling " << in->inode.ino << " at " << my_offset << std::endl;
 
     inode_t *pi = in->get_projected_inode();
-    default_file_layout *default_layout = NULL;
+    file_layout_policy_t *default_layout = NULL;
     if (in->is_dir())
       default_layout = (in->get_projected_node() ?
                            in->get_projected_node()->dir_layout :
@@ -611,7 +611,7 @@ private:
     if (!pdft) pdft = &in->dirfragtree;
     if (!px) px = &in->xattrs;
 
-    default_file_layout *default_layout = NULL;
+    file_layout_policy_t *default_layout = NULL;
     if (in->is_dir())
       default_layout = (in->get_projected_node() ?
                            in->get_projected_node()->dir_layout :
diff --git a/src/mds/mdstypes.cc b/src/mds/mdstypes.cc
index eaeecc21b9..37c686c626 100644
--- a/src/mds/mdstypes.cc
+++ b/src/mds/mdstypes.cc
@@ -5,17 +5,17 @@
 #include "common/Formatter.h"
 
 /*
- * default_file_layout
+ * file_layout_policy_t
  */
 
-void default_file_layout::encode(bufferlist &bl) const
+void file_layout_policy_t::encode(bufferlist &bl) const
 {
   ENCODE_START(2, 2, bl);
   ::encode(layout, bl);
   ENCODE_FINISH(bl);
 }
 
-void default_file_layout::decode(bufferlist::iterator& bl)
+void file_layout_policy_t::decode(bufferlist::iterator& bl)
 {
   DECODE_START_LEGACY_COMPAT_LEN(2, 2, 2, bl);
   ::decode(layout, bl);
@@ -35,15 +35,15 @@ void dump(const ceph_file_layout& l, Formatter *f)
     f->dump_unsigned("pg_pool", l.fl_pg_pool);
 }
 
-void default_file_layout::dump(Formatter *f) const
+void file_layout_policy_t::dump(Formatter *f) const
 {
   ::dump(layout, f);
 }
 
-void default_file_layout::generate_test_instances(list<default_file_layout*>& ls)
+void file_layout_policy_t::generate_test_instances(list<file_layout_policy_t*>& ls)
 {
-  ls.push_back(new default_file_layout);
-  ls.push_back(new default_file_layout);
+  ls.push_back(new file_layout_policy_t);
+  ls.push_back(new file_layout_policy_t);
   ls.back()->layout.fl_stripe_unit = 1024;
   ls.back()->layout.fl_stripe_count = 2;
   ls.back()->layout.fl_object_size = 2048;
diff --git a/src/mds/mdstypes.h b/src/mds/mdstypes.h
index 4c38bd5717..a6bf6d5932 100644
--- a/src/mds/mdstypes.h
+++ b/src/mds/mdstypes.h
@@ -111,19 +111,19 @@ inline string ccap_string(int cap)
  * Default file layout stuff. This lets us set a default file layout on
  * a directory inode that all files in its tree will use on creation.
  */
-struct default_file_layout {
+struct file_layout_policy_t {
   ceph_file_layout layout;
 
-  default_file_layout() {
+  file_layout_policy_t() {
     memset(&layout, 0, sizeof(layout));
   }
 
   void encode(bufferlist &bl) const;
   void decode(bufferlist::iterator& bl);
   void dump(Formatter *f) const;
-  static void generate_test_instances(list<default_file_layout*>& ls);
+  static void generate_test_instances(list<file_layout_policy_t*>& ls);
 };
-WRITE_CLASS_ENCODER(default_file_layout);
+WRITE_CLASS_ENCODER(file_layout_policy_t);
 
 
 struct scatter_info_t {
diff --git a/src/test/encoding/types.h b/src/test/encoding/types.h
index 4b06a72bee..b49210f069 100644
--- a/src/test/encoding/types.h
+++ b/src/test/encoding/types.h
@@ -97,7 +97,7 @@ TYPE(snaplink_t)
 TYPE(sr_t)*/
 
 #include "mds/mdstypes.h"
-TYPE(default_file_layout)
+TYPE(file_layout_policy_t)
 TYPE(frag_info_t)
 
 #ifdef WITH_RADOSGW

