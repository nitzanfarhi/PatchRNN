commit 63292e27dff5a57ca1a0ac709a45a202cd2afd9e
Author: aystarik <aystarik>
Date:   Wed Jun 29 19:01:30 2005 +0000

    Renamed most header files
    
    
    date    2000.07.10.21.25.00;    author rmoore1; state Exp;

diff --git a/source/components/utilities/utalloc.c b/source/components/utilities/utalloc.c
index f569e2ddc..5f9c8e624 100644
--- a/source/components/utilities/utalloc.c
+++ b/source/components/utilities/utalloc.c
@@ -116,10 +116,10 @@
 #define __CMALLOC_C__
 
 #include "acpi.h"
-#include "parser.h"
-#include "interp.h"
-#include "namesp.h"
-#include "globals.h"
+#include "acparser.h"
+#include "acinterp.h"
+#include "acnamesp.h"
+#include "acglobal.h"
 
 #define _COMPONENT          MISCELLANEOUS
         MODULE_NAME         ("cmalloc");
diff --git a/source/components/utilities/utclib.c b/source/components/utilities/utclib.c
index 3ab11eeb4..f0057b175 100644
--- a/source/components/utilities/utclib.c
+++ b/source/components/utilities/utclib.c
@@ -117,10 +117,10 @@
 #define __CMCLIB_C__
 
 #include "acpi.h"
-#include "events.h"
-#include "hardware.h"
-#include "namesp.h"
-#include "interp.h"
+#include "acevents.h"
+#include "achware.h"
+#include "acnamesp.h"
+#include "acinterp.h"
 #include "amlcode.h"
 
 /*
@@ -151,11 +151,11 @@
  ******************************************************************************/
 
 
-ACPI_SIZE
+NATIVE_UINT
 AcpiCmStrlen (
     const char              *String)
 {
-    UINT32                  Length = 0;
+    NATIVE_UINT             Length = 0;
 
 
     /* Count the string until a null is encountered */
@@ -227,14 +227,15 @@ char *
 AcpiCmStrncpy (
     char                    *DstString,
     const char              *SrcString,
-    ACPI_SIZE               Count)
+    NATIVE_UINT             Count)
 {
     char                    *String = DstString;
 
 
     /* Copy the string */
 
-    for (String = DstString; Count && (Count--, (*String++ = *SrcString++)); )
+    for (String = DstString;
+        Count && (Count--, (*String++ = *SrcString++)); )
     {;}
 
     /* Pad with nulls if necessary */
@@ -302,7 +303,7 @@ UINT32
 AcpiCmStrncmp (
     const char              *String1,
     const char              *String2,
-    ACPI_SIZE               Count)
+    NATIVE_UINT             Count)
 {
 
 
@@ -373,7 +374,7 @@ char *
 AcpiCmStrncat (
     char                    *DstString,
     const char              *SrcString,
-    ACPI_SIZE               Count)
+    NATIVE_UINT             Count)
 {
     char                    *String;
 
@@ -420,7 +421,7 @@ void *
 AcpiCmMemcpy (
     void                    *Dest,
     const void              *Src,
-    ACPI_SIZE               Count)
+    NATIVE_UINT             Count)
 {
     char                    *New = (char *) Dest;
     char                    *Old = (char *) Src;
@@ -456,7 +457,7 @@ void *
 AcpiCmMemset (
     void                    *Dest,
     INT32                   Value,
-    ACPI_SIZE               Count)
+    NATIVE_UINT             Count)
 {
     char                    *New = (char *) Dest;
 
@@ -857,7 +858,9 @@ AcpiCmStrtoul (
         String++;
     }
 
-    if (Base == 16 && *String == '0' && AcpiCmToLower (*(++String)) == 'x')
+    if (Base == 16 &&
+        *String == '0' &&
+        AcpiCmToLower (*(++String)) == 'x')
     {
         String++;
     }
diff --git a/source/components/utilities/utcopy.c b/source/components/utilities/utcopy.c
index b6e532344..82b28c02f 100644
--- a/source/components/utilities/utcopy.c
+++ b/source/components/utilities/utcopy.c
@@ -116,8 +116,8 @@
 #define __CMCOPY_C__
 
 #include "acpi.h"
-#include "interp.h"
-#include "namesp.h"
+#include "acinterp.h"
+#include "acnamesp.h"
 
 
 #define _COMPONENT          MISCELLANEOUS
@@ -168,7 +168,10 @@ AcpiCmBuildExternalSimpleObject (
     FUNCTION_TRACE ("CmBuildExternalSimpleObject");
 
 
-    /* Check for NULL object case (could be an uninitialized package element */
+    /*
+     * Check for NULL object case (could be an uninitialized
+     * package element
+     */
 
     if (!InternalObj)
     {
@@ -181,8 +184,8 @@ AcpiCmBuildExternalSimpleObject (
     MEMSET (ExternalObj, 0, sizeof (ACPI_OBJECT));
 
     /*
-     * In general, the external object will be the same type as the internal
-     *  object
+     * In general, the external object will be the same type as
+     * the internal object
      */
 
     ExternalObj->Type = InternalObj->Common.Type;
@@ -219,8 +222,8 @@ AcpiCmBuildExternalSimpleObject (
     case INTERNAL_TYPE_REFERENCE:
 
         /*
-         * This is an object reference.  We use the object type of "Any" to
-         * indicate a reference object containing a handle to an ACPI
+         * This is an object reference.  We use the object type of "Any"
+         * to indicate a reference object containing a handle to an ACPI
          * named object.
          */
 
@@ -231,18 +234,23 @@ AcpiCmBuildExternalSimpleObject (
 
     case ACPI_TYPE_PROCESSOR:
 
-        ExternalObj->Processor.ProcId = InternalObj->Processor.ProcId;
-        ExternalObj->Processor.PblkAddress = InternalObj->Processor.PblkAddress;
-        ExternalObj->Processor.PblkLength = InternalObj->Processor.PblkLength;
+        ExternalObj->Processor.ProcId =
+                                InternalObj->Processor.ProcId;
+
+        ExternalObj->Processor.PblkAddress =
+                                InternalObj->Processor.PblkAddress;
+
+        ExternalObj->Processor.PblkLength =
+                                InternalObj->Processor.PblkLength;
         break;
 
     case ACPI_TYPE_POWER:
 
         ExternalObj->PowerResource.SystemLevel =
-            InternalObj->PowerResource.SystemLevel;
+                            InternalObj->PowerResource.SystemLevel;
 
         ExternalObj->PowerResource.ResourceOrder =
-            InternalObj->PowerResource.ResourceOrder;
+                            InternalObj->PowerResource.ResourceOrder;
         break;
 
     default:
@@ -357,8 +365,8 @@ AcpiCmBuildExternalPackageObject (
 
 
         /*
-         * Check for 1) Null object -- OK, this can happen if package element
-         *              is never initialized
+         * Check for 1) Null object -- OK, this can happen if package
+         *              element is never initialized
          *           2) Not an internal object - can be an NTE instead
          *           3) Any internal object other than a package.
          *
@@ -366,17 +374,20 @@ AcpiCmBuildExternalPackageObject (
          */
 
         if ((!ThisInternalObj) ||
-            (!VALID_DESCRIPTOR_TYPE (ThisInternalObj,
-                ACPI_DESC_TYPE_INTERNAL)) ||
-            (!IS_THIS_OBJECT_TYPE (ThisInternalObj, ACPI_TYPE_PACKAGE)))
+            (!VALID_DESCRIPTOR_TYPE (
+                ThisInternalObj, ACPI_DESC_TYPE_INTERNAL)) ||
+            (!IS_THIS_OBJECT_TYPE (
+                ThisInternalObj, ACPI_TYPE_PACKAGE)))
         {
             /*
              * This is a simple or null object -- get the size
              */
 
-            Status = AcpiCmBuildExternalSimpleObject (ThisInternalObj,
-                                                      ThisExternalObj,
-                                                      FreeSpace, &ObjectSpace);
+            Status =
+                AcpiCmBuildExternalSimpleObject (ThisInternalObj,
+                                                ThisExternalObj,
+                                                FreeSpace,
+                                                &ObjectSpace);
             if (ACPI_FAILURE (Status))
             {
                 return_ACPI_STATUS (Status);
@@ -386,27 +397,31 @@ AcpiCmBuildExternalPackageObject (
             Length      += ObjectSpace;
 
             LevelPtr->Index++;
-            while (LevelPtr->Index >= LevelPtr->InternalObj->Package.Count)
+            while (LevelPtr->Index >=
+                    LevelPtr->InternalObj->Package.Count)
             {
                 /*
-                 * We've handled all of the objects at this level,  This means
-                 * that we have just completed a package.  That package may
-                 * have contained one or more packages itself
+                 * We've handled all of the objects at this
+                 * level.  This means that we have just
+                 * completed a package.  That package may
+                 * have contained one or more packages
+                 * itself
                  */
                 if (CurrentDepth == 0)
                 {
                     /*
-                     * We have handled all of the objects in the top level
-                     * package just add the length of the package objects and
-                     * get out
+                     * We have handled all of the objects
+                     * in the top level package just add
+                     * the length of the package objects
+                     * and get out
                      */
                     *SpaceUsed = Length;
                     return_ACPI_STATUS (AE_OK);
                 }
 
                 /*
-                 * go back up a level and move the index past the just completed
-                 * package object.
+                 * go back up a level and move the index
+                 * past the just completed package object.
                  */
                 CurrentDepth--;
                 LevelPtr = &Level[CurrentDepth];
@@ -418,12 +433,14 @@ AcpiCmBuildExternalPackageObject (
         else
         {
             /*
-             * This object is a package -- we must go one level deeper
+             * This object is a package
+             * -- we must go one level deeper
              */
             if (CurrentDepth >= MAX_PACKAGE_DEPTH-1)
             {
                 /*
-                 * Too many nested levels of packages for us to handle
+                 * Too many nested levels of packages
+                 * for us to handle
                  */
                 DEBUG_PRINT (ACPI_ERROR,
                     ("CmBuildPackageObject: Pkg nested too deep (max %d)\n",
@@ -434,17 +451,20 @@ AcpiCmBuildExternalPackageObject (
             /*
              * Build the package object
              */
-            ThisExternalObj->Type              = ACPI_TYPE_PACKAGE;
-            ThisExternalObj->Package.Count     = ThisInternalObj->Package.Count;
-            ThisExternalObj->Package.Elements  = (ACPI_OBJECT *) FreeSpace;
+            ThisExternalObj->Type = ACPI_TYPE_PACKAGE;
+            ThisExternalObj->Package.Count =
+                                    ThisInternalObj->Package.Count;
+            ThisExternalObj->Package.Elements =
+                                        (ACPI_OBJECT *) FreeSpace;
 
             /*
              * Save space for the array of objects (Package elements)
              * update the buffer length counter
              */
-            ObjectSpace             = (UINT32)
-                ROUND_UP_TO_NATIVE_WORD (ThisExternalObj->Package.Count *
-                sizeof (ACPI_OBJECT));
+            ObjectSpace = (UINT32) ROUND_UP_TO_NATIVE_WORD (
+                                ThisExternalObj->Package.Count *
+                                sizeof (ACPI_OBJECT));
+
             FreeSpace               += ObjectSpace;
             Length                  += ObjectSpace;
 
@@ -491,9 +511,10 @@ AcpiCmBuildExternalObject (
          * Package objects contain other objects (which can be objects)
          * buildpackage does it all
          */
-        Status = AcpiCmBuildExternalPackageObject (InternalObj,
-                                                   RetBuffer->Pointer,
-                                                   &RetBuffer->Length);
+        Status =
+            AcpiCmBuildExternalPackageObject (InternalObj,
+                                                RetBuffer->Pointer,
+                                                &RetBuffer->Length);
     }
 
     else
@@ -501,11 +522,13 @@ AcpiCmBuildExternalObject (
         /*
          * Build a simple object (no nested objects)
          */
-        Status = AcpiCmBuildExternalSimpleObject (InternalObj,
-                                (ACPI_OBJECT *) RetBuffer->Pointer,
-                                ((UINT8 *) RetBuffer->Pointer +
-                                ROUND_UP_TO_NATIVE_WORD (sizeof (ACPI_OBJECT))),
-                                &RetBuffer->Length);
+        Status =
+            AcpiCmBuildExternalSimpleObject (InternalObj,
+                            (ACPI_OBJECT *) RetBuffer->Pointer,
+                            ((UINT8 *) RetBuffer->Pointer +
+                            ROUND_UP_TO_NATIVE_WORD (
+                                        sizeof (ACPI_OBJECT))),
+                            &RetBuffer->Length);
         /*
          * build simple does not include the object size in the length
          * so we add it in here
@@ -549,15 +572,15 @@ AcpiCmBuildInternalSimpleObject (
 
     case ACPI_TYPE_STRING:
 
-        InternalObj->String.Length      = ExternalObj->String.Length;
-        InternalObj->String.Pointer     = ExternalObj->String.Pointer;
+        InternalObj->String.Length  = ExternalObj->String.Length;
+        InternalObj->String.Pointer = ExternalObj->String.Pointer;
         break;
 
 
     case ACPI_TYPE_BUFFER:
 
-        InternalObj->Buffer.Length      = ExternalObj->Buffer.Length;
-        InternalObj->Buffer.Pointer     = ExternalObj->Buffer.Pointer;
+        InternalObj->Buffer.Length  = ExternalObj->Buffer.Length;
+        InternalObj->Buffer.Pointer = ExternalObj->Buffer.Pointer;
         break;
 
 
@@ -565,7 +588,7 @@ AcpiCmBuildInternalSimpleObject (
         /*
          * Number is included in the object itself
          */
-        InternalObj->Number.Value           = ExternalObj->Number.Value;
+        InternalObj->Number.Value   = ExternalObj->Number.Value;
         break;
 
 
@@ -657,10 +680,12 @@ AcpiCmBuildInternalPackageObject (
     while (1)
     {
         ThisIndex       = LevelPtr->Index;
+
         ThisInternalObj = (ACPI_OBJECT_INTERNAL *)
-                          &LevelPtr->InternalObj->Package.Elements[ThisIndex];
+                    &LevelPtr->InternalObj->Package.Elements[ThisIndex];
+
         ThisExternalObj = (ACPI_OBJECT *)
-                          &LevelPtr->ExternalObj->Package.Elements[ThisIndex];
+                    &LevelPtr->ExternalObj->Package.Elements[ThisIndex];
 
         if (IS_THIS_OBJECT_TYPE (ThisInternalObj, ACPI_TYPE_PACKAGE))
         {
@@ -681,16 +706,17 @@ AcpiCmBuildInternalPackageObject (
             /*
              * Build the package object
              */
-            ThisExternalObj->Type             = ACPI_TYPE_PACKAGE;
-            ThisExternalObj->Package.Count    = ThisInternalObj->Package.Count;
-            ThisExternalObj->Package.Elements = (ACPI_OBJECT *) FreeSpace;
+            ThisExternalObj->Type               = ACPI_TYPE_PACKAGE;
+            ThisExternalObj->Package.Count      = ThisInternalObj->Package.Count;
+            ThisExternalObj->Package.Elements   = (ACPI_OBJECT *) FreeSpace;
 
             /*
              * Save space for the array of objects (Package elements)
              * update the buffer length counter
              */
             ObjectSpace             = ThisExternalObj->Package.Count *
-                                      sizeof (ACPI_OBJECT);
+                                            sizeof (ACPI_OBJECT);
+
             FreeSpace               += ObjectSpace;
             Length                  += ObjectSpace;
 
@@ -717,30 +743,34 @@ AcpiCmBuildInternalPackageObject (
             }
 
             FreeSpace   += ObjectSpace;
-            Length      +=ObjectSpace;
+            Length      += ObjectSpace;
 
             LevelPtr->Index++;
-            while (LevelPtr->Index >= LevelPtr->InternalObj->Package.Count)
+            while (LevelPtr->Index >=
+                    LevelPtr->InternalObj->Package.Count)
             {
                 /*
-                 * We've handled all of the objects at this level,  This means
-                 * that we have just completed a package.  That package may
-                 * have contained one or more packages itself
+                 * We've handled all of the objects at
+                 * this level,  This means that we have
+                 * just completed a package.  That package
+                 * may have contained one or more packages
+                 * itself
                  */
                 if (CurrentDepth == 0)
                 {
                     /*
-                     * We have handled all of the objects in the top level
-                     * package just add the length of the package objects and
-                     * get out
+                     * We have handled all of the objects
+                     * in the top level package just add
+                     * the length of the package objects
+                     * and get out
                      */
                     *SpaceUsed = Length;
                     return_ACPI_STATUS (AE_OK);
                 }
 
                 /*
-                 * go back up a level and move the index past the just
-                 * completed package object.
+                 * go back up a level and move the index
+                 * past the just completed package object.
                  */
                 CurrentDepth--;
                 LevelPtr = &Level[CurrentDepth];
@@ -751,7 +781,8 @@ AcpiCmBuildInternalPackageObject (
 
 
     /*
-     * We'll never get here, but the compiler whines about return value
+     * We'll never get here, but the compiler whines about
+     * return value
      */
     return_ACPI_STATUS (AE_OK);
 }
diff --git a/source/components/utilities/utdelete.c b/source/components/utilities/utdelete.c
index e95c9e97b..2884a90d5 100644
--- a/source/components/utilities/utdelete.c
+++ b/source/components/utilities/utdelete.c
@@ -117,10 +117,10 @@
 #define __CMDELETE_C__
 
 #include "acpi.h"
-#include "interp.h"
-#include "namesp.h"
-#include "tables.h"
-#include "parser.h"
+#include "acinterp.h"
+#include "acnamesp.h"
+#include "actables.h"
+#include "acparser.h"
 
 #define _COMPONENT          MISCELLANEOUS
         MODULE_NAME         ("cmdelete");
diff --git a/source/components/utilities/uteval.c b/source/components/utilities/uteval.c
index 13886922e..26e614944 100644
--- a/source/components/utilities/uteval.c
+++ b/source/components/utilities/uteval.c
@@ -117,8 +117,8 @@
 #define __CMEVAL_C__
 
 #include "acpi.h"
-#include "namesp.h"
-#include "interp.h"
+#include "acnamesp.h"
+#include "acinterp.h"
 
 
 #define _COMPONENT          MISCELLANEOUS

