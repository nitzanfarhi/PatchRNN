commit 91adcd2c4b104a8ce2973e6e84b01fd48735ffc6
Author: Steven Rostedt <srostedt@redhat.com>
Date:   Wed Sep 16 20:03:06 2009 -0400

    vsprintf: add %ps that is the same as %pS but is like %pf
    
    On PowerPC64 function pointers do not point directly at the functions,
    but instead point to pointers to the functions. The output of %pF expects
    to point to a pointer to the function, whereas %pS will show the function
    itself.
    
    mcount returns the direct pointer to the function and not the pointer to
    the pointer. Thus %pS must be used to show this. The function tracer
    requires printing of the functions without offsets and uses the %pf
    instead.
    
     %pF produces run_local_timers+0x4/0x1f
     %pf produces just run_local_timers
    
    For PowerPC64, we need to use the direct pointer, and we only have
    %pS which will produce .run_local_timers+0x4/0x1f
    
    This patch creates a %ps that matches the %pf as %pS matches %pF.
    
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Zhao Lei <zhaolei@cn.fujitsu.com>
    Acked-by: Benjamin Herrenschmidt <benh@kernel.crashing.org>
    Signed-off-by: Steven Rostedt <rostedt@goodmis.org>

diff --git a/lib/vsprintf.c b/lib/vsprintf.c
index cb8a112030bb..c8f3ed62cee1 100644
--- a/lib/vsprintf.c
+++ b/lib/vsprintf.c
@@ -581,7 +581,7 @@ static char *symbol_string(char *buf, char *end, void *ptr,
 	unsigned long value = (unsigned long) ptr;
 #ifdef CONFIG_KALLSYMS
 	char sym[KSYM_SYMBOL_LEN];
-	if (ext != 'f')
+	if (ext != 'f' && ext != 's')
 		sprint_symbol(sym, value);
 	else
 		kallsyms_lookup(value, NULL, NULL, NULL, sym);
@@ -822,6 +822,7 @@ static char *pointer(const char *fmt, char *buf, char *end, void *ptr,
 	case 'F':
 	case 'f':
 		ptr = dereference_function_descriptor(ptr);
+	case 's':
 		/* Fallthrough */
 	case 'S':
 		return symbol_string(buf, end, ptr, spec, *fmt);
@@ -1063,7 +1064,8 @@ qualifier:
  * @args: Arguments for the format string
  *
  * This function follows C99 vsnprintf, but has some extensions:
- * %pS output the name of a text symbol
+ * %pS output the name of a text symbol with offset
+ * %ps output the name of a text symbol without offset
  * %pF output the name of a function pointer with its offset
  * %pf output the name of a function pointer without its offset
  * %pR output the address range in a struct resource

