commit 8c30ac5e76e05bcc0cad55e7e24127b653538f6a
Author: qixin <xqi@facebook.com>
Date:   Thu Sep 2 19:48:53 2010 -0700

    [Fix] Line numbers for property accesses
    
    Summary:
    For accesses that may raise notices about undefined properties, we add a LINE
    macro there, so that the line number would be correct in the error report.
    
    Test Plan:
    fast_tests
    slow_tests
    
    DiffCamp Revision: 153990
    Reviewed By: mwilliams
    Commenters: hzhao
    CC: hzhao, mwilliams, hphp-diffs@lists
    Tasks:
    #360373: Error Message: PHP: Undefined property:
    FadPandemicFactory::$platformAssoc (in
    flib/ads/frontend/units2/factories/pandemic.php on line 0) (Had post data)
    
    Revert Plan:
    OK

diff --git a/src/compiler/expression/object_property_expression.cpp b/src/compiler/expression/object_property_expression.cpp
index 6413f8dee3..2862b3cf5e 100644
--- a/src/compiler/expression/object_property_expression.cpp
+++ b/src/compiler/expression/object_property_expression.cpp
@@ -338,16 +338,7 @@ void ObjectPropertyExpression::outputCPPObjProperty(CodeGenerator &cg,
                                                     bool directVariant,
                                                     int doExist) {
   bool bThis = m_object->isThis();
-  bool useGetThis = false;
   FunctionScopePtr funcScope = ar->getFunctionScope();
-  if (bThis) {
-    if (funcScope && funcScope->isStatic()) {
-      cg_printf("GET_THIS_ARROW()");
-    } else {
-      // in order for __set() and __get() to be called
-      useGetThis = true;
-    }
-  }
 
   const char *op = ".";
   string func = Option::ObjectPrefix;
@@ -380,6 +371,22 @@ void ObjectPropertyExpression::outputCPPObjProperty(CodeGenerator &cg,
     }
   }
 
+  bool linemap = false;
+  if (strcmp(error, ", true") == 0) {
+    // existence check for object properties
+    linemap = outputLineMap(cg, ar, true);
+  }
+
+  bool useGetThis = false;
+  if (bThis) {
+    if (funcScope && funcScope->isStatic()) {
+      cg_printf("GET_THIS_ARROW()");
+    } else {
+      // in order for __set() and __get() to be called
+      useGetThis = true;
+    }
+  }
+
   if (m_property->getKindOf() == Expression::KindOfScalarExpression) {
     ScalarExpressionPtr name =
       dynamic_pointer_cast<ScalarExpression>(m_property);
@@ -433,6 +440,8 @@ void ObjectPropertyExpression::outputCPPObjProperty(CodeGenerator &cg,
     m_property->outputCPP(cg, ar);
     cg_printf("%s%s)", error, context);
   }
+
+  if (linemap) cg_printf(")");
 }
 
 void ObjectPropertyExpression::outputCPPExistTest(CodeGenerator &cg,

