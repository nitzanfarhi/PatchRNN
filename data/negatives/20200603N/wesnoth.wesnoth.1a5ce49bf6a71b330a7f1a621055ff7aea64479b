commit 1a5ce49bf6a71b330a7f1a621055ff7aea64479b
Author: Celtic Minstrel <celtic.minstrel.ca@some.place>
Date:   Tue Aug 9 23:57:51 2016 -0400

    Re-enable unit map and recall list tests

diff --git a/src/actions/unit_creator.cpp b/src/actions/unit_creator.cpp
index ce0341fb62..9063316130 100644
--- a/src/actions/unit_creator.cpp
+++ b/src/actions/unit_creator.cpp
@@ -166,7 +166,7 @@ void unit_creator::add_unit(const config &cfg, const vconfig* vcfg)
 
 	if ( !recall_list_element ) {
 		//make the new unit
-		unit_ptr new_unit(new unit(temp_cfg, true, vcfg, &board_->unit_id_manager()));
+		unit_ptr new_unit(new unit(temp_cfg, true, vcfg));
 		map_location loc = find_location(temp_cfg, new_unit.get());
 		if ( loc.valid() ) {
 			//add the new unit to map
diff --git a/src/tests/test_recall_list.cpp b/src/tests/test_recall_list.cpp
index 6068fb9bce..b002b189df 100644
--- a/src/tests/test_recall_list.cpp
+++ b/src/tests/test_recall_list.cpp
@@ -24,7 +24,6 @@
 BOOST_AUTO_TEST_SUITE( recall_list_suite )
 
 BOOST_AUTO_TEST_CASE( test_1 ) {
-	return;
 	config game_config(test_utils::get_test_config());
 
 	config orc_config = config_of
diff --git a/src/tests/test_unit_map.cpp b/src/tests/test_unit_map.cpp
index 2b82cec00f..af7d07b603 100644
--- a/src/tests/test_unit_map.cpp
+++ b/src/tests/test_unit_map.cpp
@@ -34,8 +34,6 @@
 BOOST_AUTO_TEST_SUITE( unit_map_suite )
 
 BOOST_AUTO_TEST_CASE( test_1 ) {
-	// FIXME: this test currently fails becasue unit id manager was moved to game_board.
-	return;
 	config game_config(test_utils::get_test_config());
 
 	config orc_config;
@@ -122,8 +120,6 @@ BOOST_AUTO_TEST_CASE( test_1 ) {
 }
 
 BOOST_AUTO_TEST_CASE( track_real_unit_by_underlying_id ) {
-		// FIXME: this test currently fails becasue unit id manager was moved to game_board.
-	return;
 	config game_config(test_utils::get_test_config());
 
 	config orc_config;
@@ -170,8 +166,6 @@ BOOST_AUTO_TEST_CASE( track_real_unit_by_underlying_id ) {
 }
 
 BOOST_AUTO_TEST_CASE( track_fake_unit_by_underlying_id ) {
-	// FIXME: this test currently fails becasue unit id manager was moved to game_board.
-	return;
 	config game_config(test_utils::get_test_config());
 
 	config orc_config;
@@ -218,9 +212,6 @@ BOOST_AUTO_TEST_CASE( track_fake_unit_by_underlying_id ) {
 }
 
 BOOST_AUTO_TEST_CASE( track_real_unit_by_iterator ) {
-	// FIXME: this test currently fails becasue unit id manager was moved to game_board.
-	return;
-
 	config game_config(test_utils::get_test_config());
 
 	config orc_config;
@@ -258,8 +249,6 @@ BOOST_AUTO_TEST_CASE( track_real_unit_by_iterator ) {
 }
 
 BOOST_AUTO_TEST_CASE( track_fake_unit_by_iterator ) {
-	// FIXME: this test currently fails becasue unit id manager was moved to game_board.
-	return;
 	config game_config(test_utils::get_test_config());
 
 	config orc_config;
diff --git a/src/units/id.cpp b/src/units/id.cpp
index 85dccec38a..6ee4d24c48 100644
--- a/src/units/id.cpp
+++ b/src/units/id.cpp
@@ -22,10 +22,7 @@ static lg::log_domain log_unit("unit");
 
 namespace n_unit
 {
-	id_manager id_manager::manager_;
-
-	id_manager::id_manager() : next_id_(0), fake_id_(0)
-	{}
+	id_manager id_manager::manager_(0);
 
 	unit_id id_manager::next_id()
 	{
diff --git a/src/units/id.hpp b/src/units/id.hpp
index 3373ca1283..cb91a13bec 100644
--- a/src/units/id.hpp
+++ b/src/units/id.hpp
@@ -33,7 +33,7 @@ namespace n_unit {
 		bool is_empty() const { return !value; }
 
 		static unit_id create_real(size_t val) { return unit_id(val); }
-		static unit_id create_fake(size_t val) { return unit_id(val + highest_bit); }
+		static unit_id create_fake(size_t val) { return unit_id(val | highest_bit); }
 
 		friend bool operator <(unit_id a, unit_id b) { return a.value < b.value; }
 		friend bool operator <=(unit_id a, unit_id b) { return a.value <= b.value; }
@@ -48,7 +48,6 @@ namespace n_unit {
 		size_t next_id_;
 		size_t fake_id_;
 		static id_manager manager_;
-		id_manager();
 	public:
 		id_manager(size_t next_id) : next_id_(next_id) , fake_id_(0) {}
 		/** returns id for unit that is created */
@@ -62,6 +61,7 @@ namespace n_unit {
 		/** Clears id counter after game */
 		void clear();
 		void reset_fake();
+		static id_manager& global_instance() {return manager_;}
 	};
 
 }
diff --git a/src/units/unit.cpp b/src/units/unit.cpp
index 314dc2a832..aed2418f04 100644
--- a/src/units/unit.cpp
+++ b/src/units/unit.cpp
@@ -329,7 +329,7 @@ struct ptr_vector_pushback
 	boost::ptr_vector<config>* vec_;
 };
 
-unit::unit(const config &cfg, bool use_traits, const vconfig* vcfg, n_unit::id_manager* id_manager)
+unit::unit(const config &cfg, bool use_traits, const vconfig* vcfg)
 	: ref_count_(0)
 	, loc_(cfg["x"] - 1, cfg["y"] - 1)
 	, advances_to_()
@@ -409,7 +409,7 @@ unit::unit(const config &cfg, bool use_traits, const vconfig* vcfg, n_unit::id_m
 
 	validate_side(side_);
 	underlying_id_ = n_unit::unit_id(cfg["underlying_id"].to_size_t());
-	set_underlying_id(id_manager ? *id_manager : resources::gameboard->unit_id_manager());
+	set_underlying_id(resources::gameboard ? resources::gameboard->unit_id_manager() : n_unit::id_manager::global_instance());
 
 	overlays_ = utils::parenthetical_split(cfg["overlays"], ',');
 	if(overlays_.size() == 1 && overlays_.front() == "") {
@@ -624,7 +624,6 @@ unit::unit(const unit_type &u_type, int side, bool real_unit, unit_race::GENDER
 	, race_(&unit_race::null_race)
 	, id_()
 	, name_()
-	, underlying_id_(real_unit? n_unit::unit_id(0) : resources::gameboard->unit_id_manager().next_fake_id())
 	, undead_variation_()
 	, variation_(type_->default_variation())
 	, hit_points_(0)
@@ -695,7 +694,7 @@ unit::unit(const unit_type &u_type, int side, bool real_unit, unit_race::GENDER
 	if(real_unit) {
 		generate_name();
 	}
-	set_underlying_id(resources::gameboard->unit_id_manager());
+	set_underlying_id(resources::gameboard ? resources::gameboard->unit_id_manager() : n_unit::id_manager::global_instance());
 
 	// Set these after traits and modifications have set the maximums.
 	movement_ = max_movement_;
@@ -2361,14 +2360,15 @@ void unit::set_underlying_id(n_unit::id_manager& id_manager)
 
 unit& unit::clone(bool is_temporary)
 {
+	n_unit::id_manager& ids = resources::gameboard ? resources::gameboard->unit_id_manager() : n_unit::id_manager::global_instance();
 	if(is_temporary) {
-		underlying_id_ = resources::gameboard->unit_id_manager().next_fake_id();
+		underlying_id_ = ids.next_fake_id();
 	} else {
 		if(synced_context::is_synced() || !resources::gamedata || resources::gamedata->phase() == game_data::INITIAL) {
-			underlying_id_ = resources::gameboard->unit_id_manager().next_id();
+			underlying_id_ = ids.next_id();
 		}
 		else {
-			underlying_id_ = resources::gameboard->unit_id_manager().next_fake_id();
+			underlying_id_ = ids.next_fake_id();
 		}
 		std::string::size_type pos = id_.find_last_of('-');
 		if(pos != std::string::npos && pos+1 < id_.size()
@@ -2376,7 +2376,7 @@ unit& unit::clone(bool is_temporary)
 			// this appears to be a duplicate of a generic unit, so give it a new id
 			WRN_UT << "assigning new id to clone of generic unit " << id_ << std::endl;
 			id_.clear();
-			set_underlying_id(resources::gameboard->unit_id_manager());
+			set_underlying_id(ids);
 		}
 	}
 	return *this;
diff --git a/src/units/unit.hpp b/src/units/unit.hpp
index 262f918a9b..9513b63c50 100644
--- a/src/units/unit.hpp
+++ b/src/units/unit.hpp
@@ -98,11 +98,7 @@ public:
 	unit(const unit& u);
 
 	/** Initializes a unit from a config */
-	explicit unit(
-			  const config& cfg
-			, bool use_traits = false
-			, const vconfig* vcfg = nullptr
-			, n_unit::id_manager* id_manager = nullptr);
+	explicit unit(const config& cfg, bool use_traits = false, const vconfig* vcfg = nullptr);
 
 	/**
 	  * Initializes a unit from a unit type

