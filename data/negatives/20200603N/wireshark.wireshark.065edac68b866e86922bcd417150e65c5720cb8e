commit 065edac68b866e86922bcd417150e65c5720cb8e
Author: Ulf Lamping <ulf.lamping@web.de>
Date:   Thu Jan 15 01:13:51 2004 +0000

    move "marked packet color" setting from gui_prefs to Colors page.
    remove the Color dialog from gui_prefs.c
    
    svn path=/trunk/; revision=9667

diff --git a/gtk/gui_prefs.c b/gtk/gui_prefs.c
index d9ae33b9f2..61f28e1b7d 100644
--- a/gtk/gui_prefs.c
+++ b/gtk/gui_prefs.c
@@ -1,7 +1,7 @@
 /* gui_prefs.c
  * Dialog box for GUI preferences
  *
- * $Id: gui_prefs.c,v 1.51 2004/01/10 16:27:41 ulfl Exp $
+ * $Id: gui_prefs.c,v 1.52 2004/01/15 01:13:51 ulfl Exp $
  *
  * Ethereal - Network traffic analyzer
  * By Gerald Combs <gerald@ethereal.com>
@@ -30,8 +30,6 @@
 
 #include <string.h>
 
-#include "color.h"
-#include "color_utils.h"
 #include "globals.h"
 #include "gui_prefs.h"
 #include "gtkglobals.h"
@@ -53,14 +51,6 @@ static void font_browse_cb(GtkWidget *w, gpointer data);
 static void font_browse_ok_cb(GtkWidget *w, GtkFontSelectionDialog *fs);
 static void font_browse_destroy(GtkWidget *win, gpointer data);
 static gint fetch_enum_value(gpointer control, const enum_val_t *enumvals);
-static void color_browse_cb(GtkWidget *w, gpointer data);
-static void update_text_color(GtkWidget *w, gpointer data);
-static void update_current_color(GtkWidget *w, gpointer data);
-static void color_ok_cb(GtkWidget *w, gpointer data);
-static void color_cancel_cb(GtkWidget *w, gpointer data);
-static gboolean color_delete_cb(GtkWidget *prefs_w, gpointer dummy);
-static void color_destroy_cb(GtkWidget *w, gpointer data);
-static void fetch_colors(void);
 static gint fileopen_dir_changed_cb(GtkWidget *myentry _U_, GdkEvent *event, gpointer parent_w);
 static void fileopen_selected_cb(GtkWidget *mybutton_rb _U_, gpointer parent_w);
 static gint recent_files_count_changed_cb(GtkWidget *recent_files_entry _U_, 
@@ -81,10 +71,6 @@ static gint recent_files_count_changed_cb(GtkWidget *recent_files_entry _U_,
 
 #define FONT_DIALOG_PTR_KEY	"font_dialog_ptr"
 #define FONT_CALLER_PTR_KEY	"font_caller_ptr"
-#define COLOR_DIALOG_PTR_KEY	"color_dialog_ptr"
-#define COLOR_CALLER_PTR_KEY	"color_caller_ptr"
-#define COLOR_SAMPLE_PTR_KEY	"color_sample_ptr"
-#define COLOR_SELECTION_PTR_KEY	"color_selection_ptr"
 
 #define GUI_FILEOPEN_KEY	"fileopen_behavior"
 #define GUI_RECENT_FILES_COUNT_KEY "recent_files_count"
@@ -147,12 +133,6 @@ static const enum_val_t gui_fileopen_vals[] = {
         { NULL,    0 }
 };
 
-/* Set to FALSE initially; set to TRUE if the user ever hits "OK" on
-   the "Colors..." dialog, so that we know that they (probably) changed
-   colors, and therefore that the "apply" function needs to recolor
-   any marked packets. */
-static gboolean colors_changed;
-
 /* Set to FALSE initially; set to TRUE if the user ever hits "OK" on
    the "Font..." dialog, so that we know that they (probably) changed
    the font, and therefore that the "apply" function needs to take care
@@ -175,7 +155,7 @@ static char recent_files_count_max_str[128] = "";
 GtkWidget*
 gui_prefs_show(void)
 {
-	GtkWidget *main_tb, *main_vb, *hbox, *font_bt, *color_bt;
+	GtkWidget *main_tb, *main_vb, *hbox, *font_bt;
 	GtkWidget *scrollbar_om, *plist_browse_om;
 	GtkWidget *ptree_browse_om, *highlight_style_om;
         GtkWidget *fileopen_rb, *fileopen_dir_te, *toolbar_style_om;
@@ -189,8 +169,7 @@ gui_prefs_show(void)
         int        pos = 0;
 	char       current_val_str[128];
 
-	/* The colors or font haven't been changed yet. */
-	colors_changed = FALSE;
+	/* The font haven't been changed yet. */
 	font_changed = FALSE;
 
 	/* Main vertical box */
@@ -298,12 +277,7 @@ gui_prefs_show(void)
 	SIGNAL_CONNECT(font_bt, "clicked", font_browse_cb, NULL);
 	gtk_table_attach_defaults( GTK_TABLE(main_tb), font_bt, 2, 3, 0, 1 );
 
-	/* "Colors..." button - click to open a color selection dialog box. */
-    color_bt = BUTTON_NEW_FROM_STOCK(GTK_STOCK_SELECT_COLOR);
-	SIGNAL_CONNECT(color_bt, "clicked", color_browse_cb, NULL);
-	gtk_table_attach_defaults( GTK_TABLE(main_tb), color_bt, 2, 3, 1, 2 );
-
-        fileopen_selected_cb(NULL, main_vb);        
+    fileopen_selected_cb(NULL, main_vb);        
 
 	/* Show 'em what we got */
 	gtk_widget_show_all(main_vb);
@@ -534,9 +508,6 @@ gui_prefs_fetch(GtkWidget *w)
 			g_free(prefs.gui_font_name);
 		prefs.gui_font_name = g_strdup(new_font_name);
 	}
-
-	if (colors_changed)
-		fetch_colors();
 }
 
 void
@@ -583,9 +554,10 @@ gui_prefs_apply(GtkWidget *w _U_)
 	supported_redraw();
 	help_redraw();
 
-	/* Redraw the "Follow TCP Stream" windows, in case either the font
-	   or the colors to use changed. */
-	follow_redraw_all();
+	/* Redraw the "Follow TCP Stream" windows, if the font changed. */
+	if (font_changed) {
+    	follow_redraw_all();
+    }
 
 	/* XXX: redraw the toolbar only, if style changed */
 	toolbar_redraw_all();
@@ -594,8 +566,6 @@ gui_prefs_apply(GtkWidget *w _U_)
 	set_plist_sel_browse(prefs.gui_plist_sel_browse);
 	set_ptree_sel_browse_all(prefs.gui_ptree_sel_browse);
 	set_tree_styles_all();
-	if (colors_changed)
-		update_marked_frames();
 
 	/* We're no longer using the old fonts; unreference them. */
 #if GTK_MAJOR_VERSION < 2
@@ -626,15 +596,6 @@ gui_prefs_destroy(GtkWidget *w)
 		gtk_widget_destroy(fs);
 	}
 
-	/* Is there a color selection dialog associated with this
-	   Preferences dialog? */
-	fs = OBJECT_GET_DATA(caller, COLOR_DIALOG_PTR_KEY);
-
-	if (fs != NULL) {
-		/* Yes.  Destroy it. */
-		gtk_widget_destroy(fs);
-	}
-
 	/* Free up any saved font name. */
 	if (new_font_name != NULL) {
 		g_free(new_font_name);
@@ -642,30 +603,6 @@ gui_prefs_destroy(GtkWidget *w)
 	}
 }
 
-/* color selection part */
-
-#define MAX_HANDLED_COL		2
-
-typedef struct {
-  GdkColor color;
-  char    *label;
-} color_info_t;
-
-static color_info_t color_info[MAX_HANDLED_COL] = {
-#define MFG_IDX			0
-  { {0, 0, 0, 0},      	"Marked frame foreground" },
-#define MBG_IDX			1
-  { {0, 0, 0, 0},	    "Marked frame background" }
-};
-
-#define SAMPLE_MARKED_TEXT	"Sample marked frame text\n"
-
-#define CS_RED			0
-#define CS_GREEN		1
-#define CS_BLUE			2
-#define CS_OPACITY		3
-
-static GdkColor *curcolor = NULL;
 
 static gint
 recent_files_count_changed_cb(GtkWidget *recent_files_entry _U_, 
@@ -727,252 +664,3 @@ fileopen_selected_cb(GtkWidget *mybutton_rb _U_, gpointer parent_w)
     }
     return;
 }
-
-static void
-color_browse_cb(GtkWidget *w, gpointer data _U_)
-{
-
-  GtkWidget *main_vb, *main_tb, *label, *optmenu, *menu, *menuitem;
-  GtkWidget *sample, *colorsel, *bbox, *cancel_bt, *ok_bt, *color_w;
-  int        i;
-  GtkWidget *caller = gtk_widget_get_toplevel(w);
-#if GTK_MAJOR_VERSION < 2
-  gdouble    scolor[4];
-  int        width, height;
-#else
-  GtkTextBuffer *buffer;
-  GtkTextIter    iter;
-#endif
-
-  /* Has a color dialog box already been opened for that top-level
-     widget? */
-  color_w = OBJECT_GET_DATA(caller, COLOR_DIALOG_PTR_KEY);
-
-  if (color_w != NULL) {
-    /* Yes.  Just re-activate that dialog box. */
-    reactivate_window(color_w);
-    return;
-  }
-
-  color_t_to_gdkcolor(&color_info[MFG_IDX].color, &prefs.gui_marked_fg);
-  color_t_to_gdkcolor(&color_info[MBG_IDX].color, &prefs.gui_marked_bg);
-  curcolor = &color_info[MFG_IDX].color;
-#if GTK_MAJOR_VERSION < 2
-  scolor[CS_RED]     = (gdouble) (curcolor->red)   / 65535.0;
-  scolor[CS_GREEN]   = (gdouble) (curcolor->green) / 65535.0;
-  scolor[CS_BLUE]    = (gdouble) (curcolor->blue)  / 65535.0;
-  scolor[CS_OPACITY] = 1.0;
-#endif
-
-  /* Now create a new dialog.
-     You can't put your own extra widgets into a color selection
-     dialog, as you can with a file selection dialog, so we have to
-     construct our own dialog and put a color selection widget
-     into it. */
-  color_w = dlg_window_new("Ethereal: Select Color");
-
-  SIGNAL_CONNECT(color_w, "delete_event", color_delete_cb, NULL);
-
-  /* Call a handler when we're destroyed, so we can inform our caller,
-     if any, that we've been destroyed. */
-  SIGNAL_CONNECT(color_w, "destroy", color_destroy_cb, NULL);
-
-  main_vb = gtk_vbox_new(FALSE, 5);
-  gtk_container_border_width(GTK_CONTAINER(main_vb), 5);
-  gtk_container_add (GTK_CONTAINER (color_w), main_vb);
-  main_tb = gtk_table_new(3, 3, FALSE);
-  gtk_box_pack_start(GTK_BOX(main_vb), main_tb, FALSE, FALSE, 0);
-  gtk_table_set_row_spacings(GTK_TABLE(main_tb), 10);
-  gtk_table_set_col_spacings(GTK_TABLE(main_tb), 15);
-  gtk_widget_show(main_tb);
-  label = gtk_label_new("Set:");
-  gtk_misc_set_alignment(GTK_MISC(label), 1.0, 0.5);
-  gtk_table_attach_defaults(GTK_TABLE(main_tb), label, 0, 1, 0, 1);
-  gtk_widget_show(label);
-
-  colorsel = gtk_color_selection_new();
-  optmenu = gtk_option_menu_new();
-  menu = gtk_menu_new();
-  for (i = 0; i < MAX_HANDLED_COL; i++){
-    menuitem = gtk_menu_item_new_with_label(color_info[i].label);
-    OBJECT_SET_DATA(menuitem, COLOR_SELECTION_PTR_KEY, colorsel);
-    SIGNAL_CONNECT(menuitem, "activate", update_current_color,
-                   &color_info[i].color);
-    gtk_widget_show(menuitem);
-    gtk_menu_append(GTK_MENU (menu), menuitem);
-  }
-  gtk_option_menu_set_menu (GTK_OPTION_MENU (optmenu), menu);
-  gtk_table_attach_defaults(GTK_TABLE(main_tb), optmenu, 1, 2, 0, 1);
-  gtk_widget_show(optmenu);
-
-#if GTK_MAJOR_VERSION < 2
-  sample = gtk_text_new(FALSE, FALSE);
-  height = sample->style->font->ascent + sample->style->font->descent;
-  width = gdk_string_width(sample->style->font, SAMPLE_MARKED_TEXT);
-  WIDGET_SET_SIZE(GTK_WIDGET(sample), width, height);
-  gtk_text_set_editable(GTK_TEXT(sample), FALSE);
-  gtk_text_insert(GTK_TEXT(sample), NULL,
-		  &color_info[MFG_IDX].color,
-		  &color_info[MBG_IDX].color,
-		  SAMPLE_MARKED_TEXT, -1);
-#else
-  sample = gtk_text_view_new();
-  buffer = gtk_text_view_get_buffer(GTK_TEXT_VIEW(sample));
-  gtk_text_view_set_editable(GTK_TEXT_VIEW(sample), FALSE);
-  gtk_text_view_set_cursor_visible(GTK_TEXT_VIEW(sample), FALSE);
-  gtk_text_buffer_create_tag(buffer, "color", "foreground-gdk",
-                             &color_info[MFG_IDX].color, "background-gdk",
-                             &color_info[MBG_IDX].color, NULL);
-  gtk_text_buffer_get_start_iter(buffer, &iter);
-  gtk_text_buffer_insert_with_tags_by_name(buffer, &iter, SAMPLE_MARKED_TEXT,
-                                           -1, "color", NULL);
-#endif
-  gtk_table_attach_defaults(GTK_TABLE(main_tb), sample, 2, 3, 0, 2);
-  gtk_widget_show(sample);
-#if GTK_MAJOR_VERSION < 2
-  gtk_color_selection_set_color(GTK_COLOR_SELECTION(colorsel),
-				&scolor[CS_RED]);
-#else
-  gtk_color_selection_set_current_color(GTK_COLOR_SELECTION(colorsel),
-                                        curcolor);
-#endif
-  gtk_table_attach_defaults(GTK_TABLE(main_tb), colorsel, 0, 3, 2, 3);
-  OBJECT_SET_DATA(colorsel, COLOR_SAMPLE_PTR_KEY, sample);
-  SIGNAL_CONNECT(colorsel, "color-changed", update_text_color, NULL);
-  gtk_widget_show(colorsel);
-  gtk_widget_show(main_vb);
-
-  OBJECT_SET_DATA(color_w, COLOR_CALLER_PTR_KEY, caller);
-  OBJECT_SET_DATA(caller, COLOR_DIALOG_PTR_KEY, color_w);
-
-  /* Ok, Cancel Buttons */
-  bbox = gtk_hbutton_box_new();
-  gtk_button_box_set_layout(GTK_BUTTON_BOX(bbox), GTK_BUTTONBOX_END);
-  gtk_button_box_set_spacing(GTK_BUTTON_BOX(bbox), 5);
-  gtk_box_pack_end(GTK_BOX(main_vb), bbox, FALSE, FALSE, 5);
-  gtk_widget_show(bbox);
-
-  ok_bt = BUTTON_NEW_FROM_STOCK(GTK_STOCK_OK);
-  SIGNAL_CONNECT(ok_bt, "clicked", color_ok_cb, color_w);
-  GTK_WIDGET_SET_FLAGS(ok_bt, GTK_CAN_DEFAULT);
-  gtk_box_pack_start(GTK_BOX (bbox), ok_bt, TRUE, TRUE, 0);
-  gtk_widget_grab_default(ok_bt);
-  gtk_widget_show(ok_bt);
-
-  cancel_bt = BUTTON_NEW_FROM_STOCK(GTK_STOCK_CANCEL);
-  SIGNAL_CONNECT_OBJECT(cancel_bt, "clicked", gtk_widget_destroy, color_w);
-  GTK_WIDGET_SET_FLAGS(cancel_bt, GTK_CAN_DEFAULT);
-  gtk_box_pack_start(GTK_BOX (bbox), cancel_bt, TRUE, TRUE, 0);
-  gtk_widget_show(cancel_bt);
-  dlg_set_cancel(color_w, cancel_bt);
-
-  gtk_widget_show(color_w);
-}
-
-static void
-update_text_color(GtkWidget *w, gpointer data _U_) {
-  GtkWidget     *sample = OBJECT_GET_DATA(w, COLOR_SAMPLE_PTR_KEY);
-#if GTK_MAJOR_VERSION < 2
-  gdouble        scolor[4];
-
-  gtk_color_selection_get_color(GTK_COLOR_SELECTION(w), &scolor[CS_RED]);
-
-  curcolor->red   = (gushort) (scolor[CS_RED]   * 65535.0);
-  curcolor->green = (gushort) (scolor[CS_GREEN] * 65535.0);
-  curcolor->blue  = (gushort) (scolor[CS_BLUE]  * 65535.0);
-#else
-  GtkTextBuffer *buffer = gtk_text_view_get_buffer(GTK_TEXT_VIEW(sample));
-  GtkTextTag    *tag;
-
-  gtk_color_selection_get_current_color(GTK_COLOR_SELECTION(w), curcolor);
-#endif
-
-#if GTK_MAJOR_VERSION < 2
-  gtk_text_freeze(GTK_TEXT(sample));
-  gtk_text_set_point(GTK_TEXT(sample), 0);
-  gtk_text_forward_delete(GTK_TEXT(sample),
-                          gtk_text_get_length(GTK_TEXT(sample)));
-  gtk_text_insert(GTK_TEXT(sample), NULL,
-		  &color_info[MFG_IDX].color,
-		  &color_info[MBG_IDX].color,
-		  SAMPLE_MARKED_TEXT, -1);
-  gtk_text_thaw(GTK_TEXT(sample));
-#else
-  tag = gtk_text_tag_table_lookup(gtk_text_buffer_get_tag_table(buffer),
-                                  "color");
-  g_object_set(tag, "foreground-gdk", &color_info[MFG_IDX].color,
-               "background-gdk", &color_info[MBG_IDX].color, NULL);
-#endif
-}
-
-static void
-update_current_color(GtkWidget *w, gpointer data)
-{
-  GtkColorSelection *colorsel;
-#if GTK_MAJOR_VERSION < 2
-  gdouble            scolor[4];
-
-  colorsel = GTK_COLOR_SELECTION(OBJECT_GET_DATA(w, COLOR_SELECTION_PTR_KEY));
-  curcolor = (GdkColor *)data;
-  scolor[CS_RED]     = (gdouble) (curcolor->red)   / 65535.0;
-  scolor[CS_GREEN]   = (gdouble) (curcolor->green) / 65535.0;
-  scolor[CS_BLUE]    = (gdouble) (curcolor->blue)  / 65535.0;
-  scolor[CS_OPACITY] = 1.0;
-
-  gtk_color_selection_set_color(colorsel, &scolor[CS_RED]);
-#else
-  colorsel = GTK_COLOR_SELECTION(g_object_get_data(G_OBJECT(w),
-                                                   COLOR_SELECTION_PTR_KEY));
-  curcolor = (GdkColor *)data;
-  gtk_color_selection_set_current_color(colorsel, curcolor);
-#endif
-}
-
-static void
-color_ok_cb(GtkWidget *w _U_, gpointer data)
-{
-  /* We assume the user actually changed a color here. */
-  colors_changed = TRUE;
-
-  gtk_widget_hide(GTK_WIDGET(data));
-  gtk_widget_destroy(GTK_WIDGET(data));
-}
-
-static void
-color_cancel_cb(GtkWidget *w _U_, gpointer data)
-{
-  /* Revert the colors to the current preference settings. */
-  color_t_to_gdkcolor(&color_info[MFG_IDX].color, &prefs.gui_marked_fg);
-  color_t_to_gdkcolor(&color_info[MBG_IDX].color, &prefs.gui_marked_bg);
-  gtk_widget_hide(GTK_WIDGET(data));
-  gtk_widget_destroy(GTK_WIDGET(data));
-}
-
-/* Treat this as a cancel, by calling "color_cancel_cb()".
-   XXX - that'll destroy the Select Color dialog; will that upset
-   a higher-level handler that says "OK, we've been asked to delete
-   this, so destroy it"? */
-static gboolean
-color_delete_cb(GtkWidget *prefs_w _U_, gpointer dummy _U_)
-{
-  color_cancel_cb(NULL, NULL);
-  return FALSE;
-}
-
-static void
-color_destroy_cb(GtkWidget *w, gpointer data _U_)
-{
-  GtkWidget *caller = OBJECT_GET_DATA(w, COLOR_CALLER_PTR_KEY);
-  if (caller != NULL) {
-    OBJECT_SET_DATA(caller, COLOR_DIALOG_PTR_KEY, NULL);
-  }
-  gtk_grab_remove(GTK_WIDGET(w));
-  gtk_widget_destroy(GTK_WIDGET(w));
-}
-
-static void
-fetch_colors(void)
-{
-  gdkcolor_to_color_t(&prefs.gui_marked_fg, &color_info[MFG_IDX].color);
-  gdkcolor_to_color_t(&prefs.gui_marked_bg, &color_info[MBG_IDX].color);
-}
diff --git a/gtk/stream_prefs.c b/gtk/stream_prefs.c
index ac350be430..de741f84e4 100644
--- a/gtk/stream_prefs.c
+++ b/gtk/stream_prefs.c
@@ -1,7 +1,7 @@
 /* stream_prefs.c
  * Dialog boxes for preferences for the stream window
  *
- * $Id: stream_prefs.c,v 1.17 2004/01/14 23:32:48 ulfl Exp $
+ * $Id: stream_prefs.c,v 1.18 2004/01/15 01:13:51 ulfl Exp $
  *
  * Ethereal - Network traffic analyzer
  * By Gerald Combs <gerald@ethereal.com>
@@ -36,18 +36,23 @@
 #include "print.h"
 #include "prefs.h"
 #include "compat_macros.h"
+#include "follow_dlg.h"
+#include "packet_list.h"
 
 static void update_text_color(GtkWidget *, gpointer);
 static void update_current_color(GtkWidget *, gpointer);
 
 static GdkColor tcolors[4], *curcolor = NULL;
 
+#define SAMPLE_MARKED_TEXT "Sample marked packet text\n"
 #define SAMPLE_CLIENT_TEXT "Sample TCP stream client text\n"
 #define SAMPLE_SERVER_TEXT "Sample TCP stream server text\n"
-#define CFG_IDX 0
-#define CBG_IDX 1
-#define SFG_IDX 2
-#define SBG_IDX 3
+#define MFG_IDX 0
+#define MBG_IDX 1
+#define CFG_IDX 2
+#define CBG_IDX 3
+#define SFG_IDX 4
+#define SBG_IDX 5
 #define STREAM_SAMPLE_KEY "stream_entry"
 #define STREAM_CS_KEY "stream_colorselection"
 #define CS_RED 0
@@ -61,7 +66,8 @@ stream_prefs_show()
   GtkWidget *main_vb, *main_tb, *label, *optmenu, *menu, *menuitem;
   GtkWidget *sample, *colorsel;
   int        width, height, i;
-  gchar     *mt[] = { "TCP stream client foreground", "TCP stream client background",
+  gchar     *mt[] = { "Marked packet foreground", "Marked packet background",
+                      "TCP stream client foreground", "TCP stream client background",
                       "TCP stream server foreground", "TCP stream server background" };
   int mcount = sizeof(mt) / sizeof (gchar *);
 #if GTK_MAJOR_VERSION < 2
@@ -72,6 +78,8 @@ stream_prefs_show()
   PangoLayout   *layout;
 #endif
 
+  color_t_to_gdkcolor(&tcolors[MFG_IDX], &prefs.gui_marked_fg);
+  color_t_to_gdkcolor(&tcolors[MBG_IDX], &prefs.gui_marked_bg);
   color_t_to_gdkcolor(&tcolors[CFG_IDX], &prefs.st_client_fg);
   color_t_to_gdkcolor(&tcolors[CBG_IDX], &prefs.st_client_bg);
   color_t_to_gdkcolor(&tcolors[SFG_IDX], &prefs.st_server_fg);
@@ -119,10 +127,12 @@ stream_prefs_show()
 
 #if GTK_MAJOR_VERSION < 2
   sample = gtk_text_new(FALSE, FALSE);
-  height = 2 * (sample->style->font->ascent + sample->style->font->descent);
+  height = (mcount/2+1) * (sample->style->font->ascent + sample->style->font->descent);
   width = gdk_string_width(sample->style->font, SAMPLE_SERVER_TEXT);
   WIDGET_SET_SIZE(sample, width, height);
   gtk_text_set_editable(GTK_TEXT(sample), FALSE);
+  gtk_text_insert(GTK_TEXT(sample), NULL, &tcolors[MFG_IDX], &tcolors[MBG_IDX],
+                  SAMPLE_MARKED_TEXT, -1);
   gtk_text_insert(GTK_TEXT(sample), NULL, &tcolors[CFG_IDX], &tcolors[CBG_IDX],
                   SAMPLE_CLIENT_TEXT, -1);
   gtk_text_insert(GTK_TEXT(sample), NULL, &tcolors[SFG_IDX], &tcolors[SBG_IDX],
@@ -132,16 +142,21 @@ stream_prefs_show()
   layout = gtk_widget_create_pango_layout(sample, SAMPLE_SERVER_TEXT);
   pango_layout_get_pixel_size(layout, &width, &height);
   g_object_unref(G_OBJECT(layout));
-  WIDGET_SET_SIZE(sample, width, height);
+  WIDGET_SET_SIZE(sample, width, height * 2);
   gtk_text_view_set_editable(GTK_TEXT_VIEW(sample), FALSE);
   buf = gtk_text_view_get_buffer(GTK_TEXT_VIEW(sample));
   gtk_text_buffer_get_start_iter(buf, &iter);
+  gtk_text_buffer_create_tag(buf, "marked",
+                             "foreground-gdk", &tcolors[MFG_IDX],
+                             "background-gdk", &tcolors[MBG_IDX], NULL);
   gtk_text_buffer_create_tag(buf, "client",
                              "foreground-gdk", &tcolors[CFG_IDX],
                              "background-gdk", &tcolors[CBG_IDX], NULL);
   gtk_text_buffer_create_tag(buf, "server",
                              "foreground-gdk", &tcolors[SFG_IDX],
                              "background-gdk", &tcolors[SBG_IDX], NULL);
+  gtk_text_buffer_insert_with_tags_by_name(buf, &iter, SAMPLE_MARKED_TEXT, -1,
+                                           "marked", NULL);
   gtk_text_buffer_insert_with_tags_by_name(buf, &iter, SAMPLE_CLIENT_TEXT, -1,
                                            "client", NULL);
   gtk_text_buffer_insert_with_tags_by_name(buf, &iter, SAMPLE_SERVER_TEXT, -1,
@@ -188,6 +203,8 @@ update_text_color(GtkWidget *w, gpointer data _U_) {
   gtk_text_freeze(sample);
   gtk_text_set_point(sample, 0);
   gtk_text_forward_delete(sample, gtk_text_get_length(sample));
+  gtk_text_insert(sample, NULL, &tcolors[MFG_IDX], &tcolors[MBG_IDX],
+    SAMPLE_MARKED_TEXT, -1);
   gtk_text_insert(sample, NULL, &tcolors[CFG_IDX], &tcolors[CBG_IDX],
     SAMPLE_CLIENT_TEXT, -1);
   gtk_text_insert(sample, NULL, &tcolors[SFG_IDX], &tcolors[SBG_IDX],
@@ -197,6 +214,9 @@ update_text_color(GtkWidget *w, gpointer data _U_) {
   gtk_color_selection_get_current_color(GTK_COLOR_SELECTION(w), curcolor);
 
   buf = gtk_text_view_get_buffer(sample);
+  tag = gtk_text_tag_table_lookup(gtk_text_buffer_get_tag_table(buf), "marked");
+  g_object_set(tag, "foreground-gdk", &tcolors[MFG_IDX], "background-gdk",
+               &tcolors[MBG_IDX], NULL);
   tag = gtk_text_tag_table_lookup(gtk_text_buffer_get_tag_table(buf), "client");
   g_object_set(tag, "foreground-gdk", &tcolors[CFG_IDX], "background-gdk",
                &tcolors[CBG_IDX], NULL);
@@ -232,19 +252,20 @@ update_current_color(GtkWidget *w, gpointer data)
 void
 stream_prefs_fetch(GtkWidget *w _U_)
 {
+  gdkcolor_to_color_t(&prefs.gui_marked_fg, &tcolors[MFG_IDX]);
+  gdkcolor_to_color_t(&prefs.gui_marked_bg, &tcolors[MBG_IDX]);
   gdkcolor_to_color_t(&prefs.st_client_fg, &tcolors[CFG_IDX]);
   gdkcolor_to_color_t(&prefs.st_client_bg, &tcolors[CBG_IDX]);
   gdkcolor_to_color_t(&prefs.st_server_fg, &tcolors[SFG_IDX]);
   gdkcolor_to_color_t(&prefs.st_server_bg, &tcolors[SBG_IDX]);
 }
 
-/* XXX - "gui_prefs_apply()" handles this, as the "Follow TCP Stream"
-   windows may have to be redrawn due to a font change; this means
-   that calling "stream_prefs_apply()" without calling "gui_prefs_apply()"
-   won't work. */
 void
 stream_prefs_apply(GtkWidget *w _U_)
 {
+	follow_redraw_all();
+
+	update_marked_frames();
 }
 
 void

