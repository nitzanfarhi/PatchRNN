commit a5a1195559f2e20bd975f58e50f53ebe84d5cca6
Author: Eric Dumazet <eric.dumazet@gmail.com>
Date:   Mon Jan 23 01:22:09 2012 +0000

    tg3: fix ipv6 header length computation
    
    tg3_start_xmit() makes the wrong assumption for TSOV6 that skb->head
    doesnt include any payload data.
    
    if (skb_is_gso_v6(skb))
            hdr_len = skb_headlen(skb) - ETH_HLEN;
    
    This is not true anymore after commit f07d960df3 (tcp: avoid frag
    allocation for small frames)
    
    We should instead use : skb_transport_offset(skb) + tcp_hdrlen(skb)
    
    Its also true for IPv4
    
    Signed-off-by: Eric Dumazet <eric.dumazet@gmail.com>
    CC: Matt Carlson <mcarlson@broadcom.com>
    CC: Michael Chan <mchan@broadcom.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

diff --git a/drivers/net/ethernet/broadcom/tg3.c b/drivers/net/ethernet/broadcom/tg3.c
index d529af99157d..a1f2e0fed78b 100644
--- a/drivers/net/ethernet/broadcom/tg3.c
+++ b/drivers/net/ethernet/broadcom/tg3.c
@@ -6667,14 +6667,9 @@ static netdev_tx_t tg3_start_xmit(struct sk_buff *skb, struct net_device *dev)
 		iph = ip_hdr(skb);
 		tcp_opt_len = tcp_optlen(skb);
 
-		if (skb_is_gso_v6(skb)) {
-			hdr_len = skb_headlen(skb) - ETH_HLEN;
-		} else {
-			u32 ip_tcp_len;
-
-			ip_tcp_len = ip_hdrlen(skb) + sizeof(struct tcphdr);
-			hdr_len = ip_tcp_len + tcp_opt_len;
+		hdr_len = skb_transport_offset(skb) + tcp_hdrlen(skb) - ETH_HLEN;
 
+		if (!skb_is_gso_v6(skb)) {
 			iph->check = 0;
 			iph->tot_len = htons(mss + hdr_len);
 		}

