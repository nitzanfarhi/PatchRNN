commit 3be2264be3c00865116f997dc53ebcc90fe7fc4b
Author: Marcelo Tosatti <mtosatti@redhat.com>
Date:   Fri May 28 09:44:59 2010 -0300

    KVM: MMU: invalidate and flush on spte small->large page size change
    
    Always invalidate spte and flush TLBs when changing page size, to make
    sure different sized translations for the same address are never cached
    in a CPU's TLB.
    
    Currently the only case where this occurs is when a non-leaf spte pointer is
    overwritten by a leaf, large spte entry. This can happen after dirty
    logging is disabled on a memslot, for example.
    
    Noticed by Andrea.
    
    KVM-Stable-Tag
    Signed-off-by: Marcelo Tosatti <mtosatti@redhat.com>
    Signed-off-by: Avi Kivity <avi@redhat.com>

diff --git a/arch/x86/kvm/mmu.c b/arch/x86/kvm/mmu.c
index 81563e76e28f..6fbcb48d5a9b 100644
--- a/arch/x86/kvm/mmu.c
+++ b/arch/x86/kvm/mmu.c
@@ -1870,6 +1870,8 @@ static void mmu_set_spte(struct kvm_vcpu *vcpu, u64 *sptep,
 
 			child = page_header(pte & PT64_BASE_ADDR_MASK);
 			mmu_page_remove_parent_pte(child, sptep);
+			__set_spte(sptep, shadow_trap_nonpresent_pte);
+			kvm_flush_remote_tlbs(vcpu->kvm);
 		} else if (pfn != spte_to_pfn(*sptep)) {
 			pgprintk("hfn old %lx new %lx\n",
 				 spte_to_pfn(*sptep), pfn);

