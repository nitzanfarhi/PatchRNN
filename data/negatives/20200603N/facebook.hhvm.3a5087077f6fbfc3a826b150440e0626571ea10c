commit 3a5087077f6fbfc3a826b150440e0626571ea10c
Author: jdelong <jdelong@fb.com>
Date:   Sat Feb 9 13:36:26 2013 -0800

    Fix release build wrt zend_html.cpp

diff --git a/hphp/runtime/ext/ext_string.ext_hhvm.cpp b/hphp/runtime/ext/ext_string.ext_hhvm.cpp
index 963e80e923..316cf3c612 100644
--- a/hphp/runtime/ext/ext_string.ext_hhvm.cpp
+++ b/hphp/runtime/ext/ext_string.ext_hhvm.cpp
@@ -349,6 +349,73 @@ TypedValue* fg_convert_cyr_string(HPHP::VM::ActRec *ar) {
 
 
 
+/*
+HPHP::Array HPHP::f_get_html_translation_table(int, int)
+_ZN4HPHP28f_get_html_translation_tableEii
+
+(return value) => rax
+_rv => rdi
+table => rsi
+quote_style => rdx
+*/
+
+Value* fh_get_html_translation_table(Value* _rv, int table, int quote_style) asm("_ZN4HPHP28f_get_html_translation_tableEii");
+
+TypedValue * fg1_get_html_translation_table(TypedValue* rv, HPHP::VM::ActRec* ar, int64_t count) __attribute__((noinline,cold));
+TypedValue * fg1_get_html_translation_table(TypedValue* rv, HPHP::VM::ActRec* ar, int64_t count) {
+  TypedValue* args UNUSED = ((TypedValue*)ar) - 1;
+  rv->_count = 0;
+  rv->m_type = KindOfArray;
+  switch (count) {
+  default: // count >= 2
+    if ((args-1)->m_type != KindOfInt64) {
+      tvCastToInt64InPlace(args-1);
+    }
+  case 1:
+    if ((args-0)->m_type != KindOfInt64) {
+      tvCastToInt64InPlace(args-0);
+    }
+  case 0:
+    break;
+  }
+  fh_get_html_translation_table((Value*)(rv), (count > 0) ? (int)(args[-0].m_data.num) : (int)(0), (count > 1) ? (int)(args[-1].m_data.num) : (int)(k_ENT_COMPAT));
+  if (rv->m_data.num == 0LL) rv->m_type = KindOfNull;
+  return rv;
+}
+
+TypedValue* fg_get_html_translation_table(HPHP::VM::ActRec *ar) {
+    TypedValue rv;
+    int64_t count = ar->numArgs();
+    TypedValue* args UNUSED = ((TypedValue*)ar) - 1;
+    if (count <= 2LL) {
+      if ((count <= 1 || (args-1)->m_type == KindOfInt64) && (count <= 0 || (args-0)->m_type == KindOfInt64)) {
+        rv._count = 0;
+        rv.m_type = KindOfArray;
+        fh_get_html_translation_table((Value*)(&(rv)), (count > 0) ? (int)(args[-0].m_data.num) : (int)(0), (count > 1) ? (int)(args[-1].m_data.num) : (int)(k_ENT_COMPAT));
+        if (rv.m_data.num == 0LL) rv.m_type = KindOfNull;
+        frame_free_locals_no_this_inl(ar, 2);
+        memcpy(&ar->m_r, &rv, sizeof(TypedValue));
+        return &ar->m_r;
+      } else {
+        fg1_get_html_translation_table(&rv, ar, count);
+        frame_free_locals_no_this_inl(ar, 2);
+        memcpy(&ar->m_r, &rv, sizeof(TypedValue));
+        return &ar->m_r;
+      }
+    } else {
+      throw_toomany_arguments_nr("get_html_translation_table", 2, 1);
+    }
+    rv.m_data.num = 0LL;
+    rv._count = 0;
+    rv.m_type = KindOfNull;
+    frame_free_locals_no_this_inl(ar, 2);
+    memcpy(&ar->m_r, &rv, sizeof(TypedValue));
+    return &ar->m_r;
+  return &ar->m_r;
+}
+
+
+
 /*
 HPHP::String HPHP::f_hebrev(HPHP::String const&, int)
 _ZN4HPHP8f_hebrevERKNS_6StringEi
diff --git a/hphp/runtime/ext/ext_string.ext_hhvm.h b/hphp/runtime/ext/ext_string.ext_hhvm.h
index bed9d1c1af..e6bdd7ae6d 100644
--- a/hphp/runtime/ext/ext_string.ext_hhvm.h
+++ b/hphp/runtime/ext/ext_string.ext_hhvm.h
@@ -108,6 +108,18 @@ to => rcx
 
 Value* fh_convert_cyr_string(Value* _rv, Value* str, Value* from, Value* to) asm("_ZN4HPHP20f_convert_cyr_stringERKNS_6StringES2_S2_");
 
+/*
+HPHP::Array HPHP::f_get_html_translation_table(int, int)
+_ZN4HPHP28f_get_html_translation_tableEii
+
+(return value) => rax
+_rv => rdi
+table => rsi
+quote_style => rdx
+*/
+
+Value* fh_get_html_translation_table(Value* _rv, int table, int quote_style) asm("_ZN4HPHP28f_get_html_translation_tableEii");
+
 /*
 HPHP::String HPHP::f_hebrev(HPHP::String const&, int)
 _ZN4HPHP8f_hebrevERKNS_6StringEi
diff --git a/hphp/runtime/ext_hhvm/ext_hhvm_noinline.ext_hhvm.cpp b/hphp/runtime/ext_hhvm/ext_hhvm_noinline.ext_hhvm.cpp
index d06fd8712f..f2ca41ff40 100644
--- a/hphp/runtime/ext_hhvm/ext_hhvm_noinline.ext_hhvm.cpp
+++ b/hphp/runtime/ext_hhvm/ext_hhvm_noinline.ext_hhvm.cpp
@@ -13992,73 +13992,6 @@ TypedValue* fg_sha1(HPHP::VM::ActRec *ar) {
 
 
 
-/*
-HPHP::Array HPHP::fni_get_html_translation_table(int, int)
-_ZN4HPHP30fni_get_html_translation_tableEii
-
-(return value) => rax
-_rv => rdi
-table => rsi
-quote_style => rdx
-*/
-
-Value* fh_get_html_translation_table(Value* _rv, int table, int quote_style) asm("_ZN4HPHP30fni_get_html_translation_tableEii");
-
-TypedValue * fg1_get_html_translation_table(TypedValue* rv, HPHP::VM::ActRec* ar, int64_t count) __attribute__((noinline,cold));
-TypedValue * fg1_get_html_translation_table(TypedValue* rv, HPHP::VM::ActRec* ar, int64_t count) {
-  TypedValue* args UNUSED = ((TypedValue*)ar) - 1;
-  rv->_count = 0;
-  rv->m_type = KindOfArray;
-  switch (count) {
-  default: // count >= 2
-    if ((args-1)->m_type != KindOfInt64) {
-      tvCastToInt64InPlace(args-1);
-    }
-  case 1:
-    if ((args-0)->m_type != KindOfInt64) {
-      tvCastToInt64InPlace(args-0);
-    }
-  case 0:
-    break;
-  }
-  fh_get_html_translation_table((Value*)(rv), (count > 0) ? (int)(args[-0].m_data.num) : (int)(0), (count > 1) ? (int)(args[-1].m_data.num) : (int)(k_ENT_COMPAT));
-  if (rv->m_data.num == 0LL) rv->m_type = KindOfNull;
-  return rv;
-}
-
-TypedValue* fg_get_html_translation_table(HPHP::VM::ActRec *ar) {
-    TypedValue rv;
-    int64_t count = ar->numArgs();
-    TypedValue* args UNUSED = ((TypedValue*)ar) - 1;
-    if (count <= 2LL) {
-      if ((count <= 1 || (args-1)->m_type == KindOfInt64) && (count <= 0 || (args-0)->m_type == KindOfInt64)) {
-        rv._count = 0;
-        rv.m_type = KindOfArray;
-        fh_get_html_translation_table((Value*)(&(rv)), (count > 0) ? (int)(args[-0].m_data.num) : (int)(0), (count > 1) ? (int)(args[-1].m_data.num) : (int)(k_ENT_COMPAT));
-        if (rv.m_data.num == 0LL) rv.m_type = KindOfNull;
-        frame_free_locals_no_this_inl(ar, 2);
-        memcpy(&ar->m_r, &rv, sizeof(TypedValue));
-        return &ar->m_r;
-      } else {
-        fg1_get_html_translation_table(&rv, ar, count);
-        frame_free_locals_no_this_inl(ar, 2);
-        memcpy(&ar->m_r, &rv, sizeof(TypedValue));
-        return &ar->m_r;
-      }
-    } else {
-      throw_toomany_arguments_nr("get_html_translation_table", 2, 1);
-    }
-    rv.m_data.num = 0LL;
-    rv._count = 0;
-    rv.m_type = KindOfNull;
-    frame_free_locals_no_this_inl(ar, 2);
-    memcpy(&ar->m_r, &rv, sizeof(TypedValue));
-    return &ar->m_r;
-  return &ar->m_r;
-}
-
-
-
 /*
 HPHP::String HPHP::fni_nl_langinfo(int)
 _ZN4HPHP15fni_nl_langinfoEi
diff --git a/hphp/runtime/ext_hhvm/ext_hhvm_noinline.ext_hhvm.h b/hphp/runtime/ext_hhvm/ext_hhvm_noinline.ext_hhvm.h
index 7c3903f248..59f158d2a8 100644
--- a/hphp/runtime/ext_hhvm/ext_hhvm_noinline.ext_hhvm.h
+++ b/hphp/runtime/ext_hhvm/ext_hhvm_noinline.ext_hhvm.h
@@ -2935,18 +2935,6 @@ raw_output => rdx
 
 Value* fh_sha1(Value* _rv, Value* str, bool raw_output) asm("_ZN4HPHP8fni_sha1ERKNS_6StringEb");
 
-/*
-HPHP::Array HPHP::fni_get_html_translation_table(int, int)
-_ZN4HPHP30fni_get_html_translation_tableEii
-
-(return value) => rax
-_rv => rdi
-table => rsi
-quote_style => rdx
-*/
-
-Value* fh_get_html_translation_table(Value* _rv, int table, int quote_style) asm("_ZN4HPHP30fni_get_html_translation_tableEii");
-
 /*
 HPHP::String HPHP::fni_nl_langinfo(int)
 _ZN4HPHP15fni_nl_langinfoEi
diff --git a/hphp/util/zend/zend_html.cpp b/hphp/util/zend/zend_html.cpp
index 569e0db2ed..d9cc0f4596 100644
--- a/hphp/util/zend/zend_html.cpp
+++ b/hphp/util/zend/zend_html.cpp
@@ -317,7 +317,7 @@ entity_charset determine_charset(const char *charset_hint) {
     return cs_utf_8;
   }
 
-  bool found = false;
+  DEBUG_ONLY bool found = false;
   size_t len = strlen(charset_hint);
 
   /* now walk the charset map and look for the codeset */

