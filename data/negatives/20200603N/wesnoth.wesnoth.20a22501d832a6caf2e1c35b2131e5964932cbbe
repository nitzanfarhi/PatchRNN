commit 20a22501d832a6caf2e1c35b2131e5964932cbbe
Author: Gabriel Morin <gabrielmorin@gmail.com>
Date:   Fri May 28 20:30:49 2010 +0000

    Arrows: refactoring cleanup, phase 2

diff --git a/src/arrow.cpp b/src/arrow.cpp
index 93e0b22aab..67d4e71c1b 100644
--- a/src/arrow.cpp
+++ b/src/arrow.cpp
@@ -18,7 +18,6 @@
  */
 
 #include "arrow.hpp"
-#include "arrow_observer.hpp"
 
 #include "foreach.hpp"
 
@@ -33,43 +32,16 @@ void arrow::set_path(const std::list<map_location> path)
 {
 	previous_path_ = path_;
 	path_ = path;
-	notify_arrow_changed();
 }
 
 void arrow::set_color(const SDL_Color color)
 {
 	color_ = color;
-	notify_arrow_changed();
 }
 
 void arrow::set_layer(const display::tdrawing_layer & layer)
 {
 	layer_ = layer;
-	notify_arrow_changed();
-}
-
-void arrow::add_observer(arrow_observer & observer)
-{
-	observers_.push_back(&observer);
-}
-
-void arrow::remove_observer(arrow_observer & observer)
-{
-	observers_.remove(&observer);
-}
-
-std::list<arrow_image> arrow::get_images() const
-{
-	//TODO: return the proper images instead of this placeholder
-	std::list<arrow_image> images;
-	surface test_picture = image::get_image("footsteps/teleport-in.png", image::SCALED_TO_HEX);
-
-	foreach(map_location loc, path_)
-	{
-		images.push_back(arrow_image(loc, test_picture));
-	}
-
-	return images;
 }
 
 const std::list<map_location> & arrow::get_path() const
@@ -82,17 +54,3 @@ const std::list<map_location> & arrow::get_previous_path() const
 {
 	return previous_path_;
 }
-
-void arrow::notify_arrow_changed() {
-	foreach(arrow_observer* observer, observers_)
-	{
-		observer->arrow_changed(*this);
-	}
-}
-
-void arrow::notify_arrow_deleted() {
-	foreach(arrow_observer* observer, observers_)
-	{
-		observer->arrow_deleted(*this);
-	}
-}
diff --git a/src/arrow.hpp b/src/arrow.hpp
index 3f9d78eec7..893a04a69e 100644
--- a/src/arrow.hpp
+++ b/src/arrow.hpp
@@ -37,47 +37,28 @@ class arrow {
 
   public: //operations
 
+    arrow();
+
+    virtual ~arrow() {}
+
     virtual void set_path(const std::list<map_location> path);
 
     void set_color(const SDL_Color color);
 
     void set_layer(const display::tdrawing_layer & layer);
 
-    /** Notifies it's arrow_observer list of the arrow's destruction */
-    virtual ~arrow() { notify_arrow_deleted(); }
-
-    /**
-     * If you want your arrow to be automatically registered and displayed, create
-     * it through display::createNewArrow(). Only use this constructor directly
-     * if you have a good reason to do so.
-     */
-    arrow();
-
-    void add_observer(arrow_observer & observer);
-
-    void remove_observer(arrow_observer & observer);
-
     std::list<arrow_image> get_images() const;
 
     const std::list<map_location> & get_path() const;
 
     const std::list<map_location> & get_previous_path() const;
 
-
-  private: //operations
-
-    void notify_arrow_changed();
-
-    void notify_arrow_deleted();
-
   private: //properties
 
     display::tdrawing_layer layer_;
 
     SDL_Color color_;
 
-    std::list<arrow_observer*> observers_;
-
     std::list<map_location> path_;
     std::list<map_location> previous_path_;
 

