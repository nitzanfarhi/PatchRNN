commit 3639ee61f1e7cbb891080b777c573970887954ca
Author: Mark Probst <mark.probst@gmail.com>
Date:   Thu Nov 6 14:59:08 2014 -0800

    [sgen] Binary protocol entry for pin stage.

diff --git a/mono/metadata/sgen-gc.c b/mono/metadata/sgen-gc.c
index 50a4b668160..b8454a7c714 100644
--- a/mono/metadata/sgen-gc.c
+++ b/mono/metadata/sgen-gc.c
@@ -1227,6 +1227,7 @@ conservatively_pin_objects_from (void **start, void **end, void *start_nursery,
 			if (addr >= (mword)start_nursery && addr < (mword)end_nursery) {
 				SGEN_LOG (6, "Pinning address %p from %p", (void*)addr, start);
 				sgen_pin_stage_ptr ((void*)addr);
+				binary_protocol_pin_stage (start, (void*)addr, thread_info);
 				count++;
 			}
 			if (G_UNLIKELY (do_pin_stats)) { 
diff --git a/mono/metadata/sgen-protocol.c b/mono/metadata/sgen-protocol.c
index a8f9b34c825..7e5c6145bb3 100644
--- a/mono/metadata/sgen-protocol.c
+++ b/mono/metadata/sgen-protocol.c
@@ -437,6 +437,13 @@ binary_protocol_copy (gpointer from, gpointer to, gpointer vtable, int size)
 	protocol_entry (SGEN_PROTOCOL_COPY, &entry, sizeof (SGenProtocolCopy));
 }
 
+void
+binary_protocol_pin_stage (gpointer addr_ptr, gpointer addr, gpointer thread)
+{
+	SGenProtocolPinStage entry = { addr_ptr, addr, thread };
+	protocol_entry (SGEN_PROTOCOL_PIN_STAGE, &entry, sizeof (SGenProtocolPinStage));
+}
+
 void
 binary_protocol_pin (gpointer obj, gpointer vtable, int size)
 {
diff --git a/mono/metadata/sgen-protocol.h b/mono/metadata/sgen-protocol.h
index c2552280df4..1b4b24a3d54 100644
--- a/mono/metadata/sgen-protocol.h
+++ b/mono/metadata/sgen-protocol.h
@@ -37,6 +37,7 @@ enum {
 	SGEN_PROTOCOL_WORLD_RESTARTED,
 	SGEN_PROTOCOL_ALLOC,
 	SGEN_PROTOCOL_COPY,
+	SGEN_PROTOCOL_PIN_STAGE,
 	SGEN_PROTOCOL_PIN,
 	SGEN_PROTOCOL_MARK,
 	SGEN_PROTOCOL_SCAN_BEGIN,
@@ -112,6 +113,12 @@ typedef struct {
 	int size;
 } SGenProtocolCopy;
 
+typedef struct {
+	gpointer addr_ptr;
+	gpointer addr;
+	gpointer thread;
+} SGenProtocolPinStage;
+
 typedef struct {
 	gpointer obj;
 	gpointer vtable;
@@ -272,6 +279,7 @@ void binary_protocol_alloc (gpointer obj, gpointer vtable, int size) MONO_INTERN
 void binary_protocol_alloc_pinned (gpointer obj, gpointer vtable, int size) MONO_INTERNAL;
 void binary_protocol_alloc_degraded (gpointer obj, gpointer vtable, int size) MONO_INTERNAL;
 void binary_protocol_copy (gpointer from, gpointer to, gpointer vtable, int size) MONO_INTERNAL;
+void binary_protocol_pin_stage (gpointer addr_ptr, gpointer addr, gpointer thread) MONO_INTERNAL;
 void binary_protocol_pin (gpointer obj, gpointer vtable, int size) MONO_INTERNAL;
 void binary_protocol_mark (gpointer obj, gpointer vtable, int size) MONO_INTERNAL;
 void binary_protocol_scan_begin (gpointer obj, gpointer vtable, int size) MONO_INTERNAL;
@@ -296,6 +304,7 @@ void binary_protocol_gray_dequeue (gpointer queue, gpointer cursor, gpointer val
 #define binary_protocol_alloc_pinned(obj, vtable, size)
 #define binary_protocol_alloc_degraded(obj, vtable, size)
 #define binary_protocol_copy(from, to, vtable, size)
+#define binary_protocol_pin_stage(addr_ptr, addr, thread)
 #define binary_protocol_pin(obj, vtable, size)
 #define binary_protocol_mark(obj, vtable, size)
 #define binary_protocol_scan_begin(obj, vtable, size)
diff --git a/tools/sgen/sgen-grep-binprot.c b/tools/sgen/sgen-grep-binprot.c
index ea416b7e3a3..e881fd02f9e 100644
--- a/tools/sgen/sgen-grep-binprot.c
+++ b/tools/sgen/sgen-grep-binprot.c
@@ -35,6 +35,7 @@ read_entry (FILE *in, void **data)
 	case SGEN_PROTOCOL_ALLOC_PINNED: size = sizeof (SGenProtocolAlloc); break;
 	case SGEN_PROTOCOL_ALLOC_DEGRADED: size = sizeof (SGenProtocolAlloc); break;
 	case SGEN_PROTOCOL_COPY: size = sizeof (SGenProtocolCopy); break;
+	case SGEN_PROTOCOL_PIN_STAGE: size = sizeof (SGenProtocolPinStage); break;
 	case SGEN_PROTOCOL_PIN: size = sizeof (SGenProtocolPin); break;
 	case SGEN_PROTOCOL_MARK: size = sizeof (SGenProtocolMark); break;
 	case SGEN_PROTOCOL_SCAN_BEGIN: size = sizeof (SGenProtocolScanBegin); break;
@@ -177,6 +178,11 @@ print_entry (int type, void *data)
 		printf ("copy from %p to %p vtable %p size %d\n", entry->from, entry->to, entry->vtable, entry->size);
 		break;
 	}
+	case SGEN_PROTOCOL_PIN_STAGE: {
+		SGenProtocolPinStage *entry = data;
+		printf ("pin stage addr ptr %p addr %p thread %p\n", entry->addr_ptr, entry->addr, entry->thread);
+		break;
+	}
 	case SGEN_PROTOCOL_PIN: {
 		SGenProtocolPin *entry = data;
 		printf ("pin obj %p vtable %p size %d\n", entry->obj, entry->vtable, entry->size);
@@ -331,6 +337,10 @@ is_match (gpointer ptr, int type, void *data)
 		SGenProtocolCopy *entry = data;
 		return matches_interval (ptr, entry->from, entry->size) || matches_interval (ptr, entry->to, entry->size);
 	}
+	case SGEN_PROTOCOL_PIN_STAGE: {
+		SGenProtocolPinStage *entry = data;
+		return ptr == entry->addr_ptr || ptr == entry->addr || ptr == entry->thread;
+	}
 	case SGEN_PROTOCOL_PIN: {
 		SGenProtocolPin *entry = data;
 		return matches_interval (ptr, entry->obj, entry->size);

