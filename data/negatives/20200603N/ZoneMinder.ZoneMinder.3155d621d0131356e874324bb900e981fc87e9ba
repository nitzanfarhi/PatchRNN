commit 3155d621d0131356e874324bb900e981fc87e9ba
Author: Sune1337 <kristoffer.lindahl@gmail.com>
Date:   Fri Apr 25 22:57:29 2014 +0200

    - Removed an unreferenced variable
    - fixed compilation issue with sws_..isSupported when compiling with ffmpeg 0.5

diff --git a/src/zm_ffmpeg_camera.cpp b/src/zm_ffmpeg_camera.cpp
index c69907d9c..d6c2c3820 100644
--- a/src/zm_ffmpeg_camera.cpp
+++ b/src/zm_ffmpeg_camera.cpp
@@ -79,10 +79,10 @@ FfmpegCamera::~FfmpegCamera()
     }
     if ( mFormatContext )
     {
-#if LIBAVFORMAT_VERSION_INT < AV_VERSION_INT(53, 4, 0)
-        av_close_input_file( mFormatContext );
-#else
+#if LIBAVFORMAT_VERSION_INT >= AV_VERSION_INT(53, 17, 0)
         avformat_close_input( &mFormatContext );
+#else
+        av_close_input_file( mFormatContext );
 #endif
         mFormatContext = NULL;
     }
@@ -173,6 +173,7 @@ int FfmpegCamera::PrimeCapture()
 	}
 	
 #if HAVE_LIBSWSCALE
+#if LIBSWSCALE_VERSION_INT >= AV_VERSION_INT(0, 8, 0)
 	if(!sws_isSupportedInput(mCodecContext->pix_fmt)) {
 		Fatal("swscale does not support the codec format: %c%c%c%c",(mCodecContext->pix_fmt)&0xff,((mCodecContext->pix_fmt>>8)&0xff),((mCodecContext->pix_fmt>>16)&0xff),((mCodecContext->pix_fmt>>24)&0xff));
 	}
@@ -180,6 +181,7 @@ int FfmpegCamera::PrimeCapture()
 	if(!sws_isSupportedOutput(imagePixFormat)) {
 		Fatal("swscale does not support the target format: %c%c%c%c",(imagePixFormat)&0xff,((imagePixFormat>>8)&0xff),((imagePixFormat>>16)&0xff),((imagePixFormat>>24)&0xff));
 	}
+#endif
 	
 #else // HAVE_LIBSWSCALE
     Fatal( "You must compile ffmpeg with the --enable-swscale option to use ffmpeg cameras" );
@@ -218,7 +220,11 @@ int FfmpegCamera::Capture( Image &image )
         Debug( 5, "Got packet from stream %d", packet.stream_index );
         if ( packet.stream_index == mVideoStreamId )
         {
-            if ( avcodec_decode_video2( mCodecContext, mRawFrame, &frameComplete, &packet ) < 0 )
+#if LIBAVCODEC_VERSION_INT >= AV_VERSION_INT(52, 25, 0)
+			if ( avcodec_decode_video2( mCodecContext, mRawFrame, &frameComplete, &packet ) < 0 )
+#else
+			if ( avcodec_decode_video( mCodecContext, mRawFrame, &frameComplete, packet.data, packet.size ) < 0 )
+#endif
                 Fatal( "Unable to decode frame at frame %d", frameCount );
 
             Debug( 4, "Decoded video packet at frame %d", frameCount );
diff --git a/src/zm_mpeg.cpp b/src/zm_mpeg.cpp
index bc5ec7c1a..846752878 100644
--- a/src/zm_mpeg.cpp
+++ b/src/zm_mpeg.cpp
@@ -600,8 +600,6 @@ double VideoStream::ActuallyEncodeFrame( const uint8_t *buffer, int buffer_size,
 		memcpy( opicture->data[0], buffer, buffer_size );
 	}
 	AVFrame *opicture_ptr = opicture;
-
-	int ret = 0;
 	
 	AVPacket pkt = { 0 };
 	av_init_packet( &pkt );
@@ -624,7 +622,7 @@ double VideoStream::ActuallyEncodeFrame( const uint8_t *buffer, int buffer_size,
 		opicture_ptr->quality = c->global_quality;
 
 #if LIBAVFORMAT_VERSION_INT >= AV_VERSION_INT(54, 0, 0)
-		ret = avcodec_encode_video2( c, &pkt, opicture_ptr, &got_packet );
+		int ret = avcodec_encode_video2( c, &pkt, opicture_ptr, &got_packet );
 		if ( ret != 0 )
 		{
 			Fatal( "avcodec_encode_video2 failed with errorcode %d \"%s\"", ret, av_err2str( ret ) );
@@ -646,11 +644,11 @@ double VideoStream::ActuallyEncodeFrame( const uint8_t *buffer, int buffer_size,
 #endif
 			}
 
-			if ( pkt.pts != AV_NOPTS_VALUE )
+			if ( pkt.pts != (int64_t)AV_NOPTS_VALUE )
 			{
 				pkt.pts = av_rescale_q( pkt.pts, c->time_base, ost->time_base );
 			}
-			if ( pkt.dts != AV_NOPTS_VALUE )
+			if ( pkt.dts != (int64_t)AV_NOPTS_VALUE )
 			{
 				pkt.dts = av_rescale_q( pkt.dts, c->time_base, ost->time_base );
 			}

