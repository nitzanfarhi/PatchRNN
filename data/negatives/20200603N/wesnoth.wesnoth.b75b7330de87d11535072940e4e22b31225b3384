commit b75b7330de87d11535072940e4e22b31225b3384
Author: gfgtdf <f492343@rmqkr.net>
Date:   Mon Nov 24 00:22:03 2014 +0100

    add "synced_context_id"
    
    the plan is to allow non-current-players to send require_random.

diff --git a/src/play_controller.cpp b/src/play_controller.cpp
index eeb6e5e7ba..09ba79accc 100644
--- a/src/play_controller.cpp
+++ b/src/play_controller.cpp
@@ -141,7 +141,8 @@ play_controller::play_controller(const config& level, saved_game& state_of_game,
 	end_level_data_(),
 	victory_music_(),
 	defeat_music_(),
-	scope_()
+	scope_(),
+	synced_context_number_(0)
 {
 	resources::controller = this;
 	resources::gameboard = &gamestate_.board_;
diff --git a/src/play_controller.hpp b/src/play_controller.hpp
index c4b9455236..9281ff230d 100644
--- a/src/play_controller.hpp
+++ b/src/play_controller.hpp
@@ -182,6 +182,8 @@ public:
 	boost::shared_ptr<wb::manager> get_whiteboard();
 	const mp_game_settings& get_mp_settings();
 	const game_classification & get_classification();
+	int get_synced_context_number() const { return synced_context_number_; }
+	void increase_synced_context_number() { ++synced_context_number_; }
 
 	static const std::string wml_menu_hotkey_prefix;
 protected:
@@ -302,6 +304,8 @@ private:
 	std::vector<std::string> defeat_music_;
 
 	hotkey::scope_changer scope_;
+	// used to sync with the mpserver, not persistent in savefiles.
+	int synced_context_number_;
 
 };
 
diff --git a/src/synced_context.cpp b/src/synced_context.cpp
index 2c55c43387..9d6d365e0b 100644
--- a/src/synced_context.cpp
+++ b/src/synced_context.cpp
@@ -307,7 +307,8 @@ config synced_context::ask_server(const std::string &name, const mp_sync::user_c
 			if(is_local_side && !did_require)
 			{
 				config data;
-				data.add_child("require_random");
+				config& rr = data.add_child("require_random");
+				rr["context_id"] = resources::controller->get_synced_context_number();
 				network::send_data(data,0);
 				did_require = true;
 			}
@@ -375,7 +376,7 @@ set_scontext_synced::set_scontext_synced(int number)
 */
 void set_scontext_synced::init()
 {
-
+	resources::controller->increase_synced_context_number();
 	LOG_REPLAY << "set_scontext_synced::set_scontext_synced\n";
 	assert(synced_context::get_synced_state() == synced_context::UNSYNCED);
 

