commit 9eebc098a386ed9547aed6c8d9a7f26f6fc5ec1b
Author: Dwight <dwight@10gen.com>
Date:   Mon Mar 19 05:11:15 2012 -0400

    a little more readable

diff --git a/src/mongo/db/d_concurrency.cpp b/src/mongo/db/d_concurrency.cpp
index 9337c8ea13..288eec93e3 100755
--- a/src/mongo/db/d_concurrency.cpp
+++ b/src/mongo/db/d_concurrency.cpp
@@ -469,7 +469,7 @@ namespace mongo {
         }
     }
 
-    bool Lock::DBWrite::prep(LockState& ls) { 
+    bool Lock::DBWrite::isW(LockState& ls) const { 
         switch( ls.threadState ) { 
         case 'R' : 
             assert(false);
@@ -544,7 +544,7 @@ namespace mongo {
     Lock::DBWrite::DBWrite(const StringData& ns) {
         locked_w=false; weLocked=0; ourCounter = 0;
         LockState& ls = lockState();
-        if( prep(ls) )
+        if( isW(ls) )
             return;
         char db[MaxDatabaseNameLen];
         nsToDatabase(ns.data(), db);
@@ -569,7 +569,7 @@ namespace mongo {
         }
     }
 
-    bool Lock::DBRead::prep(LockState& ls) { 
+    bool Lock::DBRead::isRW(LockState& ls) const { 
         switch( ls.threadState ) { 
         case 'W' :
         case 'R' : 
@@ -642,7 +642,7 @@ namespace mongo {
     Lock::DBRead::DBRead(const StringData& ns) {
         locked_r=false; weLocked=0; ourCounter = 0;
         LockState& ls = lockState();
-        if( prep(ls) )
+        if( isRW(ls) )
             return;
         char db[MaxDatabaseNameLen];
         nsToDatabase(ns.data(), db);
diff --git a/src/mongo/db/d_concurrency.h b/src/mongo/db/d_concurrency.h
index 1f332a384b..3b455dfcfc 100644
--- a/src/mongo/db/d_concurrency.h
+++ b/src/mongo/db/d_concurrency.h
@@ -63,7 +63,7 @@ namespace mongo {
         };
         // lock this database. do not shared_lock globally first, that is handledin herein. 
         class DBWrite : private ScopedLock {
-            bool prep(LockState&);
+            bool isW(LockState&) const;
             void lockTop(LockState&);
             void lockLocal();
             void lock(const string& db);
@@ -76,7 +76,7 @@ namespace mongo {
         };
         // lock this database for reading. do not shared_lock globally first, that is handledin herein. 
         class DBRead : private ScopedLock {
-            bool prep(LockState&);
+            bool isRW(LockState&) const;
             void lockTop(LockState&);
             void lockLocal();
             void lock(const string& db);

