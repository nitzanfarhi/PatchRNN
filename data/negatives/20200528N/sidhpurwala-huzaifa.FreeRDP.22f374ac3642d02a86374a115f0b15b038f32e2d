commit 22f374ac3642d02a86374a115f0b15b038f32e2d
Author: Marc-Andr√© Moreau <marcandre.moreau@gmail.com>
Date:   Tue Jan 22 21:24:04 2013 -0500

    libfreerdp-codec: implement buffer pooling for RemoteFX

diff --git a/libfreerdp/codec/rfx.c b/libfreerdp/codec/rfx.c
index 00d23951..ac46c848 100644
--- a/libfreerdp/codec/rfx.c
+++ b/libfreerdp/codec/rfx.c
@@ -150,7 +150,17 @@ RFX_CONTEXT* rfx_context_new(void)
 	context->priv->TilePool = Queue_New(TRUE, -1, -1);
 	context->priv->TileQueue = Queue_New(TRUE, -1, -1);
 
+	/*
+	 * align buffers to 16 byte boundary (needed for SSE/NEON instructions)
+	 *
+	 * y_r_buffer, cb_g_buffer, cr_b_buffer: 64 * 64 * 4 = 16384 (0x4000)
+	 * dwt_buffer: 32 * 32 * 2 * 2 * 4 = 16384, maximum sub-band width is 32
+	 */
+
+	context->priv->BufferPool = BufferPool_New(TRUE, 16384, 16);
+
 	context->priv->parallel = FALSE;
+	//context->priv->parallel = TRUE;
 
 	if (context->priv->parallel)
 	{
@@ -162,15 +172,6 @@ RFX_CONTEXT* rfx_context_new(void)
 	/* initialize the default pixel format */
 	rfx_context_set_pixel_format(context, RDP_PIXEL_FORMAT_B8G8R8A8);
 
-	/* align buffers to 16 byte boundary (needed for SSE/SSE2 instructions) */
-
-	context->priv->y_r_buffer = _aligned_malloc(16384, 16); /* 64 * 64 * 4 = 16384 (0x4000) */
-	context->priv->cb_g_buffer = _aligned_malloc(16384, 16); /* 64 * 64 * 4 = 16384 (0x4000) */
-	context->priv->cr_b_buffer = _aligned_malloc(16384, 16); /* 64 * 64 * 4 = 16384  (0x4000) */
-
-	/* maximum sub-band width is 32 */
-	context->priv->dwt_buffer = _aligned_malloc(16384, 16); /* 32 * 32 * 2 * 2 * 4 = 16384 (0x4000) */
-
 	/* create profilers for default decoding routines */
 	rfx_profiler_create(context);
 	
@@ -206,11 +207,7 @@ void rfx_context_free(RFX_CONTEXT* context)
 		DestroyThreadpoolEnvironment(&context->priv->ThreadPoolEnv);
 	}
 
-	_aligned_free(context->priv->y_r_buffer);
-	_aligned_free(context->priv->cb_g_buffer);
-	_aligned_free(context->priv->cr_b_buffer);
-
-	_aligned_free(context->priv->dwt_buffer);
+	BufferPool_Free(context->priv->BufferPool);
 
 	free(context->priv);
 	free(context);
@@ -461,7 +458,7 @@ static void rfx_process_message_tile(RFX_CONTEXT* context, RFX_TILE* tile, STREA
 		YLen, context->quants + (quantIdxY * 10),
 		CbLen, context->quants + (quantIdxCb * 10),
 		CrLen, context->quants + (quantIdxCr * 10),
-		tile->data, 64 * sizeof(UINT32));
+		tile->data, 64 * 4);
 }
 
 struct _RFX_TILE_WORK_PARAM
diff --git a/libfreerdp/codec/rfx_decode.c b/libfreerdp/codec/rfx_decode.c
index 7eaba5fc..fd8eca2e 100644
--- a/libfreerdp/codec/rfx_decode.c
+++ b/libfreerdp/codec/rfx_decode.c
@@ -96,6 +96,10 @@ static void rfx_decode_format_rgb(INT16* r_buf, INT16* g_buf, INT16* b_buf,
 static void rfx_decode_component(RFX_CONTEXT* context, const UINT32* quantization_values,
 	const BYTE* data, int size, INT16* buffer)
 {
+	INT16* dwt_buffer;
+
+	dwt_buffer = BufferPool_Take(context->priv->BufferPool, -1); /* dwt_buffer */
+
 	PROFILER_ENTER(context->priv->prof_rfx_decode_component);
 
 	PROFILER_ENTER(context->priv->prof_rfx_rlgr_decode);
@@ -111,10 +115,12 @@ static void rfx_decode_component(RFX_CONTEXT* context, const UINT32* quantizatio
 	PROFILER_EXIT(context->priv->prof_rfx_quantization_decode);
 
 	PROFILER_ENTER(context->priv->prof_rfx_dwt_2d_decode);
-		context->dwt_2d_decode(buffer, context->priv->dwt_buffer);
+		context->dwt_2d_decode(buffer, dwt_buffer);
 	PROFILER_EXIT(context->priv->prof_rfx_dwt_2d_decode);
 
 	PROFILER_EXIT(context->priv->prof_rfx_decode_component);
+
+	BufferPool_Return(context->priv->BufferPool, dwt_buffer);
 }
 
 /* rfx_decode_ycbcr_to_rgb code now resides in the primitives library. */
@@ -131,23 +137,28 @@ void rfx_decode_rgb(RFX_CONTEXT* context, STREAM* data_in,
 
 	PROFILER_ENTER(context->priv->prof_rfx_decode_rgb);
 
-	rfx_decode_component(context, y_quants, stream_get_tail(data_in), y_size, context->priv->y_r_buffer); /* YData */
+	pSrcDst[0] = BufferPool_Take(context->priv->BufferPool, -1); /* y_r_buffer */
+	pSrcDst[1] = BufferPool_Take(context->priv->BufferPool, -1); /* cb_g_buffer */
+	pSrcDst[2] = BufferPool_Take(context->priv->BufferPool, -1); /* cr_b_buffer */
+
+	rfx_decode_component(context, y_quants, stream_get_tail(data_in), y_size, pSrcDst[0]); /* YData */
 	stream_seek(data_in, y_size);
-	rfx_decode_component(context, cb_quants, stream_get_tail(data_in), cb_size, context->priv->cb_g_buffer); /* CbData */
+	rfx_decode_component(context, cb_quants, stream_get_tail(data_in), cb_size, pSrcDst[1]); /* CbData */
 	stream_seek(data_in, cb_size);
-	rfx_decode_component(context, cr_quants, stream_get_tail(data_in), cr_size, context->priv->cr_b_buffer); /* CrData */
+	rfx_decode_component(context, cr_quants, stream_get_tail(data_in), cr_size, pSrcDst[2]); /* CrData */
 	stream_seek(data_in, cr_size);
 
-	pSrcDst[0] = context->priv->y_r_buffer;
-	pSrcDst[1] = context->priv->cb_g_buffer;
-	pSrcDst[2] = context->priv->cr_b_buffer;
 	prims->yCbCrToRGB_16s16s_P3P3((const INT16**) pSrcDst, 64 * sizeof(INT16),
 			pSrcDst, 64 * sizeof(INT16), &roi_64x64);
 
 	PROFILER_ENTER(context->priv->prof_rfx_decode_format_rgb);
-		rfx_decode_format_rgb(context->priv->y_r_buffer, context->priv->cb_g_buffer, context->priv->cr_b_buffer,
+		rfx_decode_format_rgb(pSrcDst[0], pSrcDst[1], pSrcDst[2],
 			context->pixel_format, rgb_buffer, stride);
 	PROFILER_EXIT(context->priv->prof_rfx_decode_format_rgb);
 	
 	PROFILER_EXIT(context->priv->prof_rfx_decode_rgb);
+
+	BufferPool_Return(context->priv->BufferPool, pSrcDst[0]);
+	BufferPool_Return(context->priv->BufferPool, pSrcDst[1]);
+	BufferPool_Return(context->priv->BufferPool, pSrcDst[2]);
 }
diff --git a/libfreerdp/codec/rfx_encode.c b/libfreerdp/codec/rfx_encode.c
index cedf8546..b7ebe9d9 100644
--- a/libfreerdp/codec/rfx_encode.c
+++ b/libfreerdp/codec/rfx_encode.c
@@ -26,6 +26,9 @@
 #include <stdlib.h>
 #include <string.h>
 
+#include <winpr/crt.h>
+#include <winpr/collections.h>
+
 #include <freerdp/primitives.h>
 
 #include "rfx_types.h"
@@ -187,10 +190,14 @@ static void rfx_encode_format_rgb(const BYTE* rgb_data, int width, int height, i
 static void rfx_encode_component(RFX_CONTEXT* context, const UINT32* quantization_values,
 	INT16* data, BYTE* buffer, int buffer_size, int* size)
 {
+	INT16* dwt_buffer;
+
+	dwt_buffer = BufferPool_Take(context->priv->BufferPool, -1); /* dwt_buffer */
+
 	PROFILER_ENTER(context->priv->prof_rfx_encode_component);
 
 	PROFILER_ENTER(context->priv->prof_rfx_dwt_2d_encode);
-		context->dwt_2d_encode(data, context->priv->dwt_buffer);
+		context->dwt_2d_encode(data, dwt_buffer);
 	PROFILER_EXIT(context->priv->prof_rfx_dwt_2d_encode);
 
 	PROFILER_ENTER(context->priv->prof_rfx_quantization_encode);
@@ -206,49 +213,54 @@ static void rfx_encode_component(RFX_CONTEXT* context, const UINT32* quantizatio
 	PROFILER_EXIT(context->priv->prof_rfx_rlgr_encode);
 
 	PROFILER_EXIT(context->priv->prof_rfx_encode_component);
+
+	BufferPool_Return(context->priv->BufferPool, dwt_buffer);
 }
 
 void rfx_encode_rgb(RFX_CONTEXT* context, const BYTE* rgb_data, int width, int height, int rowstride,
 	const UINT32* y_quants, const UINT32* cb_quants, const UINT32* cr_quants,
 	STREAM* data_out, int* y_size, int* cb_size, int* cr_size)
 {
-	primitives_t *prims = primitives_get();
 	INT16* pSrcDst[3];
+	primitives_t* prims = primitives_get();
 	static const prim_size_t roi_64x64 = { 64, 64 };
-	INT16* y_r_buffer = context->priv->y_r_buffer;
-	INT16* cb_g_buffer = context->priv->cb_g_buffer;
-	INT16* cr_b_buffer = context->priv->cr_b_buffer;
+
+	pSrcDst[0] = BufferPool_Take(context->priv->BufferPool, -1); /* y_r_buffer */
+	pSrcDst[1] = BufferPool_Take(context->priv->BufferPool, -1); /* cb_g_buffer */
+	pSrcDst[2] = BufferPool_Take(context->priv->BufferPool, -1); /* cr_b_buffer */
 
 	PROFILER_ENTER(context->priv->prof_rfx_encode_rgb);
 
 	PROFILER_ENTER(context->priv->prof_rfx_encode_format_rgb);
 		rfx_encode_format_rgb(rgb_data, width, height, rowstride,
-			context->pixel_format, context->palette, y_r_buffer, cb_g_buffer, cr_b_buffer);
+			context->pixel_format, context->palette, pSrcDst[0], pSrcDst[1], pSrcDst[2]);
 	PROFILER_EXIT(context->priv->prof_rfx_encode_format_rgb);
 
 	PROFILER_ENTER(context->priv->prof_rfx_rgb_to_ycbcr);
-		pSrcDst[0] = context->priv->y_r_buffer;
-		pSrcDst[1] = context->priv->cb_g_buffer;
-		pSrcDst[2] = context->priv->cr_b_buffer;
-		prims->RGBToYCbCr_16s16s_P3P3((const INT16 **) pSrcDst, 64*sizeof(INT16),
-			pSrcDst, 64*sizeof(INT16), &roi_64x64);
+		prims->RGBToYCbCr_16s16s_P3P3((const INT16**) pSrcDst, 64 * sizeof(INT16),
+			pSrcDst, 64 * sizeof(INT16), &roi_64x64);
 	PROFILER_EXIT(context->priv->prof_rfx_rgb_to_ycbcr);
 
 	/* Ensure the buffer is reasonably large enough */
 	stream_check_size(data_out, 4096);
-	rfx_encode_component(context, y_quants, context->priv->y_r_buffer,
+
+	rfx_encode_component(context, y_quants, pSrcDst[0],
 		stream_get_tail(data_out), stream_get_left(data_out), y_size);
 	stream_seek(data_out, *y_size);
 
 	stream_check_size(data_out, 4096);
-	rfx_encode_component(context, cb_quants, context->priv->cb_g_buffer,
+	rfx_encode_component(context, cb_quants, pSrcDst[1],
 		stream_get_tail(data_out), stream_get_left(data_out), cb_size);
 	stream_seek(data_out, *cb_size);
 
 	stream_check_size(data_out, 4096);
-	rfx_encode_component(context, cr_quants, context->priv->cr_b_buffer,
+	rfx_encode_component(context, cr_quants, pSrcDst[2],
 		stream_get_tail(data_out), stream_get_left(data_out), cr_size);
 	stream_seek(data_out, *cr_size);
 
 	PROFILER_EXIT(context->priv->prof_rfx_encode_rgb);
+
+	BufferPool_Return(context->priv->BufferPool, pSrcDst[0]);
+	BufferPool_Return(context->priv->BufferPool, pSrcDst[1]);
+	BufferPool_Return(context->priv->BufferPool, pSrcDst[2]);
 }
diff --git a/libfreerdp/codec/rfx_types.h b/libfreerdp/codec/rfx_types.h
index 7733cbf6..7027a412 100644
--- a/libfreerdp/codec/rfx_types.h
+++ b/libfreerdp/codec/rfx_types.h
@@ -39,8 +39,6 @@
 
 struct _RFX_CONTEXT_PRIV
 {
-	/* pre-allocated buffers */
-
 	wQueue* TilePool;
 	wQueue* TileQueue;
 
@@ -48,11 +46,7 @@ struct _RFX_CONTEXT_PRIV
 	PTP_POOL ThreadPool;
 	TP_CALLBACK_ENVIRON ThreadPoolEnv;
  
- 	INT16* y_r_buffer;
-	INT16* cb_g_buffer;
-	INT16* cr_b_buffer;
-
-	INT16* dwt_buffer;
+	wBufferPool* BufferPool;
 
 	/* profilers */
 	PROFILER_DEFINE(prof_rfx_decode_rgb);
diff --git a/winpr/include/winpr/collections.h b/winpr/include/winpr/collections.h
index adf00378..ac37f054 100644
--- a/winpr/include/winpr/collections.h
+++ b/winpr/include/winpr/collections.h
@@ -239,11 +239,11 @@ struct _wBufferPool
 };
 typedef struct _wBufferPool wBufferPool;
 
-void* BufferPool_Take(wBufferPool* pool, int bufferSize);
-void BufferPool_Return(wBufferPool* pool, void* buffer);
-void BufferPool_Clear(wBufferPool* pool);
+WINPR_API void* BufferPool_Take(wBufferPool* pool, int bufferSize);
+WINPR_API void BufferPool_Return(wBufferPool* pool, void* buffer);
+WINPR_API void BufferPool_Clear(wBufferPool* pool);
 
-wBufferPool* BufferPool_New(BOOL synchronized, int fixedSize, DWORD alignment);
-void BufferPool_Free(wBufferPool* pool);
+WINPR_API wBufferPool* BufferPool_New(BOOL synchronized, int fixedSize, DWORD alignment);
+WINPR_API void BufferPool_Free(wBufferPool* pool);
 
 #endif /* WINPR_COLLECTIONS_H */

