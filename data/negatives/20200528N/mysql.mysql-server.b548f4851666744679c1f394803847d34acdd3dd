commit b548f4851666744679c1f394803847d34acdd3dd
Author: Vasil Dimov <vasil.dimov@oracle.com>
Date:   Wed Jun 11 13:22:45 2014 +0300

    WL#7777 Integrate PFS memory instrumentation with InnoDB
    
    Handle ut_allocator::allocate() throwing exceptions from within UT_NEW().

diff --git a/storage/innobase/include/ut0new.h b/storage/innobase/include/ut0new.h
index 58228767646..f08b4879671 100644
--- a/storage/innobase/include/ut0new.h
+++ b/storage/innobase/include/ut0new.h
@@ -544,8 +544,13 @@ pointer must be passed to UT_DELETE() when no longer needed.
 @return pointer to the created object or NULL */
 #define UT_NEW(expr, key) \
 	({ \
-		char*	_p = ut_allocator<char>(key).allocate( \
-			sizeof expr, NULL, __FILE__, __LINE__, IB_FUNC); \
+		char*	_p; \
+	 	try { \
+	 		_p = ut_allocator<char>(key).allocate( \
+				sizeof expr, NULL, __FILE__, __LINE__, IB_FUNC); \
+	 	} catch (...) { \
+	 		_p = NULL; \
+	 	} \
 	 /* ut_allocator::construct() can't be used for classes with disabled
 	 copy constructors, thus we use placement new here directly. */ \
 	 	_p != NULL ? (new(_p) expr) : NULL; \

