commit 8107a50d5fd54a2f3555fb0baadb8333a9df77e1
Author: mwilliams <mwilliams@fb.com>
Date:   Fri Dec 20 18:08:46 2013 -0800

    Better type inference for collections
    
    Let type inference know the actual type for T_COLLECTION
    expressions. Also mark them "definitely not null".
    
    Reviewed By: @jdelong
    
    Differential Revision: D1109650

diff --git a/hphp/compiler/analysis/alias_manager.cpp b/hphp/compiler/analysis/alias_manager.cpp
index c59449e28d..db8b652436 100644
--- a/hphp/compiler/analysis/alias_manager.cpp
+++ b/hphp/compiler/analysis/alias_manager.cpp
@@ -3304,6 +3304,12 @@ private:
 static bool isNewResult(ExpressionPtr e) {
   if (!e) return false;
   if (e->is(Expression::KindOfNewObjectExpression)) return true;
+  if (e->is(Expression::KindOfBinaryOpExpression)) {
+    auto b = spc(BinaryOpExpression, e);
+    if (b->getOp() == T_COLLECTION) {
+      return true;
+    }
+  }
   if (e->is(Expression::KindOfAssignmentExpression)) {
     return isNewResult(spc(AssignmentExpression, e)->getValue());
   }
diff --git a/hphp/compiler/expression/binary_op_expression.cpp b/hphp/compiler/expression/binary_op_expression.cpp
index 34db09e468..aed3a695e4 100644
--- a/hphp/compiler/expression/binary_op_expression.cpp
+++ b/hphp/compiler/expression/binary_op_expression.cpp
@@ -804,7 +804,7 @@ TypePtr BinaryOpExpression::inferTypes(AnalysisResultPtr ar, TypePtr type,
   case T_COLLECTION:
     et1 = Type::Any;
     et2 = Type::Any;
-    rt = Type::Object;
+    rt = Type::CreateObjectType(m_exp1->getLiteralString());
     break;
   default:
     assert(false);
@@ -1063,4 +1063,3 @@ bool BinaryOpExpression::isOpEqual() {
   }
   return false;
 }
-

