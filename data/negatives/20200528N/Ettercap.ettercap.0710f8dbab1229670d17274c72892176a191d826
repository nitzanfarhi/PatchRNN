commit 0710f8dbab1229670d17274c72892176a191d826
Author: alor <alor>
Date:   Sun Dec 14 12:21:54 2003 +0000

    statistics window

diff --git a/src/interfaces/curses/ec_curses_view.c b/src/interfaces/curses/ec_curses_view.c
index c6e965ce..b6ccb593 100644
--- a/src/interfaces/curses/ec_curses_view.c
+++ b/src/interfaces/curses/ec_curses_view.c
@@ -17,7 +17,7 @@
     along with this program; if not, write to the Free Software
     Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
 
-    $Id: ec_curses_view.c,v 1.2 2003/12/13 18:41:11 alor Exp $
+    $Id: ec_curses_view.c,v 1.3 2003/12/14 12:21:52 alor Exp $
 */
 
 #include <ec.h>
@@ -27,10 +27,14 @@
 /* proto */
 
 static void toggle_resolve(void);
+static void curses_show_stats(void);
+static void curses_stop_stats(void);
+static void refresh_stats(void);
 
 /* globals */
 
 static char tag_resolve[] = " ";
+static wdg_t *wdg_stats;
 
 struct wdg_menu menu_view[] = { {"View",                "V", NULL},
                                 {"Profiles",             "", NULL},
@@ -38,7 +42,7 @@ struct wdg_menu menu_view[] = { {"View",                "V", NULL},
                                 {"-",                    "", NULL},
                                 {"Resolve IP addresses", tag_resolve, toggle_resolve},
                                 {"-",                    "", NULL},
-                                {"Statistics",           "", NULL},
+                                {"Statistics",           "", curses_show_stats},
                                 {NULL, NULL, NULL},
                               };
 
@@ -57,6 +61,76 @@ static void toggle_resolve(void)
    }
 }
 
+/*
+ * display the statistics windows
+ */
+static void curses_show_stats(void)
+{
+   DEBUG_MSG("curses_show_stats");
+
+   wdg_create_object(&wdg_stats, WDG_WINDOW, WDG_OBJ_WANT_FOCUS);
+   
+   wdg_set_title(wdg_stats, "Statistics:", WDG_ALIGN_LEFT);
+   wdg_set_size(wdg_stats, 2, 2, 70, 22);
+   wdg_set_color(wdg_stats, WDG_COLOR_SCREEN, EC_COLOR);
+   wdg_set_color(wdg_stats, WDG_COLOR_WINDOW, EC_COLOR);
+   wdg_set_color(wdg_stats, WDG_COLOR_BORDER, EC_COLOR_BORDER);
+   wdg_set_color(wdg_stats, WDG_COLOR_FOCUS, EC_COLOR_FOCUS);
+   wdg_set_color(wdg_stats, WDG_COLOR_TITLE, EC_COLOR_TITLE);
+   wdg_draw_object(wdg_stats);
+ 
+   wdg_set_focus(wdg_stats);
+  
+   /* display the stats */
+   refresh_stats(); 
+
+   /* add the callback on idle to refresh the stats */
+   wdg_add_idle_callback(refresh_stats);
+
+   /* add the destroy callback */
+   wdg_add_destroy_key(wdg_stats, CTRL('Q'), curses_stop_stats);
+}
+
+static void curses_stop_stats(void)
+{
+   DEBUG_MSG("curses_stop_stats");
+   wdg_del_idle_callback(refresh_stats);
+}
+
+static void refresh_stats(void)
+{
+   /* if not focused don't refresh it */
+   if (!(wdg_stats->flags & WDG_OBJ_FOCUSED))
+      return;
+   
+   wdg_window_print(wdg_stats, 1, 1, "Received packets    : %lld", GBL_STATS->ps_recv);
+   wdg_window_print(wdg_stats, 1, 2, "Dropped packets     : %lld", GBL_STATS->ps_drop);
+   wdg_window_print(wdg_stats, 1, 3, "Lost percentage     : %.2f %%",
+          (GBL_STATS->ps_recv) ? (float)GBL_STATS->ps_drop * 100 / GBL_STATS->ps_recv : 0 );
+  
+   wdg_window_print(wdg_stats, 1, 5, "Current queue len   : %d", GBL_STATS->queue_curr);
+   wdg_window_print(wdg_stats, 1, 6, "Max queue len       : %d", GBL_STATS->queue_max);
+   
+   wdg_window_print(wdg_stats, 1, 7, "Sampling rate       : %d", GBL_CONF->sampling_rate);
+   
+   wdg_window_print(wdg_stats, 1, 9, "Bottom Half received packet : pck: %8lld  byte: %8lld", 
+         GBL_STATS->bh.pck_recv, GBL_STATS->bh.pck_size);
+   wdg_window_print(wdg_stats, 1, 10, "Top Half received packet    : pck: %8lld  byte: %8lld", 
+         GBL_STATS->th.pck_recv, GBL_STATS->th.pck_size);
+   wdg_window_print(wdg_stats, 1, 11, "Interesting packets         : %.2f %%",
+         (GBL_STATS->bh.pck_recv) ? (float)GBL_STATS->th.pck_recv * 100 / GBL_STATS->bh.pck_recv : 0 );
+
+   wdg_window_print(wdg_stats, 1, 13, "Bottom Half packet rate : worst: %8d  adv: %8d p/s", 
+         GBL_STATS->bh.rate_worst, GBL_STATS->bh.rate_adv);
+   wdg_window_print(wdg_stats, 1, 14, "Top Half packet rate    : worst: %8d  adv: %8d p/s", 
+         GBL_STATS->th.rate_worst, GBL_STATS->th.rate_adv);
+   
+   wdg_window_print(wdg_stats, 1, 15, "Bottom Half thruoutput  : worst: %8d  adv: %8d b/s", 
+         GBL_STATS->bh.thru_worst, GBL_STATS->bh.thru_adv);
+   wdg_window_print(wdg_stats, 1, 16, "Top Half thruoutput     : worst: %8d  adv: %8d b/s", 
+         GBL_STATS->th.thru_worst, GBL_STATS->th.thru_adv);
+}
+
 
 /* EOF */
 
diff --git a/src/interfaces/curses/widgets/wdg.c b/src/interfaces/curses/widgets/wdg.c
index 14992e3c..7535102e 100644
--- a/src/interfaces/curses/widgets/wdg.c
+++ b/src/interfaces/curses/widgets/wdg.c
@@ -17,7 +17,7 @@
     along with this program; if not, write to the Free Software
     Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
 
-    $Id: wdg.c,v 1.24 2003/12/08 16:34:16 alor Exp $
+    $Id: wdg.c,v 1.25 2003/12/14 12:21:54 alor Exp $
 */
 
 #include <wdg.h>
@@ -71,6 +71,7 @@ void wdg_set_focus(struct wdg_object *wo);
 
 int wdg_create_object(struct wdg_object **wo, size_t type, size_t flags);
 int wdg_destroy_object(struct wdg_object **wo);
+void wdg_add_destroy_key(struct wdg_object *wo, int key, void (*callback)(void));
 
 void wdg_set_size(struct wdg_object *wo, int x1, int y1, int x2, int y2);
 void wdg_draw_object(struct wdg_object *wo);
@@ -374,6 +375,14 @@ static void wdg_dispatch_msg(int key, struct wdg_mouse_event *mouse)
    /* the focused object is modal ! send only to it */
    if (wdg_focused_obj && (wdg_focused_obj->wo->flags & WDG_OBJ_FOCUS_MODAL)) {
       wdg_focused_obj->wo->get_msg(wdg_focused_obj->wo, key, mouse);
+
+      /* check the destroy callback */
+      if (wdg_focused_obj->wo && key == wdg_focused_obj->wo->destroy_key) {
+         struct wdg_object *wo = wdg_focused_obj->wo;
+         WDG_EXECUTE(wdg_focused_obj->wo->destroy_callback);
+         wdg_destroy_object(&wo);
+      }
+         
       /* other objects must not receive the msg */
       return;
    }
@@ -412,6 +421,13 @@ static void wdg_dispatch_msg(int key, struct wdg_mouse_event *mouse)
          if (wdg_root_obj->get_msg(wdg_root_obj, key, mouse) == WDG_ESUCCESS)
             /* the root object handled the message */
             return;
+         
+         /* check the destroy callback */
+         if (key == wdg_root_obj->destroy_key) {
+            WDG_EXECUTE(wdg_root_obj->destroy_callback);
+            wdg_destroy_object(&wdg_root_obj);
+            return;
+         }
       }
 
       /* 
@@ -421,7 +437,15 @@ static void wdg_dispatch_msg(int key, struct wdg_mouse_event *mouse)
       if (wdg_focused_obj != NULL) {
          if (wdg_focused_obj->wo->get_msg(wdg_focused_obj->wo, key, mouse) == WDG_ESUCCESS)
             /* the focused object handled the message */
+            return;      
+         
+         /* check the destroy callback */
+         if (wdg_focused_obj->wo && key == wdg_focused_obj->wo->destroy_key) {
+            struct wdg_object *wo = wdg_focused_obj->wo;
+            WDG_EXECUTE(wdg_focused_obj->wo->destroy_callback);
+            wdg_destroy_object(&wo);
             return;
+         }
       }
       
       /* noone handled the message, flash an error */
@@ -620,7 +644,6 @@ int wdg_destroy_object(struct wdg_object **wo)
    
          /* free the title */
          WDG_SAFE_FREE((*wo)->title);
-         WDG_BUG_IF((*wo)->title != NULL);
          /* then free the object */
          WDG_SAFE_FREE(*wo);
          
@@ -631,6 +654,15 @@ int wdg_destroy_object(struct wdg_object **wo)
    return -WDG_ENOTHANDLED;
 }
 
+/*
+ * set the destroy key and callback
+ */
+void wdg_add_destroy_key(struct wdg_object *wo, int key, void (*callback)(void))
+{
+   wo->destroy_key = key;
+   wo->destroy_callback = callback;
+}
+
 /*
  * set or reset the size of an object
  */
diff --git a/src/interfaces/curses/widgets/wdg.h b/src/interfaces/curses/widgets/wdg.h
index 593fcea8..cfc860f8 100644
--- a/src/interfaces/curses/widgets/wdg.h
+++ b/src/interfaces/curses/widgets/wdg.h
@@ -1,5 +1,5 @@
 
-/* $Id: wdg.h,v 1.21 2003/12/07 18:21:05 alor Exp $ */
+/* $Id: wdg.h,v 1.22 2003/12/14 12:21:54 alor Exp $ */
 
 #ifndef WDG_H
 #define WDG_H
@@ -39,7 +39,7 @@
 #endif
 
 
-#define LIBWDG_VERSION "0.0.8"
+#define LIBWDG_VERSION "0.8.1"
    
 /********************************************/
 
@@ -130,6 +130,7 @@ struct wdg_scr {
 
 /* global scruct for current screen */
 extern struct wdg_scr current_screen;
+extern struct wdg_obj_list *wdg_focused_obj;
 
 /* struct for mouse events */
 struct wdg_mouse_event {
@@ -162,6 +163,8 @@ struct wdg_object {
    
    /* destructor function */
    int (*destroy)(struct wdg_object *wo);
+   int destroy_key;
+   void (*destroy_callback)(void);
    /* called to set / reset the size */
    int (*resize)(struct wdg_object *wo);
    /* called upon redrawing of the object */
@@ -255,6 +258,7 @@ extern void wdg_del_idle_callback(void (*callback)(void));
 /* object creation */
 extern int wdg_create_object(wdg_t **wo, size_t type, size_t flags);
 extern int wdg_destroy_object(wdg_t **wo);
+extern void wdg_add_destroy_key(wdg_t *wo, int key, void (*callback)(void));
 
 /* object modifications */
 extern void wdg_set_size(wdg_t *wo, int x1, int y1, int x2, int y2);

