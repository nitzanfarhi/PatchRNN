commit b5921293a6f1553aa4ebdebb992da53f9554eb3a
Author: renato <renato@openbsd.org>
Date:   Mon May 23 18:33:56 2016 +0000

    Create network sockets on the parent process.
    
    We drop our privileges in ldpe right after we create the network sockets.
    The problem is that we might want to change the transport-address and
    reload the config, in which case we need new sockets. To allow that,
    always create the network sockets in the parent process and pass them
    to ldpe via imsg.

diff --git a/usr.sbin/ldpd/adjacency.c b/usr.sbin/ldpd/adjacency.c
index 69b5637f626..505acfb8d5d 100644
--- a/usr.sbin/ldpd/adjacency.c
+++ b/usr.sbin/ldpd/adjacency.c
@@ -1,4 +1,4 @@
-/*	$OpenBSD: adjacency.c,v 1.15 2016/05/23 18:28:22 renato Exp $ */
+/*	$OpenBSD: adjacency.c,v 1.16 2016/05/23 18:33:56 renato Exp $ */
 
 /*
  * Copyright (c) 2009 Michele Marchetto <michele@openbsd.org>
@@ -169,6 +169,7 @@ tnbr_new(struct ldpd_conf *xconf, struct in_addr addr)
 		fatal(__func__);
 
 	tnbr->addr = addr;
+	tnbr->state = TNBR_STA_DOWN;
 	tnbr->hello_holdtime = xconf->thello_holdtime;
 	tnbr->hello_interval = xconf->thello_interval;
 
@@ -210,13 +211,41 @@ tnbr_check(struct tnbr *tnbr)
 }
 
 void
-tnbr_init(struct tnbr *tnbr)
+tnbr_update(struct tnbr *tnbr)
 {
-	/* set event handlers for targeted neighbor */
-	evtimer_set(&tnbr->hello_timer, tnbr_hello_timer, tnbr);
+	int			 socket_ok;
 
-	send_hello(HELLO_TARGETED, NULL, tnbr);
-	tnbr_start_hello_timer(tnbr);
+	if (global.ldp_edisc_socket != -1)
+		socket_ok = 1;
+	else
+		socket_ok = 0;
+
+	if (tnbr->state == TNBR_STA_DOWN) {
+		if (!socket_ok)
+			return;
+
+		tnbr->state = TNBR_STA_ACTIVE;
+		send_hello(HELLO_TARGETED, NULL, tnbr);
+
+		evtimer_set(&tnbr->hello_timer, tnbr_hello_timer, tnbr);
+		tnbr_start_hello_timer(tnbr);
+	} else if (tnbr->state == TNBR_STA_ACTIVE) {
+		if (socket_ok)
+			return;
+
+		tnbr->state = TNBR_STA_DOWN;
+		tnbr_stop_hello_timer(tnbr);
+	}
+}
+
+void
+tnbr_update_all(void)
+{
+	struct tnbr		*tnbr;
+
+	/* update targeted neighbors */
+	LIST_FOREACH(tnbr, &leconf->tnbr_list, entry)
+		tnbr_update(tnbr);
 }
 
 /* target neighbors timers */
diff --git a/usr.sbin/ldpd/hello.c b/usr.sbin/ldpd/hello.c
index 6b1497b1c77..be195e393ba 100644
--- a/usr.sbin/ldpd/hello.c
+++ b/usr.sbin/ldpd/hello.c
@@ -1,4 +1,4 @@
-/*	$OpenBSD: hello.c,v 1.38 2016/05/23 18:28:22 renato Exp $ */
+/*	$OpenBSD: hello.c,v 1.39 2016/05/23 18:33:56 renato Exp $ */
 
 /*
  * Copyright (c) 2009 Michele Marchetto <michele@openbsd.org>
@@ -149,7 +149,7 @@ recv_hello(struct in_addr lsr_id, struct ldp_msg *lm, struct in_addr src,
 
 			tnbr = tnbr_new(leconf, src);
 			tnbr->flags |= F_TNBR_DYNAMIC;
-			tnbr_init(tnbr);
+			tnbr_update(tnbr);
 			LIST_INSERT_HEAD(&leconf->tnbr_list, tnbr, entry);
 		}
 
diff --git a/usr.sbin/ldpd/interface.c b/usr.sbin/ldpd/interface.c
index c80ecc77464..df4de347a81 100644
--- a/usr.sbin/ldpd/interface.c
+++ b/usr.sbin/ldpd/interface.c
@@ -1,4 +1,4 @@
-/*	$OpenBSD: interface.c,v 1.37 2016/05/23 18:28:22 renato Exp $ */
+/*	$OpenBSD: interface.c,v 1.38 2016/05/23 18:33:56 renato Exp $ */
 
 /*
  * Copyright (c) 2005 Claudio Jeker <claudio@openbsd.org>
@@ -94,13 +94,6 @@ if_del(struct iface *iface)
 	free(iface);
 }
 
-void
-if_init(struct iface *iface)
-{
-	/* set event handlers for interface */
-	evtimer_set(&iface->hello_timer, if_hello_timer, iface);
-}
-
 struct iface *
 if_lookup(struct ldpd_conf *xconf, unsigned short ifindex)
 {
@@ -215,6 +208,8 @@ if_start(struct iface *iface)
 		return (-1);
 
 	send_hello(HELLO_LINK, iface, NULL);
+
+	evtimer_set(&iface->hello_timer, if_hello_timer, iface);
 	if_start_hello_timer(iface);
 	return (0);
 }
@@ -242,20 +237,28 @@ if_reset(struct iface *iface)
 int
 if_update(struct iface *iface)
 {
-	int ret;
+	int			 link_ok, addr_ok = 0, socket_ok;
+	int			 ret;
+
+	link_ok = (iface->flags & IFF_UP) &&
+	    LINK_STATE_IS_UP(iface->linkstate);
+
+	addr_ok = !LIST_EMPTY(&iface->addr_list);
+
+	if (global.ldp_disc_socket != -1)
+		socket_ok = 1;
+	else
+		socket_ok = 0;
 
 	if (iface->state == IF_STA_DOWN) {
-		if (!(iface->flags & IFF_UP) ||
-		    !LINK_STATE_IS_UP(iface->linkstate) ||
-		    LIST_EMPTY(&iface->addr_list))
+		if (!link_ok || !addr_ok || !socket_ok)
 			return (0);
 
+
 		iface->state = IF_STA_ACTIVE;
 		ret = if_start(iface);
 	} else {
-		if ((iface->flags & IFF_UP) &&
-		    LINK_STATE_IS_UP(iface->linkstate) &&
-		    !LIST_EMPTY(&iface->addr_list))
+		if (link_ok && addr_ok && socket_ok)
 			return (0);
 
 		iface->state = IF_STA_DOWN;
@@ -265,6 +268,15 @@ if_update(struct iface *iface)
 	return (ret);
 }
 
+void
+if_update_all(void)
+{
+	struct iface		*iface;
+
+	LIST_FOREACH(iface, &leconf->iface_list, entry)
+		if_update(iface);
+}
+
 /* timers */
 /* ARGSUSED */
 void
diff --git a/usr.sbin/ldpd/l2vpn.c b/usr.sbin/ldpd/l2vpn.c
index 0a9d6119ae1..bc36ab1c7e1 100644
--- a/usr.sbin/ldpd/l2vpn.c
+++ b/usr.sbin/ldpd/l2vpn.c
@@ -1,4 +1,4 @@
-/*	$OpenBSD: l2vpn.c,v 1.10 2016/05/23 18:31:12 renato Exp $ */
+/*	$OpenBSD: l2vpn.c,v 1.11 2016/05/23 18:33:56 renato Exp $ */
 
 /*
  * Copyright (c) 2015 Renato Westphal <renato@openbsd.org>
@@ -473,7 +473,7 @@ ldpe_l2vpn_pw_init(struct l2vpn_pw *pw)
 
 	tnbr = tnbr_find(leconf, pw->lsr_id);
 	if (!event_initialized(&tnbr->hello_timer))
-		tnbr_init(tnbr);
+		tnbr_update(tnbr);
 }
 
 void
diff --git a/usr.sbin/ldpd/ldpd.c b/usr.sbin/ldpd/ldpd.c
index 3e1132a03de..b87dcf4f05c 100644
--- a/usr.sbin/ldpd/ldpd.c
+++ b/usr.sbin/ldpd/ldpd.c
@@ -1,4 +1,4 @@
-/*	$OpenBSD: ldpd.c,v 1.38 2016/05/23 18:28:22 renato Exp $ */
+/*	$OpenBSD: ldpd.c,v 1.39 2016/05/23 18:33:56 renato Exp $ */
 
 /*
  * Copyright (c) 2005 Claudio Jeker <claudio@openbsd.org>
@@ -55,6 +55,8 @@ void	main_dispatch_ldpe(int, short, void *);
 void	main_dispatch_lde(int, short, void *);
 
 int	main_imsg_compose_both(enum imsg_type, void *, uint16_t);
+void	main_imsg_send_net_sockets(void);
+void	main_imsg_send_net_socket(enum socket_type);
 int	ldp_reload(void);
 void	merge_global(struct ldpd_conf *, struct ldpd_conf *);
 void	merge_ifaces(struct ldpd_conf *, struct ldpd_conf *);
@@ -260,6 +262,8 @@ main(int argc, char *argv[])
 	if (kr_init(!(ldpd_conf->flags & F_LDPD_NO_FIB_UPDATE)) == -1)
 		fatalx("kr_init failed");
 
+	main_imsg_send_net_sockets();
+
 	/* remove unneded stuff from config */
 		/* ... */
 
@@ -352,6 +356,9 @@ main_dispatch_ldpe(int fd, short event, void *bula)
 			break;
 
 		switch (imsg.hdr.type) {
+		case IMSG_REQUEST_SOCKETS:
+			main_imsg_send_net_sockets();
+			break;
 		case IMSG_CTL_RELOAD:
 			if (ldp_reload() == -1)
 				log_warnx("configuration reload failed");
@@ -554,6 +561,31 @@ evbuf_clear(struct evbuf *eb)
 	eb->wbuf.fd = -1;
 }
 
+void
+main_imsg_send_net_sockets(void)
+{
+	main_imsg_send_net_socket(LDP_SOCKET_DISC);
+	main_imsg_send_net_socket(LDP_SOCKET_EDISC);
+	main_imsg_send_net_socket(LDP_SOCKET_SESSION);
+	main_imsg_compose_ldpe(IMSG_SETUP_SOCKETS, 0, NULL, 0);
+}
+
+void
+main_imsg_send_net_socket(enum socket_type type)
+{
+	int			 fd;
+
+	fd = ldp_create_socket(type);
+	if (fd == -1) {
+		log_warnx("%s: failed to create %s socket", __func__,
+		    socket_name(type));
+		return;
+	}
+
+	imsg_compose_event(iev_ldpe, IMSG_SOCKET_NET, 0, 0, fd, &type,
+	    sizeof(type));
+}
+
 int
 ldp_reload(void)
 {
@@ -678,8 +710,6 @@ merge_ifaces(struct ldpd_conf *conf, struct ldpd_conf *xconf)
 		if ((iface = if_lookup(conf, xi->ifindex)) == NULL) {
 			LIST_REMOVE(xi, entry);
 			LIST_INSERT_HEAD(&conf->iface_list, xi, entry);
-			if (ldpd_process == PROC_LDP_ENGINE)
-				if_init(xi);
 			continue;
 		}
 
@@ -718,7 +748,7 @@ merge_tnbrs(struct ldpd_conf *conf, struct ldpd_conf *xconf)
 			LIST_REMOVE(xt, entry);
 			LIST_INSERT_HEAD(&conf->tnbr_list, xt, entry);
 			if (ldpd_process == PROC_LDP_ENGINE)
-				tnbr_init(xt);
+				tnbr_update(xt);
 			continue;
 		}
 
diff --git a/usr.sbin/ldpd/ldpd.h b/usr.sbin/ldpd/ldpd.h
index 287e97d4b51..eb4d6bcfdd9 100644
--- a/usr.sbin/ldpd/ldpd.h
+++ b/usr.sbin/ldpd/ldpd.h
@@ -1,4 +1,4 @@
-/*	$OpenBSD: ldpd.h,v 1.66 2016/05/23 18:25:30 renato Exp $ */
+/*	$OpenBSD: ldpd.h,v 1.67 2016/05/23 18:33:56 renato Exp $ */
 
 /*
  * Copyright (c) 2009 Michele Marchetto <michele@openbsd.org>
@@ -113,6 +113,10 @@ enum imsg_type {
 	IMSG_NEIGHBOR_DOWN,
 	IMSG_NETWORK_ADD,
 	IMSG_NETWORK_DEL,
+	IMSG_SOCKET_NET,
+	IMSG_CLOSE_SOCKETS,
+	IMSG_REQUEST_SOCKETS,
+	IMSG_SETUP_SOCKETS,
 	IMSG_RECONF_CONF,
 	IMSG_RECONF_IFACE,
 	IMSG_RECONF_TNBR,
@@ -127,6 +131,10 @@ enum imsg_type {
 #define	IF_STA_DOWN		0x01
 #define	IF_STA_ACTIVE		0x02
 
+/* targeted neighbor states */
+#define	TNBR_STA_DOWN		0x01
+#define	TNBR_STA_ACTIVE		0x02
+
 /* interface types */
 enum iface_type {
 	IF_TYPE_POINTOPOINT,
@@ -240,6 +248,7 @@ struct tnbr {
 	struct adj		*adj;
 	struct in_addr		 addr;
 
+	int			 state;
 	uint16_t		 hello_holdtime;
 	uint16_t		 hello_interval;
 	uint16_t		 pw_count;
diff --git a/usr.sbin/ldpd/ldpe.c b/usr.sbin/ldpd/ldpe.c
index c35b4dfb8a5..98f2a519b5f 100644
--- a/usr.sbin/ldpd/ldpe.c
+++ b/usr.sbin/ldpd/ldpe.c
@@ -1,4 +1,4 @@
-/*	$OpenBSD: ldpe.c,v 1.50 2016/05/23 18:25:30 renato Exp $ */
+/*	$OpenBSD: ldpe.c,v 1.51 2016/05/23 18:33:56 renato Exp $ */
 
 /*
  * Copyright (c) 2005 Claudio Jeker <claudio@openbsd.org>
@@ -73,8 +73,6 @@ pid_t
 ldpe(struct ldpd_conf *xconf, int pipe_parent2ldpe[2], int pipe_ldpe2lde[2],
     int pipe_parent2lde[2])
 {
-	struct iface		*iface;
-	struct tnbr		*tnbr;
 	struct passwd		*pw;
 	struct event		 ev_sigint, ev_sigterm;
 	pid_t			 pid;
@@ -101,17 +99,6 @@ ldpe(struct ldpd_conf *xconf, int pipe_parent2ldpe[2], int pipe_ldpe2lde[2],
 	TAILQ_INIT(&global.pending_conns);
 	global.pfkeysock = pfkey_init(&sysdep);
 
-	/* create network sockets */
-	global.ldp_disc_socket = ldp_create_socket(LDP_SOCKET_DISC);
-	if (global.ldp_disc_socket == -1)
-		fatal("error creating discovery socket");
-	global.ldp_edisc_socket = ldp_create_socket(LDP_SOCKET_EDISC);
-	if (global.ldp_edisc_socket == -1)
-		fatal("error binding extended discovery socket");
-	global.ldp_session_socket = ldp_create_socket(LDP_SOCKET_SESSION);
-	if (global.ldp_session_socket == -1)
-		fatal("error creating session socket");
-
 	if ((pw = getpwnam(LDPD_USER)) == NULL)
 		fatal("getpwnam");
 
@@ -125,7 +112,7 @@ ldpe(struct ldpd_conf *xconf, int pipe_parent2ldpe[2], int pipe_ldpe2lde[2],
 	    setresuid(pw->pw_uid, pw->pw_uid, pw->pw_uid))
 		fatal("can't drop privileges");
 
-	if (pledge("stdio cpath inet mcast", NULL) == -1)
+	if (pledge("stdio cpath inet mcast recvfd", NULL) == -1)
 		fatal("pledge");
 
 	event_init();
@@ -168,15 +155,11 @@ ldpe(struct ldpd_conf *xconf, int pipe_parent2ldpe[2], int pipe_ldpe2lde[2],
 	    ldpe_dispatch_pfkey, NULL);
 	event_add(&pfkey_ev, NULL);
 
-	event_set(&disc_ev, global.ldp_disc_socket,
-	    EV_READ|EV_PERSIST, disc_recv_packet, NULL);
-	event_add(&disc_ev, NULL);
+	/* mark sockets as closed */
+	global.ldp_disc_socket = -1;
+	global.ldp_edisc_socket = -1;
+	global.ldp_session_socket = -1;
 
-	event_set(&edisc_ev, global.ldp_edisc_socket,
-	    EV_READ|EV_PERSIST, disc_recv_packet, NULL);
-	event_add(&edisc_ev, NULL);
-
-	accept_add(global.ldp_session_socket, session_accept, NULL);
 	/* listen on ldpd control socket */
 	TAILQ_INIT(&ctl_conns);
 	control_listen();
@@ -184,14 +167,6 @@ ldpe(struct ldpd_conf *xconf, int pipe_parent2ldpe[2], int pipe_ldpe2lde[2],
 	if ((pkt_ptr = calloc(1, IBUF_READ_SIZE)) == NULL)
 		fatal(__func__);
 
-	/* initialize interfaces */
-	LIST_FOREACH(iface, &leconf->iface_list, entry)
-		if_init(iface);
-
-	/* start configured targeted neighbors */
-	LIST_FOREACH(tnbr, &leconf->tnbr_list, entry)
-		tnbr_init(tnbr);
-
 	event_dispatch();
 
 	ldpe_shutdown();
@@ -208,13 +183,9 @@ ldpe_shutdown(void)
 	config_clear(leconf);
 
 	event_del(&pfkey_ev);
-	event_del(&disc_ev);
-	event_del(&edisc_ev);
-	accept_del(global.ldp_session_socket);
 	close(global.pfkeysock);
-	close(global.ldp_disc_socket);
-	close(global.ldp_edisc_socket);
-	close(global.ldp_session_socket);
+
+	ldpe_close_sockets();
 
 	/* remove addresses from global list */
 	while ((if_addr = LIST_FIRST(&global.addr_list)) != NULL) {
@@ -265,6 +236,10 @@ ldpe_dispatch_main(int fd, short event, void *bula)
 	struct imsgbuf		*ibuf = &iev->ibuf;
 	struct iface		*iface = NULL;
 	struct kif		*kif;
+	enum socket_type	*socket_type;
+	static int		 disc_socket = -1;
+	static int		 edisc_socket = -1;
+	static int		 session_socket = -1;
 	int			 n, shut = 0;
 
 	if (event & EV_READ) {
@@ -315,6 +290,52 @@ ldpe_dispatch_main(int fd, short event, void *bula)
 
 			if_addr_del(imsg.data);
 			break;
+		case IMSG_CLOSE_SOCKETS:
+			ldpe_close_sockets();
+			if_update_all();
+			tnbr_update_all();
+
+			disc_socket = -1;
+			edisc_socket = -1;
+			session_socket = -1;
+			ldpe_imsg_compose_parent(IMSG_REQUEST_SOCKETS, 0,
+			    NULL, 0);
+			break;
+		case IMSG_SOCKET_NET:
+			if (imsg.hdr.len != IMSG_HEADER_SIZE +
+			    sizeof(enum socket_type))
+				fatalx("SOCKET_NET imsg with wrong len");
+			socket_type = imsg.data;
+
+			switch (*socket_type) {
+			case LDP_SOCKET_DISC:
+				disc_socket = imsg.fd;
+				break;
+			case LDP_SOCKET_EDISC:
+				edisc_socket = imsg.fd;
+				break;
+			case LDP_SOCKET_SESSION:
+				session_socket = imsg.fd;
+				break;
+			}
+			break;
+		case IMSG_SETUP_SOCKETS:
+			if (disc_socket == -1 || edisc_socket == -1 ||
+			    session_socket == -1) {
+				if (disc_socket != -1)
+					close(disc_socket);
+				if (edisc_socket != -1)
+					close(edisc_socket);
+				if (session_socket != -1)
+					close(session_socket);
+				break;
+			}
+
+			ldpe_setup_sockets(disc_socket, edisc_socket,
+			    session_socket);
+			if_update_all();
+			tnbr_update_all();
+			break;
 		case IMSG_RECONF_CONF:
 			if ((nconf = malloc(sizeof(struct ldpd_conf))) ==
 			    NULL)
@@ -547,6 +568,53 @@ ldpe_dispatch_pfkey(int fd, short event, void *bula)
 	}
 }
 
+void
+ldpe_setup_sockets(int disc_socket, int edisc_socket, int session_socket)
+{
+	/* discovery socket */
+	global.ldp_disc_socket = disc_socket;
+	event_set(&disc_ev, global.ldp_disc_socket,
+	    EV_READ|EV_PERSIST, disc_recv_packet, NULL);
+	event_add(&disc_ev, NULL);
+
+	/* extended discovery socket */
+	global.ldp_edisc_socket = edisc_socket;
+	event_set(&edisc_ev, global.ldp_edisc_socket,
+	    EV_READ|EV_PERSIST, disc_recv_packet, NULL);
+	event_add(&edisc_ev, NULL);
+
+	/* session socket */
+	global.ldp_session_socket = session_socket;
+	accept_add(global.ldp_session_socket, session_accept, NULL);
+}
+
+void
+ldpe_close_sockets(void)
+{
+	/* discovery socket */
+	if (event_initialized(&disc_ev))
+		event_del(&disc_ev);
+	if (global.ldp_disc_socket != -1) {
+		close(global.ldp_disc_socket);
+		global.ldp_disc_socket = -1;
+	}
+
+	/* extended discovery socket */
+	if (event_initialized(&edisc_ev))
+		event_del(&edisc_ev);
+	if (global.ldp_edisc_socket != -1) {
+		close(global.ldp_edisc_socket);
+		global.ldp_edisc_socket = -1;
+	}
+
+	/* session socket */
+	if (global.ldp_session_socket != -1) {
+		accept_del(global.ldp_session_socket);
+		close(global.ldp_session_socket);
+		global.ldp_session_socket = -1;
+	}
+}
+
 void
 ldpe_iface_ctl(struct ctl_conn *c, unsigned int idx)
 {
diff --git a/usr.sbin/ldpd/ldpe.h b/usr.sbin/ldpd/ldpe.h
index a29545efe13..803f30b58fb 100644
--- a/usr.sbin/ldpd/ldpe.h
+++ b/usr.sbin/ldpd/ldpe.h
@@ -1,4 +1,4 @@
-/*	$OpenBSD: ldpe.h,v 1.47 2016/05/23 17:43:42 renato Exp $ */
+/*	$OpenBSD: ldpe.h,v 1.48 2016/05/23 18:33:56 renato Exp $ */
 
 /*
  * Copyright (c) 2004, 2005, 2008 Esben Norby <norby@openbsd.org>
@@ -155,12 +155,14 @@ int	 tlv_decode_fec_elm(struct nbr *, struct ldp_msg *, char *,
 
 /* ldpe.c */
 pid_t		 ldpe(struct ldpd_conf *, int[2], int[2], int[2]);
+int		 ldpe_imsg_compose_parent(int, pid_t, void *, uint16_t);
+int		 ldpe_imsg_compose_lde(int, uint32_t, pid_t, void *,
+		    uint16_t);
 void		 ldpe_dispatch_main(int, short, void *);
 void		 ldpe_dispatch_lde(int, short, void *);
 void		 ldpe_dispatch_pfkey(int, short, void *);
-int		 ldpe_imsg_compose_parent(int, pid_t, void *, uint16_t);
-int		 ldpe_imsg_compose_lde(int, uint32_t, pid_t, void *,
-		     uint16_t);
+void		 ldpe_setup_sockets(int, int, int);
+void		 ldpe_close_sockets(void);
 void		 ldpe_iface_ctl(struct ctl_conn *, unsigned int);
 void		 ldpe_adj_ctl(struct ctl_conn *);
 void		 ldpe_nbr_ctl(struct ctl_conn *);
@@ -171,10 +173,10 @@ void		 mapping_list_clr(struct mapping_head *);
 int		 if_start(struct iface *);
 int		 if_reset(struct iface *);
 int		 if_update(struct iface *);
+void		 if_update_all(void);
 
 struct iface	*if_new(struct kif *);
 void		 if_del(struct iface *);
-void		 if_init(struct iface *);
 struct iface	*if_lookup(struct ldpd_conf *, unsigned short);
 struct if_addr	*if_addr_new(struct kaddr *);
 struct if_addr	*if_addr_lookup(struct if_addr_head *, struct kaddr *);
@@ -194,9 +196,10 @@ void		 adj_start_itimer(struct adj *);
 void		 adj_stop_itimer(struct adj *);
 struct tnbr	*tnbr_new(struct ldpd_conf *, struct in_addr);
 void		 tnbr_del(struct tnbr *);
-struct tnbr	*tnbr_check(struct tnbr *);
-void		 tnbr_init(struct tnbr *);
 struct tnbr	*tnbr_find(struct ldpd_conf *, struct in_addr);
+struct tnbr	*tnbr_check(struct tnbr *);
+void		 tnbr_update(struct tnbr *);
+void		 tnbr_update_all(void);
 
 struct ctl_adj	*adj_to_ctl(struct adj *);
 
diff --git a/usr.sbin/ldpd/log.c b/usr.sbin/ldpd/log.c
index 0992ab0f3dd..c0d69acddee 100644
--- a/usr.sbin/ldpd/log.c
+++ b/usr.sbin/ldpd/log.c
@@ -1,4 +1,4 @@
-/*	$OpenBSD: log.c,v 1.22 2016/05/23 17:43:42 renato Exp $ */
+/*	$OpenBSD: log.c,v 1.23 2016/05/23 18:33:56 renato Exp $ */
 
 /*
  * Copyright (c) 2003, 2004 Henning Brauer <henning@openbsd.org>
@@ -175,6 +175,21 @@ fatalx(const char *emsg)
 }
 
 /* names */
+const char *
+socket_name(int type)
+{
+	switch (type) {
+	case LDP_SOCKET_DISC:
+		return ("discovery");
+	case LDP_SOCKET_EDISC:
+		return ("extended discovery");
+	case LDP_SOCKET_SESSION:
+		return ("session");
+	default:
+		return ("UNKNOWN");
+	}
+}
+
 const char *
 nbr_state_name(int state)
 {
diff --git a/usr.sbin/ldpd/log.h b/usr.sbin/ldpd/log.h
index 0f32221ac5b..84a378f22e6 100644
--- a/usr.sbin/ldpd/log.h
+++ b/usr.sbin/ldpd/log.h
@@ -1,4 +1,4 @@
-/*	$OpenBSD: log.h,v 1.7 2016/05/23 17:43:42 renato Exp $ */
+/*	$OpenBSD: log.h,v 1.8 2016/05/23 18:33:56 renato Exp $ */
 
 /*
  * Copyright (c) 2003, 2004 Henning Brauer <henning@openbsd.org>
@@ -31,6 +31,7 @@ void	log_info(const char *, ...);
 void	log_debug(const char *, ...);
 void	fatal(const char *) __dead;
 void	fatalx(const char *) __dead;
+const char *socket_name(int);
 const char *pw_type_name(uint16_t);
 const char *log_map(struct map *);
 struct fec;
diff --git a/usr.sbin/ldpd/socket.c b/usr.sbin/ldpd/socket.c
index b57c4e4dab9..1b5fc54e639 100644
--- a/usr.sbin/ldpd/socket.c
+++ b/usr.sbin/ldpd/socket.c
@@ -1,4 +1,4 @@
-/*	$OpenBSD: socket.c,v 1.3 2016/05/23 18:25:30 renato Exp $ */
+/*	$OpenBSD: socket.c,v 1.4 2016/05/23 18:33:56 renato Exp $ */
 
 /*
  * Copyright (c) 2016 Renato Westphal <renato@openbsd.org>
@@ -31,7 +31,7 @@
 #include "ldpe.h"
 #include "log.h"
 
-extern struct ldpd_conf		*leconf;
+extern struct ldpd_conf		*ldpd_conf;
 extern struct ldpd_sysdep	 sysdep;
 
 int
@@ -72,7 +72,7 @@ ldp_create_socket(enum socket_type type)
 		break;
 	case LDP_SOCKET_EDISC:
 	case LDP_SOCKET_SESSION:
-		local_sa.sin_addr = leconf->trans_addr;
+		local_sa.sin_addr = ldpd_conf->trans_addr;
 		break;
 	}
 	if (sock_set_reuse(fd, 1) == -1) {

