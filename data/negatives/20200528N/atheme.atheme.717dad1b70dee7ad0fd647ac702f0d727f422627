commit 717dad1b70dee7ad0fd647ac702f0d727f422627
Author: Jilles Tjoelker <jilles@stack.nl>
Date:   Sat Jun 4 22:48:34 2011 +0200

    Use sstrdup rather than a fixed array for entity names.
    
    Because we are fairly general, the array was way too long for most names,
    wasting a lot of memory.
    
    Implementations of malloc() appear good enough to cope with many small
    allocations like these.

diff --git a/include/entity.h b/include/entity.h
index e429a313f..563569c6d 100644
--- a/include/entity.h
+++ b/include/entity.h
@@ -15,7 +15,7 @@ typedef enum {
 typedef struct {
 	object_t parent;
 	myentity_type_t type;
-	char name[NICKLEN * 4];
+	char *name;
 	char id[IDLEN];
 
 	mowgli_list_t chanacs;
diff --git a/libathemecore/account.c b/libathemecore/account.c
index 26e1c60c9..7976face3 100644
--- a/libathemecore/account.c
+++ b/libathemecore/account.c
@@ -125,10 +125,10 @@ myuser_t *myuser_add_id(const char *id, const char *name, const char *pass, cons
 	object_init(object(mu), name, (destructor_t) myuser_delete);
 
 	entity(mu)->type = ENT_USER;
-	strlcpy(entity(mu)->name, name, NICKLEN);
+	entity(mu)->name = sstrdup(name);
 	mu->email = sstrdup(email);
 	if (id)
-		strlcpy(entity(mu)->id, id, sizeof(entity(mu)->name));
+		strlcpy(entity(mu)->id, id, sizeof(entity(mu)->id));
 	else
 		entity(mu)->id[0] = '\0';
 
@@ -309,6 +309,7 @@ void myuser_delete(myuser_t *mu)
 	myentity_del(entity(mu));
 
 	free(mu->email);
+	free(entity(mu)->name);
 
 	mowgli_heap_free(myuser_heap, mu);
 
@@ -337,12 +338,15 @@ void myuser_rename(myuser_t *mu, const char *name)
 	mowgli_node_t *n, *tn;
 	user_t *u;
 	hook_user_rename_t data;
+	char *newname;
+	char nb[NICKLEN];
 
 	return_if_fail(mu != NULL);
 	return_if_fail(name != NULL);
+	return_if_fail(strlen(name) >= NICKLEN);
 
-	char nb[NICKLEN];
 	strlcpy(nb, entity(mu)->name, NICKLEN);
+	newname = sstrdup(name);
 
 	if (authservice_loaded)
 	{
@@ -353,7 +357,8 @@ void myuser_rename(myuser_t *mu, const char *name)
 		}
 	}
 	myentity_del(entity(mu));
-	strlcpy(entity(mu)->name, name, NICKLEN);
+	free(entity(mu)->name);
+	entity(mu)->name = newname;
 	myentity_put(entity(mu));
 	if (authservice_loaded)
 	{
diff --git a/modules/exttarget/chanacs.c b/modules/exttarget/chanacs.c
index 8cb973952..b8dbccf4c 100644
--- a/modules/exttarget/chanacs.c
+++ b/modules/exttarget/chanacs.c
@@ -68,6 +68,7 @@ static void chanacs_ext_delete(chanacs_exttarget_t *e)
 
 	mowgli_patricia_delete(chanacs_exttarget_tree, e->channel);
 	strshare_unref(e->channel);
+	free(entity(e)->name);
 
 	mowgli_heap_free(chanacs_ext_heap, e);
 }
@@ -75,6 +76,7 @@ static void chanacs_ext_delete(chanacs_exttarget_t *e)
 static myentity_t *chanacs_validate_f(const char *param)
 {
 	chanacs_exttarget_t *ext;
+	size_t namelen;
 
 	if (param == NULL)
 		return NULL;
@@ -90,8 +92,13 @@ static myentity_t *chanacs_validate_f(const char *param)
 	ext->channel = strshare_get(param);
 
 	/* name the entity... $chanacs:param */
-	strlcpy(entity(ext)->name, "$chanacs:", sizeof entity(ext)->name);
-	strlcat(entity(ext)->name, param, sizeof entity(ext)->name);
+#define NAMEPREFIX "$chanacs:"
+	namelen = sizeof NAMEPREFIX + strlen(param);
+	entity(ext)->name = smalloc(namelen);
+	memcpy(entity(ext)->name, NAMEPREFIX, sizeof NAMEPREFIX - 1);
+	memcpy(entity(ext)->name + sizeof NAMEPREFIX - 1, param,
+			namelen - sizeof NAMEPREFIX + 1);
+#undef NAMEPREFIX
 
 	/* hook up the entity's validation table. */
 	entity(ext)->chanacs_validate = &chanacs_ext_validate;
diff --git a/modules/exttarget/channel.c b/modules/exttarget/channel.c
index 0be391456..147f5802a 100644
--- a/modules/exttarget/channel.c
+++ b/modules/exttarget/channel.c
@@ -66,6 +66,7 @@ static void channel_ext_delete(channel_exttarget_t *e)
 
 	mowgli_patricia_delete(channel_exttarget_tree, e->channel);
 	strshare_unref(e->channel);
+	free(entity(e)->name);
 
 	mowgli_heap_free(channel_ext_heap, e);
 }
@@ -73,6 +74,7 @@ static void channel_ext_delete(channel_exttarget_t *e)
 static myentity_t *channel_validate_f(const char *param)
 {
 	channel_exttarget_t *ext;
+	size_t namelen;
 
 	if (param == NULL)
 		return NULL;
@@ -88,8 +90,13 @@ static myentity_t *channel_validate_f(const char *param)
 	ext->channel = strshare_get(param);
 
 	/* name the entity... $channel:param */
-	strlcpy(entity(ext)->name, "$channel:", sizeof entity(ext)->name);
-	strlcat(entity(ext)->name, param, sizeof entity(ext)->name);
+#define NAMEPREFIX "$channel:"
+	namelen = sizeof NAMEPREFIX + strlen(param);
+	entity(ext)->name = smalloc(namelen);
+	memcpy(entity(ext)->name, NAMEPREFIX, sizeof NAMEPREFIX - 1);
+	memcpy(entity(ext)->name + sizeof NAMEPREFIX - 1, param,
+			namelen - sizeof NAMEPREFIX + 1);
+#undef NAMEPREFIX
 
 	/* hook up the entity's validation table. */
 	entity(ext)->chanacs_validate = &channel_ext_validate;
diff --git a/modules/groupserv/main/groupserv.c b/modules/groupserv/main/groupserv.c
index c0934c2d0..40d2a77e3 100644
--- a/modules/groupserv/main/groupserv.c
+++ b/modules/groupserv/main/groupserv.c
@@ -56,6 +56,7 @@ static void mygroup_delete(mygroup_t *mg)
 	}
 
 	metadata_delete_all(mg);
+	free(entity(mg)->name);
 	mowgli_heap_free(mygroup_heap, mg);
 }
 
@@ -78,7 +79,7 @@ mygroup_t *mygroup_add_id(const char *id, const char *name)
 	else
 		entity(mg)->id[0] = '\0';
 
-	strlcpy(entity(mg)->name, name, sizeof(entity(mg)->name));
+	entity(mg)->name = sstrdup(name);
 	myentity_put(entity(mg));
 
 	mygroup_set_chanacs_validator(entity(mg));

