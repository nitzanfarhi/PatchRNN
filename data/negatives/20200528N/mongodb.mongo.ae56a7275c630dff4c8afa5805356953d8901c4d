commit ae56a7275c630dff4c8afa5805356953d8901c4d
Author: Andy Schwerin <schwerin@10gen.com>
Date:   Sat Oct 5 12:14:36 2013 -0400

    SERVER-10670 Make ParsedPrivilege capable of representing the "any" resource.

diff --git a/src/mongo/db/auth/privilege_parser.cpp b/src/mongo/db/auth/privilege_parser.cpp
index 72a495344b..01a1449f8f 100644
--- a/src/mongo/db/auth/privilege_parser.cpp
+++ b/src/mongo/db/auth/privilege_parser.cpp
@@ -27,6 +27,7 @@ namespace mongo {
 
     using mongoutils::str::stream;
 
+    const BSONField<bool> ParsedResource::anyResource("anyResource");
     const BSONField<bool> ParsedResource::cluster("cluster");
     const BSONField<string> ParsedResource::db("db");
     const BSONField<string> ParsedResource::collection("collection");
@@ -44,14 +45,24 @@ namespace mongo {
             errMsg = &dummy;
         }
 
-        if (!isClusterSet() && (!isDbSet() || !isCollectionSet())) {
-            *errMsg = stream() << "resource must have " << db.name() << " and " <<
-                    collection.name() << " set, or must have " << cluster.name();
+        int numCandidateTypes = 0;
+        if (isAnyResourceSet()) ++numCandidateTypes;
+        if (isClusterSet()) ++numCandidateTypes;
+        if (isDbSet() || isCollectionSet()) ++numCandidateTypes;
+
+        if (isDbSet() != isCollectionSet()) {
+            *errMsg = stream() << "resource must set both " << db.name() << " and " <<
+                collection.name() << " or neither, but not exactly one.";
+            return false;
+        }
+        if (numCandidateTypes != 1) {
+            *errMsg = stream() << "resource must have exactly " << db.name()  << " and " <<
+                collection.name() << " set, or have only " << cluster.name() << " set " <<
+                " or have only " << anyResource.name() << " set";
             return false;
         }
-        if (isClusterSet() && (isDbSet() || isCollectionSet())) {
-            *errMsg = stream() << "resource cannot have " << cluster.name() << " set as well as "
-                    << db.name() << " or " << collection.name();
+        if (isAnyResourceSet() && !getAnyResource()) {
+            *errMsg = stream() << anyResource.name() << " must be true when specified";
             return false;
         }
         if (isClusterSet() && !getCluster()) {
@@ -73,6 +84,8 @@ namespace mongo {
     BSONObj ParsedResource::toBSON() const {
         BSONObjBuilder builder;
 
+        if (_isAnyResourceSet) builder.append(anyResource(), _anyResource);
+
         if (_isClusterSet) builder.append(cluster(), _cluster);
 
         if (_isDbSet) builder.append(db(), _db);
@@ -89,6 +102,10 @@ namespace mongo {
         if (!errMsg) errMsg = &dummy;
 
         FieldParser::FieldState fieldState;
+        fieldState = FieldParser::extract(source, anyResource, &_anyResource, errMsg);
+        if (fieldState == FieldParser::FIELD_INVALID) return false;
+        _isAnyResourceSet = fieldState == FieldParser::FIELD_SET;
+
         fieldState = FieldParser::extract(source, cluster, &_cluster, errMsg);
         if (fieldState == FieldParser::FIELD_INVALID) return false;
         _isClusterSet = fieldState == FieldParser::FIELD_SET;
@@ -105,6 +122,9 @@ namespace mongo {
     }
 
     void ParsedResource::clear() {
+        _anyResource = false;
+        _isAnyResourceSet = false;
+
         _cluster = false;
         _isClusterSet = false;
 
@@ -119,6 +139,9 @@ namespace mongo {
     void ParsedResource::cloneTo(ParsedResource* other) const {
         other->clear();
 
+        other->_anyResource = _anyResource;
+        other->_isAnyResourceSet = _isAnyResourceSet;
+
         other->_cluster = _cluster;
         other->_isClusterSet = _isClusterSet;
 
@@ -133,6 +156,24 @@ namespace mongo {
         return toBSON().toString();
     }
 
+    void ParsedResource::setAnyResource(bool anyResource) {
+        _anyResource = anyResource;
+        _isAnyResourceSet = true;
+    }
+
+    void ParsedResource::unsetAnyResource() {
+         _isAnyResourceSet = false;
+     }
+
+    bool ParsedResource::isAnyResourceSet() const {
+         return _isAnyResourceSet;
+    }
+
+    bool ParsedResource::getAnyResource() const {
+        dassert(_isAnyResourceSet);
+        return _anyResource;
+    }
+
     void ParsedResource::setCluster(bool cluster) {
         _cluster = cluster;
         _isClusterSet = true;
@@ -359,7 +400,9 @@ namespace mongo {
         // Build resource
         ResourcePattern resource;
         const ParsedResource& parsedResource = parsedPrivilege.getResource();
-        if (parsedResource.isClusterSet() && parsedResource.getCluster()) {
+        if (parsedResource.isAnyResourceSet() && parsedResource.getAnyResource()) {
+            resource = ResourcePattern::forAnyResource();
+        } else if (parsedResource.isClusterSet() && parsedResource.getCluster()) {
             resource = ResourcePattern::forClusterResource();
         } else {
             if (parsedResource.isDbSet() && !parsedResource.getDb().empty()) {
@@ -401,6 +444,8 @@ namespace mongo {
             parsedResource.setCollection("");
         } else if (privilege.getResourcePattern().isClusterResourcePattern()) {
             parsedResource.setCluster(true);
+        } else if (privilege.getResourcePattern().isAnyResourcePattern()) {
+            parsedResource.setAnyResource(true);
         } else {
             *errmsg = stream() << privilege.getResourcePattern().toString() <<
                     " is not a valid user-grantable resource pattern";
diff --git a/src/mongo/db/auth/privilege_parser.h b/src/mongo/db/auth/privilege_parser.h
index 235f6db12e..f0329cd99b 100644
--- a/src/mongo/db/auth/privilege_parser.h
+++ b/src/mongo/db/auth/privilege_parser.h
@@ -39,6 +39,7 @@ namespace mongo {
         // schema declarations
         //
 
+        static const BSONField<bool> anyResource;
         static const BSONField<bool> cluster;
         static const BSONField<string> db;
         static const BSONField<string> collection;
@@ -67,6 +68,11 @@ namespace mongo {
         // individual field accessors
         //
 
+        void setAnyResource(bool anyResource);
+        void unsetAnyResource();
+        bool isAnyResourceSet() const;
+        bool getAnyResource() const;
+
         void setCluster(bool cluster);
         void unsetCluster();
         bool isClusterSet() const;
@@ -85,6 +91,10 @@ namespace mongo {
     private:
         // Convention: (M)andatory, (O)ptional
 
+        // (O) Only present if the resource matches anything.
+        bool _anyResource;
+        bool _isAnyResourceSet;
+
         // (O) Only present if the resource is the cluster
         bool _cluster;
         bool _isClusterSet;
diff --git a/src/mongo/db/auth/resource_pattern.h b/src/mongo/db/auth/resource_pattern.h
index 9cbd925584..bc6dce7ba6 100644
--- a/src/mongo/db/auth/resource_pattern.h
+++ b/src/mongo/db/auth/resource_pattern.h
@@ -122,6 +122,13 @@ namespace mongo {
             return _matchType == matchAnyNormalResource;
         }
 
+        /**
+         * Returns true if this pattern matches any resource.
+         */
+        bool isAnyResourcePattern() const {
+            return _matchType == matchAnyResource;
+        }
+
         /**
          * Returns the namespace that this pattern matches.
          *

