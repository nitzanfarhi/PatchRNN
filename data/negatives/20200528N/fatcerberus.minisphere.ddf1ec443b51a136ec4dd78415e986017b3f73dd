commit ddf1ec443b51a136ec4dd78415e986017b3f73dd
Author: Bruce E. Pascoe <fatcerberus1@gmail.com>
Date:   Thu Feb 12 14:04:21 2015 -0500

    Implement Font:drawText, fix font rendering
    
    Apparently, truecolor fonts are stored as ABGR, despite the .rfn format
    spec specifying RGBA. Stupid color-format mismatches...

diff --git a/minisphere/main.c b/minisphere/main.c
index 262ec2a8..d9cfb688 100644
--- a/minisphere/main.c
+++ b/minisphere/main.c
@@ -74,6 +74,10 @@ main(int argc, char** argv)
 	char* sys_font_path = get_sys_asset_path("system.rfn", NULL);
 	g_sys_font = al_load_font(sys_font_path, 0, 0x0);
 	free(sys_font_path);
+	duk_push_global_stash(g_duktape);
+	duk_push_sphere_Font(g_duktape, g_sys_font);
+	duk_put_prop_string(g_duktape, -2, "system_font");
+	duk_pop(g_duktape);
 	g_display = al_create_display(320, 240);
 	al_set_window_title(g_display, al_get_config_value(g_game_conf, NULL, "name"));
 	al_set_blender(ALLEGRO_ADD, ALLEGRO_ALPHA, ALLEGRO_INVERSE_ALPHA);
@@ -85,7 +89,8 @@ main(int argc, char** argv)
 	// load startup script
 	duk_int_t exec_result;
 	char* script_path = get_asset_path(al_get_config_value(g_game_conf, NULL, "script"), "scripts");
-	exec_result = duk_pcompile_file(g_duktape, 0x0, script_path);
+	//exec_result = duk_pcompile_file(g_duktape, 0x0, script_path);
+	exec_result = duk_pcompile_string(g_duktape, 0x0, "function game() { var font = GetSystemFont(); while(true) { font.drawText(10, 10, 'maggie'); FlipScreen(); } }");
 	free(script_path);
 	if (exec_result != DUK_EXEC_SUCCESS) {
 		handle_js_error();
@@ -189,12 +194,11 @@ handle_js_error()
 static void
 shutdown_engine(void)
 {
+	duk_destroy_heap(g_duktape);
 	al_uninstall_audio();
 	al_destroy_display(g_display);
 	al_destroy_event_queue(g_events);
-	al_destroy_font(g_sys_font);
 	al_destroy_config(g_game_conf);
 	al_destroy_path(g_game_path);
 	al_uninstall_system();
-	duk_destroy_heap(g_duktape);
 }
diff --git a/minisphere/rfn_handler.c b/minisphere/rfn_handler.c
index 49b8febf..55a02d10 100644
--- a/minisphere/rfn_handler.c
+++ b/minisphere/rfn_handler.c
@@ -61,7 +61,7 @@ al_load_rfn_font(const char* filename, int size, int flags)
 		void* data = al_malloc(data_size);
 		al_fread(file, data, data_size);
 		glyph->bitmap = al_create_bitmap(glyph->header.width, glyph->header.height);
-		ALLEGRO_LOCKED_REGION* bitmap_lock = al_lock_bitmap(glyph->bitmap, ALLEGRO_PIXEL_FORMAT_RGBA_8888, ALLEGRO_LOCK_WRITEONLY);
+		ALLEGRO_LOCKED_REGION* bitmap_lock = al_lock_bitmap(glyph->bitmap, ALLEGRO_PIXEL_FORMAT_ABGR_8888, ALLEGRO_LOCK_WRITEONLY);
 		uint8_t* src_ptr = data;
 		uint8_t* dest_ptr = bitmap_lock->data;
 		switch (rfn->header.version) {
@@ -128,7 +128,7 @@ rfn_get_length(const ALLEGRO_FONT* f, const ALLEGRO_USTR* text)
 {
 	int length = 0;
 	int ch, pos = 0;
-	while (ch = al_ustr_get_next(text, &pos) >= 0) {
+	while ((ch = al_ustr_get_next(text, &pos)) >= 0) {
 		length += rfn_get_char_length(f, ch);
 	}
 	return length;
@@ -146,11 +146,11 @@ rfn_render_char(const ALLEGRO_FONT* f, ALLEGRO_COLOR color, int ch, float x, flo
 static int
 rfn_render(const ALLEGRO_FONT* f, ALLEGRO_COLOR color, const ALLEGRO_USTR* text, float x, float y)
 {
-	int ch, pos = 0;
-	int length = 0;
+	int32_t ch;
+	int pos = 0, length = 0;
 	bool was_draw_held = al_is_bitmap_drawing_held();
 	al_hold_bitmap_drawing(true);
-	while (ch = al_ustr_get_next(text, &pos) >= 0) {
+	while ((ch = al_ustr_get_next(text, &pos)) >= 0) {
 		length += rfn_render_char(f, color, ch, x + length, y);
 	}
 	al_hold_bitmap_drawing(was_draw_held);
diff --git a/minisphere/sphere_api.c b/minisphere/sphere_api.c
index b54f4266..0a49735b 100644
--- a/minisphere/sphere_api.c
+++ b/minisphere/sphere_api.c
@@ -1,7 +1,6 @@
 #include "minisphere.h"
+#include "sphere_api.h"
 
-static void push_image_obj(duk_context* ctx, ALLEGRO_BITMAP* bitmap);
-static void push_sound_obj(duk_context* ctx, ALLEGRO_AUDIO_STREAM* stream);
 static void reg_script_func(duk_context* ctx, const char* ctor_name, const char* name, duk_c_function fn);
 
 // Engine functions
@@ -23,6 +22,9 @@ static duk_ret_t duk_BlendColorsWeighted(duk_context* ctx);
 
 // Font functions
 static duk_ret_t duk_GetSystemFont(duk_context* ctx);
+static duk_ret_t duk_LoadFont(duk_context* ctx);
+static duk_ret_t duk_Font_finalize(duk_context* ctx);
+static duk_ret_t duk_Font_drawText(duk_context* ctx);
 
 // Image functions
 static duk_ret_t duk_LoadImage(duk_context* ctx);
@@ -80,6 +82,7 @@ init_sphere_api(duk_context* ctx)
 	reg_script_func(ctx, NULL, "BlendColors", &duk_BlendColors);
 	reg_script_func(ctx, NULL, "BlendColorsWeighted", &duk_BlendColorsWeighted);
 	reg_script_func(ctx, NULL, "GetSystemFont", &duk_GetSystemFont);
+	reg_script_func(ctx, NULL, "LoadFont", &duk_LoadFont);
 	reg_script_func(ctx, NULL, "LoadImage", &duk_LoadImage);
 	reg_script_func(ctx, NULL, "GrabImage", &duk_GrabImage);
 	reg_script_func(ctx, NULL, "GetClippingRectangle", &duk_GetClippingRectangle);
@@ -98,7 +101,16 @@ init_sphere_api(duk_context* ctx)
 }
 
 void
-push_image_obj(duk_context* ctx, ALLEGRO_BITMAP* bitmap)
+duk_push_sphere_Font(duk_context* ctx, ALLEGRO_FONT* font)
+{
+	duk_push_object(ctx);
+	duk_push_pointer(ctx, font); duk_put_prop_string(ctx, -2, "\xFF" "font_ptr");
+	duk_push_c_function(ctx, &duk_Font_finalize, DUK_VARARGS); duk_set_finalizer(ctx, -2);
+	duk_push_c_function(ctx, &duk_Font_drawText, DUK_VARARGS); duk_put_prop_string(ctx, -2, "drawText");
+}
+
+void
+duk_push_sphere_Image(duk_context* ctx, ALLEGRO_BITMAP* bitmap)
 {
 	duk_push_object(ctx);
 	duk_push_pointer(ctx, bitmap); duk_put_prop_string(ctx, -2, "\xFF" "bitmap_ptr");
@@ -117,7 +129,7 @@ push_image_obj(duk_context* ctx, ALLEGRO_BITMAP* bitmap)
 }
 
 void
-push_sound_obj(duk_context* ctx, ALLEGRO_AUDIO_STREAM* stream)
+duk_push_sphere_Sound(duk_context* ctx, ALLEGRO_AUDIO_STREAM* stream)
 {
 	duk_push_object(ctx);
 	duk_push_pointer(ctx, stream); duk_put_prop_string(ctx, -2, "\xFF" "stream_ptr");
@@ -134,7 +146,7 @@ push_sound_obj(duk_context* ctx, ALLEGRO_AUDIO_STREAM* stream)
 	duk_push_c_function(ctx, &duk_Sound_stop, DUK_VARARGS); duk_put_prop_string(ctx, -2, "stop");
 }
 
-void
+static void
 reg_script_func(duk_context* ctx, const char* ctor_name, const char* name, duk_c_function fn)
 {
 	duk_push_global_object(ctx);
@@ -150,21 +162,21 @@ reg_script_func(duk_context* ctx, const char* ctor_name, const char* name, duk_c
 	duk_pop(ctx);
 }
 
-duk_ret_t
+static duk_ret_t
 duk_GetVersion(duk_context* ctx)
 {
 	duk_push_number(ctx, 1.5);
 	return 1;
 }
 
-duk_ret_t
+static duk_ret_t
 duk_GetVersionString(duk_context* ctx)
 {
 	duk_push_sprintf(ctx, "minisphere %s (API: sphere-%s)", ENGINE_VER, SPHERE_API_VER);
 	return 1;
 }
 
-duk_ret_t
+static duk_ret_t
 duk_GarbageCollect(duk_context* ctx)
 {
 	duk_gc(ctx, 0x0);
@@ -172,7 +184,7 @@ duk_GarbageCollect(duk_context* ctx)
 	return 0;
 }
 
-duk_ret_t
+static duk_ret_t
 duk_Abort(duk_context* ctx)
 {
 	int n_args = duk_get_top(ctx);
@@ -322,11 +334,27 @@ duk_ret_t
 duk_GetSystemFont(duk_context* ctx)
 {
 	duk_push_global_stash(ctx);
-	duk_get_prop_string(ctx, -1, "\xFF" "system_font");
+	duk_get_prop_string(ctx, -1, "system_font");
 	duk_remove(ctx, -2);
 	return 1;
 }
 
+duk_ret_t
+duk_LoadFont(duk_context* ctx)
+{
+	const char* filename = duk_get_string(ctx, 0);
+	char* path = get_asset_path(filename, "fonts");
+	ALLEGRO_FONT* font = al_load_font(path, 0, 0x0);
+	free(path);
+	if (font != NULL) {
+		duk_push_sphere_Font(ctx, font);
+		return 1;
+	}
+	else {
+		duk_error(ctx, DUK_ERR_ERROR, "LoadFont(): Unable to load font file '%s'", filename);
+	}
+}
+
 duk_ret_t
 duk_LoadImage(duk_context* ctx)
 {
@@ -335,14 +363,37 @@ duk_LoadImage(duk_context* ctx)
 	ALLEGRO_BITMAP* bitmap = al_load_bitmap(path);
 	free(path);
 	if (bitmap != NULL) {
-		push_image_obj(ctx, bitmap);
+		duk_push_sphere_Image(ctx, bitmap);
 		return 1;
 	}
 	else {
-		duk_error(ctx, DUK_ERR_ERROR, "LoadImage(): Unable to load image '%s'", filename);
+		duk_error(ctx, DUK_ERR_ERROR, "LoadImage(): Unable to load image file '%s'", filename);
 	}
 }
 
+duk_ret_t
+duk_Font_finalize(duk_context* ctx)
+{
+	ALLEGRO_FONT* font;
+	duk_get_prop_string(ctx, 0, "\xFF" "font_ptr"); font = duk_get_pointer(ctx, -1); duk_pop(ctx);
+	al_destroy_font(font);
+	return 0;
+}
+
+duk_ret_t
+duk_Font_drawText(duk_context* ctx)
+{
+	ALLEGRO_FONT* font;
+	duk_push_this(ctx);
+	duk_get_prop_string(ctx, -1, "\xFF" "font_ptr"); font = duk_get_pointer(ctx, -1); duk_pop(ctx);
+	duk_pop(ctx);
+	float x = duk_get_number(ctx, 0);
+	float y = duk_get_number(ctx, 1);
+	const char* text = duk_get_string(ctx, 2);
+	al_draw_text(font, al_map_rgb(255, 255, 255), x, y, 0x0, text);
+	return 0;
+}
+
 duk_ret_t
 duk_GrabImage(duk_context* ctx)
 {
@@ -350,7 +401,7 @@ duk_GrabImage(duk_context* ctx)
 	int y_res = al_get_display_height(g_display);
 	ALLEGRO_BITMAP* bitmap = al_create_bitmap(x_res, y_res);
 	if (bitmap != NULL) {
-		push_image_obj(ctx, bitmap);
+		duk_push_sphere_Image(ctx, bitmap);
 		return 1;
 	}
 	else {
@@ -532,7 +583,7 @@ duk_LoadSound(duk_context* ctx)
 		al_set_audio_stream_playing(stream, false);
 		al_attach_audio_stream_to_mixer(stream, al_get_default_mixer());
 		al_set_audio_stream_gain(stream, 1.0);
-		push_sound_obj(ctx, stream);
+		duk_push_sphere_Sound(ctx, stream);
 		return 1;
 	}
 	else {
diff --git a/minisphere/sphere_api.h b/minisphere/sphere_api.h
index 177cc470..a1ed182c 100644
--- a/minisphere/sphere_api.h
+++ b/minisphere/sphere_api.h
@@ -1 +1,4 @@
-extern void init_sphere_api(duk_context* ctx);
+extern void init_sphere_api       (duk_context* ctx);
+extern void duk_push_sphere_Font  (duk_context* ctx, ALLEGRO_FONT* font);
+extern void duk_push_sphere_Image (duk_context* ctx, ALLEGRO_BITMAP* bitmap);
+extern void duk_push_sphere_Sound (duk_context* ctx, ALLEGRO_AUDIO_STREAM* stream);

