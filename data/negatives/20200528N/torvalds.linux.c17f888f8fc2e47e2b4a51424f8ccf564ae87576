commit c17f888f8fc2e47e2b4a51424f8ccf564ae87576
Author: Ingo Molnar <mingo@elte.hu>
Date:   Mon May 5 01:04:06 2008 -0700

    irda: fix !PNP support in drivers/net/irda/nsc-ircc.c
    
    x86.git testing found the following build failure in latest -git:
    
     drivers/built-in.o: In function `nsc_ircc_pnp_probe':
     nsc-ircc.c:(.text+0xdf1b6): undefined reference to `pnp_get_resource'
     nsc-ircc.c:(.text+0xdf1d4): undefined reference to `pnp_get_resource'
     nsc-ircc.c:(.text+0xdf1ee): undefined reference to `pnp_get_resource'
     nsc-ircc.c:(.text+0xdf237): undefined reference to `pnp_get_resource'
     nsc-ircc.c:(.text+0xdf24c): undefined reference to `pnp_get_resource'
     drivers/built-in.o:nsc-ircc.c:(.text+0xdf266): more undefined references to `pnp_get_resource' follow
     make: *** [.tmp_vmlinux1] Error 1
    
    triggered via this config:
    
      http://redhat.com/~mingo/misc/config-Sat_May__3_20_53_13_CEST_2008.bad
    
    while generally most users will have PNP enabled, drivers can support
    non-PNP build mode too - and most drivers implement it. That is typically
    done by providing a dummy pnp_driver structure that will not probe anything.
    
    The fallback routines in the driver will handle this dumber mode of
    operation too.
    
    This patch implements that. I have not tested whether this actually
    works on real hardware so take care. It does resolve the build bug.
    
    [ Another solution that is used by a few drivers is to exclude the driver
      in the Kconfig if PNP is disabled, via "depends on PNP", but this would
      limit the availability of the driver needlessly. ]
    
    Signed-off-by: Ingo Molnar <mingo@elte.hu>
    Signed-off-by: David S. Miller <davem@davemloft.net>

diff --git a/drivers/net/irda/nsc-ircc.c b/drivers/net/irda/nsc-ircc.c
index a873d2b315ca..a7714da7c283 100644
--- a/drivers/net/irda/nsc-ircc.c
+++ b/drivers/net/irda/nsc-ircc.c
@@ -100,7 +100,9 @@ static int nsc_ircc_probe_39x(nsc_chip_t *chip, chipio_t *info);
 static int nsc_ircc_init_108(nsc_chip_t *chip, chipio_t *info);
 static int nsc_ircc_init_338(nsc_chip_t *chip, chipio_t *info);
 static int nsc_ircc_init_39x(nsc_chip_t *chip, chipio_t *info);
+#ifdef CONFIG_PNP
 static int nsc_ircc_pnp_probe(struct pnp_dev *dev, const struct pnp_device_id *id);
+#endif
 
 /* These are the known NSC chips */
 static nsc_chip_t chips[] = {
@@ -156,9 +158,11 @@ static const struct pnp_device_id nsc_ircc_pnp_table[] = {
 MODULE_DEVICE_TABLE(pnp, nsc_ircc_pnp_table);
 
 static struct pnp_driver nsc_ircc_pnp_driver = {
+#ifdef CONFIG_PNP
 	.name = "nsc-ircc",
 	.id_table = nsc_ircc_pnp_table,
 	.probe = nsc_ircc_pnp_probe,
+#endif
 };
 
 /* Some prototypes */
@@ -916,6 +920,7 @@ static int nsc_ircc_probe_39x(nsc_chip_t *chip, chipio_t *info)
 	return 0;
 }
 
+#ifdef CONFIG_PNP
 /* PNP probing */
 static int nsc_ircc_pnp_probe(struct pnp_dev *dev, const struct pnp_device_id *id)
 {
@@ -952,6 +957,7 @@ static int nsc_ircc_pnp_probe(struct pnp_dev *dev, const struct pnp_device_id *i
 
 	return 0;
 }
+#endif
 
 /*
  * Function nsc_ircc_setup (info)

