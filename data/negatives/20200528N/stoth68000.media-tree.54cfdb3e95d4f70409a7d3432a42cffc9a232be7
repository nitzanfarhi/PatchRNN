commit 54cfdb3e95d4f70409a7d3432a42cffc9a232be7
Author: Paolo Bonzini <pbonzini@redhat.com>
Date:   Thu Mar 27 11:36:25 2014 +0100

    KVM: emulate: speed up emulated moves
    
    We can just blindly move all 16 bytes of ctxt->src's value to ctxt->dst.
    write_register_operand will take care of writing only the lower bytes.
    
    Avoiding a call to memcpy (the compiler optimizes it out) gains about
    200 cycles on kvm-unit-tests for register-to-register moves, and makes
    them about as fast as arithmetic instructions.
    
    We could perhaps get a larger speedup by moving all instructions _except_
    moves out of x86_emulate_insn, removing opcode_len, and replacing the
    switch statement with an inlined em_mov.
    
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>

diff --git a/arch/x86/include/asm/kvm_emulate.h b/arch/x86/include/asm/kvm_emulate.h
index 0e0151c13b2c..432447370044 100644
--- a/arch/x86/include/asm/kvm_emulate.h
+++ b/arch/x86/include/asm/kvm_emulate.h
@@ -233,7 +233,7 @@ struct operand {
 	union {
 		unsigned long val;
 		u64 val64;
-		char valptr[sizeof(unsigned long) + 2];
+		char valptr[sizeof(sse128_t)];
 		sse128_t vec_val;
 		u64 mm_val;
 		void *data;
diff --git a/arch/x86/kvm/emulate.c b/arch/x86/kvm/emulate.c
index ea56dae3e67c..27f677ef703e 100644
--- a/arch/x86/kvm/emulate.c
+++ b/arch/x86/kvm/emulate.c
@@ -2990,7 +2990,7 @@ static int em_rdpmc(struct x86_emulate_ctxt *ctxt)
 
 static int em_mov(struct x86_emulate_ctxt *ctxt)
 {
-	memcpy(ctxt->dst.valptr, ctxt->src.valptr, ctxt->op_bytes);
+	memcpy(ctxt->dst.valptr, ctxt->src.valptr, sizeof(ctxt->src.valptr));
 	return X86EMUL_CONTINUE;
 }
 

