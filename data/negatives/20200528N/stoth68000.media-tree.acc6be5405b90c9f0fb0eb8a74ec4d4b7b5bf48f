commit acc6be5405b90c9f0fb0eb8a74ec4d4b7b5bf48f
Author: Vegard Nossum <vegard.nossum@gmail.com>
Date:   Tue May 20 11:15:43 2008 +0200

    x86: add save_stack_trace_bp() for tracing from a specific stack frame
    
    This will help kmemcheck (and possibly other debugging tools) since we
    can now simply pass regs->bp to the stack tracer instead of specifying
    the number of stack frames to skip, which is unreliable if gcc decides
    to inline functions, etc.
    
    Note that this makes the API incomplete for other architectures, but I
    expect that those can be updated lazily, e.g. when they need it.
    
    Cc: Arjan van de Ven <arjan@linux.intel.com>
    Signed-off-by: Vegard Nossum <vegard.nossum@gmail.com>

diff --git a/arch/x86/kernel/stacktrace.c b/arch/x86/kernel/stacktrace.c
index 4aaf7e48394f..c3eb207181fe 100644
--- a/arch/x86/kernel/stacktrace.c
+++ b/arch/x86/kernel/stacktrace.c
@@ -77,6 +77,13 @@ void save_stack_trace(struct stack_trace *trace)
 }
 EXPORT_SYMBOL_GPL(save_stack_trace);
 
+void save_stack_trace_bp(struct stack_trace *trace, unsigned long bp)
+{
+	dump_trace(current, NULL, NULL, bp, &save_stack_ops, trace);
+	if (trace->nr_entries < trace->max_entries)
+		trace->entries[trace->nr_entries++] = ULONG_MAX;
+}
+
 void save_stack_trace_tsk(struct task_struct *tsk, struct stack_trace *trace)
 {
 	dump_trace(tsk, NULL, NULL, 0, &save_stack_ops_nosched, trace);
diff --git a/include/linux/stacktrace.h b/include/linux/stacktrace.h
index 1a8cecc4f38c..551f6c7d5044 100644
--- a/include/linux/stacktrace.h
+++ b/include/linux/stacktrace.h
@@ -11,6 +11,7 @@ struct stack_trace {
 };
 
 extern void save_stack_trace(struct stack_trace *trace);
+extern void save_stack_trace_bp(struct stack_trace *trace, unsigned long bp);
 extern void save_stack_trace_tsk(struct task_struct *tsk,
 				struct stack_trace *trace);
 

