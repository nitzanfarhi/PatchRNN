commit ffbfb5e316f0db486798ccf1db36a577ffe79637
Author: Stephen Boyd <sboyd@codeaurora.org>
Date:   Sat Jun 1 23:39:39 2013 -0700

    ARM: sched_clock: Return suspended count earlier
    
    If we're suspended and sched_clock() is called we're going to
    read the hardware one more time and throw away that value and
    return back the cached value we saved during the suspend
    callback. This is wasteful. Let's short circuit all that and
    return the cached value as early as possible if we're suspended.
    
    Acked-by: Will Deacon <will.deacon@arm.com>
    Signed-off-by: Stephen Boyd <sboyd@codeaurora.org>
    Signed-off-by: John Stultz <john.stultz@linaro.org>

diff --git a/arch/arm/kernel/sched_clock.c b/arch/arm/kernel/sched_clock.c
index 45efe86e8b08..a781c59b93c0 100644
--- a/arch/arm/kernel/sched_clock.c
+++ b/arch/arm/kernel/sched_clock.c
@@ -55,9 +55,6 @@ static unsigned long long notrace cyc_to_sched_clock(u32 cyc, u32 mask)
 	u64 epoch_ns;
 	u32 epoch_cyc;
 
-	if (cd.suspended)
-		return cd.epoch_ns;
-
 	/*
 	 * Load the epoch_cyc and epoch_ns atomically.  We do this by
 	 * ensuring that we always write epoch_cyc, epoch_ns and
@@ -174,6 +171,9 @@ unsigned long long __read_mostly (*sched_clock_func)(void) = sched_clock_32;
 
 unsigned long long notrace sched_clock(void)
 {
+	if (cd.suspended)
+		return cd.epoch_ns;
+
 	return sched_clock_func();
 }
 

