commit 4be360e1d25b7c15e88a19b410493f7df68f3cbc
Author: Kaloian Manassiev <kaloian.manassiev@mongodb.com>
Date:   Wed May 13 10:20:21 2015 -0400

    SERVER-18049 Put ShardRegistry on Grid
    
    Gets rid of the static shard registry instance and instead places it on
    the instance-wide Grid object.

diff --git a/src/mongo/s/client/shard.cpp b/src/mongo/s/client/shard.cpp
index a08a1012da..0a5be63b85 100644
--- a/src/mongo/s/client/shard.cpp
+++ b/src/mongo/s/client/shard.cpp
@@ -46,6 +46,7 @@
 #include "mongo/db/commands.h"
 #include "mongo/db/jsobj.h"
 #include "mongo/s/client/shard_registry.h"
+#include "mongo/s/grid.h"
 #include "mongo/util/log.h"
 
 namespace mongo {
@@ -58,9 +59,6 @@ namespace mongo {
 
 namespace {
 
-    ShardRegistry staticShardInfo;
-
-
     class CmdGetShardMap : public Command {
     public:
         CmdGetShardMap() : Command( "getShardMap" ){}
@@ -83,8 +81,7 @@ namespace {
                          std::string& errmsg ,
                          mongo::BSONObjBuilder& result) {
 
-            staticShardInfo.toBSON(&result);
-
+            grid.shardRegistry()->toBSON(&result);
             return true;
         }
 
@@ -126,7 +123,7 @@ namespace {
     }
 
     Shard Shard::findIfExists( const string& shardName ) {
-        ShardPtr shard = staticShardInfo.findIfExists( shardName );
+        ShardPtr shard = grid.shardRegistry()->findIfExists( shardName );
         return shard ? *shard : Shard::EMPTY;
     }
 
@@ -138,7 +135,7 @@ namespace {
     }
 
     void Shard::reset( const string& ident ) {
-        *this = staticShardInfo.findCopy( ident );
+        *this = grid.shardRegistry()->findCopy( ident );
     }
 
     bool Shard::containsNode( const string& node ) const {
@@ -161,15 +158,15 @@ namespace {
     }
 
     void Shard::getAllShards( vector<Shard>& all ) {
-        staticShardInfo.getAllShards( all );
+        grid.shardRegistry()->getAllShards( all );
     }
 
     bool Shard::isAShardNode( const string& ident ) {
-        return staticShardInfo.isAShardNode( ident );
+        return grid.shardRegistry()->isAShardNode( ident );
     }
 
     Shard Shard::lookupRSName( const string& name) {
-        return staticShardInfo.lookupRSName(name);
+        return grid.shardRegistry()->lookupRSName(name);
     }
 
     BSONObj Shard::runCommand(const std::string& db, const std::string& simple) const {
@@ -242,20 +239,20 @@ namespace {
     }
 
     void Shard::reloadShardInfo() {
-        staticShardInfo.reload();
+        grid.shardRegistry()->reload();
     }
 
 
     void Shard::removeShard( const string& name ) {
-        staticShardInfo.remove( name );
+        grid.shardRegistry()->remove( name );
     }
 
     Shard Shard::pick( const Shard& current ) {
         vector<Shard> all;
-        staticShardInfo.getAllShards( all );
+        grid.shardRegistry()->getAllShards( all );
         if ( all.size() == 0 ) {
-            staticShardInfo.reload();
-            staticShardInfo.getAllShards( all );
+            grid.shardRegistry()->reload();
+            grid.shardRegistry()->getAllShards( all );
             if ( all.size() == 0 )
                 return EMPTY;
         }
@@ -277,7 +274,7 @@ namespace {
     }
 
     void Shard::installShard(const std::string& name, const Shard& shard) {
-        staticShardInfo.set(name, shard);
+        grid.shardRegistry()->set(name, shard);
     }
 
     ShardStatus::ShardStatus(const Shard& shard, long long dataSizeBytes, const string& version):
diff --git a/src/mongo/s/client/shard_registry.cpp b/src/mongo/s/client/shard_registry.cpp
index 31a3403934..9f9b663cb4 100644
--- a/src/mongo/s/client/shard_registry.cpp
+++ b/src/mongo/s/client/shard_registry.cpp
@@ -39,7 +39,6 @@
 #include "mongo/s/catalog/catalog_manager.h"
 #include "mongo/s/catalog/type_shard.h"
 #include "mongo/s/client/shard.h"
-#include "mongo/s/grid.h"
 #include "mongo/util/log.h"
 #include "mongo/util/mongoutils/str.h"
 
@@ -50,13 +49,16 @@ namespace mongo {
     using std::vector;
 
 
-    ShardRegistry::ShardRegistry() = default;
+    ShardRegistry::ShardRegistry(CatalogManager* catalogManager)
+        : _catalogManager(catalogManager) {
+
+    }
 
     ShardRegistry::~ShardRegistry() = default;
 
     void ShardRegistry::reload() {
         vector<ShardType> shards;
-        Status status = grid.catalogManager()->getAllShards(&shards);
+        Status status = _catalogManager->getAllShards(&shards);
         massert(13632, "couldn't get updated shard list from config server", status.isOK());
 
         int numShards = shards.size();
diff --git a/src/mongo/s/client/shard_registry.h b/src/mongo/s/client/shard_registry.h
index b888d55e72..08255e61a8 100644
--- a/src/mongo/s/client/shard_registry.h
+++ b/src/mongo/s/client/shard_registry.h
@@ -36,6 +36,7 @@
 namespace mongo {
 
     class BSONObjBuilder;
+    class CatalogManager;
     class Shard;
 
 
@@ -44,7 +45,7 @@ namespace mongo {
      */
     class ShardRegistry {
     public:
-        ShardRegistry();
+        ShardRegistry(CatalogManager* catalogManager);
         ~ShardRegistry();
 
         void reload();
@@ -86,6 +87,10 @@ namespace mongo {
         void _installHost(const std::string& host, const boost::shared_ptr<Shard>& s);
 
 
+        // Catalog manager from which to load the shard information. Not owned and must outlive
+        // the shard registry object.
+        CatalogManager* const _catalogManager;
+
         // Map of both shardName -> Shard and hostName -> Shard
         mutable boost::mutex _mutex;
         ShardMap _lookup;
diff --git a/src/mongo/s/d_state.cpp b/src/mongo/s/d_state.cpp
index 1a1da74a64..58f17718f8 100644
--- a/src/mongo/s/d_state.cpp
+++ b/src/mongo/s/d_state.cpp
@@ -485,12 +485,12 @@ namespace mongo {
                 str::stream() << "Invalid config server connection string: " << errmsg,
                 configServerCS.isValid());
 
-        configServer.init(configServerCS);
-
         auto catalogManager = stdx::make_unique<CatalogManagerLegacy>();
         uassertStatusOK(catalogManager->init(configServerCS));
         grid.setCatalogManager(std::move(catalogManager));
 
+        configServer.init(configServerCS);
+
         _enabled = true;
     }
 
diff --git a/src/mongo/s/grid.cpp b/src/mongo/s/grid.cpp
index b4ce68962e..c325e8dd59 100644
--- a/src/mongo/s/grid.cpp
+++ b/src/mongo/s/grid.cpp
@@ -38,6 +38,7 @@
 #include "mongo/s/catalog/catalog_manager.h"
 #include "mongo/s/catalog/type_settings.h"
 #include "mongo/s/catalog/type_shard.h"
+#include "mongo/s/client/shard_registry.h"
 #include "mongo/s/config.h"
 #include "mongo/util/fail_point_service.h"
 #include "mongo/util/log.h"
@@ -58,9 +59,11 @@ namespace mongo {
     void Grid::setCatalogManager(std::unique_ptr<CatalogManager> catalogManager) {
         invariant(!_catalogManager);
         invariant(!_catalogCache);
+        invariant(!_shardRegistry);
 
         _catalogManager = std::move(catalogManager);
         _catalogCache = stdx::make_unique<CatalogCache>(_catalogManager.get());
+        _shardRegistry = stdx::make_unique<ShardRegistry>(_catalogManager.get());
     }
 
     StatusWith<shared_ptr<DBConfig>> Grid::implicitCreateDb(const std::string& dbName) {
diff --git a/src/mongo/s/grid.h b/src/mongo/s/grid.h
index eb344a3439..cbaf37a783 100644
--- a/src/mongo/s/grid.h
+++ b/src/mongo/s/grid.h
@@ -41,6 +41,7 @@ namespace mongo {
     class CatalogManager;
     class DBConfig;
     class SettingsType;
+    class ShardRegistry;
     template<typename T> class StatusWith;
 
 
@@ -86,10 +87,12 @@ namespace mongo {
 
         CatalogManager* catalogManager() const { return _catalogManager.get(); }
         CatalogCache* catalogCache() const { return _catalogCache.get(); }
+        ShardRegistry* shardRegistry() const { return _shardRegistry.get(); }
 
     private:
         std::unique_ptr<CatalogManager> _catalogManager;
         std::unique_ptr<CatalogCache> _catalogCache;
+        std::unique_ptr<ShardRegistry> _shardRegistry;
 
         // can 'localhost' be used in shard addresses?
         bool _allowLocalShard;

