commit b15bac38ae1173a01b8010a6955a920cebfacfd7
Author: Neha Kumari <neha.n.kumari@oracle.com>
Date:   Mon Jan 20 15:38:43 2014 +0530

    Addressing review comments.

diff --git a/libbinlogapi/include/binlog_event.h b/libbinlogapi/include/binlog_event.h
index a8615b3b63f..98871a70a90 100644
--- a/libbinlogapi/include/binlog_event.h
+++ b/libbinlogapi/include/binlog_event.h
@@ -65,20 +65,6 @@ Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 #define NAME_LEN (NAME_CHAR_LEN*SYSTEM_CHARSET_MBMAXLEN)
 #endif
 
-/**
-   Enumeration of the incidents that can occur for the server.
- */
-enum Incident {
-  /** No incident */
-  INCIDENT_NONE = 0,
-
-  /** There are possibly lost events in the replication stream */
-  INCIDENT_LOST_EVENTS = 1,
-
-  /** Shall be last event of the enumeration */
-  INCIDENT_COUNT
-};
-
 /*
    binlog_version 3 is MySQL 4.x; 4 is MySQL 5.0.0.
    Compared to version 3, version 4 has:
@@ -2632,9 +2618,22 @@ public:
 class Incident_event: public Binary_log_event
 {
 public:
-  Incident_event(Incident incident)
-  : Binary_log_event(), m_incident(incident), m_message(NULL),
-    m_message_length(0)
+  /**
+    Enumeration of the incidents that can occur for the server.
+  */
+  enum Incident {
+  /** No incident */
+  INCIDENT_NONE = 0,
+
+  /** There are possibly lost events in the replication stream */
+  INCIDENT_LOST_EVENTS = 1,
+
+  /** Shall be last event of the enumeration */
+  INCIDENT_COUNT
+  };
+  Incident_event(Incident incident_arg)
+  : Binary_log_event(), incident(incident_arg), message(NULL),
+    message_length(0)
   {
   }
   Incident_event(const char *buf, unsigned int event_len,
@@ -2644,9 +2643,9 @@ public:
   void print_event_info(std::ostream& info);
   void print_long_info(std::ostream& info);
 protected:
-  Incident m_incident;
-  char *m_message;
-  size_t m_message_length;
+  Incident incident;
+  char *message;
+  size_t message_length;
 };
 
 /**
diff --git a/libbinlogapi/src/binlog_event.cpp b/libbinlogapi/src/binlog_event.cpp
index 2fa8cc6f16a..83ae789ed53 100644
--- a/libbinlogapi/src/binlog_event.cpp
+++ b/libbinlogapi/src/binlog_event.cpp
@@ -1485,41 +1485,41 @@ Incident_event::Incident_event(const char *buf, unsigned int event_len,
   uint8_t const common_header_len= descr_event->common_header_len;
   uint8_t const post_header_len= descr_event->post_header_len[INCIDENT_EVENT-1];
 
-  m_message= NULL;
-  m_message_length= 0;
+  message= NULL;
+  message_length= 0;
   uint16_t incident_number;
   memcpy(&incident_number, buf + common_header_len, sizeof(incident_number));
   incident_number= le16toh(incident_number);
   if (incident_number >= INCIDENT_COUNT ||
       incident_number <= INCIDENT_NONE)
   {
-    // If the incident is not recognized, this binlog event is
-    // invalid.  If we set incident_number to INCIDENT_NONE, the
-    // invalidity will be detected by is_valid().
-    m_incident= INCIDENT_NONE;
+    /*
+      If the incident is not recognized, this binlog event is
+      invalid.
+    */
+    incident= INCIDENT_NONE;
 
   }
-  m_incident= static_cast<Incident>(incident_number);
+  incident= static_cast<Incident>(incident_number);
   char const *ptr= buf + common_header_len + post_header_len;
   char const *const str_end= buf + event_len;
   uint8_t len= 0;                   // Assignment to keep compiler happy
   const char *str= NULL;          // Assignment to keep compiler happy
   read_str_at_most_255_bytes(&ptr, str_end, &str, &len);
-  //MY_WME= 16, MEMORY_LOG_EVENT = 0
-  if (!(m_message= (char*) bapi_malloc(len + 1, MEMORY_LOG_EVENT, 16)))
+  if (!(message= (char*) bapi_malloc(len + 1, MEMORY_LOG_EVENT, 16)))
   {
     /* Mark this event invalid */
-    m_incident= INCIDENT_NONE;
+    incident= INCIDENT_NONE;
     return;
   }
 
-  bapi_strmake(m_message, str, len);
-  m_message_length= len;
+  bapi_strmake(message, str, len);
+  message_length= len;
   return;
 }
 
 /**
-  ctor of Previous_gtid_event
+  Constructor of Previous_gtid_event
   Decodes the Gtids executed in the last binlog file
 */
 
diff --git a/sql/binlog.cc b/sql/binlog.cc
index 6f5f8ed2287..50d46629463 100644
--- a/sql/binlog.cc
+++ b/sql/binlog.cc
@@ -6145,7 +6145,8 @@ bool MYSQL_BIN_LOG::write_incident(THD *thd, bool need_lock_log,
     DBUG_RETURN(0);
 
   LEX_STRING write_error_msg= {(char*) err_msg, strlen(err_msg)};
-  Incident incident= INCIDENT_LOST_EVENTS;
+  binary_log::Incident_event::Incident incident=
+                              binary_log::Incident_event::INCIDENT_LOST_EVENTS;
   Incident_log_event ev(thd, incident, write_error_msg);
 
   DBUG_RETURN(write_incident(&ev, need_lock_log, err_msg, do_flush_and_sync));
diff --git a/sql/log_event.cc b/sql/log_event.cc
index 8f5d2263f42..c835cdba9e5 100644
--- a/sql/log_event.cc
+++ b/sql/log_event.cc
@@ -12116,8 +12116,8 @@ Incident_log_event(const char *buf, uint event_len,
 
 Incident_log_event::~Incident_log_event()
 {
-  if (m_message)
-    bapi_free(m_message);
+  if (message)
+    bapi_free(message);
 }
 
 
@@ -12129,9 +12129,9 @@ Incident_log_event::description() const
     "LOST_EVENTS"
   };
 
-  DBUG_PRINT("info", ("m_incident: %d", m_incident));
+  DBUG_PRINT("info", ("incident: %d", incident));
 
-  return description[m_incident];
+  return description[incident];
 }
 
 
@@ -12140,12 +12140,12 @@ int Incident_log_event::pack_info(Protocol *protocol)
 {
   char buf[256];
   size_t bytes;
-  if (m_message_length > 0)
+  if (message_length > 0)
     bytes= my_snprintf(buf, sizeof(buf), "#%d (%s)",
-                       m_incident, description());
+                       incident, description());
   else
     bytes= my_snprintf(buf, sizeof(buf), "#%d (%s): %s",
-                       m_incident, description(), m_message);
+                       incident, description(), message);
   protocol->store(buf, bytes, &my_charset_bin);
   return 0;
 }
@@ -12182,7 +12182,7 @@ Incident_log_event::do_apply_event(Relay_log_info const *rli)
   rli->report(ERROR_LEVEL, ER_SLAVE_INCIDENT,
               ER(ER_SLAVE_INCIDENT),
               description(),
-              m_message_length > 0 ? m_message : "<none>");
+              message_length > 0 ? message : "<none>");
   DBUG_RETURN(1);
 }
 #endif
@@ -12191,9 +12191,9 @@ bool
 Incident_log_event::write_data_header(IO_CACHE *file)
 {
   DBUG_ENTER("Incident_log_event::write_data_header");
-  DBUG_PRINT("enter", ("m_incident: %d", m_incident));
+  DBUG_PRINT("enter", ("incident: %d", incident));
   uchar buf[sizeof(int16)];
-  int2store(buf, (int16) m_incident);
+  int2store(buf, (int16) incident);
 #ifndef MYSQL_CLIENT
   DBUG_RETURN(wrapper_my_b_safe_write(file, buf, sizeof(buf)));
 #else
@@ -12206,14 +12206,14 @@ Incident_log_event::write_data_body(IO_CACHE *file)
 {
   uchar tmp[1];
   DBUG_ENTER("Incident_log_event::write_data_body");
-  tmp[0]= (uchar) m_message_length;
+  tmp[0]= (uchar) message_length;
   crc= checksum_crc32(crc, (uchar*) tmp, 1);
-  if (m_message_length > 0)
+  if (message_length > 0)
   {
-    crc= checksum_crc32(crc, (uchar*) m_message, m_message_length);
+    crc= checksum_crc32(crc, (uchar*) message, message_length);
     // todo: report a bug on write_str accepts uint but treats it as uchar
   }
-  DBUG_RETURN(write_str_at_most_255_bytes(file, m_message, (uint) m_message_length));
+  DBUG_RETURN(write_str_at_most_255_bytes(file, message, (uint) message_length));
 }
 
 
diff --git a/sql/log_event.h b/sql/log_event.h
index 44417c25620..b3dd80428c4 100644
--- a/sql/log_event.h
+++ b/sql/log_event.h
@@ -3684,38 +3684,42 @@ protected:
 class Incident_log_event : public Incident_event , public Log_event{
 public:
 #ifdef MYSQL_SERVER
-  Incident_log_event(THD *thd_arg, Incident incident)
-    : Incident_event(incident),
-      Log_event(thd_arg, LOG_EVENT_NO_FILTER_F,
-                Log_event::EVENT_NO_CACHE,
-                Log_event::EVENT_IMMEDIATE_LOGGING,
-                this->header(), this->footer())
+  Incident_log_event(THD *thd_arg, Incident incident_arg)
+  : Incident_event(incident),
+    Log_event(thd_arg, LOG_EVENT_NO_FILTER_F,
+              Log_event::EVENT_NO_CACHE,
+              Log_event::EVENT_IMMEDIATE_LOGGING,
+              this->header(), this->footer())
   {
     DBUG_ENTER("Incident_log_event::Incident_log_event");
-    DBUG_PRINT("enter", ("m_incident: %d", m_incident));
-    DBUG_ASSERT(m_message == NULL && m_message_length == 0);
+    DBUG_PRINT("enter", ("incident: %d", incident));
+    DBUG_ASSERT(message == NULL && message_length == 0);
     DBUG_VOID_RETURN;
   }
 
-  Incident_log_event(THD *thd_arg, Incident incident, LEX_STRING const msg)
-    : Incident_event(incident),
-      Log_event(thd_arg, LOG_EVENT_NO_FILTER_F,
-                Log_event::EVENT_NO_CACHE,
-                Log_event::EVENT_IMMEDIATE_LOGGING,
-                this->header(), this->footer())
+  Incident_log_event(THD *thd_arg, Incident incident_arg, LEX_STRING const msg)
+  : Incident_event(incident_arg),
+    Log_event(thd_arg, LOG_EVENT_NO_FILTER_F,
+              Log_event::EVENT_NO_CACHE,
+              Log_event::EVENT_IMMEDIATE_LOGGING,
+              this->header(), this->footer())
   {
     DBUG_ENTER("Incident_log_event::Incident_log_event");
-    DBUG_PRINT("enter", ("m_incident: %d", m_incident));
-    DBUG_ASSERT(m_message == NULL && m_message_length == 0);
-    if (!(m_message= (char*) my_malloc(key_memory_Incident_log_event_message,
+    DBUG_PRINT("enter", ("incident: %d", incident));
+    DBUG_ASSERT(message == NULL && message_length == 0);
+    if (!(message= (char*) my_malloc(key_memory_Incident_log_event_message,
                                            msg.length+1, MYF(MY_WME))))
     {
-      /* Mark this event invalid */
-      m_incident= INCIDENT_NONE;
+      /*
+        If the incident is not recognized, this binlog event is
+        invalid.  If we set incident_number to INCIDENT_NONE, the
+        invalidity will be detected by is_valid in both the ctors.
+      */
+      incident= INCIDENT_NONE;
       DBUG_VOID_RETURN;
     }
-    strmake(m_message, msg.str, msg.length);
-    m_message_length= msg.length;
+    strmake(message, msg.str, msg.length);
+    message_length= msg.length;
     DBUG_VOID_RETURN;
   }
 #endif
@@ -3744,10 +3748,10 @@ public:
 
   virtual bool is_valid() const
   {
-    return m_incident > INCIDENT_NONE && m_incident < INCIDENT_COUNT;
+    return incident > INCIDENT_NONE && incident < INCIDENT_COUNT;
   }
   virtual int get_data_size() {
-    return Binary_log_event::INCIDENT_HEADER_LEN + 1 + (uint) m_message_length;
+    return Binary_log_event::INCIDENT_HEADER_LEN + 1 + (uint) message_length;
   }
 
 private:
diff --git a/sql/rpl_injector.cc b/sql/rpl_injector.cc
index 7e32487a11f..5a62a2456e3 100644
--- a/sql/rpl_injector.cc
+++ b/sql/rpl_injector.cc
@@ -311,7 +311,9 @@ void injector::new_trans(THD *thd, injector::transaction *ptr)
    DBUG_VOID_RETURN;
 }
 
-int injector::record_incident(THD *thd, Incident incident, LEX_STRING const message)
+int injector::record_incident(THD *thd,
+                              binary_log::Incident_event::Incident incident,
+                              LEX_STRING const message)
 {
   Incident_log_event ev(thd, incident, message);
   return mysql_bin_log.write_incident(&ev, true/*need_lock_log=true*/,
diff --git a/sql/rpl_injector.h b/sql/rpl_injector.h
index 38eacf7bb16..9d3e367f0e6 100644
--- a/sql/rpl_injector.h
+++ b/sql/rpl_injector.h
@@ -29,7 +29,6 @@ class handler;
 class MYSQL_BIN_LOG;
 struct TABLE;
 
-
 /*
   Injector to inject rows into the MySQL server.
   
@@ -383,7 +382,8 @@ public:
      */
     void new_trans(THD *, transaction *);
 
-    int record_incident(THD*, Incident incident, LEX_STRING const message);
+    int record_incident(THD*, binary_log::Incident_event::Incident incident,
+                        LEX_STRING const message);
 
 private:
     explicit injector();
diff --git a/sql/sql_parse.cc b/sql/sql_parse.cc
index e6dc8f83108..0ee70367bad 100644
--- a/sql/sql_parse.cc
+++ b/sql/sql_parse.cc
@@ -3082,10 +3082,11 @@ end_with_restore_list:
         release build.
       */
 
-      Incident incident= INCIDENT_NONE;
+      binary_log::Incident_event::Incident incident=
+                                     binary_log::Incident_event::INCIDENT_NONE;
       DBUG_PRINT("debug", ("Just before generate_incident()"));
       DBUG_EXECUTE_IF("incident_database_resync_on_replace",
-                      incident= INCIDENT_LOST_EVENTS;);
+                      incident= binary_log::Incident_event::INCIDENT_LOST_EVENTS;);
       if (incident)
       {
         Incident_log_event ev(thd, incident);

