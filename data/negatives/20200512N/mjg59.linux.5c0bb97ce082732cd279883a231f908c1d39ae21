commit 5c0bb97ce082732cd279883a231f908c1d39ae21
Author: Lukas Czerner <lczerner@redhat.com>
Date:   Tue May 21 23:58:49 2013 -0400

    gfs2: use ->invalidatepage() length argument
    
    ->invalidatepage() aop now accepts range to invalidate so we can make
    use of it in gfs2_invalidatepage().
    
    Signed-off-by: Lukas Czerner <lczerner@redhat.com>
    Acked-by: Steven Whitehouse <swhiteho@redhat.com>
    Cc: cluster-devel@redhat.com

diff --git a/fs/gfs2/aops.c b/fs/gfs2/aops.c
index db0d39f9fba4..ee48ad37d9c0 100644
--- a/fs/gfs2/aops.c
+++ b/fs/gfs2/aops.c
@@ -948,24 +948,29 @@ static void gfs2_invalidatepage(struct page *page, unsigned int offset,
 				unsigned int length)
 {
 	struct gfs2_sbd *sdp = GFS2_SB(page->mapping->host);
+	unsigned int stop = offset + length;
+	int partial_page = (offset || length < PAGE_CACHE_SIZE);
 	struct buffer_head *bh, *head;
 	unsigned long pos = 0;
 
 	BUG_ON(!PageLocked(page));
-	if (offset == 0)
+	if (!partial_page)
 		ClearPageChecked(page);
 	if (!page_has_buffers(page))
 		goto out;
 
 	bh = head = page_buffers(page);
 	do {
+		if (pos + bh->b_size > stop)
+			return;
+
 		if (offset <= pos)
 			gfs2_discard(sdp, bh);
 		pos += bh->b_size;
 		bh = bh->b_this_page;
 	} while (bh != head);
 out:
-	if (offset == 0)
+	if (!partial_page)
 		try_to_release_page(page, 0);
 }
 

