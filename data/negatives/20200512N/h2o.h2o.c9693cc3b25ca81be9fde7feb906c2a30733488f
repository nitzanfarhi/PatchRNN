commit c9693cc3b25ca81be9fde7feb906c2a30733488f
Author: Ichito Nagata <i.nagata110@gmail.com>
Date:   Fri Oct 7 15:17:47 2016 +0900

    tweak

diff --git a/include/h2o/redis.h b/include/h2o/redis.h
index d1e50542..2043af2f 100644
--- a/include/h2o/redis.h
+++ b/include/h2o/redis.h
@@ -23,7 +23,7 @@
 #define h2o__redis_h
 
 #include "hiredis.h"
-#include "socket.h"
+#include "h2o/socket.h"
 
 typedef struct st_h2o_redis_conn_t h2o_redis_conn_t;
 typedef void (*h2o_redis_command_cb)(redisReply *reply, void *cb_data);
diff --git a/include/h2o/socket/uv-binding.h b/include/h2o/socket/uv-binding.h
index 1b253009..9b71f67f 100644
--- a/include/h2o/socket/uv-binding.h
+++ b/include/h2o/socket/uv-binding.h
@@ -35,7 +35,7 @@ struct st_h2o_timeout_backend_properties_t {
 };
 
 h2o_socket_t *h2o_uv_socket_create(uv_stream_t *stream, uv_close_cb close_cb);
-h2o_socket_t *h2o_uv_poll_create(h2o_loop_t *loop, int fd, uv_close_cb close_cb);
+h2o_socket_t *h2o_uv__poll_create(h2o_loop_t *loop, int fd, uv_close_cb close_cb);
 
 static inline uint64_t h2o_now(uv_loop_t *loop)
 {
diff --git a/lib/common/redis.c b/lib/common/redis.c
index 930bd220..12742dbd 100644
--- a/lib/common/redis.c
+++ b/lib/common/redis.c
@@ -86,7 +86,7 @@ static void on_redis_connect(const redisAsyncContext *redis, int status)
 static void on_redis_disconnect(const redisAsyncContext *redis, int status)
 {
     h2o_redis_conn_t *conn = (h2o_redis_conn_t *)redis->data;
-    if (conn->cb.on_disconnect) {
+    if (conn->cb.on_disconnect != NULL) {
         conn->cb.on_disconnect(status == REDIS_OK ? NULL : redis->errstr);
     }
     free(conn);
diff --git a/lib/common/redis/socket.c.h b/lib/common/redis/socket.c.h
index c9d556a9..b2f61b8b 100644
--- a/lib/common/redis/socket.c.h
+++ b/lib/common/redis/socket.c.h
@@ -88,7 +88,7 @@ static int redisSocketAttach(redisAsyncContext* ac, h2o_loop_t* loop) {
 
     ac->ev.data = p;
 #if H2O_USE_LIBUV
-    p->socket = h2o_uv_poll_create(loop, c->fd, (uv_close_cb)free);
+    p->socket = h2o_uv__poll_create(loop, c->fd, (uv_close_cb)free);
 #else
     p->socket = h2o_evloop_socket_create(loop, c->fd, H2O_SOCKET_FLAG_DONT_READ);
 #endif
diff --git a/lib/common/socket/uv-binding.c.h b/lib/common/socket/uv-binding.c.h
index 8a3b89ac..b051f076 100644
--- a/lib/common/socket/uv-binding.c.h
+++ b/lib/common/socket/uv-binding.c.h
@@ -163,7 +163,7 @@ void do_read_start(h2o_socket_t *_sock)
         uv_poll_start((uv_poll_t *)sock->handle, sock->poll.events, on_poll);
         break;
     default:
-        assert(!"FIXME");
+        h2o_fatal("unexpected handle type");
     }
 }
 
@@ -180,7 +180,7 @@ void do_read_stop(h2o_socket_t *_sock)
         update_poll(sock);
         break;
     default:
-        assert(!"FIXME");
+        h2o_fatal("unexpected handle type");
     }
 }
 
@@ -249,7 +249,7 @@ h2o_socket_t *do_import(h2o_loop_t *loop, h2o_socket_export_t *info)
     return &sock->super;
 }
 
-h2o_socket_t *h2o_uv_poll_create(h2o_loop_t *loop, int fd, uv_close_cb close_cb)
+h2o_socket_t *h2o_uv__poll_create(h2o_loop_t *loop, int fd, uv_close_cb close_cb)
 {
     struct st_h2o_uv_socket_t *sock = h2o_mem_alloc(sizeof(*sock));
     memset(sock, 0, sizeof(*sock));

