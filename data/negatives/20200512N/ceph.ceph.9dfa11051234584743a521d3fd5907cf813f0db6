commit 9dfa11051234584743a521d3fd5907cf813f0db6
Author: Yehuda Sadeh <yehuda@hq.newdream.net>
Date:   Mon Oct 17 17:09:20 2011 -0700

    rgw: fix swift account and containers listing limits

diff --git a/src/rgw/rgw_op.cc b/src/rgw/rgw_op.cc
index be98703b82..b3b3e93134 100644
--- a/src/rgw/rgw_op.cc
+++ b/src/rgw/rgw_op.cc
@@ -333,6 +333,10 @@ int RGWListBuckets::verify_permission()
 
 void RGWListBuckets::execute()
 {
+  ret = get_params();
+  if (ret < 0)
+    goto done;
+
   ret = rgw_read_user_buckets(s->user.user_id, buckets, !!(s->prot_flags & RGW_REST_SWIFT));
   if (ret < 0) {
     /* hmm.. something wrong here.. the user was authenticated, so it
@@ -349,6 +353,7 @@ void RGWListBuckets::execute()
     */
   }
 
+done:
   send_response();
 }
 
@@ -427,13 +432,8 @@ int RGWListBucket::verify_permission()
   return 0;
 }
 
-void RGWListBucket::execute()
+int RGWListBucket::parse_max_keys()
 {
-  string no_ns;
-
-  url_decode(s->args.get("prefix"), prefix);
-  url_decode(s->args.get("marker"), marker);
-  url_decode(s->args.get(limit_opt_name), max_keys);
   if (!max_keys.empty()) {
     char *endptr;
     max = strtol(max_keys.c_str(), &endptr, 10);
@@ -441,27 +441,23 @@ void RGWListBucket::execute()
       while (*endptr && isspace(*endptr)) // ignore white space
         endptr++;
       if (*endptr) {
-        ret = -EINVAL;
-        goto done;
+        return -EINVAL;
       }
     }
   } else {
     max = default_max;
   }
-  url_decode(s->args.get("delimiter"), delimiter);
 
-  if (s->prot_flags & RGW_REST_SWIFT) {
-    string path_args;
-    url_decode(s->args.get("path"), path_args);
-    if (!path_args.empty()) {
-      if (!delimiter.empty() || !prefix.empty()) {
-        ret = -EINVAL;
-        goto done;
-      }
-      url_decode(path_args, prefix);
-      delimiter="/";
-    }
-  }
+  return 0;
+}
+
+void RGWListBucket::execute()
+{
+  string no_ns;
+
+  ret = get_params();
+  if (ret < 0)
+    goto done;
 
   ret = rgwstore->list_objects(s->user.user_id, s->bucket, max, prefix, delimiter, marker, objs, common_prefixes,
                                !!(s->prot_flags & RGW_REST_SWIFT), no_ns, &is_truncated, NULL);
diff --git a/src/rgw/rgw_op.h b/src/rgw/rgw_op.h
index c1bd60eb4c..e6bc5e2517 100644
--- a/src/rgw/rgw_op.h
+++ b/src/rgw/rgw_op.h
@@ -121,6 +121,7 @@ public:
   int verify_permission();
   void execute();
 
+  virtual int get_params()= 0;
   virtual void send_response() = 0;
 };
 
@@ -158,10 +159,11 @@ protected:
   vector<RGWObjEnt> objs;
   map<string, bool> common_prefixes;
 
-  string limit_opt_name;
   int default_max;
   bool is_truncated;
 
+  int parse_max_keys();
+
 public:
   RGWListBucket() {}
 
@@ -180,6 +182,7 @@ public:
   int verify_permission();
   void execute();
 
+  virtual int get_params() = 0;
   virtual void send_response() = 0;
 };
 
diff --git a/src/rgw/rgw_rest_s3.cc b/src/rgw/rgw_rest_s3.cc
index 98ef59de45..d9128aadf3 100644
--- a/src/rgw/rgw_rest_s3.cc
+++ b/src/rgw/rgw_rest_s3.cc
@@ -115,6 +115,19 @@ void RGWListBuckets_REST_S3::send_response()
   flush_formatter_to_req_state(s, s->formatter);
 }
 
+int RGWListBucket_REST_S3::get_params()
+{
+  url_decode(s->args.get("prefix"), prefix);
+  url_decode(s->args.get("marker"), marker);
+  url_decode(s->args.get("max-keys"), max_keys);
+  ret = parse_max_keys();
+  if (ret < 0) {
+    return ret;
+  }
+  url_decode(s->args.get("delimiter"), delimiter);
+  return 0;
+}
+
 void RGWListBucket_REST_S3::send_response()
 {
   if (ret < 0)
diff --git a/src/rgw/rgw_rest_s3.h b/src/rgw/rgw_rest_s3.h
index fda6379886..a2609519bf 100644
--- a/src/rgw/rgw_rest_s3.h
+++ b/src/rgw/rgw_rest_s3.h
@@ -20,17 +20,18 @@ public:
   RGWListBuckets_REST_S3() {}
   ~RGWListBuckets_REST_S3() {}
 
+  int get_params() { return 0; }
   void send_response();
 };
 
 class RGWListBucket_REST_S3 : public RGWListBucket_REST {
 public:
   RGWListBucket_REST_S3() {
-    limit_opt_name ="max-keys";
     default_max = 1000;
   }
   ~RGWListBucket_REST_S3() {}
 
+  int get_params();
   void send_response();
 };
 
diff --git a/src/rgw/rgw_rest_swift.cc b/src/rgw/rgw_rest_swift.cc
index cf2dc4c188..cae73d1334 100644
--- a/src/rgw/rgw_rest_swift.cc
+++ b/src/rgw/rgw_rest_swift.cc
@@ -7,28 +7,38 @@
 
 #define DOUT_SUBSYS rgw
 
-void RGWListBuckets_REST_SWIFT::send_response()
+int RGWListBuckets_REST_SWIFT::get_params()
 {
-  dump_start(s);
+  url_decode(s->args.get("marker"), marker);
+  string limit_str;
+  url_decode(s->args.get("limit"), limit_str);
+  limit = strtol(limit_str.c_str(), NULL, 10);
+  if (limit > limit_max || limit < 0)
+    return -ERR_PRECONDITION_FAILED;
 
-  s->formatter->open_array_section("account");
+  if (limit == 0)
+    limit = limit_max;
 
-  // dump_owner(s, s->user.user_id, s->user.display_name);
+  return 0;
+}
 
+void RGWListBuckets_REST_SWIFT::send_response()
+{
   map<string, RGWBucketEnt>& m = buckets.get_buckets();
   map<string, RGWBucketEnt>::iterator iter;
 
-  string marker = s->args.get("marker");
+  if (ret < 0)
+    goto done;
+
+  dump_start(s);
+
+  s->formatter->open_array_section("account");
+
   if (marker.empty())
     iter = m.begin();
   else
     iter = m.upper_bound(marker);
 
-  int limit = 10000;
-  string limit_str = s->args.get("limit");
-  if (!limit_str.empty())
-    limit = atoi(limit_str.c_str());
-
   for (int i = 0; i < limit && iter != m.end(); ++iter, ++i) {
     RGWBucketEnt obj = iter->second;
     s->formatter->open_object_section("container");
@@ -41,7 +51,7 @@ void RGWListBuckets_REST_SWIFT::send_response()
 
   if (!ret && s->formatter->get_len() == 0)
     ret = STATUS_NO_CONTENT;
-
+done:
   set_req_state_err(s, ret);
   dump_errno(s);
   end_header(s);
@@ -53,9 +63,36 @@ void RGWListBuckets_REST_SWIFT::send_response()
   flush_formatter_to_req_state(s, s->formatter);
 }
 
+int RGWListBucket_REST_SWIFT::get_params()
+{
+  url_decode(s->args.get("prefix"), prefix);
+  url_decode(s->args.get("marker"), marker);
+  url_decode(s->args.get("limit"), max_keys);
+  ret = parse_max_keys();
+  if (ret < 0) {
+    return ret;
+  }
+  if (max > default_max)
+    return -ERR_PRECONDITION_FAILED;
+
+  url_decode(s->args.get("delimiter"), delimiter);
+
+  string path_args;
+  url_decode(s->args.get("path"), path_args);
+  if (!path_args.empty()) {
+    if (!delimiter.empty() || !prefix.empty()) {
+      return -EINVAL;
+    }
+    url_decode(path_args, prefix);
+    delimiter="/";
+  }
+
+  return 0;
+}
+
 void RGWListBucket_REST_SWIFT::send_response()
 {
-   vector<RGWObjEnt>::iterator iter = objs.begin();
+  vector<RGWObjEnt>::iterator iter = objs.begin();
   map<string, bool>::iterator pref_iter = common_prefixes.begin();
 
   s->formatter->open_array_section("container");
diff --git a/src/rgw/rgw_rest_swift.h b/src/rgw/rgw_rest_swift.h
index 9a20b636c7..3f78c8a3a0 100644
--- a/src/rgw/rgw_rest_swift.h
+++ b/src/rgw/rgw_rest_swift.h
@@ -14,21 +14,28 @@ public:
 };
 
 class RGWListBuckets_REST_SWIFT : public RGWListBuckets_REST {
+  int limit_max;
+  int limit;
+  string marker;
 public:
-  RGWListBuckets_REST_SWIFT() {}
+  RGWListBuckets_REST_SWIFT() {
+    limit_max = 10000;
+    limit = limit_max;
+  }
   ~RGWListBuckets_REST_SWIFT() {}
 
+  int get_params();
   void send_response();
 };
 
 class RGWListBucket_REST_SWIFT : public RGWListBucket_REST {
 public:
   RGWListBucket_REST_SWIFT() {
-    limit_opt_name = "limit";
     default_max = 10000;
   }
   ~RGWListBucket_REST_SWIFT() {}
 
+  int get_params();
   void send_response();
 };
 

