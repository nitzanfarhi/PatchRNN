commit 1f06aa3cec11d694fe2625c2661f58211042e518
Author: Paul Wouters <pwouters@redhat.com>
Date:   Sat Apr 19 16:47:45 2014 -0400

    move select_x509cert_id() to programs/pluto/
    
    Even the comment states it is pluto specific:
    
            * choose either subject DN or a subjectAltName as connection end ID

diff --git a/include/x509.h b/include/x509.h
index e8d6e916c..452ca0dee 100644
--- a/include/x509.h
+++ b/include/x509.h
@@ -172,7 +172,6 @@ extern int dntoa_or_null(char *dst, size_t dstlen, chunk_t dn,
 			 const char* null_dn);
 extern err_t atodn(char *src, chunk_t *dn);
 extern void gntoid(struct id *id, const generalName_t *gn);
-extern void select_x509cert_id(x509cert_t *cert, struct id *end_id);
 extern bool parse_x509cert(chunk_t blob, u_int level0, x509cert_t *cert);
 extern bool parse_x509crl(chunk_t blob, u_int level0, x509crl_t *crl);
 extern int parse_algorithmIdentifier(chunk_t blob, int level0);
diff --git a/lib/libswan/x509dn.c b/lib/libswan/x509dn.c
index c183b4fa2..9f28001f0 100644
--- a/lib/libswan/x509dn.c
+++ b/lib/libswan/x509dn.c
@@ -1109,47 +1109,6 @@ void share_x509cert(x509cert_t *cert)
 		cert->count++;
 }
 
-/*
- * choose either subject DN or a subjectAltName as connection end ID
- */
-void select_x509cert_id(x509cert_t *cert, struct id *end_id)
-{
-	bool copy_subject_dn = TRUE;	/* ID is subject DN */
-
-	if (end_id->kind != ID_NONE) {	/* check for matching subjectAltName */
-		generalName_t *gn = cert->subjectAltName;
-
-		while (gn != NULL) {
-			struct id id = empty_id;
-
-			gntoid(&id, gn);
-			if (same_id(&id, end_id)) {
-				/* take subjectAltName instead */
-				copy_subject_dn = FALSE;
-				break;
-			}
-			gn = gn->next;
-		}
-	}
-
-	if (copy_subject_dn) {
-		if (end_id->kind != ID_NONE &&
-			end_id->kind != ID_DER_ASN1_DN &&
-			end_id->kind != ID_FROMCERT) {
-			char buf[IDTOA_BUF];
-
-			idtoa(end_id, buf, IDTOA_BUF);
-			libreswan_log(
-				"  no subjectAltName matches ID '%s', replaced by subject DN",
-				buf);
-		}
-		end_id->kind = ID_DER_ASN1_DN;
-		end_id->name.len = cert->subject.len;
-		end_id->name.ptr = temporary_cyclic_buffer();
-		memcpy(end_id->name.ptr, cert->subject.ptr, cert->subject.len);
-	}
-}
-
 /*
  * check for equality between two key identifiers
  */
diff --git a/programs/pluto/x509more.c b/programs/pluto/x509more.c
index 3ca37a493..6618ba855 100644
--- a/programs/pluto/x509more.c
+++ b/programs/pluto/x509more.c
@@ -591,3 +591,44 @@ bool match_requested_ca(generalName_t *requested_ca, chunk_t our_ca,
 
 	return *our_pathlen <= MAX_CA_PATH_LEN;
 }
+
+/*
+ * choose either subject DN or a subjectAltName as connection end ID
+ */
+void select_x509cert_id(x509cert_t *cert, struct id *end_id)
+{
+	bool copy_subject_dn = TRUE;	/* ID is subject DN */
+
+	if (end_id->kind != ID_NONE) {	/* check for matching subjectAltName */
+		generalName_t *gn = cert->subjectAltName;
+
+		while (gn != NULL) {
+			struct id id = empty_id;
+
+			gntoid(&id, gn);
+			if (same_id(&id, end_id)) {
+				/* take subjectAltName instead */
+				copy_subject_dn = FALSE;
+				break;
+			}
+			gn = gn->next;
+		}
+	}
+
+	if (copy_subject_dn) {
+		if (end_id->kind != ID_NONE &&
+			end_id->kind != ID_DER_ASN1_DN &&
+			end_id->kind != ID_FROMCERT) {
+			char buf[IDTOA_BUF];
+
+			idtoa(end_id, buf, IDTOA_BUF);
+			libreswan_log(
+				"  no subjectAltName matches ID '%s', replaced by subject DN",
+				buf);
+		}
+		end_id->kind = ID_DER_ASN1_DN;
+		end_id->name.len = cert->subject.len;
+		end_id->name.ptr = temporary_cyclic_buffer();
+		memcpy(end_id->name.ptr, cert->subject.ptr, cert->subject.len);
+	}
+}
diff --git a/programs/pluto/x509more.h b/programs/pluto/x509more.h
index afc151156..6cfb2d9e9 100644
--- a/programs/pluto/x509more.h
+++ b/programs/pluto/x509more.h
@@ -43,6 +43,7 @@ extern void load_authcerts(const char *type, const char *path,
 extern bool trusted_ca(chunk_t a, chunk_t b, int *pathlen);
 extern bool match_requested_ca(generalName_t *requested_ca,
                                chunk_t our_ca, int *our_pathlen);
+extern void select_x509cert_id(x509cert_t *cert, struct id *end_id);
 extern int filter_dotfiles(
 #ifdef SCANDIR_HAS_CONST
         const

