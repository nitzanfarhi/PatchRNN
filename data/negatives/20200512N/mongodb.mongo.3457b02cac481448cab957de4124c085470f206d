commit 3457b02cac481448cab957de4124c085470f206d
Author: Kaloian Manassiev <kaloian.manassiev@mongodb.com>
Date:   Mon May 18 11:10:36 2015 -0400

    SERVER-18124 Remove usage of SyncClusterConnection from the balancer
    
    The balancer now goes through the catalog manager.

diff --git a/src/mongo/s/balance.cpp b/src/mongo/s/balance.cpp
index 639ca0c8ea..61cc397284 100644
--- a/src/mongo/s/balance.cpp
+++ b/src/mongo/s/balance.cpp
@@ -35,7 +35,6 @@
 #include <algorithm>
 #include <boost/scoped_ptr.hpp>
 
-#include "mongo/client/connpool.h"
 #include "mongo/client/dbclientcursor.h"
 #include "mongo/db/client.h"
 #include "mongo/db/jsobj.h"
@@ -292,7 +291,7 @@ namespace mongo {
         }        
     }
 
-    void Balancer::_doBalanceRound(DBClientBase& conn, vector<shared_ptr<MigrateInfo>>* candidateChunks) {
+    void Balancer::_doBalanceRound(vector<shared_ptr<MigrateInfo>>* candidateChunks) {
         invariant(candidateChunks);
 
         vector<CollectionType> collections;
@@ -337,30 +336,21 @@ namespace mongo {
                 continue;
             }
 
-            map<string, vector<ChunkType>> shardToChunksMap;
-            auto_ptr<DBClientCursor> cursor =
-                                    conn.query(ChunkType::ConfigNS,
-                                               QUERY(ChunkType::ns(ns)).sort(ChunkType::min()));
+            std::vector<ChunkType> allNsChunks;
+            grid.catalogManager()->getChunks(Query(BSON(ChunkType::ns(ns)))
+                                                .sort(ChunkType::min()),
+                                             0, // all chunks
+                                             &allNsChunks);
 
             set<BSONObj> allChunkMinimums;
+            map<string, vector<ChunkType>> shardToChunksMap;
 
-            while ( cursor->more() ) {
-                BSONObj chunkDoc = cursor->nextSafe().getOwned();
-
-                StatusWith<ChunkType> chunkRes = ChunkType::fromBSON(chunkDoc);
-                if (!chunkRes.isOK()) {
-                    error() << "bad chunk format for " << chunkDoc
-                            << ": " << chunkRes.getStatus().reason();
-                    return;
-                }
-
-                const ChunkType& chunk = chunkRes.getValue();
+            for (const ChunkType& chunk : allNsChunks) {
                 allChunkMinimums.insert(chunk.getMin().getOwned());
 
-                vector<ChunkType>& chunkList = shardToChunksMap[chunk.getShard()];
-                chunkList.push_back(chunk);
+                vector<ChunkType>& chunksList = shardToChunksMap[chunk.getShard()];
+                chunksList.push_back(chunk);
             }
-            cursor.reset();
 
             if (shardToChunksMap.empty()) {
                 LOG(1) << "skipping empty collection (" << ns << ")";
@@ -495,12 +485,7 @@ namespace mongo {
 
         int sleepTime = 10;
 
-        // getConnectioString and dist lock constructor does not throw, which is what we expect on while
-        // on the balancer thread
-        ConnectionString config = configServer.getConnectionString();
-
-        while ( ! inShutdown() ) {
-
+        while (!inShutdown()) {
             Timer balanceRoundTimer;
             ActionLogType actionLog;
 
@@ -508,9 +493,6 @@ namespace mongo {
             actionLog.setWhat("balancer.round");
 
             try {
-
-                ScopedDbConnection conn(config.toString(), 30);
-
                 // ping has to be first so we keep things in the config server in sync
                 _ping();
 
@@ -541,8 +523,6 @@ namespace mongo {
                     // Ping again so scripts can determine if we're active without waiting
                     _ping( true );
 
-                    conn.done();
-
                     sleepsecs( sleepTime );
                     continue;
                 }
@@ -560,8 +540,6 @@ namespace mongo {
                         // Ping again so scripts can determine if we're active without waiting
                         _ping( true );
 
-                        conn.done();
-                        
                         sleepsecs( sleepTime ); // no need to wake up soon
                         continue;
                     }
@@ -581,7 +559,8 @@ namespace mongo {
                            << endl;
 
                     vector<shared_ptr<MigrateInfo>> candidateChunks;
-                    _doBalanceRound( conn.conn() , &candidateChunks );
+                    _doBalanceRound(&candidateChunks);
+
                     if ( candidateChunks.size() == 0 ) {
                         LOG(1) << "no need to move any chunk" << endl;
                         _balancedLastTime = 0;
@@ -603,8 +582,6 @@ namespace mongo {
 
                 // Ping again so scripts can determine if we're active without waiting
                 _ping( true );
-                
-                conn.done();
 
                 sleepsecs( _balancedLastTime ? sleepTime / 10 : sleepTime );
             }
diff --git a/src/mongo/s/balance.h b/src/mongo/s/balance.h
index 1b99c96f6d..9c7fd5a5b7 100644
--- a/src/mongo/s/balance.h
+++ b/src/mongo/s/balance.h
@@ -38,7 +38,6 @@
 namespace mongo {
 
     class BalancerPolicy;
-    class DBClientBase;
     struct MigrateInfo;
     struct WriteConcernOptions;
 
@@ -92,7 +91,7 @@ namespace mongo {
          * @param conn is the connection with the config server(s)
          * @param candidateChunks (IN/OUT) filled with candidate chunks, one per collection, that could possibly be moved
          */
-        void _doBalanceRound(DBClientBase& conn, std::vector<boost::shared_ptr<MigrateInfo>>* candidateChunks);
+        void _doBalanceRound(std::vector<boost::shared_ptr<MigrateInfo>>* candidateChunks);
 
         /**
          * Issues chunk migration request, one at a time.

