commit 34c93c8657935d30649e777c4aa05f74f16aa418
Author: Andrew Lunn <andrew@lunn.ch>
Date:   Sun Nov 18 11:44:56 2012 +0100

    dma: mv_xor: Add a device_control function
    
    The dmatest module for DMA engines calls
    
    device_control(dtc->chan, DMA_TERMINATE_ALL, 0);
    
    after completing the tests. The documentation in
    include/linux/dmaengine.h suggests this function is optional and
    dma_async_device_register() also does not BUG_ON() when not passed a
    function. However, dmatest is not the only code in the kernel
    unconditionally calling device_control. So add an implementation
    indicating all operations are not implemented.
    
    Signed-off-by: Andrew Lunn <andrew@lunn.ch>
    Signed-off-by: Thomas Petazzoni <thomas.petazzoni@free-electrons.com>

diff --git a/drivers/dma/mv_xor.c b/drivers/dma/mv_xor.c
index 97c8611f5ffb..f450fe8cbd61 100644
--- a/drivers/dma/mv_xor.c
+++ b/drivers/dma/mv_xor.c
@@ -1070,6 +1070,14 @@ mv_xor_xor_self_test(struct mv_xor_chan *mv_chan)
 	return err;
 }
 
+/* This driver does not implement any of the optional DMA operations. */
+static int
+mv_xor_control(struct dma_chan *chan, enum dma_ctrl_cmd cmd,
+	       unsigned long arg)
+{
+	return -ENOSYS;
+}
+
 static int mv_xor_channel_remove(struct mv_xor_chan *mv_chan)
 {
 	struct dma_chan *chan, *_chan;
@@ -1130,6 +1138,7 @@ mv_xor_channel_add(struct mv_xor_device *xordev,
 	dma_dev->device_free_chan_resources = mv_xor_free_chan_resources;
 	dma_dev->device_tx_status = mv_xor_status;
 	dma_dev->device_issue_pending = mv_xor_issue_pending;
+	dma_dev->device_control = mv_xor_control;
 	dma_dev->dev = &pdev->dev;
 
 	/* set prep routines based on capability */

