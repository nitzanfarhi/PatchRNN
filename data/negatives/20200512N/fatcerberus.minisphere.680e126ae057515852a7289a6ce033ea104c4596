commit 680e126ae057515852a7289a6ce033ea104c4596
Author: Bruce Pascoe <fatcerberus@icloud.com>
Date:   Mon Mar 21 00:44:16 2016 -0400

    Support TypeScript modules
    
    I also fixed the module loader to use transpile_to_js() for CoffeeScript
    instead of calling the transpiler manually.  Which was the main reason I
    wrote that function in the first place.

diff --git a/src/minisphere/api.c b/src/minisphere/api.c
index 6cdc7d89..add1390b 100644
--- a/src/minisphere/api.c
+++ b/src/minisphere/api.c
@@ -18,6 +18,7 @@
 #include "sockets.h"
 #include "spriteset.h"
 #include "surface.h"
+#include "transpiler.h"
 #include "windowstyle.h"
 
 #include "api.h"
@@ -465,23 +466,24 @@ duk_handle_require(duk_context* ctx)
 {
 	vector_t*   filenames;
 	lstring_t*  filename;
-	size_t      file_size;
-	bool        is_cs;
-	bool        is_sys_module = false;
+	size_t      len;
 	const char* name;
-	char*       source;
+	char*       slurp;
+	lstring_t*  source_text;
 
 	iter_t     iter;
 	lstring_t* *p;
 
 	name = duk_get_string(ctx, 0);
 	if (name[0] == '~')
-		duk_error_ni(ctx, -1, DUK_ERR_TYPE_ERROR, "require(): SphereFS prefix not allowed");
+		duk_error_ni(ctx, -2, DUK_ERR_TYPE_ERROR, "require(): SphereFS prefixes not allowed");
 
 	filenames = vector_new(sizeof(lstring_t*));
 	filename = lstr_newf("%s.js", name); vector_push(filenames, &filename);
+	filename = lstr_newf("%s.ts", name); vector_push(filenames, &filename);
 	filename = lstr_newf("%s.coffee", name); vector_push(filenames, &filename);
 	filename = lstr_newf("~sys/commonjs/%s.js", name); vector_push(filenames, &filename);
+	filename = lstr_newf("~sys/commonjs/%s.ts", name); vector_push(filenames, &filename);
 	filename = lstr_newf("~sys/commonjs/%s.coffee", name); vector_push(filenames, &filename);
 	filename = NULL;
 	iter = vector_enum(filenames);
@@ -492,33 +494,20 @@ duk_handle_require(duk_context* ctx)
 	}
 	vector_free(filenames);
 	if (filename == NULL)
-		duk_error_ni(ctx, -1, DUK_ERR_REFERENCE_ERROR, "require(): module `%s` not found", name);
-	is_cs = strcasecmp(strrchr(lstr_cstr(filename), '.'), ".coffee") == 0;
-	is_sys_module = strstr(lstr_cstr(filename), "~sys/") == lstr_cstr(filename);
-	console_log(2, "loading CommonJS module `%s` as `%s`", name, lstr_cstr(filename));
-	if (!(source = sfs_fslurp(g_fs, lstr_cstr(filename), "commonjs", &file_size)))
-		duk_error_ni(ctx, -1, DUK_ERR_ERROR, "require(): unable to read script `%s`", lstr_cstr(filename));
-	if (!is_cs)
-		duk_push_lstring(ctx, source, file_size);
-	else {
-		duk_push_global_object(ctx);
-		if (!duk_get_prop_string(ctx, -1, "CoffeeScript"))
-			duk_error_ni(ctx, -1, DUK_ERR_ERROR, "require(): missing CoffeeScript compiler");
-		duk_get_prop_string(ctx, -1, "compile");
-		duk_push_lstring(ctx, source, file_size);
-		duk_push_object(ctx);
-		duk_push_string(ctx, lstr_cstr(filename));
-		duk_put_prop_string(ctx, -2, "filename");
-		duk_push_true(g_duk);
-		duk_put_prop_string(g_duk, -2, "bare");
-		if (duk_pcall(ctx, 2) != DUK_EXEC_SUCCESS)
-			duk_throw(ctx);
-		duk_remove(ctx, -2);
-		duk_remove(ctx, -2);
+		duk_error_ni(ctx, -2, DUK_ERR_REFERENCE_ERROR, "require(): module `%s` not found", name);
+	console_log(2, "loading JS module `%s` as `%s`", name, lstr_cstr(filename));
+	if (!(slurp = sfs_fslurp(g_fs, lstr_cstr(filename), "commonjs", &len)))
+		duk_error_ni(ctx, -2, DUK_ERR_ERROR, "require(): unable to read script `%s`", lstr_cstr(filename));
+	source_text = lstr_from_buf(slurp, len);
+	free(slurp);
+	if (!transpile_to_js(&source_text, lstr_cstr(filename))) {
+		lstr_free(source_text);
+		duk_throw(ctx);
 	}
-	free(source);
 	duk_push_lstring_t(ctx, filename);
 	duk_put_prop_string(ctx, 3, "fileName");
+	duk_push_lstring_t(ctx, source_text);
+	lstr_free(source_text);
 	lstr_free(filename);
 	return 1;
 }
diff --git a/src/minisphere/script.c b/src/minisphere/script.c
index a07e72d8..051f012f 100644
--- a/src/minisphere/script.c
+++ b/src/minisphere/script.c
@@ -20,7 +20,7 @@ static int       s_next_script_id = 0;
 void
 initialize_scripts(void)
 {
-	console_log(1, "initializing JS manager");
+	console_log(1, "initializing JS script manager");
 	
 	duk_push_global_stash(g_duk);
 	duk_push_array(g_duk);
@@ -33,7 +33,7 @@ initialize_scripts(void)
 void
 shutdown_scripts(void)
 {
-	console_log(1, "shutting down JS manager");
+	console_log(1, "shutting down JS script manager");
 	shutdown_transpiler();
 }
 
diff --git a/src/minisphere/transpiler.c b/src/minisphere/transpiler.c
index 85a65d8e..a43ce5c6 100644
--- a/src/minisphere/transpiler.c
+++ b/src/minisphere/transpiler.c
@@ -9,15 +9,15 @@ static bool load_typescript   (void);
 void
 initialize_transpiler(void)
 {
-	console_log(1, "Initializing JS transpiler");
-	load_coffeescript();
+	console_log(1, "initializing JS transpiler");
 	load_typescript();
+	load_coffeescript();
 }
 
 void
 shutdown_transpiler(void)
 {
-	console_log(1, "Shutting down JS transpiler");
+	console_log(1, "shutting down JS transpiler");
 }
 
 bool
@@ -78,9 +78,8 @@ transpile_to_js(lstring_t** p_source, const char* filename)
 	return true;
 
 on_error:
-	// note: in case of failure, the caller expects the JS error which caused the
-	//       operation to fail to be left on top of the Duktape stack.  ensure this is the
-	//       case before returning false.
+	// note: when we return false, the caller expects the JS error which caused the
+	//       operation to fail to be left on top of the Duktape value stack.
 	return false;
 }
 

