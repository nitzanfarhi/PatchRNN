commit 0f856508ad599f0b34129cf5869700e6d7d641d3
Author: Ingo Molnar <mingo@kernel.org>
Date:   Fri Jan 27 12:43:49 2017 +0100

    x86/boot/e820: Clean up asm/e820/api.h
    
    Do a number of easy cleanups:
    
     - remove spurious linebreaks
    
     - remove spurious whitespace differences and inconsistent tabulation
    
     - remove unused and ugly 'struct setup_data;' pre-declaration
    
     - make all exported functionality 'extern' consistently
    
     - deobfuscate the (s,e) parameters of is_ISA_range(): (start, end)
    
    No change in functionality.
    
    Cc: Alex Thorlton <athorlton@sgi.com>
    Cc: Andy Lutomirski <luto@kernel.org>
    Cc: Borislav Petkov <bp@alien8.de>
    Cc: Brian Gerst <brgerst@gmail.com>
    Cc: Dan Williams <dan.j.williams@intel.com>
    Cc: Denys Vlasenko <dvlasenk@redhat.com>
    Cc: H. Peter Anvin <hpa@zytor.com>
    Cc: Huang, Ying <ying.huang@intel.com>
    Cc: Josh Poimboeuf <jpoimboe@redhat.com>
    Cc: Juergen Gross <jgross@suse.com>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Paul Jackson <pj@sgi.com>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Rafael J. Wysocki <rjw@sisk.pl>
    Cc: Tejun Heo <tj@kernel.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: Wei Yang <richard.weiyang@gmail.com>
    Cc: Yinghai Lu <yinghai@kernel.org>
    Cc: linux-kernel@vger.kernel.org
    Signed-off-by: Ingo Molnar <mingo@kernel.org>

diff --git a/arch/x86/include/asm/e820/api.h b/arch/x86/include/asm/e820/api.h
index e161deb5736c..88a19257abb9 100644
--- a/arch/x86/include/asm/e820/api.h
+++ b/arch/x86/include/asm/e820/api.h
@@ -9,52 +9,42 @@ extern struct e820map *e820;
 extern struct e820map *e820_saved;
 
 extern unsigned long pci_mem_start;
-extern int e820_any_mapped(u64 start, u64 end, unsigned type);
-extern int e820_all_mapped(u64 start, u64 end, unsigned type);
+
+extern int  e820_any_mapped(u64 start, u64 end, unsigned type);
+extern int  e820_all_mapped(u64 start, u64 end, unsigned type);
 extern void e820_add_region(u64 start, u64 size, int type);
 extern void e820_print_map(char *who);
-extern int
-sanitize_e820_map(struct e820entry *biosmap, int max_nr_map, u32 *pnr_map);
-extern u64 e820_update_range(u64 start, u64 size, unsigned old_type,
-			       unsigned new_type);
-extern u64 e820_remove_range(u64 start, u64 size, unsigned old_type,
-			     int checktype);
+extern int  sanitize_e820_map(struct e820entry *biosmap, int max_nr_map, u32 *pnr_map);
+extern u64  e820_update_range(u64 start, u64 size, unsigned old_type, unsigned new_type);
+extern u64  e820_remove_range(u64 start, u64 size, unsigned old_type, int checktype);
 extern void update_e820(void);
 extern void e820_setup_gap(void);
-struct setup_data;
 extern void parse_e820_ext(u64 phys_addr, u32 data_len);
-
-#if defined(CONFIG_X86_64) || \
-	(defined(CONFIG_X86_32) && defined(CONFIG_HIBERNATION))
-extern void e820_mark_nosave_regions(unsigned long limit_pfn);
-#else
-static inline void e820_mark_nosave_regions(unsigned long limit_pfn)
-{
-}
-#endif
-
 extern unsigned long e820_end_of_ram_pfn(void);
 extern unsigned long e820_end_of_low_ram_pfn(void);
-extern u64 early_reserve_e820(u64 sizet, u64 align);
-
-void memblock_x86_fill(void);
-void memblock_find_dma_reserve(void);
-
+extern u64  early_reserve_e820(u64 sizet, u64 align);
+extern void memblock_x86_fill(void);
+extern void memblock_find_dma_reserve(void);
 extern void finish_e820_parsing(void);
 extern void e820_reserve_resources(void);
 extern void e820_reserve_resources_late(void);
 extern void setup_memory_map(void);
 extern char *default_machine_specific_memory_setup(void);
-
 extern void e820_reallocate_tables(void);
 
+#if defined(CONFIG_X86_64) || defined(CONFIG_X86_32) && defined(CONFIG_HIBERNATION)
+extern void e820_mark_nosave_regions(unsigned long limit_pfn);
+#else
+static inline void e820_mark_nosave_regions(unsigned long limit_pfn) { }
+#endif
+
 /*
- * Returns true iff the specified range [s,e) is completely contained inside
+ * Returns true iff the specified range [start,end) is completely contained inside
  * the ISA region.
  */
-static inline bool is_ISA_range(u64 s, u64 e)
+static inline bool is_ISA_range(u64 start, u64 end)
 {
-	return s >= ISA_START_ADDRESS && e <= ISA_END_ADDRESS;
+	return start >= ISA_START_ADDRESS && end <= ISA_END_ADDRESS;
 }
 
 #endif /* __ASSEMBLY__ */

