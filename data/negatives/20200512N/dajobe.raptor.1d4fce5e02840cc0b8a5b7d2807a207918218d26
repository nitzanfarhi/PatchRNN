commit 1d4fce5e02840cc0b8a5b7d2807a207918218d26
Author: Lauri Aalto <laalto@iki.fi>
Date:   Mon Oct 6 12:00:10 2008 +0000

    (raptor_uri_to_relative_uri_string_v2): New v2 API function. raptor_uri_to_relative_uri_string() depends on V1 functions and cannot be used with RAPTOR_DISABLE_V1 or without raptor_init().

diff --git a/src/raptor.h b/src/raptor.h
index 3c2cd986..41fee9c3 100644
--- a/src/raptor.h
+++ b/src/raptor.h
@@ -1211,6 +1211,8 @@ int raptor_uri_uri_string_is_file_uri(const unsigned char* uri_string);
 RAPTOR_API RAPTOR_V1
 unsigned char* raptor_uri_to_relative_counted_uri_string(raptor_uri *base_uri, raptor_uri *reference_uri, size_t *length_p);
 RAPTOR_API RAPTOR_V1
+unsigned char* raptor_uri_to_relative_uri_string(raptor_uri *base_uri,  raptor_uri *reference_uri);
+RAPTOR_API RAPTOR_V1
 void raptor_uri_print(const raptor_uri* uri, FILE *stream);
 RAPTOR_API RAPTOR_V1
 unsigned char* raptor_uri_to_counted_string(raptor_uri *uri, size_t *len_p);
@@ -1224,7 +1226,8 @@ void raptor_uri_get_handler(const raptor_uri_handler **handler, void **context);
 RAPTOR_API
 unsigned char* raptor_uri_to_relative_counted_uri_string_v2(raptor_world* world, raptor_uri *base_uri, raptor_uri *reference_uri, size_t *length_p);
 RAPTOR_API
-unsigned char* raptor_uri_to_relative_uri_string(raptor_uri *base_uri,  raptor_uri *reference_uri);
+unsigned char* raptor_uri_to_relative_uri_string_v2(raptor_world* world, raptor_uri *base_uri,  raptor_uri *reference_uri);
+
 RAPTOR_API
 void raptor_uri_print_v2(raptor_world* world, const raptor_uri* uri, FILE *stream);
 RAPTOR_API
diff --git a/src/raptor_serialize_rdfxml.c b/src/raptor_serialize_rdfxml.c
index 73ed2f33..f71466f6 100644
--- a/src/raptor_serialize_rdfxml.c
+++ b/src/raptor_serialize_rdfxml.c
@@ -466,8 +466,9 @@ raptor_rdfxml_serialize_statement(raptor_serializer* serializer,
                 raptor_rdf_namespace_uri, *((int*)statement->subject));
       } else {
         if(serializer->feature_relative_uris) {
-          subject_uri_string=raptor_uri_to_relative_uri_string(serializer->base_uri,
-                                                              (raptor_uri*)statement->subject);
+          subject_uri_string=raptor_uri_to_relative_uri_string_v2(serializer->world,
+                                                                  serializer->base_uri,
+                                                                  (raptor_uri*)statement->subject);
           if(!subject_uri_string)
             goto oom;
         } else {
@@ -617,8 +618,9 @@ raptor_rdfxml_serialize_statement(raptor_serializer* serializer,
       } else {
         /* must be URI */
         if(serializer->feature_relative_uris) {
-          object_uri_string=raptor_uri_to_relative_uri_string(serializer->base_uri,
-                                                              (raptor_uri*)statement->object);
+          object_uri_string=raptor_uri_to_relative_uri_string_v2(serializer->world,
+                                                                 serializer->base_uri,
+                                                                 (raptor_uri*)statement->object);
           if(!object_uri_string)
             goto oom;
         } else {
diff --git a/src/raptor_serialize_rdfxmla.c b/src/raptor_serialize_rdfxmla.c
index 6dcbd81f..5812fa42 100644
--- a/src/raptor_serialize_rdfxmla.c
+++ b/src/raptor_serialize_rdfxmla.c
@@ -183,7 +183,7 @@ raptor_rdfxmla_emit_resource_uri(raptor_serializer *serializer,
 
   if(serializer->feature_relative_uris)
     /* newly allocated string */
-    attr_value = raptor_uri_to_relative_uri_string(serializer->base_uri, uri);
+    attr_value = raptor_uri_to_relative_uri_string_v2(serializer->world, serializer->base_uri, uri);
   else
     attr_value = raptor_uri_as_string_v2(serializer->world, uri);
 
@@ -803,8 +803,9 @@ raptor_rdfxmla_emit_subject(raptor_serializer *serializer,
       attr_value = (unsigned char *)RAPTOR_CALLOC(string, 1, 
                                                   sizeof(unsigned char*));
     } else if(serializer->feature_relative_uris)
-      attr_value = raptor_uri_to_relative_uri_string(serializer->base_uri,
-                                                     subject->node->value.resource.uri);
+      attr_value = raptor_uri_to_relative_uri_string_v2(serializer->world,
+                                                        serializer->base_uri,
+                                                        subject->node->value.resource.uri);
     else
       attr_value = raptor_uri_to_string_v2(serializer->world,
                                            subject->node->value.resource.uri);
diff --git a/src/raptor_serialize_rss.c b/src/raptor_serialize_rss.c
index 7aeab531..d491d32d 100644
--- a/src/raptor_serialize_rss.c
+++ b/src/raptor_serialize_rss.c
@@ -1158,7 +1158,7 @@ raptor_rss10_emit_atom_triples_map(raptor_serializer *serializer, int is_feed,
     
     at_map_attrs=(raptor_qname **)RAPTOR_CALLOC(qnamearray, 1,
                                                 sizeof(raptor_qname*));
-    ruri_string=raptor_uri_to_relative_uri_string(base_uri, serializer->world->rss_fields_info_uris[to_f]);
+    ruri_string=raptor_uri_to_relative_uri_string_v2(serializer->world, base_uri, serializer->world->rss_fields_info_uris[to_f]);
     at_map_attrs[0]=raptor_new_qname(rss_serializer->nstack, 
                                      (const unsigned char*)"property", 
                                      ruri_string,
@@ -1279,7 +1279,7 @@ raptor_rss10_emit_rss_items(raptor_serializer *serializer)
     base_uri_copy=base_uri ? raptor_uri_copy_v2(rss_serializer->world, base_uri) : NULL;
     rdf_li_element=raptor_new_xml_element(rdf_li_qname, NULL, base_uri_copy);
     attrs=(raptor_qname **)RAPTOR_CALLOC(qnamearray, 1, sizeof(raptor_qname*));
-    ruri_string=raptor_uri_to_relative_uri_string(base_uri, item_item->uri);
+    ruri_string=raptor_uri_to_relative_uri_string_v2(rss_serializer->world, base_uri, item_item->uri);
     attrs[0]=raptor_new_qname_from_namespace_local_name_v2(rss_serializer->world,
                                                            rss_serializer->default_nspace,
                                                            (const unsigned char*)"resource",
@@ -1636,7 +1636,7 @@ raptor_rss10_emit_item(raptor_serializer* serializer,
     if(!is_atom && item->uri) {
       unsigned char* ruri_string;
       attrs=(raptor_qname **)RAPTOR_CALLOC(qnamearray, 1, sizeof(raptor_qname*));
-      ruri_string=raptor_uri_to_relative_uri_string(base_uri, item->uri);
+      ruri_string=raptor_uri_to_relative_uri_string_v2(rss_serializer->world, base_uri, item->uri);
       attrs[0]=raptor_new_qname_from_namespace_local_name_v2(rss_serializer->world,
                                                              rss_serializer->default_nspace,
                                                              (const unsigned char*)"about",
@@ -1819,7 +1819,7 @@ raptor_rss10_emit_item(raptor_serializer* serializer,
             unsigned char* ruri_string;
 
             attrs=(raptor_qname **)RAPTOR_CALLOC(qnamearray, 3, sizeof(raptor_qname*));
-            ruri_string=raptor_uri_to_relative_uri_string(base_uri, field->uri);
+            ruri_string=raptor_uri_to_relative_uri_string_v2(rss_serializer->world, base_uri, field->uri);
             attrs[attr_count]=raptor_new_qname_from_namespace_local_name_v2(rss_serializer->world,
                                                                             rss_serializer->default_nspace,
                                                                             (const unsigned char*)"resource",
@@ -1849,7 +1849,7 @@ raptor_rss10_emit_item(raptor_serializer* serializer,
 
           /* not an rss:item with an rss:enclosure field */
           attrs=(raptor_qname **)RAPTOR_CALLOC(qnamearray, 1, sizeof(raptor_qname*));
-          ruri_string=raptor_uri_to_relative_uri_string(base_uri, field->uri);
+          ruri_string=raptor_uri_to_relative_uri_string_v2(rss_serializer->world, base_uri, field->uri);
           attrs[0]=raptor_new_qname_from_namespace_local_name_v2(rss_serializer->world,
                                                                  rss_serializer->default_nspace,
                                                                  (const unsigned char*)"resource",
diff --git a/src/raptor_uri.c b/src/raptor_uri.c
index b4774875..c3827a35 100644
--- a/src/raptor_uri.c
+++ b/src/raptor_uri.c
@@ -1693,17 +1693,46 @@ raptor_uri_to_relative_counted_uri_string_v2(raptor_world* world,
  * @reference_uri: The reference absolute URI to use
  *
  * Get the relative URI string of a URI against a base URI.
+ *
+ * raptor_init() MUST have been called before calling this function.
+ * Use raptor_uri_to_relative_uri_string_v2() if using raptor_world APIs.
  * 
  * Return value: A newly allocated relative URI string or NULL on failure
  **/
 unsigned char*
 raptor_uri_to_relative_uri_string(raptor_uri *base_uri, 
-                                  raptor_uri *reference_uri) {
-  return raptor_uri_to_relative_counted_uri_string(base_uri,
-                                                   reference_uri, NULL);
+                                  raptor_uri *reference_uri)
+{
+  return raptor_uri_to_relative_uri_string_v2(raptor_world_instance(),
+                                              base_uri,
+                                              reference_uri);
+}
+#endif
+
+
+/**
+ * raptor_uri_to_relative_uri_string_v2:
+ * @world: raptor_world instance
+ * @base_uri: The base absolute URI to resolve against
+ * @reference_uri: The reference absolute URI to use
+ *
+ * Get the relative URI string of a URI against a base URI.
+ * 
+ * Return value: A newly allocated relative URI string or NULL on failure
+ **/
+unsigned char*
+raptor_uri_to_relative_uri_string_v2(raptor_world *world,
+                                     raptor_uri *base_uri, 
+                                     raptor_uri *reference_uri)
+{
+  return raptor_uri_to_relative_counted_uri_string_v2(world,
+                                                      base_uri,
+                                                      reference_uri,
+                                                      NULL);
 }
 
 
+#ifndef RAPTOR_DISABLE_V1
 /**
  * raptor_uri_print:
  * @uri: URI to print

