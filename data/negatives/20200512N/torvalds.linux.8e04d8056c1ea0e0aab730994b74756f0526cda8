commit 8e04d8056c1ea0e0aab730994b74756f0526cda8
Author: Hans de Goede <hdegoede@redhat.com>
Date:   Fri Oct 1 14:20:08 2010 -0700

    scsi/sr: add no_read_disc_info scsi_device flag
    
    Some USB devices emulate a usb-mass-storage attached (scsi) cdrom device,
    usually this fake cdrom contains the windows software for the device.
    While working on supporting Appotech ax3003 based photoframes, which do
    this I discovered that they will go of into lala land when ever they see a
    READ_DISC_INFO scsi command.
    
    Thus this patch adds a scsi_device flag (which can then be set by the
    usb-storage driver through an unsual-devs entry), to indicate this, and
    makes the sr driver honor this flag.
    
    I know this sucks, but as discussed on linux-scsi list there is no other
    way to make this device work properly.
    
    Looking at usb traces made under windows, windows never sends a
    READ_DISC_INFO during normal interactions with a usb cdrom device.  So as
    this cdrom emulation thingie becomes more common we might see more of this
    problem.
    
    Signed-off-by: Hans de Goede <hdegoede@redhat.com>
    Cc: James Bottomley <James.Bottomley@HansenPartnership.com>
    Cc: Alan Stern <stern@rowland.harvard.edu>
    Cc: Matthew Dharm <mdharm-usb@one-eyed-alien.net>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>

diff --git a/drivers/scsi/sr.c b/drivers/scsi/sr.c
index ba9c3e0387ce..b811dd0eb240 100644
--- a/drivers/scsi/sr.c
+++ b/drivers/scsi/sr.c
@@ -862,10 +862,16 @@ static void get_capabilities(struct scsi_cd *cd)
 static int sr_packet(struct cdrom_device_info *cdi,
 		struct packet_command *cgc)
 {
+	struct scsi_cd *cd = cdi->handle;
+	struct scsi_device *sdev = cd->device;
+
+	if (cgc->cmd[0] == GPCMD_READ_DISC_INFO && sdev->no_read_disc_info)
+		return -EDRIVE_CANT_DO_THIS;
+
 	if (cgc->timeout <= 0)
 		cgc->timeout = IOCTL_TIMEOUT;
 
-	sr_do_ioctl(cdi->handle, cgc);
+	sr_do_ioctl(cd, cgc);
 
 	return cgc->stat;
 }
diff --git a/include/scsi/scsi_device.h b/include/scsi/scsi_device.h
index 50cb34ffef11..e8c2433ad8a8 100644
--- a/include/scsi/scsi_device.h
+++ b/include/scsi/scsi_device.h
@@ -148,6 +148,7 @@ struct scsi_device {
 	unsigned retry_hwerror:1;	/* Retry HARDWARE_ERROR */
 	unsigned last_sector_bug:1;	/* do not use multisector accesses on
 					   SD_LAST_BUGGY_SECTORS */
+	unsigned no_read_disc_info:1;	/* Avoid READ_DISC_INFO cmds */
 	unsigned is_visible:1;	/* is the device visible in sysfs */
 
 	DECLARE_BITMAP(supported_events, SDEV_EVT_MAXBITS); /* supported events */

