commit d0470d437ce66ed2f49760e7182ef47988159f7e
Author: Eliot Horowitz <eliot@10gen.com>
Date:   Fri May 8 11:02:12 2009 -0400

    Spider Monkey: ObjectId

diff --git a/dbtests/jstests.cpp b/dbtests/jstests.cpp
index 0d65ffc8d3..5bc285293b 100644
--- a/dbtests/jstests.cpp
+++ b/dbtests/jstests.cpp
@@ -165,6 +165,39 @@ namespace JSTests {
         }
     };
     
+    class JSOIDTests {
+    public:
+        void run(){
+            Scope * s = globalScriptEngine->createScope();
+            
+            s->localConnect( "blah" );
+            
+            s->invoke( "z = { _id : new ObjectId() , a : 123 };" , BSONObj() );
+            BSONObj out = s->getObject( "z" );
+            ASSERT_EQUALS( 123 , out["a"].number() );
+            ASSERT_EQUALS( jstOID , out["_id"].type() );
+            
+            OID save = out["_id"].__oid();
+            
+            s->setObject( "a" , out );
+            
+            s->invoke( "y = { _id : a._id , a : 124 };" , BSONObj() );            
+            out = s->getObject( "y" );
+            ASSERT_EQUALS( 124 , out["a"].number() );
+            ASSERT_EQUALS( jstOID , out["_id"].type() );            
+            ASSERT_EQUALS( out["_id"].__oid().str() , save.str() );
+
+            s->invoke( "y = { _id : new ObjectId( a._id ) , a : 125 };" , BSONObj() );            
+            out = s->getObject( "y" );
+            ASSERT_EQUALS( 125 , out["a"].number() );
+            ASSERT_EQUALS( jstOID , out["_id"].type() );            
+            ASSERT_EQUALS( out["_id"].__oid().str() , save.str() );
+
+
+            delete s;
+        }
+    };
+
     class All : public UnitTest::Suite {
     public:
         All() {
@@ -174,6 +207,7 @@ namespace JSTests {
             add< SimpleFunctions >();
             add< ObjectMapping >();
             add< ObjectDecoding >();
+            add< JSOIDTests >();
         }
     };
     
diff --git a/scripting/engine.h b/scripting/engine.h
index 9b81229119..e216b7bf72 100644
--- a/scripting/engine.h
+++ b/scripting/engine.h
@@ -40,6 +40,10 @@ namespace mongo {
         virtual void setThis( const BSONObj * obj ) = 0;
                     
         virtual ScriptingFunction createFunction( const char * code ) = 0;
+
+        /**
+         * @return 0 on success
+         */
         virtual int invoke( ScriptingFunction func , const BSONObj& args ) = 0;
         virtual string getError() = 0;
         
diff --git a/scripting/engine_spidermonkey.cpp b/scripting/engine_spidermonkey.cpp
index 988fe38732..c84a16a3ce 100644
--- a/scripting/engine_spidermonkey.cpp
+++ b/scripting/engine_spidermonkey.cpp
@@ -8,7 +8,7 @@ namespace mongo {
 
     boost::thread_specific_ptr<SMScope> currentScope( dontDeleteScope );
     
-    class Convertor {
+    class Convertor : boost::noncopyable {
     public:
         Convertor( JSContext * cx ){
             _context = cx;
@@ -89,14 +89,19 @@ namespace mongo {
                 
             case JSTYPE_NUMBER: b.append( name.c_str() , toNumber( val ) ); break;
             case JSTYPE_STRING: b.append( name.c_str() , toString( val ) ); break;
-
-            case JSTYPE_OBJECT: b.append( name.c_str() , toObject( val ) ); break;
+                
+            case JSTYPE_OBJECT: {
+                JSObject * o = JSVAL_TO_OBJECT( val );
+                if ( ! appendSpecialDBObject( this , b , name , o ) )
+                    b.append( name.c_str() , toObject( o ) ); 
+                break;
+            }
             case JSTYPE_FUNCTION: b.appendCode( name.c_str() , getFunctionCode( val ).c_str() ); break;
                 
             default: uassert( (string)"can't append field.  name:" + name + " type: " + typeString( val ) , 0 );
             }
         }
-
+        
         // ---------- to spider monkey ---------
 
         bool hasFunctionIdentifier( const string& code ){
@@ -265,8 +270,11 @@ namespace mongo {
         bool getBoolean( JSObject * o , const char * field ){
             return toBoolean( getProperty( o , field ) );
         }
+        
+        string getString( JSObject * o , const char * field ){
+            return toString( getProperty( o , field ) );
+        }
 
-    private:
         JSContext * _context;
     };
 
diff --git a/scripting/engine_spidermonkey.h b/scripting/engine_spidermonkey.h
index 2037919d78..94c7fad44f 100644
--- a/scripting/engine_spidermonkey.h
+++ b/scripting/engine_spidermonkey.h
@@ -22,6 +22,8 @@
 namespace mongo {
 
     class SMScope;
+    class Convertor;
+
     extern JSClass bson_ro_class;
     extern JSClass object_id_class;
 
@@ -36,5 +38,5 @@ namespace mongo {
 
     // mongo
     void initMongoJS( SMScope * scope , JSContext * cx , JSObject * global , bool local );
-    
+    bool appendSpecialDBObject( Convertor * c , BSONObjBuilder& b , const string& name , JSObject * o );
 }
diff --git a/scripting/sm_db.cpp b/scripting/sm_db.cpp
index 8184a706d7..2b0672e348 100644
--- a/scripting/sm_db.cpp
+++ b/scripting/sm_db.cpp
@@ -342,15 +342,17 @@ namespace mongo {
 
     JSBool object_id_constructor( JSContext *cx, JSObject *obj, uintN argc, jsval *argv, jsval *rval ){
 
+        Convertor c( cx );
+
         OID oid;
         if ( argc == 0 ){
             oid.init();
         }
         else {
-            uassert( "object_id_constructor 2nd case" , 0 );
+            uassert( "object_id_constructor can't take more than 1 param" , argc == 1 );
+            oid.init( c.toString( argv[0] ) );
         }
-        
-        Convertor c( cx );
+
         jsval v = c.toval( oid.str().c_str() );
         assert( JS_SetProperty( cx , obj , "str" , &v  ) );
 
@@ -364,6 +366,16 @@ namespace mongo {
         JSCLASS_NO_OPTIONAL_MEMBERS
     };
     
+    JSBool object_id_tostring(JSContext *cx, JSObject *obj, uintN argc, jsval *argv, jsval *rval){    
+        Convertor c(cx);
+        return *rval = c.getProperty( obj , "str" );
+    }
+
+    JSFunctionSpec object_id_functions[] = {
+        { "toString" , object_id_tostring , 0 , 0 , JSPROP_READONLY | JSPROP_PERMANENT } ,
+        { 0 }
+    };
+    
 
     // ---- other stuff ----
 
@@ -371,7 +383,7 @@ namespace mongo {
         uassert( "non-local not supported yet" , local );
 
         assert( JS_InitClass( cx , global , 0 , &mongo_local_class , mongo_local_constructor , 0 , 0 , mongo_functions , 0 , 0 ) );
-        assert( JS_InitClass( cx , global , 0 , &object_id_class , 0 , 0 , 0 , 0 , 0 , 0 ) );
+        assert( JS_InitClass( cx , global , 0 , &object_id_class , object_id_constructor , 0 , 0 , object_id_functions , 0 , 0 ) );
         assert( JS_InitClass( cx , global , 0 , &db_class , db_constructor , 2 , 0 , 0 , 0 , 0 ) );
         assert( JS_InitClass( cx , global , 0 , &db_collection_class , db_collection_constructor , 4 , 0 , 0 , 0 , 0 ) );
         assert( JS_InitClass( cx , global , 0 , &internal_cursor_class , internal_cursor_constructor , 0 , 0 , internal_cursor_functions , 0 , 0 ) );
@@ -380,4 +392,16 @@ namespace mongo {
 
     }
 
+    bool appendSpecialDBObject( Convertor * c , BSONObjBuilder& b , const string& name , JSObject * o ){
+
+        if ( JS_InstanceOf( c->_context , o , &object_id_class , 0 ) ){
+            OID oid;
+            oid.init( c->getString( o , "str" ) );
+            b.append( name.c_str() , oid );
+            return true;
+        }
+
+        return false;
+    }
+
 }

