commit e308341710b86d5e2a300d45287dc81e64a78a03
Author: Radoslaw Zarzynski <rzarzynski@mirantis.com>
Date:   Thu Jun 9 23:38:35 2016 +0200

    rgw: alter data structures to accommodate Static Website of Swift API.
    
    Signed-off-by: Radoslaw Zarzynski <rzarzynski@mirantis.com>

diff --git a/src/rgw/rgw_website.cc b/src/rgw/rgw_website.cc
index a69ffe16d2..62f48e1970 100644
--- a/src/rgw/rgw_website.cc
+++ b/src/rgw/rgw_website.cc
@@ -106,7 +106,7 @@ bool RGWBucketWebsiteConf::should_redirect(const string& key, const int http_err
   return true;
 }
 
-void RGWBucketWebsiteConf::get_effective_key(const string& key, string *effective_key)
+void RGWBucketWebsiteConf::get_effective_key(const string& key, string *effective_key) const
 {
 
   if (key.empty()) {
diff --git a/src/rgw/rgw_website.h b/src/rgw/rgw_website.h
index 6c1a92bb47..1ff46dc857 100644
--- a/src/rgw/rgw_website.h
+++ b/src/rgw/rgw_website.h
@@ -164,26 +164,39 @@ WRITE_CLASS_ENCODER(RGWBWRoutingRules)
 struct RGWBucketWebsiteConf
 {
   RGWRedirectInfo redirect_all;
-  string index_doc_suffix;
-  string error_doc;
+  std::string index_doc_suffix;
+  std::string error_doc;
+  std::string subdir_marker;
+  std::string listing_css_doc;
+  bool listing_enabled;
   RGWBWRoutingRules routing_rules;
 
-  RGWBucketWebsiteConf() {}
+  RGWBucketWebsiteConf()
+    : listing_enabled(false) {
+  }
 
   void encode(bufferlist& bl) const {
-    ENCODE_START(1, 1, bl);
+    ENCODE_START(2, 1, bl);
     ::encode(index_doc_suffix, bl);
     ::encode(error_doc, bl);
     ::encode(routing_rules, bl);
     ::encode(redirect_all, bl);
+    ::encode(subdir_marker, bl);
+    ::encode(listing_css_doc, bl);
+    ::encode(listing_enabled, bl);
     ENCODE_FINISH(bl);
   }
   void decode(bufferlist::iterator& bl) {
-    DECODE_START(1, bl);
+    DECODE_START(2, bl);
     ::decode(index_doc_suffix, bl);
     ::decode(error_doc, bl);
     ::decode(routing_rules, bl);
     ::decode(redirect_all, bl);
+    if (struct_v >= 2) {
+      ::decode(subdir_marker, bl);
+      ::decode(listing_css_doc, bl);
+      ::decode(listing_enabled, bl);
+    }
     DECODE_FINISH(bl);
   }
 
@@ -192,8 +205,24 @@ struct RGWBucketWebsiteConf
   void decode_xml(XMLObj *obj);
   void dump_xml(Formatter *f) const;
 
-  bool should_redirect(const string& key, const int http_error_code, RGWBWRoutingRule *redirect);
-  void get_effective_key(const string& key, string *effective_key);
+  bool should_redirect(const std::string& key,
+                       const int http_error_code,
+                       RGWBWRoutingRule *redirect);
+
+  void get_effective_key(const std::string& key,
+                         std::string *effective_key) const;
+
+  const std::string& get_swift_index_doc() const {
+    return index_doc_suffix;
+  }
+
+  bool is_empty() const {
+    return index_doc_suffix.empty() &&
+           error_doc.empty() &&
+           subdir_marker.empty() &&
+           listing_css_doc.empty() &&
+           ! listing_enabled;
+  }
 };
 WRITE_CLASS_ENCODER(RGWBucketWebsiteConf)
 

