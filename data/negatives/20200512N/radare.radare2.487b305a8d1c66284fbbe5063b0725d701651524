commit 487b305a8d1c66284fbbe5063b0725d701651524
Author: Ren Kimura <rkx1209dev@gmail.com>
Date:   Sat Jun 10 19:38:23 2017 +0900

    Changed finding logic of session key (#7719)

diff --git a/libr/core/cmd_debug.c b/libr/core/cmd_debug.c
index 1356beb11..ff71801b9 100644
--- a/libr/core/cmd_debug.c
+++ b/libr/core/cmd_debug.c
@@ -3621,7 +3621,7 @@ static int cmd_debug(void *data, const char *input) {
 				r_debug_session_list (core->dbg);
 				break;
 			case '+':
-				r_debug_session_add (core->dbg);
+				r_debug_session_add (core->dbg, NULL);
 				break;
 			case 'A': // for debugging command (private command for developer)
 				r_debug_session_set_idx (core->dbg, atoi (input + 4));
diff --git a/libr/debug/debug.c b/libr/debug/debug.c
index 4bc043c84..ab12a84b6 100644
--- a/libr/debug/debug.c
+++ b/libr/debug/debug.c
@@ -917,21 +917,29 @@ R_API int r_debug_step_back(RDebug *dbg) {
 	ut8 buf[32];
 	RAnalOp op;
 	RDebugSession *before;
+	RListIter *tail;
+
 	if (r_debug_is_dead (dbg)) {
 		return 0;
 	}
-	if (!dbg->anal || !dbg->reg)
+	if (!dbg->anal || !dbg->reg) {
+		return 0;
+	}
+	if (r_list_empty (dbg->sessions)) {
 		return 0;
+	}
 
 	end = r_debug_reg_get (dbg, dbg->reg->name[R_REG_NAME_PC]);
+
+	/* Save current session. It is marked as a finish point of reverse execution */
+	r_debug_session_add (dbg, &tail);
+
 	/* rollback to previous state */
-	before = r_debug_session_get (dbg, end);
+	before = r_debug_session_get (dbg, tail);
 	if (!before) {
 		return 0;
 	}
 	eprintf ("before session (%d) 0x%08"PFMT64x"\n", before->key.id, before->key.addr);
-	/* Save current session. It is marked as a finish point of reverse execution */
-	r_debug_session_add (dbg);
 
 	if (!r_list_length (before->memlist)) {
 		/* Diff list is empty. (i.e. Before session is base snapshot) *
@@ -949,7 +957,7 @@ R_API int r_debug_step_back(RDebug *dbg) {
 		pc = r_debug_reg_get (dbg, dbg->reg->name[R_REG_NAME_PC]);
 		r_io_read_at (dbg->iob.io, pc, buf, sizeof (buf));
 		r_anal_op (dbg->anal, &op, pc, buf, sizeof (buf));
-		//eprintf ("executing [0x%08"PFMT64x",0x%08"PFMT64x"]\n", pc, pc + op.size);
+		eprintf ("executing [0x%08"PFMT64x",0x%08"PFMT64x"]\n", pc, pc + op.size);
 		if (pc + op.size == end)
 			return 1;
 		if (!r_debug_step (dbg, 1))
diff --git a/libr/debug/session.c b/libr/debug/session.c
index 504d0c105..53949e81f 100644
--- a/libr/debug/session.c
+++ b/libr/debug/session.c
@@ -34,19 +34,30 @@ R_API void r_debug_session_list(RDebug *dbg) {
 	}
 }
 
-R_API RDebugSession *r_debug_session_add(RDebug *dbg) {
+R_API RDebugSession *r_debug_session_add(RDebug *dbg, RListIter **tail) {
 	RDebugSession *session;
 	RDebugSnapDiff *diff;
 	RListIter *iter;
 	RDebugMap *map;
 	ut64 addr;
 	int i, perms = R_IO_RW;
+
+	addr = r_debug_reg_get (dbg, dbg->reg->name[R_REG_NAME_PC]);
+	/* Session has already existed at this addr? */
+	r_list_foreach (dbg->sessions, iter, session) {
+		if (session->key.addr == addr) {
+			if (tail) {
+				*tail = iter;
+			}
+			return session;
+		}
+	}
+
 	session = R_NEW0 (RDebugSession);
 	if (!session) {
 		return NULL;
 	}
 
-	addr = r_debug_reg_get (dbg, dbg->reg->name[R_REG_NAME_PC]);
 	session->key = (RDebugKey) {
 		addr, r_debug_session_lastid (dbg)
 	};
@@ -73,6 +84,9 @@ R_API RDebugSession *r_debug_session_add(RDebug *dbg) {
 	}
 
 	r_list_append (dbg->sessions, session);
+	if (tail) {
+		*tail = dbg->sessions->tail;
+	}
 	return session;
 }
 
@@ -130,14 +144,17 @@ R_API bool r_debug_session_set_idx(RDebug *dbg, int idx) {
 	return false;
 }
 
-R_API RDebugSession *r_debug_session_get(RDebug *dbg, ut64 addr) {
+/* Get most recent used session at the time */
+R_API RDebugSession *r_debug_session_get(RDebug *dbg, RListIter *tail) {
 	RDebugSession *session;
-	RListIter *iter;
-	r_list_foreach_prev (dbg->sessions, iter, session) {
-		if (session->key.addr < addr) {
-			/* FIXME: Sessions must be saved along program flow. */
-			return session;
-		}
+	RListIter *prev;
+	if (!tail) {
+		return NULL;
+	}
+	prev = tail->p;
+	if (!prev) {
+		return NULL;
 	}
-	return NULL;
+	session = (RDebugSession *)prev->data;
+	return session;
 }
diff --git a/libr/debug/snap.c b/libr/debug/snap.c
index 30ffeadc9..1a362edc4 100644
--- a/libr/debug/snap.c
+++ b/libr/debug/snap.c
@@ -86,17 +86,22 @@ R_API void r_debug_snap_list(RDebug *dbg, int idx, int mode) {
 	}
 }
 
-R_API RDebugSnap *r_debug_snap_get(RDebug *dbg, ut64 addr) {
+static RDebugSnap *r_debug_snap_get_map(RDebug *dbg, RDebugMap *map) {
 	RListIter *iter;
 	RDebugSnap *snap;
 	r_list_foreach (dbg->snaps, iter, snap) {
-		if (R_BETWEEN (snap->addr, addr, snap->addr_end - 1)) {
+		if (snap->addr <= map->addr && map->addr_end <= snap->addr_end) {
 			return snap;
 		}
 	}
 	return NULL;
 }
 
+R_API RDebugSnap *r_debug_snap_get(RDebug *dbg, ut64 addr) {
+	RDebugMap *map = r_debug_map_get (dbg, addr);
+	return r_debug_snap_get_map (dbg, map);
+}
+
 static void r_page_data_set(RDebug *dbg, RPageData *page) {
 	RDebugSnapDiff *diff = page->diff;
 	ut64 addr = diff->base->addr + page->page_off * SNAP_PAGE_SIZE;
@@ -201,7 +206,7 @@ R_API RDebugSnapDiff *r_debug_snap_map(RDebug *dbg, RDebugMap *map) {
 	ut32 page_num = map->size / SNAP_PAGE_SIZE;
 	int digest_size;
 	/* Get an existing snapshot entry */
-	RDebugSnap *snap = r_debug_snap_get (dbg, map->addr);
+	RDebugSnap *snap = r_debug_snap_get_map (dbg, map);
 	if (!snap) {
 		/* Create a new one */
 		if (!(snap = r_debug_snap_new ())) {
@@ -213,6 +218,7 @@ R_API RDebugSnapDiff *r_debug_snap_map(RDebug *dbg, RDebugMap *map) {
 		snap->size = map->size;
 		snap->page_num = page_num;
 		snap->data = malloc (map->size);
+		snap->perm = map->perm;
 		if (!snap->data) {
 			goto error;
 		}
diff --git a/libr/include/r_debug.h b/libr/include/r_debug.h
index 71b8a9396..84e3cfe97 100644
--- a/libr/include/r_debug.h
+++ b/libr/include/r_debug.h
@@ -181,6 +181,7 @@ typedef struct r_debug_snap_t {
 	RHash *hash_ctx;
 	ut8 **hashes; // Hash of each pages
 	RList *history; // <RDebugSnapDiff*>
+	int perm;
 	char *comment;
 } RDebugSnap;
 
@@ -527,21 +528,21 @@ R_API int r_debug_esil_watch_empty(RDebug *dbg);
 R_API void r_debug_esil_prestep (RDebug *d, int p);
 
 /* snap */
-R_API RDebugSnap* r_debug_snap_new(void);
+R_API RDebugSnap *r_debug_snap_new(void);
 R_API void r_debug_snap_free(void *snap);
 R_API int r_debug_snap_delete(RDebug *dbg, int idx);
 R_API void r_debug_snap_list(RDebug *dbg, int idx, int mode);
 R_API int r_debug_snap(RDebug *dbg, ut64 addr);
 R_API int r_debug_snap_comment(RDebug *dbg, int idx, const char *msg);
-R_API RDebugSnapDiff* r_debug_snap_map(RDebug *dbg, RDebugMap *map);
+R_API RDebugSnapDiff *r_debug_snap_map(RDebug *dbg, RDebugMap *map);
 R_API int r_debug_snap_all(RDebug *dbg, int perms);
-R_API RDebugSnap* r_debug_snap_get(RDebug *dbg, ut64 addr);
+R_API RDebugSnap *r_debug_snap_get(RDebug *dbg, ut64 addr);
 R_API int r_debug_snap_set_idx(RDebug *dbg, int idx);
 R_API int r_debug_snap_set(RDebug *dbg, RDebugSnap *snap);
 
 /* snap diff */
 R_API void r_debug_diff_free(void *p);
-R_API RDebugSnapDiff* r_debug_diff_add(RDebug *dbg, RDebugSnap *base);
+R_API RDebugSnapDiff *r_debug_diff_add(RDebug *dbg, RDebugSnap *base);
 R_API void r_debug_diff_set(RDebug *dbg, RDebugSnapDiff *diff);
 R_API void r_debug_diff_set_base(RDebug *dbg, RDebugSnap *base);
 
@@ -551,11 +552,11 @@ R_API void r_page_data_free(void *p);
 /* debug session */
 R_API void r_debug_session_free(void *p) ;
 R_API void r_debug_session_list(RDebug *dbg);
-R_API RDebugSession *r_debug_session_add(RDebug *dbg);
+R_API RDebugSession *r_debug_session_add(RDebug *dbg, RListIter **tail);
 R_API void r_debug_session_set(RDebug *dbg, RDebugSession *session);
 R_API void r_debug_session_set_base(RDebug *dbg, RDebugSession *before);
 R_API bool r_debug_session_set_idx(RDebug *dbg, int idx);
-R_API RDebugSession* r_debug_session_get(RDebug *dbg, ut64 addr);
+R_API RDebugSession *r_debug_session_get(RDebug *dbg, RListIter *tail);
 R_API int r_debug_step_back(RDebug *dbg);
 
 /* plugin pointers */

