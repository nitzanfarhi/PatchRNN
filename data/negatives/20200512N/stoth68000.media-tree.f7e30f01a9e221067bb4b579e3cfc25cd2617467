commit f7e30f01a9e221067bb4b579e3cfc25cd2617467
Author: Matthias Kaehlcke <mka@chromium.org>
Date:   Wed Apr 12 11:20:29 2017 -0700

    cpumask: Add helper cpumask_available()
    
    With CONFIG_CPUMASK_OFFSTACK=y cpumask_var_t is a struct cpumask
    pointer, otherwise a struct cpumask array with a single element.
    
    Some code dealing with cpumasks needs to validate that a cpumask_var_t
    is not a NULL pointer when CONFIG_CPUMASK_OFFSTACK=y. This is typically
    done by performing the check always, regardless of the underlying type
    of cpumask_var_t. This works in both cases, however clang raises a
    warning like this when CONFIG_CPUMASK_OFFSTACK=n:
    
    kernel/irq/manage.c:839:28: error: address of array
    'desc->irq_common_data.affinity' will always evaluate to 'true'
    [-Werror,-Wpointer-bool-conversion]
    
    Add the inline helper cpumask_available() which only performs the
    pointer check if CONFIG_CPUMASK_OFFSTACK=y.
    
    Signed-off-by: Matthias Kaehlcke <mka@chromium.org>
    Cc: Grant Grundler <grundler@chromium.org>
    Cc: Rusty Russell <rusty@rustcorp.com.au>
    Cc: Greg Hackmann <ghackmann@google.com>
    Cc: Michael Davidson <md@google.com>
    Cc: Andrew Morton <akpm@linux-foundation.org>
    Link: http://lkml.kernel.org/r/20170412182030.83657-1-mka@chromium.org
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>

diff --git a/include/linux/cpumask.h b/include/linux/cpumask.h
index 96f1e88b767c..1a675604b17d 100644
--- a/include/linux/cpumask.h
+++ b/include/linux/cpumask.h
@@ -667,6 +667,11 @@ void alloc_bootmem_cpumask_var(cpumask_var_t *mask);
 void free_cpumask_var(cpumask_var_t mask);
 void free_bootmem_cpumask_var(cpumask_var_t mask);
 
+static inline bool cpumask_available(cpumask_var_t mask)
+{
+	return mask != NULL;
+}
+
 #else
 typedef struct cpumask cpumask_var_t[1];
 
@@ -708,6 +713,11 @@ static inline void free_cpumask_var(cpumask_var_t mask)
 static inline void free_bootmem_cpumask_var(cpumask_var_t mask)
 {
 }
+
+static inline bool cpumask_available(cpumask_var_t mask)
+{
+	return true;
+}
 #endif /* CONFIG_CPUMASK_OFFSTACK */
 
 /* It's common to want to use cpu_all_mask in struct member initializers,

