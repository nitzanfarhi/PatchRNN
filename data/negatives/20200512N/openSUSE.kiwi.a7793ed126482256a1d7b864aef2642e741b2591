commit a7793ed126482256a1d7b864aef2642e741b2591
Author: Matt Barringer <mbarringer@suse.de>
Date:   Tue Mar 9 17:12:01 2010 +0100

    Adding two new command flags:
     -l, which lists USB devices
     -k, which sets the imagewriter in "kiosk mode" (it won't list drives > 200GB)

diff --git a/tools/burner/MainWindow.cpp b/tools/burner/MainWindow.cpp
index 44a88ee78..84ea297d9 100644
--- a/tools/burner/MainWindow.cpp
+++ b/tools/burner/MainWindow.cpp
@@ -28,19 +28,23 @@
 #include <QtDBus>
 #include <QFile>
 
-#ifndef Q_OS_LINUX
-#error "Only linux is supported at the moment"
-#endif
+#include <unistd.h>
+#include <sys/types.h>
+#include <sys/sysctl.h>
+
+
 
 #include "MainWindow.h"
 
-MainWindow::MainWindow (const char *cmddevice,
+MainWindow::MainWindow (Platform *platform,
+                        const char *cmddevice,
                         const char *cmdfile,
                         bool unsafe,
                         bool maximized,
                         QWidget *parent)
  : QWidget(parent)
 {
+    pPlatform = platform;
     QDBusConnection dbusConnection = QDBusConnection::systemBus();
     file = QString();
     mMaximized = maximized;
@@ -56,9 +60,7 @@ MainWindow::MainWindow (const char *cmddevice,
 #endif
 
     setWindowTitle(tr(VERSION));
-    platform = new Platform;
-    platform->findDevices(mUnsafe);
-    reloadDeviceList(platform, cmddevice);
+    reloadDeviceList(cmddevice);
 
     if (cmdfile != NULL)
     {
@@ -89,10 +91,10 @@ MainWindow::MainWindow (const char *cmddevice,
 }
 
 void
-MainWindow::reloadDeviceList(Platform *platform, const char *cmddevice)
+MainWindow::reloadDeviceList(const char *cmddevice)
 {
     int dev = -1;
-    QLinkedList<DeviceItem *> list = platform->getDeviceList();
+    QLinkedList<DeviceItem *> list = pPlatform->getDeviceList();
     QLinkedList<DeviceItem *>::iterator i;
     for (i = list.begin(); i != list.end(); ++i)
     {
@@ -302,7 +304,7 @@ MainWindow::deviceInserted(QDBusMessage message)
     QString devicePath = message.arguments().at(0).toString();
     if (devicePath.startsWith("/org/freedesktop/Hal/devices/storage_serial"))
     {
-        DeviceItem *device = platform->getNewDevice(devicePath);
+        DeviceItem *device = pPlatform->getNewDevice(devicePath);
         if (device != NULL)
             if (deviceComboBox->findText(device->getDisplayString()) == -1)
                 deviceComboBox->addItem(device->getDisplayString(), 0);
@@ -316,7 +318,7 @@ MainWindow::deviceRemoved(QDBusMessage message)
     QString devicePath = message.arguments().at(0).toString();
     if (devicePath.startsWith("/org/freedesktop/Hal/devices/storage_serial"))
     {
-        QLinkedList<DeviceItem *> list = platform->getDeviceList();
+        QLinkedList<DeviceItem *> list = pPlatform->getDeviceList();
         QLinkedList<DeviceItem *>::iterator i;
         for (i = list.begin(); i != list.end(); ++i)
         {
@@ -326,7 +328,7 @@ MainWindow::deviceRemoved(QDBusMessage message)
                 if (index != -1)
                 {
                     deviceComboBox->removeItem(index);
-                    platform->removeDeviceFromList(devicePath);
+                    pPlatform->removeDeviceFromList(devicePath);
                     break;
                 }
             }
@@ -414,11 +416,11 @@ MainWindow::write()
         return;
     }
 
-    DeviceItem *item = platform->findDeviceInList(deviceComboBox->currentText());
+    DeviceItem *item = pPlatform->findDeviceInList(deviceComboBox->currentText());
 
     if (item != NULL)
     {
-        if (platform->isMounted(item->getUDI()))
+        if (pPlatform->isMounted(item->getUDI()))
         {
             // We won't let them nuke a mounted device
             QMessageBox msgBox;
@@ -435,7 +437,7 @@ MainWindow::write()
             {
                 case QMessageBox::Yes:
                 {
-                    if (!platform->unmountDevice(item->getUDI()))
+                    if (!pPlatform->unmountDevice(item->getUDI()))
                     {
                         QMessageBox failedBox;
                         failedBox.setText(tr("Unmount failed.  I will not write to this device."));
@@ -472,7 +474,7 @@ MainWindow::write()
         {
             case QMessageBox::Ok:
             {
-                platform->writeData(item->getPath(), file, item->getSize());
+                pPlatform->writeData(item->getPath(), file, item->getSize());
                 break;
             }
             default:
diff --git a/tools/burner/MainWindow.h b/tools/burner/MainWindow.h
index e3844bc0d..2070c4f15 100644
--- a/tools/burner/MainWindow.h
+++ b/tools/burner/MainWindow.h
@@ -30,14 +30,15 @@
 
 #include "Platform.h"
 #include "DeviceItem.h"
-#define VERSION "SUSE Studio Image Writer 1.6.1"
+#define VERSION "SUSE Studio Image Writer 1.7"
 
 class MainWindow : public QWidget
 {
     Q_OBJECT
 
 public:
-    MainWindow(const char *cmddevice,
+    MainWindow(Platform *platform,
+               const char *cmddevice,
                const char *cmdfile,
                bool unsafe = false,
                bool maximized = false,
@@ -66,7 +67,7 @@ private:
     void centerWindow();
     void useNewUI();
     void useOldUI();
-    void reloadDeviceList(Platform *platform, const char *cmddevice);
+    void reloadDeviceList(const char *cmddevice);
 
 #if (QT_VERSION < 0x040400)
     QLineEdit* fileLine;
@@ -76,7 +77,7 @@ private:
     QString file;
     QLabel *fileSize, *fileLabel;
     QComboBox *deviceComboBox;
-    Platform *platform;
+    Platform *pPlatform;
     bool mMaximized;
     bool mUnsafe;
 };
diff --git a/tools/burner/Platform.cpp b/tools/burner/Platform.cpp
index 568e74e9b..4075182b5 100644
--- a/tools/burner/Platform.cpp
+++ b/tools/burner/Platform.cpp
@@ -18,7 +18,7 @@
  *  you may find current contact information at www.novell.com
  *  
  *  Author: Matt Barringer <mbarringer@suse.de>
- *  
+ *
  */
 
 #include <sys/mount.h>
@@ -91,6 +91,8 @@ Platform::getNewDevice(QString devicePath, LibHalContext *context)
     DeviceItem *devItem = NULL;
     LibHalContext *localContext = context;
 
+    // context / localContext is NULL when getNewDevice is called from the main window
+    // when a USB device is inserted
     if (localContext == NULL)
     {
         if ((localContext = initHal()) == NULL)
@@ -140,28 +142,48 @@ Platform::getNewDevice(QString devicePath, LibHalContext *context)
             devItem->setModelString(product);
 
         if (!strcmp(vendor, ""))
-    #ifdef KIOSKHACK
-            devItem->setVendorString("SUSE Studio USB Key");
-    #else
-            devItem->setVendorString("Unknown Device");
-    #endif
+        {
+            if (mKioskMode)
+                devItem->setVendorString("SUSE Studio USB Key");
+            else
+                devItem->setVendorString("Unknown Device");
+        }
         else
+        {
             devItem->setVendorString(vendor);
-
+        }
         QString newDisplayString = QString("%1 %2 - %3 (%4 MB)").arg(devItem->getVendorString()).arg(devItem->getModelString()).arg(devItem->getPath()).arg(devItem->getSize() / 1048576);
         devItem->setDisplayString(newDisplayString);
 
-    // TODO replace the kiosk hack with the unsafe mode
-    #ifdef KIOSKHACK
-        // VERY VERY VERY VERY VERY  ugly hack for kiosk: ignore hard disks bigger than 100GB
-        if((devItem->getSize() / 1048576) < 200000)
-    #endif
-
+        if (mKioskMode)
+        {
+            if((devItem->getSize() / 1048576) > 200000)
+            {
+                delete devItem;
+                libhal_free_string(device);
+                libhal_free_string(product);
+                libhal_free_string(vendor);
+                if (context == NULL)
+                {
+                    libhal_ctx_shutdown(localContext, NULL);
+                    libhal_ctx_free(localContext);
+                }
+
+                return(NULL);
+            }
+        }
+        
         // If a device is 0 megs we might as well just not list it
-        // TODO: Perhaps make kiosk mode the default in order to not list external hard drives > 100GB?
         if ((devItem->getSize() / 1048576) > 0)
+        {
             itemList << devItem;
-
+        }
+        else
+        {
+            delete devItem;
+            devItem = NULL;
+        }
+        
         libhal_free_string(device);
         libhal_free_string(product);
         libhal_free_string(vendor);
diff --git a/tools/burner/Platform.h b/tools/burner/Platform.h
index 05daa6154..c7e9d42d1 100644
--- a/tools/burner/Platform.h
+++ b/tools/burner/Platform.h
@@ -35,7 +35,7 @@ class Platform
 {
 
 public:
-    Platform() {}
+    Platform(bool kioskMode = false) { mKioskMode = kioskMode; }
     void findDevices(bool unsafe = false);
     bool isMounted(QString path);
     void writeData(QString path, QString fileName, qint64 deviceSize);
@@ -50,6 +50,7 @@ public slots:
     void tick(qint64 lastWritten, qint64 bytesWritten);
 
 private:
+    bool mKioskMode;
     DeviceItem *pDevice;
     QLinkedList<DeviceItem *> itemList;
     LibHalContext *initHal();
diff --git a/tools/burner/main.cpp b/tools/burner/main.cpp
index c7d81832a..ac37541e9 100644
--- a/tools/burner/main.cpp
+++ b/tools/burner/main.cpp
@@ -22,14 +22,17 @@
  */
 
 #include <QApplication>
-#include "MainWindow.h"
 
-#if defined (Q_OS_UNIX)
-#include <unistd.h>
-#include <sys/types.h>
-#include <sys/sysctl.h>
+#ifndef Q_OS_LINUX
+#error "Only linux is supported at the moment"
 #endif
 
+
+#include "MainWindow.h"
+#include "Platform.h"
+#include "DeviceItem.h"
+
+
 int
 main (int argc, char *argv[])
 {
@@ -38,6 +41,8 @@ main (int argc, char *argv[])
     char *file = NULL;
     bool unsafe = false;
     bool maximized = false;
+    bool listMode = false;
+    bool kioskMode = false;
 #if defined(Q_OS_UNIX) 
 #ifndef KIOSKHACK
     if (getuid() != 0)
@@ -45,15 +50,17 @@ main (int argc, char *argv[])
 #endif
 #endif
 
-    while ((c = getopt (argc, argv, "mvuhd:f:")) != -1)
+    while ((c = getopt (argc, argv, "mlkvuhd:f:")) != -1)
     {
         switch (c)
         {
             case 'h':
-                fprintf(stdout, "Usage:\t%s [-d <device>] [-f <raw file>] [-u] [-v]\n", argv[0]);
+                fprintf(stdout, "Usage:\t%s [-d <device>] [-f <raw file>] [-u] [-l] [-v]\n", argv[0]);
                 fprintf(stdout, "Flashes a raw disk file to a device\n\n");
                 fprintf(stdout, "-d <device>\t\tSpecify a device, for example: /dev/sdc\n");
                 fprintf(stdout, "-f <raw file\t\tSpecify the file to write\n");
+                fprintf(stdout, "-k\t\t\tOperate in \"kiosk mode\", only listing disks smaller than 200GB\n");
+                fprintf(stdout, "-l\t\t\tList valid USB devices\n");
                 fprintf(stdout, "-m\t\t\tMaximize the window");
                 fprintf(stdout, "-u\t\t\tOperate in unsafe mode, listing all disks, not just removable ones\n");
                 fprintf(stdout, "-v\t\t\tVersion and author information\n");
@@ -67,6 +74,12 @@ main (int argc, char *argv[])
             case 'f':
                 file = strdup(optarg);
                 break;
+            case 'l':
+                listMode = true;
+                break;
+            case 'k':
+                kioskMode = true;
+                break;
             case 'v':
                 fprintf(stdout, "%s\nWritten by Matt Barringer <mbarringer@suse.de>\n", VERSION);
                 exit(0);
@@ -80,7 +93,21 @@ main (int argc, char *argv[])
     }
 
     QApplication app(argc, argv);
-    MainWindow window(device, file, unsafe, maximized);
+    Platform *platform = new Platform(kioskMode);
+    platform->findDevices(unsafe);
+    if (listMode)
+    {
+        QLinkedList<DeviceItem *> list = platform->getDeviceList();
+        QLinkedList<DeviceItem *>::iterator i;
+        for (i = list.begin(); i != list.end(); ++i)
+        {
+            if (!(*i)->getPath().isEmpty())
+                fprintf(stdout, "%s\n", (*i)->getPath().toAscii().data());
+        }
+        exit(0);
+    }
+    
+    MainWindow window(platform, device, file, unsafe, maximized);
     if (maximized)
     {
         window.showMaximized();

