commit c35ba86d37d9935ca55eaa4bd113c52fd04a8e55
Author: tommi <tommi@8dd45c8f-be11-0410-86c3-e0da43b70fc1>
Date:   Tue May 31 20:37:02 2005 +0000

    boost::shared_ptr replaced with own smartpointer implentation
    
    
    git-svn-id: svn://svn.code.sf.net/p/tntnet/code/trunk@307 8dd45c8f-be11-0410-86c3-e0da43b70fc1

diff --git a/tntnet/framework/common/tnt/pointer.h b/tntnet/framework/common/tnt/pointer.h
new file mode 100644
index 00000000..5e08fcea
--- /dev/null
+++ b/tntnet/framework/common/tnt/pointer.h
@@ -0,0 +1,76 @@
+/* tnt/pointer.h
+   Copyright (C) 2005 Tommi Maekitalo
+
+This file is part of tntnet.
+
+Tntnet is free software; you can redistribute it and/or modify
+it under the terms of the GNU General Public License as published by
+the Free Software Foundation; either version 2 of the License, or
+(at your option) any later version.
+
+Tntnet is distributed in the hope that it will be useful,
+but WITHOUT ANY WARRANTY; without even the implied warranty of
+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+GNU General Public License for more details.
+
+You should have received a copy of the GNU General Public License
+along with tntnet; if not, write to the Free Software
+Foundation, Inc., 59 Temple Place, Suite 330,
+Boston, MA  02111-1307  USA
+*/
+
+#ifndef TNT_POINTER_H
+#define TNT_POINTER_H
+
+#include <cxxtools/thread.h>
+
+namespace tnt
+{
+  /// smart pointer for objects with own reference-counting through
+  /// addRef() and release()-methods.
+  template <typename data_type>
+  class pointer
+  {
+      data_type* ptr;
+
+    public:
+      pointer(data_type* p = 0)
+        : ptr(p)
+      {
+        if (ptr)
+          ptr->addRef();
+      }
+
+      pointer(const pointer& p)
+        : ptr(p.ptr)
+      {
+        if (ptr)
+          ptr->addRef();
+      }
+
+      ~pointer()
+      {
+        if (ptr)
+          ptr->release();
+      }
+
+      pointer& operator= (const pointer& s)
+      {
+        if (ptr)
+          ptr->release();
+        ptr = s.ptr;
+        if (ptr)
+          ptr->addRef();
+        return *this;
+      }
+
+      const data_type* getPtr() const      { return ptr; }
+      data_type* getPtr()                  { return ptr; }
+      operator const data_type* () const   { return ptr; }
+      const data_type* operator-> () const { return ptr; }
+      data_type* operator-> ()             { return ptr; }
+  };
+}
+
+#endif // TNT_POINTER_H
+
diff --git a/tntnet/framework/runtime/tnt/dispatcher.h b/tntnet/framework/runtime/tnt/dispatcher.h
index ca8377da..09b29874 100644
--- a/tntnet/framework/runtime/tnt/dispatcher.h
+++ b/tntnet/framework/runtime/tnt/dispatcher.h
@@ -19,8 +19,8 @@ Foundation, Inc., 59 Temple Place, Suite 330,
 Boston, MA  02111-1307  USA
 */
 
-#ifndef DISPATCHER_H
-#define DISPATCHER_H
+#ifndef TNT_DISPATCHER_H
+#define TNT_DISPATCHER_H
 
 #include <boost/regex.hpp>
 #include <cxxtools/thread.h>
@@ -123,5 +123,5 @@ namespace tnt
 
 }
 
-#endif // DISPATCHER_H
+#endif // TNT_DISPATCHER_H
 
diff --git a/tntnet/framework/runtime/tnt/job.h b/tntnet/framework/runtime/tnt/job.h
index 10e41c89..276a46d5 100644
--- a/tntnet/framework/runtime/tnt/job.h
+++ b/tntnet/framework/runtime/tnt/job.h
@@ -23,12 +23,12 @@ Boston, MA  02111-1307  USA
 #define TNT_JOB_H
 
 #include <config.h>
-#include <boost/shared_ptr.hpp>
 #include <deque>
 #include <cxxtools/thread.h>
 #include <cxxtools/tcpstream.h>
 #include <tnt/httprequest.h>
 #include <tnt/httpparser.h>
+#include <tnt/pointer.h>
 #include <time.h>
 
 #ifdef USE_SSL
@@ -42,7 +42,7 @@ void mainloop()
 {
   while (1)
   {
-    jobqueue::ptr_type j = new tcpjob();
+    jobqueue::job_ptr j = new tcpjob();
     j->Accept(poller.get());
     queue.put(j);
   }
@@ -53,7 +53,7 @@ void server::Run()
 {
   while (1)
   {
-    jobqueue::ptr_type j = queue.get();
+    jobqueue::job_ptr j = queue.get();
     std::iostream& socket = j->getStream();
     processRequest(socket);
   }
@@ -71,6 +71,8 @@ namespace tnt
       httpMessage::parser parser;
       time_t lastAccessTime;
 
+      unsigned refs;
+
       static unsigned socket_read_timeout;
       static unsigned socket_write_timeout;
       static unsigned keepalive_max;
@@ -80,10 +82,26 @@ namespace tnt
       job()
         : parser(request),
           keepAliveCounter(keepalive_max),
-          lastAccessTime(0)
+          lastAccessTime(0),
+          refs(0)
         { }
+
+    protected:
       virtual ~job();
 
+    public:
+      unsigned addRef()   { return ++refs; }
+      unsigned release()
+      {
+        if (--refs == 0)
+        {
+          delete this;
+          return 0;
+        }
+        else
+          return refs;
+      }
+
       virtual std::iostream& getStream() = 0;
       virtual int getFd() const = 0;
       virtual void setRead() = 0;
@@ -151,7 +169,8 @@ namespace tnt
   class jobqueue
   {
     public:
-      typedef boost::shared_ptr<job> job_ptr;
+      typedef pointer<job> job_ptr;
+
       cxxtools::Condition noWaitThreads;
 
     private:
diff --git a/tntnet/sdk/tools/ecppc/body.cpp b/tntnet/sdk/tools/ecppc/body.cpp
index 05a3b464..850e0cbc 100644
--- a/tntnet/sdk/tools/ecppc/body.cpp
+++ b/tntnet/sdk/tools/ecppc/body.cpp
@@ -27,6 +27,9 @@ namespace tnt
 {
   namespace ecppc
   {
+    bodypart::~bodypart()
+    { }
+
     void bodypart_static::getBody(std::ostream& out) const
     {
       out << data;
diff --git a/tntnet/sdk/tools/ecppc/tnt/ecppc/body.h b/tntnet/sdk/tools/ecppc/tnt/ecppc/body.h
index 6cf3257b..a862d76b 100644
--- a/tntnet/sdk/tools/ecppc/tnt/ecppc/body.h
+++ b/tntnet/sdk/tools/ecppc/tnt/ecppc/body.h
@@ -22,7 +22,7 @@ Boston, MA  02111-1307  USA
 #ifndef TNT_ECPPC_BODY_H
 #define TNT_ECPPC_BODY_H
 
-#include <boost/shared_ptr.hpp>
+#include <tnt/pointer.h>
 #include <string>
 #include <list>
 #include <set>
@@ -36,7 +36,15 @@ namespace tnt
 
     class bodypart
     {
+        unsigned refs;
+
       public:
+        bodypart() : refs(0)  { }
+        virtual ~bodypart();
+
+        void addRef()  { ++refs; }
+        void release() { if (--refs <= 0) delete this; }
+
         virtual void getBody(std::ostream& out) const = 0;
     };
 
@@ -88,7 +96,7 @@ namespace tnt
     class body
     {
         typedef ecpp::parser::comp_args_type comp_args_type;
-        typedef boost::shared_ptr<bodypart> body_part_pointer;
+        typedef tnt::pointer<bodypart> body_part_pointer;
         typedef std::list<body_part_pointer> body_type;
         typedef std::set<std::string> subcomps_type;
         body_type data;

