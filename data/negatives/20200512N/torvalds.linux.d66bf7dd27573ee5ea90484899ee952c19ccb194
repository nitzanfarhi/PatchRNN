commit d66bf7dd27573ee5ea90484899ee952c19ccb194
Author: Vlad Yasevich <vyasevich@gmail.com>
Date:   Sat May 2 21:33:44 2015 -0400

    net: core: Correct an over-stringent device loop detection.
    
    The code in __netdev_upper_dev_link() has an over-stringent
    loop detection logic that actually prevents valid configurations
    from working correctly.
    
    In particular, the logic returns an error if an upper device
    is already in the list of all upper devices for a given dev.
    This particular check seems to be a overzealous as it disallows
    perfectly valid configurations.  For example:
      # ip l a link eth0 name eth0.10 type vlan id 10
      # ip l a dev br0 typ bridge
      # ip l s eth0.10 master br0
      # ip l s eth0 master br0  <--- Will fail
    
    If you switch the last two commands (add eth0 first), then both
    will succeed.  If after that, you remove eth0 and try to re-add
    it, it will fail!
    
    It appears to be enough to simply check adj_list to keeps things
    safe.
    
    I've tried stacking multiple devices multiple times in all different
    combinations, and either rx_handler registration prevented the stacking
    of the device linking cought the error.
    
    Signed-off-by: Vladislav Yasevich <vyasevic@redhat.com>
    Acked-by: Jiri Pirko <jiri@resnulli.us>
    Acked-by: Veaceslav Falico <vfalico@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

diff --git a/net/core/dev.c b/net/core/dev.c
index c7ba0388f1be..2c1c67fad64d 100644
--- a/net/core/dev.c
+++ b/net/core/dev.c
@@ -5209,7 +5209,7 @@ static int __netdev_upper_dev_link(struct net_device *dev,
 	if (__netdev_find_adj(upper_dev, dev, &upper_dev->all_adj_list.upper))
 		return -EBUSY;
 
-	if (__netdev_find_adj(dev, upper_dev, &dev->all_adj_list.upper))
+	if (__netdev_find_adj(dev, upper_dev, &dev->adj_list.upper))
 		return -EEXIST;
 
 	if (master && netdev_master_upper_dev_get(dev))

