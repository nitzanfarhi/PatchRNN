commit e57cf21e9787c081db4db6afa02e6e70112ee410
Author: Chris Mason <clm@fb.com>
Date:   Thu Feb 19 17:51:39 2015 -0800

    Btrfs: fix allocation size calculations in alloc_btrfs_bio
    
    Since commit 8e5cfb55d3f (Btrfs: Make raid_map array be inlined in
    btrfs_bio structure), the raid map array is allocated along with the
    btrfs bio in alloc_btrfs_bio.  The calculation used to decide how much
    we need to allocate was using the wrong parameter passed into the
    allocation function.
    
    The passed in real_stripes will be zero if a target replace operation
    is not currently running.  We want to use total_stripes instead.
    
    Signed-off-by: Chris Mason <clm@fb.com>
    Reported-by: David Sterba <dsterba@suse.cz>
    Tested-by: David Sterba <dsterba@suse.cz>

diff --git a/fs/btrfs/volumes.c b/fs/btrfs/volumes.c
index cd4d1315aaa9..8222f6f74147 100644
--- a/fs/btrfs/volumes.c
+++ b/fs/btrfs/volumes.c
@@ -4903,10 +4903,17 @@ static void sort_parity_stripes(struct btrfs_bio *bbio, int num_stripes)
 static struct btrfs_bio *alloc_btrfs_bio(int total_stripes, int real_stripes)
 {
 	struct btrfs_bio *bbio = kzalloc(
+		 /* the size of the btrfs_bio */
 		sizeof(struct btrfs_bio) +
+		/* plus the variable array for the stripes */
 		sizeof(struct btrfs_bio_stripe) * (total_stripes) +
+		/* plus the variable array for the tgt dev */
 		sizeof(int) * (real_stripes) +
-		sizeof(u64) * (real_stripes),
+		/*
+		 * plus the raid_map, which includes both the tgt dev
+		 * and the stripes
+		 */
+		sizeof(u64) * (total_stripes),
 		GFP_NOFS);
 	if (!bbio)
 		return NULL;

