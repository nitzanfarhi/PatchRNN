commit 8d75ac976e04f8fb2c8f41e69aa235aaba7f1c33
Author: Con Kolivas <kernel@kolivas.org>
Date:   Thu Mar 5 09:40:58 2015 +1100

    Use align_len in all alloc helpers

diff --git a/cgminer.c b/cgminer.c
index 18df94a7..e4cef7fa 100644
--- a/cgminer.c
+++ b/cgminer.c
@@ -2188,7 +2188,6 @@ static bool gbt_decode(struct pool *pool, json_t *res_val)
 	pool->n2size = 8;
 	pool->coinbase_len = cbt_len + pool->n2size;
 	cal_len = pool->coinbase_len + 1;
-	align_len(&cal_len);
 	free(pool->coinbase);
 	pool->coinbase = cgcalloc(cal_len, 1);
 	hex2bin(pool->coinbase, pool->coinbasetxn, 42);
diff --git a/util.c b/util.c
index 210ee2b0..9fe2a1bc 100644
--- a/util.c
+++ b/util.c
@@ -253,30 +253,36 @@ int Inet_Pton(int af, const char *src, void *dst)
 }
 #endif
 
-void *_cgmalloc(const int size, const char *file, const char *func, const int line)
+void *_cgmalloc(size_t size, const char *file, const char *func, const int line)
 {
-	void *ret = malloc(size);
+	void *ret;
 
+	align_len(&size);
+	ret = malloc(size);
 	if (unlikely(!ret))
-		quit(1, "Failed to malloc size %d from %s %s:%d", size, file, func, line);
+		quit(1, "Failed to malloc size %d from %s %s:%d", (int)size, file, func, line);
 	return ret;
 }
 
-void *_cgcalloc(const int memb, const int size, const char *file, const char *func, const int line)
+void *_cgcalloc(const size_t memb, size_t size, const char *file, const char *func, const int line)
 {
-	void *ret = calloc(memb, size);
+	void *ret;
 
+	align_len(&size);
+	ret = calloc(memb, size);
 	if (unlikely(!ret))
-		quit(1, "Failed to calloc memb %d size %d from %s %s:%d", memb, size, file, func, line);
+		quit(1, "Failed to calloc memb %d size %d from %s %s:%d", (int)memb, (int)size, file, func, line);
 	return ret;
 }
 
-void *_cgrealloc(void *ptr, const int size, const char *file, const char *func, const int line)
+void *_cgrealloc(void *ptr, size_t size, const char *file, const char *func, const int line)
 {
-	void *ret = realloc(ptr, size);
+	void *ret;
 
+	align_len(&size);
+	ret = realloc(ptr, size);
 	if (unlikely(!ret))
-		quit(1, "Failed to realloc size %d from %s %s:%d", size, file, func, line);
+		quit(1, "Failed to realloc size %d from %s %s:%d", (int)size, file, func, line);
 	return ret;
 }
 
@@ -2056,7 +2062,6 @@ static bool parse_notify(struct pool *pool, json_t *val)
 		goto out_unlock;
 	}
 	free(pool->coinbase);
-	align_len(&alloc_len);
 	pool->coinbase = cgcalloc(alloc_len, 1);
 	memcpy(pool->coinbase, cb1, cb1_len);
 	memcpy(pool->coinbase + cb1_len, pool->nonce1bin, pool->n1_len);
@@ -2993,8 +2998,6 @@ void *realloc_strcat(char *ptr, char *s)
 		old = strlen(ptr);
 
 	len += old + 1;
-	align_len(&len);
-
 	ret = cgmalloc(len);
 
 	if (ptr) {
diff --git a/util.h b/util.h
index b13a5699..5ea96ecf 100644
--- a/util.h
+++ b/util.h
@@ -104,9 +104,9 @@ typedef struct timespec cgtimer_t;
 
 int no_yield(void);
 int (*selective_yield)(void);
-void *_cgmalloc(const int size, const char *file, const char *func, const int line);
-void *_cgcalloc(const int memb, const int size, const char *file, const char *func, const int line);
-void *_cgrealloc(void *ptr, const int size, const char *file, const char *func, const int line);
+void *_cgmalloc(size_t size, const char *file, const char *func, const int line);
+void *_cgcalloc(const size_t memb, size_t size, const char *file, const char *func, const int line);
+void *_cgrealloc(void *ptr, size_t size, const char *file, const char *func, const int line);
 #define cgmalloc(_size) _cgmalloc(_size, __FILE__, __func__, __LINE__)
 #define cgcalloc(_memb, _size) _cgcalloc(_memb, _size, __FILE__, __func__, __LINE__)
 #define cgrealloc(_ptr, _size) _cgrealloc(_ptr, _size, __FILE__, __func__, __LINE__)

