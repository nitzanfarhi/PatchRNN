commit aa87d45855c7b255b451622a84a3e5b9b4393425
Author: Eduardo Habkost <ehabkost@redhat.com>
Date:   Thu Jan 17 18:59:28 2013 -0200

    target-i386: Don't set any KVM flag by default if KVM is disabled
    
    This is a cleanup that tries to solve two small issues:
    
     - We don't need a separate kvm_pv_eoi_features variable just to keep a
       constant calculated at compile-time, and this style would require
       adding a separate variable (that's declared twice because of the
       CONFIG_KVM ifdef) for each feature that's going to be
       enabled/disabled by machine-type compat code.
     - The pc-1.3 code is setting the kvm_pv_eoi flag on cpuid_kvm_features
       even when KVM is disabled at runtime. This small inconsistency in
       the cpuid_kvm_features field isn't a problem today because
       cpuid_kvm_features is ignored by the TCG code, but it may cause
       unexpected problems later when refactoring the CPUID handling code.
    
    This patch eliminates the kvm_pv_eoi_features variable and simply uses
    kvm_enabled() inside the enable_kvm_pv_eoi() compat function, so it
    enables kvm_pv_eoi only if KVM is enabled. I believe this makes the
    behavior of enable_kvm_pv_eoi() clearer and easier to understand.
    
    Signed-off-by: Eduardo Habkost <ehabkost@redhat.com>
    Acked-by: Gleb Natapov <gleb@redhat.com>
    Reviewed-by: Marcelo Tosatti <mtosatti@redhat.com>
    Signed-off-by: Andreas FÃ¤rber <afaerber@suse.de>

diff --git a/target-i386/cpu.c b/target-i386/cpu.c
index 376d4c8737..ac2ec243e1 100644
--- a/target-i386/cpu.c
+++ b/target-i386/cpu.c
@@ -206,22 +206,16 @@ typedef struct model_features_t {
 int check_cpuid = 0;
 int enforce_cpuid = 0;
 
-#if defined(CONFIG_KVM)
 static uint32_t kvm_default_features = (1 << KVM_FEATURE_CLOCKSOURCE) |
         (1 << KVM_FEATURE_NOP_IO_DELAY) |
         (1 << KVM_FEATURE_CLOCKSOURCE2) |
         (1 << KVM_FEATURE_ASYNC_PF) |
         (1 << KVM_FEATURE_STEAL_TIME) |
         (1 << KVM_FEATURE_CLOCKSOURCE_STABLE_BIT);
-static const uint32_t kvm_pv_eoi_features = (0x1 << KVM_FEATURE_PV_EOI);
-#else
-static uint32_t kvm_default_features = 0;
-static const uint32_t kvm_pv_eoi_features = 0;
-#endif
 
 void enable_kvm_pv_eoi(void)
 {
-    kvm_default_features |= kvm_pv_eoi_features;
+    kvm_default_features |= (1UL << KVM_FEATURE_PV_EOI);
 }
 
 void host_cpuid(uint32_t function, uint32_t count,
@@ -1602,7 +1596,9 @@ int cpu_x86_register(X86CPU *cpu, const char *cpu_model)
         goto out;
     }
 
-    def->kvm_features |= kvm_default_features;
+    if (kvm_enabled()) {
+        def->kvm_features |= kvm_default_features;
+    }
     def->ext_features |= CPUID_EXT_HYPERVISOR;
 
     if (cpu_x86_parse_featurestr(def, features) < 0) {

