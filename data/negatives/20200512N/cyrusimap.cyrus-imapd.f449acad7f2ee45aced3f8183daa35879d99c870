commit f449acad7f2ee45aced3f8183daa35879d99c870
Author: John Gardiner Meyers <jgm@andrew.cmu.edu>
Date:   Fri Jun 14 17:52:36 1996 +0000

    Add support for +rights and -rights.

diff --git a/imap/mboxlist.c b/imap/mboxlist.c
index 25d8062fe..4bb14f286 100644
--- a/imap/mboxlist.c
+++ b/imap/mboxlist.c
@@ -273,7 +273,8 @@ char **newpartition;
 	     * Users by default have all access to their personal mailbox(es),
 	     * Nobody else starts with any access to same.
 	     */
-	    acl_set(&acl, name+5, ACL_ALL, (acl_canonproc_t *)0, (void *)0);
+	    acl_set(&acl, name+5, ACL_MODE_SET, ACL_ALL,
+		    (acl_canonproc_t *)0, (void *)0);
 	}
 	else {
 	    defaultacl = identifier = 
@@ -289,7 +290,7 @@ char **newpartition;
 		p = rights;
 		while (*p && !isspace(*p)) p++;
 		if (*p) *p++ = '\0';
-		acl_set(&acl, identifier, acl_strtomask(rights),
+		acl_set(&acl, identifier, ACL_MODE_SET, acl_strtomask(rights),
 			(acl_canonproc_t *)0, (void *)0);
 		identifier = p;
 	    }
@@ -823,7 +824,8 @@ struct auth_state *auth_state;
 {
     int useridlen = strlen(userid);
     int r;
-    long access;
+    int access;
+    int mode = ACL_MODE_SET;
     int isusermbox = 0;
     struct mailbox mailbox;
     unsigned long offset, len;
@@ -884,7 +886,16 @@ struct auth_state *auth_state;
     /* Make change to ACL */
     newacl = xstrdup(acl);
     if (rights) {
-	if (acl_set(&newacl, identifier, acl_strtomask(rights),
+	if (*rights == '+') {
+	    rights++;
+	    mode = ACL_MODE_ADD;
+	}
+	else if (*rights == '-') {
+	    rights++;
+	    mode = ACL_MODE_REMOVE;
+	}
+	
+	if (acl_set(&newacl, identifier, mode, acl_strtomask(rights),
 		    isusermbox ? mboxlist_ensureOwnerRights : 0,
 		    (void *)userid)) {
 	    mailbox_close(&mailbox);
@@ -894,7 +905,7 @@ struct auth_state *auth_state;
 	}
     }
     else {
-	if (acl_delete(&newacl, identifier,
+	if (acl_remove(&newacl, identifier,
 		       isusermbox ? mboxlist_ensureOwnerRights : 0,
 		       (void *)userid)) {
 	    mailbox_close(&mailbox);
diff --git a/imap/reconstruct.c b/imap/reconstruct.c
index 6f5f0ab76..8bc6d94d1 100644
--- a/imap/reconstruct.c
+++ b/imap/reconstruct.c
@@ -644,7 +644,8 @@ char *mboxname;
     }
     newacl = xstrdup("");
     if (aclcanonproc) {
-	acl_set(&newacl, owner, ACL_ALL, (acl_canonproc_t *)0, (void *)0);
+	acl_set(&newacl, owner, ACL_MODE_SET, ACL_ALL,
+		(acl_canonproc_t *)0, (void *)0);
     }
     for (;;) {
 	identifier = acl;
@@ -655,7 +656,7 @@ char *mboxname;
 	if (!acl) break;
 	*acl++ = '\0';
 
-	acl_set(&newacl, identifier, acl_strtomask(rights),
+	acl_set(&newacl, identifier, ACL_MODE_SET, acl_strtomask(rights),
 		aclcanonproc, (void *)owner);
     }
 
diff --git a/lib/acl.c b/lib/acl.c
index d7382b5be..36030a508 100644
--- a/lib/acl.c
+++ b/lib/acl.c
@@ -34,7 +34,7 @@
 
 /* convert a string to an acl bit vector
  */
-long acl_strtomask(str)
+int acl_strtomask(str)
 const char *str;
 {
     long result = 0;
diff --git a/lib/acl.h b/lib/acl.h
index f3896c6d6..178426094 100644
--- a/lib/acl.h
+++ b/lib/acl.h
@@ -68,10 +68,14 @@
 #define ACL_USER9  0x40000L
 #define ACL_FULL   0xFFFFFL
 
+#define ACL_MODE_SET 0
+#define ACL_MODE_ADD 1
+#define ACL_MODE_REMOVE 2
+
 typedef int acl_canonproc_t P((void *rock, const char *identifier, int rights));
 
 /* convert a string to an acl bit vector */
-extern long acl_strtomask P((const char *str));
+extern int acl_strtomask P((const char *str));
 
 /*  acl_masktostr(acl, dst)
  * convert an acl bit vector to a string
@@ -86,22 +90,23 @@ extern char *acl_masktostr P((int acl, char *str));
  */
 extern int acl_myrights P((struct auth_state *auth_state, char *acl));
 
-/*  acl_set(acl, identifier, access, canonproc, canonrock)
- * Modify the ACL pointed to by 'acl' to make the rights granted to
- * 'identifier' the set specified in the mask 'access'.  The pointer
- * pointed to by 'acl' must have been obtained from malloc().
- *  returns -1 on error, 0 on success
- */
+/*  acl_set(acl, identifier, mode, access, canonproc, canonrock) Modify the
+ * ACL pointed to by 'acl' to modify the rights granted to
+ * 'identifier' as specified by 'mode' and the set specified in the
+ * mask 'access'.  'mode' is one of ACL_MODE_SET, ACL_MODE_ADD, or
+ * ACL_MODE_REMOVE.  The pointer pointed to by 'acl' must have been
+ * obtained from malloc().  returns -1 on error, 0 on success */
 
-extern int acl_set P((char **acl, const char *identifier, int access,
+extern int acl_set P((char **acl, const char *identifier,
+		      int mode, int access,
 		      acl_canonproc_t *canonproc, void *canonrock));
 
-/*  acl_delete(acl, identifier, canonproc, canonrock)
+/*  acl_remove(acl, identifier, canonproc, canonrock)
  * Remove any entry for 'identifier' in the ACL pointed to by 'acl'.
  * The pointer pointed to by 'acl' must have been obtained from malloc().
  *  returns -1 on error, 0 on success
  */
-extern int acl_delete P((char **acl, const char *identifier,
+extern int acl_remove P((char **acl, const char *identifier,
 			 acl_canonproc_t *canonproc, void *canonrock));
 
 #endif /* INCLUDED_ACL_H */
diff --git a/lib/acl_afs.c b/lib/acl_afs.c
index 37435dfca..ba5d3133c 100644
--- a/lib/acl_afs.c
+++ b/lib/acl_afs.c
@@ -91,9 +91,10 @@ char *acl;
  * 'identifier' the set specified in the mask 'access'.  The pointer
  * pointed to by 'acl' must have been obtained from malloc().
  */
-int acl_set(acl, identifier, access, canonproc, canonrock)
+int acl_set(acl, identifier, mode, access, canonproc, canonrock)
 char **acl;
 const char *identifier;
+int mode;
 int access;
 acl_canonproc_t *canonproc;
 void *canonrock;
@@ -101,6 +102,7 @@ void *canonrock;
     char *newidentifier = 0;
     char *newacl;
     char *thisid, *nextid;
+    int oldaccess = 0;
     char *rights;
 
     /* Convert 'identifier' into canonical form */
@@ -147,10 +149,27 @@ void *canonrock;
 	}
 	*nextid++ = '\0';
 
-	if (strcmp(identifier, thisid) == 0) break;
+	if (strcmp(identifier, thisid) == 0) {
+	    oldaccess = acl_strtomask(rights);
+	    break;
+	}
 	rights[-1] = '\t';
 	nextid[-1] = '\t';
     }
+
+    switch (mode) {
+    case ACL_MODE_SET:
+	break;
+
+    case ACL_MODE_ADD:
+	access |= oldaccess;
+	break;
+
+    case ACL_MODE_REMOVE:
+	access = oldaccess & ~access;
+	break;
+    }
+
     if (access == 0L) {
 	/* Remove any existing entry for 'identifier' */
 	strcpy(thisid, nextid);
@@ -177,11 +196,11 @@ void *canonrock;
  * Remove any entry for 'identifier' in the ACL pointed to by 'acl'.
  * The pointer pointed to by 'acl' must have been obtained from malloc().
  */
-acl_delete(acl, identifier, canonproc, canonrock)
+acl_remove(acl, identifier, canonproc, canonrock)
 char **acl;
 const char *identifier;
 acl_canonproc_t canonproc;
 void *canonrock;
 {
-    return acl_set(acl, identifier, 0, canonproc, canonrock);
+    return acl_set(acl, identifier, ACL_MODE_SET, 0, canonproc, canonrock);
 }

