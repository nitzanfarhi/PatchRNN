commit 40a7166044a6fce3dbcaa8b5c89845980c218c98
Author: Vivien Didelot <vivien.didelot@savoirfairelinux.com>
Date:   Wed Jul 15 10:07:07 2015 -0400

    net: dsa: mv88e6xxx: fix fid_mask when leaving bridge
    
    The mv88e6xxx_priv_state structure contains an fid_mask, where 1 means
    the FID is free to use, 0 means the FID is in use.
    
    This patch fixes the bit clear in mv88e6xxx_leave_bridge() when
    assigning a new FID to a port.
    
    Example scenario: I have 7 ports, port 5 is CPU, port 6 is unused (no
    PHY). After setting the ports 0, 1 and 2 in bridge br0, and ports 3 and
    4 in bridge br1, I have the following fid_mask: 0b111110010110 (0xf96).
    
    Indeed, br0 uses FID 0, and br1 uses FID 3.
    
    After setting nomaster for port 0, I get the wrong fid_mask: 0b10 (0x2).
    
    With this patch we correctly get 0b111110010100 (0xf94), meaning port 0
    uses FID 1, br0 uses FID 0, and br1 uses FID 3.
    
    Signed-off-by: Vivien Didelot <vivien.didelot@savoirfairelinux.com>
    Reviewed-by: Guenter Roeck <linux@roeck-us.net>
    Signed-off-by: David S. Miller <davem@davemloft.net>

diff --git a/drivers/net/dsa/mv88e6xxx.c b/drivers/net/dsa/mv88e6xxx.c
index fd8547c2b79d..561342466076 100644
--- a/drivers/net/dsa/mv88e6xxx.c
+++ b/drivers/net/dsa/mv88e6xxx.c
@@ -1163,7 +1163,7 @@ int mv88e6xxx_leave_bridge(struct dsa_switch *ds, int port, u32 br_port_mask)
 
 	newfid = __ffs(ps->fid_mask);
 	ps->fid[port] = newfid;
-	ps->fid_mask &= (1 << newfid);
+	ps->fid_mask &= ~(1 << newfid);
 	ps->bridge_mask[fid] &= ~(1 << port);
 	ps->bridge_mask[newfid] = 1 << port;
 

