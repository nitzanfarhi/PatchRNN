commit 8badb23e2264caab249dc2758f0bd0a43f423a96
Author: Kostya Shishkov <kostya.shishkov@gmail.com>
Date:   Sun Dec 27 08:21:40 2009 +0000

    Recognize 16-bit Interplay Video variant
    
    Originally committed as revision 20927 to svn://svn.ffmpeg.org/ffmpeg/trunk

diff --git a/libavcodec/interplayvideo.c b/libavcodec/interplayvideo.c
index b3a43bdd34..9f6b833bb1 100644
--- a/libavcodec/interplayvideo.c
+++ b/libavcodec/interplayvideo.c
@@ -67,6 +67,7 @@ typedef struct IpvideoContext {
     const unsigned char *buf;
     int size;
 
+    int is_16bpp;
     const unsigned char *stream_ptr;
     const unsigned char *stream_end;
     unsigned char *pixel_ptr;
@@ -620,7 +621,12 @@ static av_cold int ipvideo_decode_init(AVCodecContext *avctx)
         return -1;
     }
 
-    avctx->pix_fmt = PIX_FMT_PAL8;
+    s->is_16bpp = avctx->bits_per_coded_sample == 16;
+    avctx->pix_fmt = s->is_16bpp ? PIX_FMT_RGB555 : PIX_FMT_PAL8;
+    if (s->is_16bpp) {
+        av_log(avctx, AV_LOG_ERROR, "16-bit Interplay video is not supported yet.\n");
+        return -1;
+    }
     dsputil_init(&s->dsp, avctx);
 
     /* decoding map contains 4 bits of information per 8x8 block */
diff --git a/libavformat/ipmovie.c b/libavformat/ipmovie.c
index c9b506a3ef..bf62ee64ce 100644
--- a/libavformat/ipmovie.c
+++ b/libavformat/ipmovie.c
@@ -93,6 +93,7 @@ typedef struct IPMVEContext {
 
     uint64_t frame_pts_inc;
 
+    unsigned int video_bpp;
     unsigned int video_width;
     unsigned int video_height;
     int64_t video_pts;
@@ -375,6 +376,11 @@ static int process_ipmovie_chunk(IPMVEContext *s, ByteIOContext *pb,
             }
             s->video_width = AV_RL16(&scratch[0]) * 8;
             s->video_height = AV_RL16(&scratch[2]) * 8;
+            if (opcode_version < 2 || !AV_RL16(&scratch[6])) {
+                s->video_bpp = 8;
+            } else {
+                s->video_bpp = 16;
+            }
             debug_ipmovie("video resolution: %d x %d\n",
                 s->video_width, s->video_height);
             break;
@@ -565,6 +571,7 @@ static int ipmovie_read_header(AVFormatContext *s,
     st->codec->codec_tag = 0;  /* no fourcc */
     st->codec->width = ipmovie->video_width;
     st->codec->height = ipmovie->video_height;
+    st->codec->bits_per_coded_sample = ipmovie->video_bpp;
 
     /* palette considerations */
     st->codec->palctrl = &ipmovie->palette_control;

