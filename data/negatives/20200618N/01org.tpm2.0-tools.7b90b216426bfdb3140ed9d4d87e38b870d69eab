commit 7b90b216426bfdb3140ed9d4d87e38b870d69eab
Author: Haris Okanovic <haris.okanovic@ni.com>
Date:   Mon Dec 18 13:03:26 2017 -0600

    tpm2_util.c: Add tpm2_util_hexdump_file()
    
    A function to dump specified number of bytes from a FILE*
    via tpm2_util_hexdump().
    
    Add `const` to tpm2_util_hexdump()'s `data` param.
    
    Signed-off-by: Haris Okanovic <haris.okanovic@ni.com>

diff --git a/lib/tpm2_util.c b/lib/tpm2_util.c
index 359c9ab..704a39c 100644
--- a/lib/tpm2_util.c
+++ b/lib/tpm2_util.c
@@ -31,9 +31,9 @@
 #include <ctype.h>
 #include <errno.h>
 #include <stdbool.h>
-#include <stdio.h>
 
 #include "log.h"
+#include "files.h"
 #include "tpm2_alg_util.h"
 #include "tpm2_attr_util.h"
 #include "tpm2_tool.h"
@@ -132,7 +132,7 @@ int tpm2_util_hex_to_byte_structure(const char *inStr, UINT16 *byteLength,
     return 0;
 }
 
-void tpm2_util_hexdump(BYTE *data, size_t len, bool plain) {
+void tpm2_util_hexdump(const BYTE *data, size_t len, bool plain) {
 
     if (!output_enabled) {
         return;
@@ -170,6 +170,26 @@ void tpm2_util_hexdump(BYTE *data, size_t len, bool plain) {
     }
 }
 
+bool tpm2_util_hexdump_file(FILE *fd, size_t len, bool plain) {
+    BYTE* buff = (BYTE*)malloc(len);
+    if (!buff) {
+        LOG_ERR("malloc() failed");
+        return false;
+    }
+
+    bool res = files_read_bytes(fd, buff, len);
+    if (!res) {
+        LOG_ERR("Failed to read file");
+        free(buff);
+        return false;
+    }
+
+    tpm2_util_hexdump(buff, len, plain);
+
+    free(buff);
+    return true;
+}
+
 /* TODO OPTIMIZE ME */
 UINT16 tpm2_util_copy_tpm2b(TPM2B *dest, TPM2B *src) {
     int i;
diff --git a/lib/tpm2_util.h b/lib/tpm2_util.h
index 44986f8..a8a1a9a 100644
--- a/lib/tpm2_util.h
+++ b/lib/tpm2_util.h
@@ -33,6 +33,7 @@
 
 #include <stdbool.h>
 #include <stdint.h>
+#include <stdio.h>
 
 #include <sapi/tpm20.h>
 
@@ -159,7 +160,24 @@ bool tpm2_util_string_to_uint16(const char *str, uint16_t *value);
  *  true for a plain hex string false for an xxd compatable
  *  dump.
  */
-void tpm2_util_hexdump(BYTE *data, size_t len, bool plain);
+void tpm2_util_hexdump(const BYTE *data, size_t len, bool plain);
+
+/**
+ * Prints an xxd compatible hexdump to stdout if output is enabled,
+ * ie no -Q option.
+ *
+ * @param fd
+ *  A readable open file.
+ * @param len
+ *  The length of the data to read and print.
+ * @param plain
+ *  true for a plain hex string false for an xxd compatable
+ *  dump.
+ * @return
+ *  true if len bytes were successfully read and printed,
+ *  false otherwise
+ */
+bool tpm2_util_hexdump_file(FILE *fd, size_t len, bool plain);
 
 /**
  * Prints a TPM2B as a hex dump.

