commit 96e253cc5757eeeae544755e6dbbc9922884311a
Author: Zack Middleton <zack@cloemail.com>
Date:   Wed Jun 21 21:04:53 2017 -0500

    All: Add some missing newlines to printfs

diff --git a/MP/code/cgame/cg_weapons.c b/MP/code/cgame/cg_weapons.c
index af8930b..5a2cae6 100644
--- a/MP/code/cgame/cg_weapons.c
+++ b/MP/code/cgame/cg_weapons.c
@@ -1040,7 +1040,7 @@ static qboolean CG_ParseWeaponConfig( const char *filename, weaponInfo_t *wi ) {
 	}
 
 	if ( i != MAX_WP_ANIMATIONS ) {
-		CG_Printf( "Error parsing weapon animation file: %s", filename );
+		CG_Printf( "Error parsing weapon animation file: %s\n", filename );
 		return qfalse;
 	}
 
@@ -1112,7 +1112,7 @@ void CG_RegisterWeapon( int weaponNum ) {
 		//	ie. every weapon and it's associated effects/parts/sounds etc. are loaded for every level.
 		// This was turned off when we started (the "only load what the level calls for" thing) because when
 		// DM does a "give all" and fires, he doesn't want to wait for everything to load.  So perhaps a "cacheallweaps" or something.
-//		CG_Printf( "Couldn't register weapon model %i (unable to load view model)", weaponNum );
+//		CG_Printf( "Couldn't register weapon model %i (unable to load view model)\n", weaponNum );
 //		CG_Error( "Couldn't register weapon model %i (unable to load view model)", weaponNum );
 		return;
 	}
diff --git a/MP/code/game/ai_cast_script_actions.c b/MP/code/game/ai_cast_script_actions.c
index 39f6f4e..edbf849 100644
--- a/MP/code/game/ai_cast_script_actions.c
+++ b/MP/code/game/ai_cast_script_actions.c
@@ -887,7 +887,7 @@ qboolean AICast_ScriptAction_SetAmmo( cast_state_t *cs, char *params ) {
 //----(SA)	end
 
 	} else {
-//		G_Printf( "--SCRIPTER WARNING-- AI Scripting: setammo: unknown ammo \"%s\"", params );
+//		G_Printf( "--SCRIPTER WARNING-- AI Scripting: setammo: unknown ammo \"%s\"\n", params );
 		return qfalse;  // (SA) temp as scripts transition to new names
 	}
 
@@ -949,7 +949,7 @@ qboolean AICast_ScriptAction_SetClip( cast_state_t *cs, char *params ) {
 		}
 
 	} else {
-//		G_Printf( "--SCRIPTER WARNING-- AI Scripting: setclip: unknown weapon \"%s\"", params );
+//		G_Printf( "--SCRIPTER WARNING-- AI Scripting: setclip: unknown weapon \"%s\"\n", params );
 		return qfalse;  // (SA) temp as scripts transition to new names
 	}
 
@@ -996,7 +996,7 @@ qboolean AICast_ScriptAction_SelectWeapon( cast_state_t *cs, char *params ) {
 			g_entities[cs->entityNum].client->ps.weaponTime = 500;  // (SA) HACK: FIXME: TODO: delay to catch initial weapon reload
 		}
 	} else {
-//		G_Printf( "--SCRIPTER WARNING-- AI Scripting: selectweapon: unknown weapon \"%s\"", params );
+//		G_Printf( "--SCRIPTER WARNING-- AI Scripting: selectweapon: unknown weapon \"%s\"\n", params );
 		return qfalse;	// (SA) temp as scripts transition to new names
 //		G_Error( "AI Scripting: selectweapon: unknown weapon \"%s\"", params );
 	}
diff --git a/SP/code/cgame/cg_weapons.c b/SP/code/cgame/cg_weapons.c
index e458413..a8742ca 100644
--- a/SP/code/cgame/cg_weapons.c
+++ b/SP/code/cgame/cg_weapons.c
@@ -983,7 +983,7 @@ static qboolean CG_ParseWeaponConfig( const char *filename, weaponInfo_t *wi ) {
 	}
 
 	if ( i != MAX_WP_ANIMATIONS ) {
-		CG_Printf( "Error parsing weapon animation file: %s", filename );
+		CG_Printf( "Error parsing weapon animation file: %s\n", filename );
 		return qfalse;
 	}
 
@@ -1062,7 +1062,7 @@ void CG_RegisterWeapon( int weaponNum ) {
 		//	ie. every weapon and it's associated effects/parts/sounds etc. are loaded for every level.
 		// This was turned off when we started (the "only load what the level calls for" thing) because when
 		// DM does a "give all" and fires, he doesn't want to wait for everything to load.  So perhaps a "cacheallweaps" or something.
-//		CG_Printf( "Couldn't register weapon model %i (unable to load view model)", weaponNum );
+//		CG_Printf( "Couldn't register weapon model %i (unable to load view model)\n", weaponNum );
 // RF, I need to be able to run the game, I dont have the silencer weapon (19)
 #ifndef _DEBUG
 //		CG_Error( "Couldn't register weapon model %i (unable to load view model)", weaponNum );
diff --git a/SP/code/game/ai_cast_script_actions.c b/SP/code/game/ai_cast_script_actions.c
index 5f62a94..8abdc4d 100644
--- a/SP/code/game/ai_cast_script_actions.c
+++ b/SP/code/game/ai_cast_script_actions.c
@@ -1065,7 +1065,7 @@ qboolean AICast_ScriptAction_SetAmmo( cast_state_t *cs, char *params ) {
 
 	} else {
 		if ( g_cheats.integer ) {
-			G_Printf( "--SCRIPTER WARNING-- AI Scripting: setammo: unknown ammo \"%s\"", params );
+			G_Printf( "--SCRIPTER WARNING-- AI Scripting: setammo: unknown ammo \"%s\"\n", params );
 		}
 		return qfalse;  // (SA) temp as scripts transition to new names
 	}
@@ -1128,7 +1128,7 @@ qboolean AICast_ScriptAction_SetClip( cast_state_t *cs, char *params ) {
 		}
 
 	} else {
-//		G_Printf( "--SCRIPTER WARNING-- AI Scripting: setclip: unknown weapon \"%s\"", params );
+//		G_Printf( "--SCRIPTER WARNING-- AI Scripting: setclip: unknown weapon \"%s\"\n", params );
 		return qfalse;  // (SA) temp as scripts transition to new names
 	}
 
@@ -1214,7 +1214,7 @@ qboolean AICast_ScriptAction_SelectWeapon( cast_state_t *cs, char *params ) {
 			g_entities[cs->entityNum].client->ps.weaponTime = 750;  // (SA) HACK: FIXME: TODO: delay to catch initial weapon reload
 		}
 	} else {
-//		G_Printf( "--SCRIPTER WARNING-- AI Scripting: selectweapon: unknown weapon \"%s\"", params );
+//		G_Printf( "--SCRIPTER WARNING-- AI Scripting: selectweapon: unknown weapon \"%s\"\n", params );
 //		return qfalse;	// (SA) temp as scripts transition to new names
 		G_Error( "AI Scripting: selectweapon: unknown weapon \"%s\"", params );
 	}

