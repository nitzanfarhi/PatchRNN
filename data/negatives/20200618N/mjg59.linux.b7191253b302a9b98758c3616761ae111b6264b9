commit b7191253b302a9b98758c3616761ae111b6264b9
Author: Nicholas Bellinger <nab@linux-iscsi.org>
Date:   Tue Oct 1 16:46:37 2013 -0700

    target: Reset data_length for COMPARE_AND_WRITE to NoLB * block_size
    
    This patch resets se_cmd->data_length for COMPARE_AND_WRITE emulation
    within sbc_compare_and_write() to NoLB * block_size in order to address
    a bug with FILEIO backends where a I/O failure will occur when data_length
    does not match the I/O size being actually dispatched for the individual
    per block READs + WRITEs.
    
    This is done late enough in sbc_compare_and_write() after the memory
    allocations have occured in transport_generic_new_cmd() to not cause
    any unwanted side-effects.
    
    Reported-by: Thomas Glanzmann <thomas@glanzmann.de>
    Tested-by: Thomas Glanzmann <thomas@glanzmann.de>
    Signed-off-by: Nicholas Bellinger <nab@linux-iscsi.org>

diff --git a/drivers/target/target_core_sbc.c b/drivers/target/target_core_sbc.c
index 6c17295e8d7c..a9dca116011e 100644
--- a/drivers/target/target_core_sbc.c
+++ b/drivers/target/target_core_sbc.c
@@ -508,6 +508,12 @@ sbc_compare_and_write(struct se_cmd *cmd)
 		cmd->transport_complete_callback = NULL;
 		return TCM_LOGICAL_UNIT_COMMUNICATION_FAILURE;
 	}
+	/*
+	 * Reset cmd->data_length to individual block_size in order to not
+	 * confuse backend drivers that depend on this value matching the
+	 * size of the I/O being submitted.
+	 */
+	cmd->data_length = cmd->t_task_nolb * dev->dev_attrib.block_size;
 
 	ret = cmd->execute_rw(cmd, cmd->t_bidi_data_sg, cmd->t_bidi_data_nents,
 			      DMA_FROM_DEVICE);

