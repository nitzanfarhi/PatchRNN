commit 87bf7a89b16cf5f5cbe94e82e842899560b14e49
Author: Marshall Garey <marshall@schedmd.com>
Date:   Thu Oct 12 14:16:41 2017 -0600

    Check for negative TRES count
    
    Bug 4172

diff --git a/src/common/state_control.c b/src/common/state_control.c
index f1833ed4a8..28a47e652b 100644
--- a/src/common/state_control.c
+++ b/src/common/state_control.c
@@ -176,6 +176,8 @@ extern int parse_resv_nodecnt(resv_desc_msg_t *resv_msg_ptr, char *val,
 {
 	char *endptr = NULL, *node_cnt, *tok, *ptrptr = NULL;
 	int node_inx = 0;
+	long node_cnt_l;
+	int ret_code = SLURM_SUCCESS;
 
 	/*
 	 * NodeCnt and TRES=node= might appear within the same request,
@@ -190,8 +192,19 @@ extern int parse_resv_nodecnt(resv_desc_msg_t *resv_msg_ptr, char *val,
 		xrealloc(resv_msg_ptr->node_cnt,
 			 sizeof(uint32_t) * (node_inx + 2));
 		*free_tres_nodecnt = 1;
-		resv_msg_ptr->node_cnt[node_inx] =
-			strtol(tok, &endptr, 10);
+		/*
+		 * Use temporary variable to check for negative values since
+		 * resv_msg_ptr->node_cnt is uint32_t.
+		 */
+		node_cnt_l = strtol(tok, &endptr, 10);
+		if (node_cnt_l < 0) {
+			ret_code = SLURM_ERROR;
+			info("errno=ERANGE: %d=%d", errno, ERANGE);
+			break;
+		} else {
+			resv_msg_ptr->node_cnt[node_inx] = node_cnt_l;
+		}
+
 		if ((endptr != NULL) &&
 		    ((endptr[0] == 'k') ||
 		     (endptr[0] == 'K'))) {
@@ -203,26 +216,22 @@ extern int parse_resv_nodecnt(resv_desc_msg_t *resv_msg_ptr, char *val,
 		} else if ((endptr == NULL) ||
 			   (endptr[0] != '\0') ||
 			   (tok[0] == '\0')) {
-			if (err_msg) {
-				xfree(*err_msg);
-				if (from_tres)
-					xstrfmtcat(*err_msg,
-						   "Invalid TRES node count %s",
-						   val);
-				else
-					xstrfmtcat(*err_msg,
-						   "Invalid node count %s",
-						   val);
-			}
-			xfree(node_cnt);
-			return SLURM_ERROR;
+			ret_code = SLURM_ERROR;
+			break;
 		}
 		node_inx++;
 		tok = strtok_r(NULL, ",", &ptrptr);
 	}
 
+	if (ret_code != SLURM_SUCCESS && err_msg) {
+		xfree(*err_msg);
+		if (from_tres)
+			xstrfmtcat(*err_msg, "Invalid TRES node count %s", val);
+		else
+			xstrfmtcat(*err_msg, "Invalid node count %s", val);
+	}
 	xfree(node_cnt);
-	return SLURM_SUCCESS;
+	return ret_code;
 }
 
 extern int state_control_parse_resv_tres(char *val,

