commit ea5c83ce4eb9cd57f1c7a03b450ae0691bcb4cba
Author: pancake <pancake@nopcode.org>
Date:   Tue Nov 8 15:09:52 2016 +0100

    Fix a bunch of malloc(0)

diff --git a/libr/bin/format/dex/dex.c b/libr/bin/format/dex/dex.c
index d121306b2..4efc83a98 100644
--- a/libr/bin/format/dex/dex.c
+++ b/libr/bin/format/dex/dex.c
@@ -217,7 +217,8 @@ RBinDexObj *r_bin_dex_new_buf(RBuffer *buf) {
 		protos_size = bin->size - dexhdr->prototypes_offset;
 	}
 	if (protos_size < 0) {
-		protos_size = 0;
+		dexhdr->prototypes_size = 0;
+		return bin;
 	}
 	dexhdr->prototypes_size = protos_size / sizeof (struct dex_proto_t);
 	bin->protos = (struct dex_proto_t *) calloc (protos_size, 1);
diff --git a/libr/bin/format/elf/elf.c b/libr/bin/format/elf/elf.c
index 64136d311..0705a10af 100644
--- a/libr/bin/format/elf/elf.c
+++ b/libr/bin/format/elf/elf.c
@@ -690,6 +690,9 @@ static Sdb *store_versioninfo_gnu_verdef(ELFOBJ *bin, Elf_(Shdr) *shdr, int sz)
 		return false;
 	}
 	link_shdr = &bin->shdr[shdr->sh_link];
+	if (shdr->sh_size < 1) {
+		return false;
+	}
 	Elf_(Verdef) *defs = calloc (shdr->sh_size, sizeof (char));
 	if (bin->shstrtab && shdr->sh_name < bin->shstrtab_size) {
 		section_name = &bin->shstrtab[shdr->sh_name];
diff --git a/libr/bin/p/bin_dex.c b/libr/bin/p/bin_dex.c
index 4debfc55e..ded14b667 100644
--- a/libr/bin/p/bin_dex.c
+++ b/libr/bin/p/bin_dex.c
@@ -210,7 +210,7 @@ static char *dex_method_signature(RBinDexObj *bin, int method_idx) {
 	}
 	bufptr = bin->b->buf;
 	list_size = r_read_le32 (bufptr + params_off); // size of the list, in entries
-	signature = calloc (0, sizeof(char));
+	signature = calloc (0, sizeof (char));
 	if (!signature) {
 		return NULL;
 	}
diff --git a/libr/crypto/crypto.c b/libr/crypto/crypto.c
index 202470203..a899a7056 100644
--- a/libr/crypto/crypto.c
+++ b/libr/crypto/crypto.c
@@ -147,8 +147,13 @@ R_API int r_crypto_append(RCrypto *cry, const ut8 *buf, int len) {
 }
 
 R_API ut8 *r_crypto_get_output(RCrypto *cry, int *size) {
+	if (cry->output_size < 1) {
+		return NULL;
+	}
 	ut8 *buf = calloc (1, cry->output_size);
-	if (!buf) return NULL;
+	if (!buf) {
+		return NULL;
+	}
 	if (size) {
 		*size = cry->output_len;
 		memcpy (buf, cry->output, *size);
diff --git a/libr/util/debruijn.c b/libr/util/debruijn.c
index 5bbdb16e9..7e8ec2d21 100644
--- a/libr/util/debruijn.c
+++ b/libr/util/debruijn.c
@@ -44,10 +44,15 @@ static void de_bruijn_seq(int prenecklace_len_t, int lyndon_prefix_len_p, int or
 // The returned string is malloced, and it is the responsibility of the caller
 // to free the memory.
 static char* de_bruijn(const char* charset, int order, int maxlen) {
+	if (!charset) {
+		return NULL;
+	}
 	int size = strlen (charset);
-	int* prenecklace_a = calloc (size * order, sizeof(int));
-	if (!prenecklace_a) return NULL;
-	char* sequence = calloc (maxlen + 1, sizeof(char));
+	int* prenecklace_a = calloc (size * order, sizeof (int));
+	if (!prenecklace_a) {
+		return NULL;
+	}
+	char* sequence = calloc (maxlen + 1, sizeof (char));
 	if (!sequence) {
 		free (prenecklace_a);
 		return NULL;
diff --git a/shlr/gdb/src/packet.c b/shlr/gdb/src/packet.c
index 70e7506cc..4745f4d25 100644
--- a/shlr/gdb/src/packet.c
+++ b/shlr/gdb/src/packet.c
@@ -19,22 +19,26 @@ struct parse_ctx {
 	int chksum_nibble;
 };
 
-static int append(libgdbr_t *g, char ch) {
+static bool append(libgdbr_t *g, const char ch) {
 	char *ptr;
 
 	if (g->data_len == g->data_max) {
-		ptr = realloc (g->data, g->data_max * 2);
+		int newsize = g->data_max * 2;
+		if (newsize < 1) {
+			return false;
+		}
+		ptr = realloc (g->data, newsize);
 		if (!ptr) {
 			eprintf ("%s: Failed to reallocate buffer\n",
 				 __func__);
-			return -1;
+			return false;
 		}
 		g->data = ptr;
-		g->data_max *= 2;
+		g->data_max = newsize;
 	}
 
 	g->data[g->data_len++] = ch;
-	return 0;
+	return true;
 }
 
 static int unpack(libgdbr_t *g, struct parse_ctx *ctx, int len) {
@@ -67,7 +71,7 @@ static int unpack(libgdbr_t *g, struct parse_ctx *ctx, int len) {
 		ctx->sum += cur;
 
 		if (ctx->flags & ESC) {
-			if (append (g, cur ^ 0x20) < 0) {
+			if (!append (g, cur ^ 0x20)) {
 				return -1;
 			}
 
@@ -83,7 +87,7 @@ static int unpack(libgdbr_t *g, struct parse_ctx *ctx, int len) {
 			}
 
 			for (j = cur - 29; j > 0; j--) {
-				if (append (g, ctx->last) < 0) {
+				if (!append (g, ctx->last)) {
 					return -1;
 				}
 			}
@@ -131,7 +135,7 @@ static int unpack(libgdbr_t *g, struct parse_ctx *ctx, int len) {
 			}
 			/* Fall-through */
 		default:
-			if (append (g, cur) < 0) {
+			if (!append (g, cur)) {
 				return -1;
 			}
 			ctx->last = cur;
diff --git a/shlr/java/class.c b/shlr/java/class.c
index 5ff99f731..9af0f0128 100644
--- a/shlr/java/class.c
+++ b/shlr/java/class.c
@@ -8145,11 +8145,16 @@ R_API ConstJavaValue * U(r_bin_java_resolve_to_const_value)(RBinJavaObj *BIN_OBJ
 		}
 		result->type = "str";
 		result->value._str = R_NEW0 (struct  java_const_value_str_t);
-		result->value._str->str = malloc (length);
 		result->value._str->len = length;
-		memcpy (result->value._str->str, string_str, length);
-		if (string_str != empty)
+		if (length > 0) {
+			result->value._str->str = malloc (length);
+			memcpy (result->value._str->str, string_str, length);
+		} else {
+			result->value._str->str = strdup ("");
+		}
+		if (string_str != empty) {
 			free (string_str);
+		}
 	} else if (strcmp (cp_name, "Utf8") == 0) {
 		result->type = "str";
 		result->value._str = R_NEW0 (struct java_const_value_str_t);

