commit 071578cb80116ff674c5762b565a7ce013e83dc8
Author: pancake <pancake@nopcode.org>
Date:   Mon Sep 8 01:33:50 2014 +0200

    Fix 'pxa' disco-mode problems

diff --git a/libr/cons/pal.c b/libr/cons/pal.c
index e3207c85d..2e4228b49 100644
--- a/libr/cons/pal.c
+++ b/libr/cons/pal.c
@@ -40,6 +40,14 @@ R_API void r_cons_pal_init(const char *foo) {
 	cons->pal.ret = Color_RED;
 	cons->pal.swi = Color_MAGENTA;
 	cons->pal.trap = Color_BRED;
+
+	cons->pal.list[0] = strdup (Color_RED);
+	cons->pal.list[1] = strdup (Color_YELLOW);
+	cons->pal.list[2] = strdup (Color_WHITE);
+	cons->pal.list[3] = strdup (Color_CYAN);
+	cons->pal.list[4] = strdup (Color_MAGENTA);
+	cons->pal.list[5] = strdup (Color_GRAY);
+	cons->pal.list[6] = strdup (Color_BLUE);
 }
 
 struct {
@@ -80,6 +88,10 @@ R_API void r_cons_pal_random() {
 		sprintf (val, "rgb:%x%x%x", r, g, b);
 		r_cons_pal_set (k, val);
 	}
+RCons *cons = r_cons_singleton ();
+	for (i=0; i<R_CONS_PALETTE_LIST_SIZE; i++) {
+		cons->pal.list[i] = r_cons_color_random (0);
+	}
 }
 
 R_API char *r_cons_pal_parse(const char *str) {
diff --git a/libr/core/cmd_flag.c b/libr/core/cmd_flag.c
index 7a4ad965f..a83388a92 100644
--- a/libr/core/cmd_flag.c
+++ b/libr/core/cmd_flag.c
@@ -393,6 +393,7 @@ static int cmd_flag(void *data, const char *input) {
 		"fa"," [name] [alias]","alias a flag to evaluate an expression",
 		"fb"," [addr]","set base address for new flags",
 		"fb"," [addr] [flag*]","move flags matching 'flag' to relative addr",
+		"fc"," [name] [color]","set color for given flag",
 		"fC"," [name] [cmt]","set comment for given flag",
 		"fd"," addr","return flag+delta",
 		"fj","","list flags in JSON format",
diff --git a/libr/core/cmd_print.c b/libr/core/cmd_print.c
index 1cbf0d9c5..66250ef61 100644
--- a/libr/core/cmd_print.c
+++ b/libr/core/cmd_print.c
@@ -121,6 +121,7 @@ static void annotated_hexdump(RCore *core, const char *str, int len) {
 	int nb_cols = r_config_get_i (core->config, "hex.cols");
 	const ut8 *buf = core->block;
 	ut64 addr = core->offset;
+	int color_idx = 0;
 	char *bytes, *chars;
 	char *ebytes, *echars; //They'll walk over the vars above
 	ut64 fend = UT64_MAX;
@@ -128,7 +129,14 @@ static void annotated_hexdump(RCore *core, const char *str, int len) {
 	int i, j, low, max, here, rows;
 	boolt marks = R_FALSE, setcolor = R_TRUE, hascolor = R_FALSE;
 	ut8 ch;
-	const char* colors[] = Colors_PLAIN;
+	const char **colors = &core->cons->pal.list;
+#if 0
+	const char *colors[] = {
+		Color_WHITE, /*Color_GREEN,*/ Color_YELLOW, Color_RED,
+		Color_CYAN, Color_MAGENTA, Color_GRAY, Color_BLUE
+	};
+#endif
+//	const char* colors[] = Colors_PLAIN;
 	const int col = core->print->col;
 	RFlagItem *flag, *current_flag = NULL;
 	char** note;
@@ -204,6 +212,8 @@ static void annotated_hexdump(RCore *core, const char *str, int len) {
 				fend = addr + j + flag->size;
 				note[j] = r_str_prefix (strdup(flag->name), "/");
 				marks = R_TRUE;
+				color_idx++;
+				color_idx %= R_CONS_PALETTE_LIST_SIZE;
 				current_flag = flag;
 			} else {
 				// Are we past the current flag?
@@ -224,9 +234,8 @@ static void annotated_hexdump(RCore *core, const char *str, int len) {
 						append (echars, ansicolor);
 						free (ansicolor);
 					} else { // Use "random" colours
-						int idx = rand() % (sizeof(colors)/sizeof(char*));
-						append (ebytes, colors[idx]);
-						append (echars, colors[idx]);
+						append (ebytes, colors[color_idx]);
+						append (echars, colors[color_idx]);
 					}
 				} else {
 					append (ebytes, Color_INVERT);
diff --git a/libr/core/vmenus.c b/libr/core/vmenus.c
index 84e252bdf..c30303a82 100644
--- a/libr/core/vmenus.c
+++ b/libr/core/vmenus.c
@@ -1250,23 +1250,44 @@ R_API void r_core_visual_define (RCore *core) {
 		off += cur;
 		p += cur;
 	}
-	r_cons_printf ("Define current block as:\n"
-		" b  - set as byte\n"
-		" B  - set as short word (2 bytes)\n"
-		" c  - set as code\n"
-		" d  - set as data\n"
-		" e  - end of function\n"
-		" f  - analyze function\n"
-		" F  - format\n"
-		" q  - quit/cancel operation\n"
-		" r  - rename function\n"
-		" s  - set string\n"
-		" S  - set strings in current block\n"
-		" u  - undefine metadata here\n"
-		" w  - set as 32bit word\n"
-		" W  - set as 64bit word\n"
-		" q  - quit this menu\n"
-	);
+	{
+		int h;
+		(void)r_cons_get_size (&h);
+		h-=18;
+		if (h<0) {
+			r_cons_clear00 ();
+		} else {
+			r_cons_gotoxy (0, h);
+		}
+	}
+	const char *lines[] = { ""
+		,"[Vd]- Define current block as:"
+		," $    define flag size"
+		," b    set as byte"
+		," B    set as short word (2 bytes)"
+		," c    set as code"
+		," C    define flag color (fc)"
+		," d    set as data"
+		," e    end of function"
+		," f    analyze function"
+		," F    format"
+		," q    quit/cancel operation"
+		," r    rename function"
+		," s    set string"
+		," S    set strings in current block"
+		," u    undefine metadata here"
+		," w    set as 32bit word"
+		," W    set as 64bit word"
+		," q    quit this menu"
+		, NULL};
+	{
+		int i;
+		for (i=0;lines[i];i++) {
+			r_cons_fill_line ();
+			r_cons_printf ("\r%s\n", lines[i]);
+		}
+	}
+
 	r_cons_flush ();
 
 	// get ESC+char, return 'hjkl' char
@@ -1296,6 +1317,45 @@ R_API void r_core_visual_define (RCore *core) {
 		r_meta_cleanup (core->anal, off, off+1);
 		r_meta_add (core->anal, R_META_TYPE_DATA, off, off+1, "");
 		break;
+	case 'C':
+		{
+			RFlagItem *item = r_flag_get_i (core->flags, off);
+			if (item) {
+				char cmd[128];
+				r_cons_show_cursor (R_TRUE);
+				r_cons_flush ();
+				r_line_set_prompt ("color: ");
+				if (r_cons_fgets (cmd, sizeof (cmd)-1, 0, NULL) > 0) {
+					r_flag_color (core->flags, item, cmd);
+					r_cons_set_raw (1);
+					r_cons_show_cursor (R_FALSE);
+				}
+			} else {
+				eprintf ("Sorry. No flag here\n");
+				r_cons_any_key ();
+			}
+		}
+		break;
+	case '$':
+		{
+			RFlagItem *item = r_flag_get_i (core->flags, off);
+			if (item) {
+				char cmd[128];
+				r_cons_printf ("Current flag size is: %d\n", item->size);
+				r_cons_show_cursor (R_TRUE);
+				r_cons_flush ();
+				r_line_set_prompt ("new size: ");
+				if (r_cons_fgets (cmd, sizeof (cmd)-1, 0, NULL) > 0) {
+					item->size = r_num_math (core->num, cmd);
+					r_cons_set_raw (1);
+					r_cons_show_cursor (R_FALSE);
+				}
+			} else {
+				eprintf ("Sorry. No flag here\n");
+				r_cons_any_key ();
+			}
+		}
+		break;
 	case 'w':
 		{
 		int asmbits = 32; //r_config_get_i (core->config, "asm.bits");
diff --git a/libr/include/r_cons.h b/libr/include/r_cons.h
index 07e362cec..7c6125ab7 100644
--- a/libr/include/r_cons.h
+++ b/libr/include/r_cons.h
@@ -92,6 +92,8 @@ typedef struct r_cons_palette_t {
 	char *ret;
 	char *swi;
 	char *trap;
+#define R_CONS_PALETTE_LIST_SIZE 8
+	char *list[R_CONS_PALETTE_LIST_SIZE];
 } RConsPalette;
 
 typedef void (*RConsEvent)(void *);

