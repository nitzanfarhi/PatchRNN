commit d626b9f59e1c5bee634be7c06eb14aeb91a188c3
Author: anish <none@none>
Date:   Tue Jul 25 10:48:24 2006 -0700

    6445492 ddi_intr_add_handler() failed when an ISR is already present for a given 'inum'
    6451382 interrupts allocation succeeded for negative inum
    6451427 ddi_intr_alloc():Validating interrupt type is not correct

diff --git a/usr/src/uts/common/os/ddi_intr.c b/usr/src/uts/common/os/ddi_intr.c
index adf029828c..252f95a7a8 100644
--- a/usr/src/uts/common/os/ddi_intr.c
+++ b/usr/src/uts/common/os/ddi_intr.c
@@ -101,13 +101,11 @@ ddi_intr_get_nintrs(dev_info_t *dip, int type, int *nintrsp)
 	DDI_INTR_APIDBG((CE_CONT, "ddi_intr_get_nintrs: dip %p, type: %d\n",
 	    (void *)dip, type));
 
-	if ((dip == NULL) || (type & ~(DDI_INTR_SUP_TYPES))) {
-		*nintrsp = 0;
-		return (DDI_EINVAL);
-	}
-
-	if (!(i_ddi_intr_get_supported_types(dip) & type)) {
+	if ((dip == NULL) || !DDI_INTR_TYPE_FLAG_VALID(type) ||
+	    !(i_ddi_intr_get_supported_types(dip) & type)) {
 		*nintrsp = 0;
+		DDI_INTR_APIDBG((CE_CONT, "ddi_intr_get_nintrs: Invalid "
+		    "input args\n"));
 		return (DDI_EINVAL);
 	}
 
@@ -146,13 +144,11 @@ ddi_intr_get_navail(dev_info_t *dip, int type, int *navailp)
 	DDI_INTR_APIDBG((CE_CONT, "ddi_intr_get_navail: dip %p, type: %d\n",
 	    (void *)dip, type));
 
-	if ((dip == NULL) || (type & ~(DDI_INTR_SUP_TYPES))) {
-		*navailp = 0;
-		return (DDI_EINVAL);
-	}
-
-	if (!(i_ddi_intr_get_supported_types(dip) & type)) {
+	if ((dip == NULL) || !DDI_INTR_TYPE_FLAG_VALID(type) ||
+	    !(i_ddi_intr_get_supported_types(dip) & type)) {
 		*navailp = 0;
+		DDI_INTR_APIDBG((CE_CONT, "ddi_intr_get_navail: Invalid "
+		    "input args\n"));
 		return (DDI_EINVAL);
 	}
 
@@ -187,19 +183,30 @@ ddi_intr_alloc(dev_info_t *dip, ddi_intr_handle_t *h_array, int type, int inum,
 	    (void *)dip, type, inum, count, behavior));
 
 	/* Validate parameters */
-	if (dip == NULL || h_array == NULL || count < 1 ||
+	if (dip == NULL || h_array == NULL || count < 1 || inum < 0 ||
 	    !DDI_INTR_BEHAVIOR_FLAG_VALID(behavior)) {
 		DDI_INTR_APIDBG((CE_CONT, "ddi_intr_alloc: Invalid args\n"));
 		return (DDI_EINVAL);
 	}
 
 	/* Validate interrupt type */
-	if (!(i_ddi_intr_get_supported_types(dip) & type)) {
+	if (!DDI_INTR_TYPE_FLAG_VALID(type) ||
+	    !(i_ddi_intr_get_supported_types(dip) & type)) {
 		DDI_INTR_APIDBG((CE_CONT, "ddi_intr_alloc: type %x not "
 		    "supported\n", type));
 		return (DDI_EINVAL);
 	}
 
+	/*
+	 * Check if the 'inum' was previously allocated or not? Fail, if so.
+	 */
+	if ((type == DDI_INTR_TYPE_FIXED) &&
+	    (i_ddi_get_intr_handle(dip, inum) != NULL)) {
+		DDI_INTR_APIDBG((CE_CONT, "ddi_intr_alloc: inum %d is already "
+		    "in use, can not allocate again!!\n", inum));
+		return (DDI_EINVAL);
+	}
+
 	/* First, get how many interrupts the device supports */
 	if (!(nintrs = i_ddi_intr_get_supported_nintrs(dip, type))) {
 		if (ddi_intr_get_nintrs(dip, type, &nintrs) != DDI_SUCCESS) {
@@ -651,8 +658,11 @@ ddi_intr_dup_handler(ddi_intr_handle_t org, int dup_inum,
 	    (void *)hdlp));
 
 	/* Do some input argument checking ("dup" handle is not allocated) */
-	if ((hdlp == NULL) || (*dup != NULL))
+	if ((hdlp == NULL) || (*dup != NULL) || (dup_inum < 0)) {
+		DDI_INTR_APIDBG((CE_CONT, "ddi_intr_dup_handler: Invalid "
+		    "input args\n"));
 		return (DDI_EINVAL);
+	}
 
 	rw_enter(&hdlp->ih_rwlock, RW_READER);
 
diff --git a/usr/src/uts/common/sys/ddi_intr_impl.h b/usr/src/uts/common/sys/ddi_intr_impl.h
index 515563b5ed..8fb35a4018 100644
--- a/usr/src/uts/common/sys/ddi_intr_impl.h
+++ b/usr/src/uts/common/sys/ddi_intr_impl.h
@@ -121,12 +121,14 @@ typedef struct ddi_intr_handle_impl {
 #define	DDI_INTR_IS_MSI_OR_MSIX(type) \
 	((type) == DDI_INTR_TYPE_MSI || (type) == DDI_INTR_TYPE_MSIX)
 
-#define	DDI_INTR_SUP_TYPES	DDI_INTR_TYPE_FIXED|DDI_INTR_TYPE_MSI|\
-				DDI_INTR_TYPE_MSIX
-
 #define	DDI_INTR_BEHAVIOR_FLAG_VALID(f) \
 	    (((f) == DDI_INTR_ALLOC_NORMAL) || ((f) == DDI_INTR_ALLOC_STRICT))
 
+#define	DDI_INTR_TYPE_FLAG_VALID(t) \
+	    (((t) == DDI_INTR_TYPE_FIXED) || \
+	    ((t) == DDI_INTR_TYPE_MSI) || \
+	    ((t) == DDI_INTR_TYPE_MSIX))
+
 /* values for ih_flags */
 #define	DDI_INTR_MSIX_DUP	0x01	/* MSI-X vector which has been dupped */
 

