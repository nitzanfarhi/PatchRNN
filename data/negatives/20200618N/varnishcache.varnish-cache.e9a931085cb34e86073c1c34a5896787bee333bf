commit e9a931085cb34e86073c1c34a5896787bee333bf
Author: Poul-Henning Kamp <phk@phk.freebsd.dk>
Date:   Mon Aug 17 10:53:17 2009 +0000

    Disable SO_LINGER when we time out a connection due to sess_timeout,
    so that we do not RST connections that have still not transmitted their
    data.
    
    Since we were able to get the writev(2) to detach the socket, we should
    not end up sleeping in the close(2) either.
    
    We still RST the socket for all error conditions.
    
    Ideally I would still like to RST connections that have no outstanding
    data after their sess_timeout, in order to avoid the 2*RTT+misc
    timeouts delays associated with loosing a TCP socket for a client
    that have gone to meet some other IP#.
    
    In particular with load-balancers, this allows the load balancer to
    declare the session dead right away, and reuse it for something more
    productive.
    
    Unfortunately, this lacks OS support in all presently released
    OS'es: you cannot ask if a socket is done transmitting what you
    asked it to.
    
    FreeBSD-8.0 will have experimental support for this (FIONWRITE)
    and I will revisit it in that context.
    
    
    
    
    git-svn-id: http://www.varnish-cache.org/svn/trunk/varnish-cache@4183 d4fa192b-c00b-0410-8231-f00ffab90ce4

diff --git a/bin/varnishd/cache_waiter_epoll.c b/bin/varnishd/cache_waiter_epoll.c
index e9a80be60..6fa9cc426 100644
--- a/bin/varnishd/cache_waiter_epoll.c
+++ b/bin/varnishd/cache_waiter_epoll.c
@@ -190,6 +190,7 @@ vca_main(void *arg)
 			if (sp->t_open > deadline)
 				break;
 			VTAILQ_REMOVE(&sesshead, sp, list);
+			TCP_linger(sp->fd, 0);
 			vca_close_session(sp, "timeout");
 			SES_Delete(sp);
 		}
diff --git a/bin/varnishd/cache_waiter_kqueue.c b/bin/varnishd/cache_waiter_kqueue.c
index c97c6d8d6..c91f624fc 100644
--- a/bin/varnishd/cache_waiter_kqueue.c
+++ b/bin/varnishd/cache_waiter_kqueue.c
@@ -198,6 +198,7 @@ vca_kqueue_main(void *arg)
 			if (sp->t_open > deadline)
 				break;
 			VTAILQ_REMOVE(&sesshead, sp, list);
+			TCP_linger(sp->fd, 0);
 			vca_close_session(sp, "timeout");
 			SES_Delete(sp);
 		}
diff --git a/bin/varnishd/cache_waiter_poll.c b/bin/varnishd/cache_waiter_poll.c
index 1f81106c4..b0dfa58e1 100644
--- a/bin/varnishd/cache_waiter_poll.c
+++ b/bin/varnishd/cache_waiter_poll.c
@@ -147,6 +147,7 @@ vca_main(void *arg)
 				continue;
 			VTAILQ_REMOVE(&sesshead, sp, list);
 			vca_unpoll(fd);
+			TCP_linger(sp->fd, 0);
 			vca_close_session(sp, "timeout");
 			SES_Delete(sp);
 		}
diff --git a/bin/varnishd/cache_waiter_ports.c b/bin/varnishd/cache_waiter_ports.c
index dfc711f4d..3c5760715 100644
--- a/bin/varnishd/cache_waiter_ports.c
+++ b/bin/varnishd/cache_waiter_ports.c
@@ -139,6 +139,7 @@ vca_main(void *arg)
 			VTAILQ_REMOVE(&sesshead, sp, list);
 			if(sp->fd != -1)
 				vca_del(sp->fd);
+			TCP_linger(sp->fd, 0);
 			vca_close_session(sp, "timeout");
 			SES_Delete(sp);
 		}

