commit bc764b8fdb4346cb21f624e08231267d0ea9578b
Author: Shawn Guo <shawn.guo@linaro.org>
Date:   Mon Jul 8 15:53:38 2013 +0800

    serial: fsl_lpuart: restore UARTCR2 after watermark setup is done
    
    Function lpuart_setup_watermark() clears some bits in register UARTCR2
    before writing FIFO configuration registers as required by hardware.
    But it should restore UARTCR2 after that.  Otherwise, we end up changing
    UARTCR2 register when setting up watermark, and that is not really
    desirable.  At least, when low-level debug and earlyprint is enabled,
    serial console is broken due to it.
    
    Fix the problem by restoring UARTCR2 register at the end of function
    lpuart_setup_watermark().
    
    Signed-off-by: Shawn Guo <shawn.guo@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/tty/serial/fsl_lpuart.c b/drivers/tty/serial/fsl_lpuart.c
index 263cfaabe9e2..7bc17f21062a 100644
--- a/drivers/tty/serial/fsl_lpuart.c
+++ b/drivers/tty/serial/fsl_lpuart.c
@@ -342,8 +342,10 @@ static void lpuart_break_ctl(struct uart_port *port, int break_state)
 static void lpuart_setup_watermark(struct lpuart_port *sport)
 {
 	unsigned char val, cr2;
+	unsigned char cr2_saved;
 
 	cr2 = readb(sport->port.membase + UARTCR2);
+	cr2_saved = cr2;
 	cr2 &= ~(UARTCR2_TIE | UARTCR2_TCIE | UARTCR2_TE |
 			UARTCR2_RIE | UARTCR2_RE);
 	writeb(cr2, sport->port.membase + UARTCR2);
@@ -366,6 +368,9 @@ static void lpuart_setup_watermark(struct lpuart_port *sport)
 
 	writeb(2, sport->port.membase + UARTTWFIFO);
 	writeb(1, sport->port.membase + UARTRWFIFO);
+
+	/* Restore cr2 */
+	writeb(cr2_saved, sport->port.membase + UARTCR2);
 }
 
 static int lpuart_startup(struct uart_port *port)

