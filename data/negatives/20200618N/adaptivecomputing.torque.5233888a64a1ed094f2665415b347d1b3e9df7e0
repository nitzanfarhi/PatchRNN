commit 5233888a64a1ed094f2665415b347d1b3e9df7e0
Author: David Beer <dbeer@adaptivecomputing.com>
Date:   Fri Jan 8 14:52:40 2016 -0700

    TRQ-2517. Fix some scaffolding problems.
    
    Conflicts:
            src/test/issue_request/scaffolding.c
            src/test/svr_movejob/scaffolding.c

diff --git a/src/test/issue_request/scaffolding.c b/src/test/issue_request/scaffolding.c
index 1bf563419..b6867cbf4 100644
--- a/src/test/issue_request/scaffolding.c
+++ b/src/test/issue_request/scaffolding.c
@@ -260,6 +260,7 @@ struct pbsnode dummynode;
 
 struct pbsnode *tfind_addr(const u_long key, uint16_t port, char *job_momname)
   {
+  dummynode.change_name("tmp");
   return &dummynode;
   }
 
@@ -513,9 +514,28 @@ int pbsnode::unlock_node(const char *id, const char *msg, int level)
   return(0);
   }
 
+void pbsnode::change_name(const char *name)
+  {
+  this->nd_name = name;
+  }
+
+const char *pbsnode::get_name() const
+  {
+  return(this->nd_name.c_str());
+  }
+
 job::job()
   {
   memset(this->ji_wattr, 0, sizeof(this->ji_wattr));
   }
 
 job::~job() {}
+
+void update_failure_counts(
+
+  const char *node_name,
+  int         rc)
+
+  {
+  }
+
diff --git a/src/test/node_func/scaffolding.c b/src/test/node_func/scaffolding.c
index 0b8df0c07..879c3509e 100644
--- a/src/test/node_func/scaffolding.c
+++ b/src/test/node_func/scaffolding.c
@@ -525,3 +525,8 @@ int Machine::getTotalChips() const
   return(0);
   }
 
+void update_node_state(pbsnode *pnode, int state) 
+  {
+  pnode->nd_state = state;
+  }
+
diff --git a/src/test/node_manager/scaffolding.c b/src/test/node_manager/scaffolding.c
index a00f46b89..66386352d 100644
--- a/src/test/node_manager/scaffolding.c
+++ b/src/test/node_manager/scaffolding.c
@@ -116,8 +116,7 @@ struct pbsnode *find_nodebyname(const char *nodename)
 
   if (called == 0)
     {
-    memset(&other, 0, sizeof(other));
-    other.nd_name = strdup("lihue");
+    other.change_name("lihue");
     called++;
     }
 
@@ -162,8 +161,7 @@ struct pbsnode *find_node_in_allnodes(all_nodes *an, const char *nodename)
 
 struct work_task *set_task(enum work_type type, long event_id, void (*func)(work_task *), void *parm, int get_lock)
   {
-  fprintf(stderr, "The call to set_task needs to be mocked!!\n");
-  exit(1);
+  return(0);
   }
 
 unsigned disrui(int stream, int *retval)
@@ -659,7 +657,7 @@ pbsnode::pbsnode() : nd_error(0), nd_properties(),
                      nd_mom_rm_port(PBS_MANAGER_SERVICE_PORT), nd_sock_addr(),
                      nd_nprops(0), nd_nstatus(0),
                      nd_slots(), nd_job_usages(), nd_needed(0), nd_np_to_be_used(0),
-                     nd_state(INUSE_DOWN), nd_ntype(0), nd_order(0),
+                     nd_state(INUSE_FREE), nd_ntype(0), nd_order(0),
                      nd_warnbad(0),
                      nd_lastupdate(0), nd_lastHierarchySent(0), nd_hierarchy_level(0),
                      nd_in_hierarchy(0), nd_ngpus(0), nd_gpus_real(0), nd_gpusn(),
@@ -878,6 +876,61 @@ void pbsnode::add_property(
   this->nd_properties.push_back(prop);
   }
 
+bool pbsnode::update_internal_failure_counts(
+
+  int rc)
+
+  {
+  bool held = false;
+  char log_buf[2048];
+
+  if (rc == PBSE_NONE)
+    {
+    this->nd_consecutive_successes++;
+
+    if (this->nd_consecutive_successes > 1)
+      {
+      this->nd_proximal_failures = 0;
+
+      if (this->nd_state & INUSE_NETWORK_FAIL)
+        {
+        snprintf(log_buf, sizeof(log_buf),
+          "Node '%s' has had two or more consecutive network successes, marking online.",
+          this->nd_name.c_str());
+        log_record(1, 2, __func__, log_buf);
+        this->remove_node_state_flag(INUSE_NETWORK_FAIL);
+        }
+      }
+    }
+  else
+    {
+    this->nd_proximal_failures++;
+    this->nd_consecutive_successes = 0;
+
+    if ((this->nd_proximal_failures > 2) &&
+        ((this->nd_state & INUSE_NETWORK_FAIL) == 0))
+      {
+      snprintf(log_buf, sizeof(log_buf),
+        "Node '%s' has had %d failures in close proximity, marking offline.",
+        this->nd_name.c_str(), this->nd_proximal_failures);
+      log_record(1, 2, __func__, log_buf);
+
+      update_node_state(this, INUSE_NETWORK_FAIL);
+      held = true;
+      }
+    }
+
+  return(held);
+  }
+
+void pbsnode::remove_node_state_flag(
+
+  int flag)
+
+  {
+  this->nd_state &= ~flag;
+  }
+
 Machine::Machine() {}
 Machine::~Machine() {}
 
diff --git a/src/test/svr_movejob/scaffolding.c b/src/test/svr_movejob/scaffolding.c
index a4b777f5a..da844ef9a 100644
--- a/src/test/svr_movejob/scaffolding.c
+++ b/src/test/svr_movejob/scaffolding.c
@@ -442,4 +442,6 @@ std::string get_path_jobdata(const char *a, const char *b)
 job::job() {}
 job::~job() {}
 
+void update_failure_counts(const char *node_name, int rc) {}
+
 

