commit d1b55351ccc2252917ad494b74bb6ad562df34ce
Author: Joel de Vahl <joel@stalverk80.se>
Date:   Mon Oct 6 16:44:34 2008 +0000

    Big endian fix.

diff --git a/src/base/system.c b/src/base/system.c
index 02bbed7f..88b73f32 100644
--- a/src/base/system.c
+++ b/src/base/system.c
@@ -156,6 +156,7 @@ typedef struct MEMTAIL
 } MEMTAIL;
 
 static struct MEMHEADER *first = 0;
+static const int MEM_GUARD_VAL = 0xbaadc0de;
 
 void *mem_alloc_debug(const char *filename, int line, unsigned size, unsigned alignment)
 {
@@ -171,7 +172,7 @@ void *mem_alloc_debug(const char *filename, int line, unsigned size, unsigned al
 	memory_stats.total_allocations++;
 	memory_stats.active_allocations++;
 	
-	tail->guard = 0xbaadc0de;
+	tail->guard = MEM_GUARD_VAL;
 
 	header->prev = (MEMHEADER *)0;
 	header->next = first;
@@ -190,7 +191,7 @@ void mem_free(void *p)
 		MEMHEADER *header = (MEMHEADER *)p - 1;
 		MEMTAIL *tail = (MEMTAIL *)(((char*)(header+1))+header->size);
 		
-		if(tail->guard != 0xbaadc0de)
+		if(tail->guard != MEM_GUARD_VAL)
 			dbg_msg("mem", "!! %p", p);
 		/* dbg_msg("mem", "-- %p", p); */
 		memory_stats.allocated -= header->size;
@@ -239,6 +240,21 @@ void mem_zero(void *block,unsigned size)
 	memset(block, 0, size);
 }
 
+void mem_check()
+{
+	MEMHEADER *header = first;
+	while(header)
+	{
+		MEMTAIL *tail = (MEMTAIL *)(((char*)(header+1))+header->size);
+		if(tail->guard != MEM_GUARD_VAL)
+		{
+			dbg_msg("mem", "Memory check failed at %s(%d): %d", header->filename, header->line, header->size);
+			dbg_assert(0, "Memory check failed");
+		}
+		header = header->next;
+	}
+}
+
 IOHANDLE io_open(const char *filename, int flags)
 {
 	if(flags == IOFLAG_READ)
@@ -876,7 +892,9 @@ int fs_storage_path(const char *appname, char *path, int max)
 	return 0;
 #else
 	char *home = getenv("HOME");
+#if !defined(CONF_PLATFORM_MACOSX)
 	int i;
+#endif
 	if(!home)
 		return -1;
 
diff --git a/src/base/system.h b/src/base/system.h
index e7c3586f..36f370cd 100644
--- a/src/base/system.h
+++ b/src/base/system.h
@@ -161,6 +161,13 @@ void mem_zero(void *block, unsigned size);
 */
 int mem_comp(const void *a, const void *b, int size);
 
+/*
+	Function: mem_check
+		Validates the heap
+		Will trigger a assert if memory has failed.
+*/
+void mem_check();
+
 /* Group: File IO */
 enum {
 	IOFLAG_READ = 1,
diff --git a/src/engine/e_datafile.c b/src/engine/e_datafile.c
index 8f684827..c0376088 100644
--- a/src/engine/e_datafile.c
+++ b/src/engine/e_datafile.c
@@ -137,11 +137,16 @@ DATAFILE *datafile_load(const char *filename)
 	}
 
 #if defined(CONF_ARCH_ENDIAN_BIG)
-	swap_endian(df->data, sizeof(int), header.swaplen);
+	swap_endian(df->data, sizeof(int), header.swaplen / sizeof(int));
 #endif
-	
+
 	if(DEBUG)
+	{
+		dbg_msg("datafile", "allocsize=%d", allocsize);
+		dbg_msg("datafile", "readsize=%d", readsize);
+		dbg_msg("datafile", "swaplen=%d", header.swaplen);
 		dbg_msg("datafile", "item_size=%d", df->header.item_size);
+	}
 	
 	df->info.item_types = (DATAFILE_ITEM_TYPE *)df->data;
 	df->info.item_offsets = (int *)&df->info.item_types[df->header.num_item_types];
@@ -224,17 +229,17 @@ void *datafile_get_data(DATAFILE *df, int index)
 			unsigned long uncompressed_size = df->info.data_sizes[index];
 			unsigned long s;
 
-			dbg_msg("datafile", "loading data index=%d size=%d", index, datasize);
+			dbg_msg("datafile", "loading data index=%d size=%d uncompressed=%d", index, datasize, uncompressed_size);
 			df->data_ptrs[index] = (char *)mem_alloc(uncompressed_size, 1);
 			
 			/* read the compressed data */
 			io_seek(df->file, df->data_start_offset+df->info.data_offsets[index], IOSEEK_START);
 			io_read(df->file, temp, datasize);
-			
+
 			/* decompress the data, TODO: check for errors */
 			s = uncompressed_size;
 			uncompress((Bytef*)df->data_ptrs[index], &s, (Bytef*)temp, datasize);
-			
+
 			/* clean up the temporary buffers */
 			mem_free(temp);
 		}
@@ -261,7 +266,7 @@ void *datafile_get_data_swapped(DATAFILE *df, int index)
 		return ptr;
 
 #if defined(CONF_ARCH_ENDIAN_BIG)
-	swap_endian(ptr, sizeof(int), size);
+	swap_endian(ptr, sizeof(int), size / sizeof(int));
 #endif
 
 	return ptr;

