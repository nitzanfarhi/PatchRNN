commit d9694c4a9ad4354e0bfc127689a78e543a057c0c
Author: matyhtf <mikan.tenny@gmail.com>
Date:   Tue May 8 17:29:48 2018 +0800

    Task process can't use coro

diff --git a/swoole_server.c b/swoole_server.c
index 1760cdab..20837b3a 100644
--- a/swoole_server.c
+++ b/swoole_server.c
@@ -1284,13 +1284,64 @@ static void php_swoole_onShutdown(swServer *serv)
     SwooleG.lock.unlock(&SwooleG.lock);
 }
 
+#ifdef SW_COROUTINE
+static void php_swoole_onWorkerStart_coroutine(zval *zserv, zval *zworker_id)
+{
+    zval *retval = NULL;
+    zval *args[2];
+    args[0] = zserv;
+    args[1] = zworker_id;
+
+    zend_fcall_info_cache *cache = php_sw_server_caches[SW_SERVER_CB_onWorkerStart];
+    int ret = coro_create(cache, args, 2, &retval, NULL, NULL);
+    if (ret != 0)
+    {
+        sw_zval_ptr_dtor(&zworker_id);
+        if (ret == CORO_LIMIT)
+        {
+            swWarn("Failed to handle onWorkerStart. Coroutine limited.");
+        }
+        return;
+    }
+
+    if (EG(exception))
+    {
+        zend_exception_error(EG(exception), E_ERROR TSRMLS_CC);
+    }
+    if (retval)
+    {
+        sw_zval_ptr_dtor(&retval);
+    }
+}
+#endif
+
+static void php_swoole_onWorkerStart_callback(zval *zserv, zval *zworker_id)
+{
+    zval *retval = NULL;
+    zval **args[2];
+    args[0] = &zserv;
+    args[1] = &zworker_id;
+
+    if (sw_call_user_function_ex(EG(function_table), NULL, php_sw_server_callbacks[SW_SERVER_CB_onWorkerStart], &retval,
+            2, args, 0, NULL TSRMLS_CC) == FAILURE)
+    {
+        swoole_php_fatal_error(E_WARNING, "onWorkerStart handler error.");
+    }
+
+    if (EG(exception))
+    {
+        zend_exception_error(EG(exception), E_ERROR TSRMLS_CC);
+    }
+    if (retval)
+    {
+        sw_zval_ptr_dtor(&retval);
+    }
+}
+
 static void php_swoole_onWorkerStart(swServer *serv, int worker_id)
 {
     zval *zserv = (zval *) serv->ptr2;
     zval *zworker_id;
-    zval *retval = NULL;
-
-    SWOOLE_GET_TSRMLS;
 
     SW_MAKE_STD_ZVAL(zworker_id);
     ZVAL_LONG(zworker_id, worker_id);
@@ -1327,8 +1378,6 @@ static void php_swoole_onWorkerStart(swServer *serv, int worker_id)
      */
     zend_update_property_long(swoole_server_class_entry_ptr, zserv, ZEND_STRL("worker_pid"), getpid() TSRMLS_CC);
 
-    sw_zval_ptr_dtor(&zworker_id);
-
     /**
      * Have not set the event callback
      */
@@ -1336,39 +1385,15 @@ static void php_swoole_onWorkerStart(swServer *serv, int worker_id)
     {
         return;
     }
-#ifndef SW_COROUTINE
-    zval **args[2];
-    args[0] = &zserv;
-    args[1] = &zworker_id;
-    if (sw_call_user_function_ex(EG(function_table), NULL, php_sw_server_callbacks[SW_SERVER_CB_onWorkerStart], &retval, 2, args, 0, NULL TSRMLS_CC) == FAILURE)
-    {
-        swoole_php_fatal_error(E_WARNING, "onWorkerStart handler error.");
-    }
-#else
-    zval *args[2];
-    args[0] = zserv;
-    args[1] = zworker_id;
-
-    zend_fcall_info_cache *cache = php_sw_server_caches[SW_SERVER_CB_onWorkerStart];
-    int ret = coro_create(cache, args, 2, &retval, NULL, NULL);
-    if (ret != 0)
+#ifdef SW_COROUTINE
+    if (worker_id < serv->worker_num)
     {
-        sw_zval_ptr_dtor(&zworker_id);
-        if (ret == CORO_LIMIT)
-        {
-            swWarn("Failed to handle onWorkerStart. Coroutine limited.");
-        }
-        return;
+        php_swoole_onWorkerStart_coroutine(zserv, zworker_id);
     }
+    else
 #endif
-
-    if (EG(exception))
     {
-        zend_exception_error(EG(exception), E_ERROR TSRMLS_CC);
-    }
-    if (retval)
-    {
-        sw_zval_ptr_dtor(&retval);
+        php_swoole_onWorkerStart_callback(zserv, zworker_id);
     }
 }
 

