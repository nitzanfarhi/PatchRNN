commit 25f774137afd11d56a6b6d4dcf4ec501d7e3d12b
Author: Eliot Horowitz <eliot@10gen.com>
Date:   Mon Apr 21 12:24:08 2014 -0400

    SERVER-13638: NamespaceDetails now only modified via methods from RecordStore

diff --git a/src/mongo/db/structure/catalog/namespace_details.cpp b/src/mongo/db/structure/catalog/namespace_details.cpp
index 12aa3fe5a5..0ad772b0ce 100644
--- a/src/mongo/db/structure/catalog/namespace_details.cpp
+++ b/src/mongo/db/structure/catalog/namespace_details.cpp
@@ -353,6 +353,13 @@ namespace mongo {
         s->nrecords = numRecords;
     }
 
+    void NamespaceDetails::setFirstExtent( const DiskLoc& loc ) {
+        getDur().writingDiskLoc( _firstExtent ) = loc;
+    }
+
+    void NamespaceDetails::setLastExtent( const DiskLoc& loc ) {
+        getDur().writingDiskLoc( _lastExtent ) = loc;
+    }
 
     void NamespaceDetails::setCapExtent( const DiskLoc& loc ) {
         getDur().writingDiskLoc( _capExtent ) = loc;
@@ -362,14 +369,6 @@ namespace mongo {
         getDur().writingDiskLoc( _capFirstNewRecord ) = loc;
     }
 
-    void NamespaceDetails::setFirstExtent( DiskLoc newFirstExtent ) {
-        getDur().writingDiskLoc( _firstExtent ) = newFirstExtent;
-    }
-
-    void NamespaceDetails::setLastExtent( DiskLoc newLastExtent ) {
-        getDur().writingDiskLoc( _lastExtent ) = newLastExtent;
-    }
-
     void NamespaceDetails::setFirstExtentInvalid() {
         getDur().writingDiskLoc( _firstExtent ).setInvalid();
     }
@@ -378,6 +377,9 @@ namespace mongo {
         getDur().writingDiskLoc( _lastExtent ).setInvalid();
     }
 
+    void NamespaceDetails::setDeletedListEntry( int bucket, const DiskLoc& loc ) {
+        getDur().writingDiskLoc( _deletedList[bucket] ) = loc;
+    }
 
     /**
      * // TODO: this should move to Collection
diff --git a/src/mongo/db/structure/catalog/namespace_details.h b/src/mongo/db/structure/catalog/namespace_details.h
index fd8bd3412a..68e563f8f4 100644
--- a/src/mongo/db/structure/catalog/namespace_details.h
+++ b/src/mongo/db/structure/catalog/namespace_details.h
@@ -163,13 +163,10 @@ namespace mongo {
     public:
 
         const DiskLoc& firstExtent() const { return _firstExtent; }
-        const DiskLoc& lastExtent() const { return _lastExtent; }
-
-        DiskLoc& firstExtent() { return _firstExtent; }
-        DiskLoc& lastExtent() { return _lastExtent; }
+        void setFirstExtent( const DiskLoc& loc );
 
-        void setFirstExtent( DiskLoc newFirstExtent );
-        void setLastExtent( DiskLoc newLastExtent );
+        const DiskLoc& lastExtent() const { return _lastExtent; }
+        void setLastExtent( const DiskLoc& loc );
 
         void setFirstExtentInvalid();
         void setLastExtentInvalid();
@@ -193,7 +190,7 @@ namespace mongo {
         void setLastExtentSize( int newMax );
 
         const DiskLoc& deletedListEntry( int bucket ) const { return _deletedList[bucket]; }
-        DiskLoc& deletedListEntry( int bucket ) { return _deletedList[bucket]; }
+        void setDeletedListEntry( int bucket, const DiskLoc& loc );
 
         void orphanDeletedList();
 
diff --git a/src/mongo/db/structure/record_store_v1_capped.cpp b/src/mongo/db/structure/record_store_v1_capped.cpp
index 53ed2d4206..6bf7bf99cd 100644
--- a/src/mongo/db/structure/record_store_v1_capped.cpp
+++ b/src/mongo/db/structure/record_store_v1_capped.cpp
@@ -106,7 +106,7 @@ namespace mongo {
 
             // signal done allocating new extents.
             if ( !cappedLastDelRecLastExtent().isValid() )
-                getDur().writingDiskLoc( cappedLastDelRecLastExtent() ) = DiskLoc();
+                setLastDelRecLastExtent( DiskLoc() );
 
             invariant( lenToAlloc < 400000000 );
             int passes = 0;
@@ -210,8 +210,8 @@ namespace mongo {
     }
 
     Status CappedRecordStoreV1::truncate() {
-        getDur().writingDiskLoc(cappedLastDelRecLastExtent()) = DiskLoc();
-        getDur().writingDiskLoc(cappedListOfAllDeletedRecords()) = DiskLoc();
+        setLastDelRecLastExtent( DiskLoc() );
+        setListOfAllDeletedRecords( DiskLoc() );
 
         // preserve firstExtent/lastExtent
         _details->setCapExtent( _details->firstExtent() );
@@ -223,7 +223,7 @@ namespace mongo {
         _details->setPaddingFactor( 1.0 );
         _details->clearSystemFlags();
         _details->setCapFirstNewRecord( DiskLoc().setInvalid() );
-        getDur().writingDiskLoc(cappedLastDelRecLastExtent()).setInvalid();
+        setLastDelRecLastExtent( DiskLoc().setInvalid() );
         // dataFileVersion preserve
         // indexFileVersion preserve
 
@@ -256,7 +256,7 @@ namespace mongo {
         DDD( "CappedRecordStoreV1::compact enter" );
 
         vector<DiskLoc> drecs;
-        
+
         // Pull out capExtent's DRs from deletedList
         DiskLoc i = cappedFirstDeletedInCurExtent();
         for (; !i.isNull() && inCapExtent( i ); i = deletedRecordFor( i )->nextDeleted() ) {
@@ -264,8 +264,8 @@ namespace mongo {
             drecs.push_back( i );
         }
 
-        getDur().writingDiskLoc( cappedFirstDeletedInCurExtent() ) = i;
-        
+        setFirstDeletedInCurExtent( i );
+
         std::sort( drecs.begin(), drecs.end() );
         DDD( "\t drecs.size(): " << drecs.size() );
 
@@ -300,13 +300,20 @@ namespace mongo {
 
     }
 
-    DiskLoc &CappedRecordStoreV1::cappedFirstDeletedInCurExtent() {
+    const DiskLoc &CappedRecordStoreV1::cappedFirstDeletedInCurExtent() const {
         if ( cappedLastDelRecLastExtent().isNull() )
             return cappedListOfAllDeletedRecords();
         else
             return drec(cappedLastDelRecLastExtent())->nextDeleted();
     }
 
+    void CappedRecordStoreV1::setFirstDeletedInCurExtent( const DiskLoc& loc ) const {
+        if ( cappedLastDelRecLastExtent().isNull() )
+            setListOfAllDeletedRecords( loc );
+        else
+            getDur().writingDiskLoc( drec(cappedLastDelRecLastExtent())->nextDeleted() ) = loc;
+    }
+
     void CappedRecordStoreV1::cappedCheckMigrate() {
         // migrate old NamespaceDetails format
         if ( _details->capExtent().a() == 0 && _details->capExtent().getOfs() == 0 ) {
@@ -319,8 +326,8 @@ namespace mongo {
                 DiskLoc last = first;
                 for (; !drec(last)->nextDeleted().isNull(); last = drec(last)->nextDeleted() );
                 getDur().writingDiskLoc(drec(last)->nextDeleted()) = cappedListOfAllDeletedRecords();
-                getDur().writingDiskLoc(cappedListOfAllDeletedRecords()) = first;
-                getDur().writingDiskLoc(_details->deletedListEntry(i)) = DiskLoc();
+                setListOfAllDeletedRecords( first );
+                _details->setDeletedListEntry(i,DiskLoc());
             }
             // NOTE cappedLastDelRecLastExtent() set to DiskLoc() in above
 
@@ -355,11 +362,11 @@ namespace mongo {
         // We want cappedLastDelRecLastExtent() to be the last DeletedRecord of the prev cap extent
         // (or DiskLoc() if new capExtent == firstExtent)
         if ( _details->capExtent() == _details->lastExtent() )
-            getDur().writingDiskLoc( cappedLastDelRecLastExtent() ) = DiskLoc();
+            setLastDelRecLastExtent( DiskLoc() );
         else {
             DiskLoc i = cappedFirstDeletedInCurExtent();
             for (; !i.isNull() && nextIsInCapExtent( i ); i = drec(i)->nextDeleted() );
-            getDur().writingDiskLoc( cappedLastDelRecLastExtent() ) = i;
+            setLastDelRecLastExtent( i );
         }
 
         _details->setCapExtent( theCapExtent()->xnext.isNull() ?
@@ -388,7 +395,7 @@ namespace mongo {
         /* unlink ourself from the deleted list */
         if ( !ret.isNull() ) {
             if ( prev.isNull() )
-                getDur().writingDiskLoc(cappedListOfAllDeletedRecords()) = drec(ret)->nextDeleted();
+                setListOfAllDeletedRecords( drec(ret)->nextDeleted() );
             else
                 getDur().writingDiskLoc(drec(prev)->nextDeleted()) = drec(ret)->nextDeleted();
             getDur().writingDiskLoc(drec(ret)->nextDeleted()).setInvalid(); // defensive.
@@ -403,7 +410,7 @@ namespace mongo {
             // Only one extent of the collection is in use, so there
             // is no deleted record in a previous extent, so nullify
             // cappedLastDelRecLastExtent().
-            getDur().writingDiskLoc(cappedLastDelRecLastExtent()) = DiskLoc();
+            setLastDelRecLastExtent( DiskLoc() );
         }
         else {
             // Scan through all deleted records in the collection
@@ -420,7 +427,7 @@ namespace mongo {
             // record.  (We expect that there will be deleted records in the new
             // capExtent as well.)
             invariant( !drec(i)->nextDeleted().isNull() );
-            getDur().writingDiskLoc(cappedLastDelRecLastExtent()) = i;
+            setLastDelRecLastExtent( i );
         }
     }
 
@@ -520,14 +527,22 @@ namespace mongo {
         }
     }
 
-    DiskLoc& CappedRecordStoreV1::cappedListOfAllDeletedRecords() {
+    const DiskLoc& CappedRecordStoreV1::cappedListOfAllDeletedRecords() const {
         return _details->deletedListEntry(0);
     }
 
-    DiskLoc& CappedRecordStoreV1::cappedLastDelRecLastExtent() {
+    void CappedRecordStoreV1::setListOfAllDeletedRecords( const DiskLoc& loc ) const {
+        return _details->setDeletedListEntry(0,loc);
+    }
+
+    const DiskLoc& CappedRecordStoreV1::cappedLastDelRecLastExtent() const {
         return _details->deletedListEntry(1);
     }
 
+    void CappedRecordStoreV1::setLastDelRecLastExtent( const DiskLoc& loc ) const {
+        return _details->setDeletedListEntry(1,loc);
+    }
+
     bool CappedRecordStoreV1::capLooped() const {
         return _details->capFirstNewRecord().isValid();
     }
@@ -552,7 +567,7 @@ namespace mongo {
             // Initial extent allocation.  Insert at end.
             d->nextDeleted() = DiskLoc();
             if ( cappedListOfAllDeletedRecords().isNull() )
-                getDur().writingDiskLoc( cappedListOfAllDeletedRecords() ) = dloc;
+                setListOfAllDeletedRecords( dloc );
             else {
                 DiskLoc i = cappedListOfAllDeletedRecords();
                 for (; !drec(i)->nextDeleted().isNull(); i = drec(i)->nextDeleted() )
@@ -562,7 +577,7 @@ namespace mongo {
         }
         else {
             d->nextDeleted() = cappedFirstDeletedInCurExtent();
-            getDur().writingDiskLoc( cappedFirstDeletedInCurExtent() ) = dloc;
+            setFirstDeletedInCurExtent( dloc );
             // always compact() after this so order doesn't matter
         }
     }
diff --git a/src/mongo/db/structure/record_store_v1_capped.h b/src/mongo/db/structure/record_store_v1_capped.h
index 3996621ac1..d8a0252817 100644
--- a/src/mongo/db/structure/record_store_v1_capped.h
+++ b/src/mongo/db/structure/record_store_v1_capped.h
@@ -87,12 +87,15 @@ namespace mongo {
     private:
         // -- start copy from cap.cpp --
         void compact();
-        DiskLoc& cappedFirstDeletedInCurExtent();
+        const DiskLoc& cappedFirstDeletedInCurExtent() const;
+        void setFirstDeletedInCurExtent( const DiskLoc& loc ) const;
         void cappedCheckMigrate();
         DiskLoc __capAlloc( int len );
         bool inCapExtent( const DiskLoc &dl ) const;
-        DiskLoc& cappedListOfAllDeletedRecords();
-        DiskLoc& cappedLastDelRecLastExtent();
+        const DiskLoc& cappedListOfAllDeletedRecords() const;
+        const DiskLoc& cappedLastDelRecLastExtent() const;
+        void setListOfAllDeletedRecords( const DiskLoc& loc ) const;
+        void setLastDelRecLastExtent( const DiskLoc& loc ) const;
         bool capLooped() const;
         Extent *theCapExtent() const;
         bool nextIsInCapExtent( const DiskLoc &dl ) const;
diff --git a/src/mongo/db/structure/record_store_v1_simple.cpp b/src/mongo/db/structure/record_store_v1_simple.cpp
index 860f93c373..4b83a80284 100644
--- a/src/mongo/db/structure/record_store_v1_simple.cpp
+++ b/src/mongo/db/structure/record_store_v1_simple.cpp
@@ -86,13 +86,12 @@ namespace mongo {
         freelistAllocs.increment();
         DiskLoc loc;
         {
-            DiskLoc *prev;
+            DiskLoc *prev = 0;
             DiskLoc *bestprev = 0;
             DiskLoc bestmatch;
             int bestmatchlen = 0x7fffffff;
             int b = _details->bucket(lenToAlloc);
             DiskLoc cur = _details->deletedListEntry(b);
-            prev = &_details->deletedListEntry(b);
             int extra = 5; // look for a better fit, a little.
             int chain = 0;
             while ( 1 ) {
@@ -126,7 +125,7 @@ namespace mongo {
                         return DiskLoc();
                     }
                     cur = _details->deletedListEntry(b);
-                    prev = &_details->deletedListEntry(b);
+                    prev = 0;
                     continue;
                 }
                 DeletedRecord *r = drec(cur);
@@ -156,7 +155,15 @@ namespace mongo {
 
             // unlink ourself from the deleted list
             DeletedRecord *bmr = drec(bestmatch);
-            *getDur().writing(bestprev) = bmr->nextDeleted();
+            if ( bestprev ) {
+                *getDur().writing(bestprev) = bmr->nextDeleted();
+            }
+            else {
+                // should be the front of a free-list
+                int bucket = _details->bucket(bmr->lengthWithHeaders());
+                invariant( _details->deletedListEntry(bucket) == bestmatch );
+                _details->setDeletedListEntry(bucket, bmr->nextDeleted());
+            }
             getDur().writingDiskLoc(bmr->nextDeleted()).setInvalid(); // defensive.
             invariant(bmr->extentOfs() < bestmatch.getOfs());
 
@@ -267,10 +274,8 @@ namespace mongo {
         DEBUGGING log() << "TEMP: add deleted rec " << dloc.toString() << ' ' << hex << d->extentOfs() << endl;
 
         int b = _details->bucket(d->lengthWithHeaders());
-        DiskLoc& list = _details->deletedListEntry(b);
-        DiskLoc oldHead = list;
-        getDur().writingDiskLoc(list) = dloc;
-        d->nextDeleted() = oldHead;
+        d->nextDeleted() = _details->deletedListEntry(b);
+        _details->setDeletedListEntry(b, dloc);
     }
 
     RecordIterator* SimpleRecordStoreV1::getIterator( const DiskLoc& start, bool tailable,
@@ -411,7 +416,7 @@ namespace mongo {
             invariant( _details->firstExtent() == diskloc );
             invariant( _details->lastExtent() != diskloc );
             DiskLoc newFirst = e->xnext;
-            getDur().writingDiskLoc(_details->firstExtent()) = newFirst;
+            _details->setFirstExtent( newFirst );
             getDur().writingDiskLoc(_extentManager->getExtent( newFirst )->xprev).Null();
             getDur().writing(e)->markEmpty();
             _extentManager->freeExtents( diskloc, diskloc );

