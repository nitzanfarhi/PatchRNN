commit b7d8bcecc011c4ed3fa92a62819a085060fa65a5
Author: David Beer <dbeer@adaptivecomputing.com>
Date:   Tue Mar 18 15:50:00 2014 -0600

    Fix one more unit test complaint.

diff --git a/src/lib/Libattr/attr_node_func.c b/src/lib/Libattr/attr_node_func.c
index 373dd8305..f847ae717 100644
--- a/src/lib/Libattr/attr_node_func.c
+++ b/src/lib/Libattr/attr_node_func.c
@@ -98,6 +98,7 @@
 #include "pbs_nodes.h"
 #include "pbs_error.h"
 #include "log.h"
+#include "timer.hpp"
 #if SYSLOG
 #include <syslog.h>
 #endif
@@ -450,6 +451,7 @@ int encode_jobs(
   int             perm)  /* only used for resources */
 
   {
+  FUNCTION_TIMER
   svrattrl          *pal;
 
   struct pbsnode    *pnode;
diff --git a/src/lib/Libattr/test/attr_node_func/scaffolding.c b/src/lib/Libattr/test/attr_node_func/scaffolding.c
index d3810fe4f..08853bcc5 100644
--- a/src/lib/Libattr/test/attr_node_func/scaffolding.c
+++ b/src/lib/Libattr/test/attr_node_func/scaffolding.c
@@ -1,7 +1,9 @@
 #include "license_pbs.h" /* See here for the software license */
 #include <stdlib.h>
 #include <stdio.h>
+#include <string>
 
+#include "execution_slot_tracker.hpp"
 #include "attribute.h" /* svrattrl */
 
 svrattrl *attrlist_create(const char *aname, const char *rname, int vsize)
@@ -39,3 +41,5 @@ char *parse_comma_string(char *start, char **ptr)
   fprintf(stderr, "The call to parse_comma_string needs to be mocked!!\n");
   exit(1);
   }
+
+void populate_range_string_from_slot_tracker(execution_slot_tracker &est, std::string &range) {}
diff --git a/src/resmom/mom_main.c b/src/resmom/mom_main.c
index 8d9a47f57..ed7c4fc21 100644
--- a/src/resmom/mom_main.c
+++ b/src/resmom/mom_main.c
@@ -193,6 +193,7 @@ extern struct var_table vtable; /* see start_exec.c */
 time_t          last_log_check;
 
 std::list<std::string> JobsToResend;
+time_t                 resend_obit_time;
 
 resizable_array  *exiting_job_list;
 resizable_array  *things_to_resend;
@@ -5546,6 +5547,11 @@ void examine_all_jobs_to_resend(void)
   job *pjob;
   std::vector<std::list<std::string>::iterator> to_erase;
 
+  time_now = time(NULL);
+
+  if (resend_obit_time > time_now)
+    return;
+
   for (std::list<std::string>::iterator it = JobsToResend.begin();
        it != JobsToResend.end();
        it++)
@@ -5564,6 +5570,8 @@ void examine_all_jobs_to_resend(void)
 
       /* sent successfully */
       to_erase.push_back(it);
+
+      resend_obit_time = time_now;
       }
     }
 
@@ -5798,6 +5806,14 @@ int mark_for_resend(
   {
   int rc = PBSE_NONE;
 
+  time_now = time(NULL);
+
+  // try to wait at least 15 seconds before sending the obit again
+  // most of the time it fails is due to server business, so let's not
+  // spam the server when its busiest.
+  if (resend_obit_time < time_now)
+    resend_obit_time = time_now + 15;
+
   if (pjob == NULL)
     {
     rc = PBSE_JOBNOTFOUND;

