commit deace4a6b440f2e05f3e073338b28901d02a15c9
Author: Russell King <rmk+kernel@arm.linux.org.uk>
Date:   Sat May 3 11:06:55 2014 +0100

    ARM: dma-mapping: avoid calling dma_cache_maint_page() on dev=>cpu
    
    Avoid calling dma_cache_maint_page() when unmapping a DMA_TO_DEVICE
    buffer.  The L1 cache ops never do anything in this circumstance, nor
    do they ever need to - all that matters for this case is that the data
    written is visible to the device before DMA starts.  What happens during
    the transfer (provided the buffer is not written to) is of no real
    consequence.
    
    We already do this optimisation for the L2 cache.
    
    Signed-off-by: Russell King <rmk+kernel@arm.linux.org.uk>

diff --git a/arch/arm/mm/dma-mapping.c b/arch/arm/mm/dma-mapping.c
index f62aa0677e5c..137463bcbeac 100644
--- a/arch/arm/mm/dma-mapping.c
+++ b/arch/arm/mm/dma-mapping.c
@@ -904,11 +904,12 @@ static void __dma_page_dev_to_cpu(struct page *page, unsigned long off,
 	unsigned long paddr = page_to_phys(page) + off;
 
 	/* FIXME: non-speculating: not required */
-	/* don't bother invalidating if DMA to device */
-	if (dir != DMA_TO_DEVICE)
+	/* in any case, don't bother invalidating if DMA to device */
+	if (dir != DMA_TO_DEVICE) {
 		outer_inv_range(paddr, paddr + size);
 
-	dma_cache_maint_page(page, off, size, dir, dmac_unmap_area);
+		dma_cache_maint_page(page, off, size, dir, dmac_unmap_area);
+	}
 
 	/*
 	 * Mark the D-cache clean for these pages to avoid extra flushing.

