commit 03b448aa593150ee516e5a4db273402ffc1ded9c
Author: Daniel-Constantin Mierla <miconda@gmail.com>
Date:   Wed Jul 5 14:33:07 2006 +0000

    - is_avp_set() handles properly the index of AVPs (reported by Norman Brandinger)
    
    
    git-svn-id: https://openser.svn.sourceforge.net/svnroot/openser/trunk@972 689a6050-402a-0410-94f2-e92a70836424

diff --git a/modules_k/avpops/avpops.c b/modules_k/avpops/avpops.c
index 8a2263737..9ddd423cc 100644
--- a/modules_k/avpops/avpops.c
+++ b/modules_k/avpops/avpops.c
@@ -1120,7 +1120,7 @@ static int fixup_is_avp_set(void** param, int param_no)
 			*(p++)=0;
 		
 		ap = avpops_parse_pvar(s, 
-			XL_THROW_ERROR|XL_DISABLE_MULTI|XL_DISABLE_COLORS);
+			XL_THROW_ERROR|XL_DISABLE_COLORS);
 		if (ap==0)
 		{
 			LOG(L_ERR,"ERROR:avpops:fixup_is_avp_set: unable to get"
@@ -1147,10 +1147,22 @@ static int fixup_is_avp_set(void** param, int param_no)
 					break;
 				case 'n':
 				case 'N':
+					if(ap->ops&AVPOPS_FLAG_CASTS)
+					{
+						LOG(L_ERR,"ERROR:avpops:fixup_is_avp_set: invalid flag"
+							" combination <%c> and 's|S'\n",*p);
+						return E_UNSPEC;
+					}
 					ap->ops|=AVPOPS_FLAG_CASTN;
 					break;
 				case 's':
 				case 'S':
+					if(ap->ops&AVPOPS_FLAG_CASTN)
+					{
+						LOG(L_ERR,"ERROR:avpops:fixup_is_avp_set: invalid flag"
+							" combination <%c> and 'n|N'\n",*p);
+						return E_UNSPEC;
+					}
 					ap->ops|=AVPOPS_FLAG_CASTS;
 					break;
 				default:
diff --git a/modules_k/avpops/avpops_impl.c b/modules_k/avpops/avpops_impl.c
index 6f091b1dc..e35006606 100644
--- a/modules_k/avpops/avpops_impl.c
+++ b/modules_k/avpops/avpops_impl.c
@@ -1784,33 +1784,55 @@ int ops_is_avp_set(struct sip_msg* msg, struct fis_param *ap)
 	unsigned short    name_type;
 	int_str avp_name;
 	int_str avp_value;
+	int index;
 	
 	/* get avp name */
 	if(avpops_get_aname(msg, ap, &avp_name, &name_type)!=0)
 	{
 		LOG(L_ERR,
-			"avpops:write_avp: error getting dst AVP name\n");
+			"avpops:write_avp: error getting AVP name\n");
+		return -1;
+	}
+
+	/* get avp index */
+	if(xl_get_spec_index(&ap->sval, &index)!=0)
+	{
+		LOG(L_ERR,
+			"avpops:write_avp: error getting AVP index\n");
 		return -1;
 	}
 	
 	avp=search_first_avp(name_type, avp_name, &avp_value, 0);
 	if(avp==0)
 		return -1;
-	if(ap->ops&AVPOPS_FLAG_ALL)
-		return 1;
 	
 	do {
-		if((ap->ops&AVPOPS_FLAG_CASTS && avp->flags&AVP_VAL_STR)
-				|| (ap->ops&AVPOPS_FLAG_CASTN && !(avp->flags&AVP_VAL_STR)))
-			return 1;
-		if(ap->ops&AVPOPS_FLAG_EMPTY)
+		/* last index [-1] or all [*] go here as well */
+		if(index<=0)
 		{
-			if((avp->flags&AVP_VAL_STR)
-					&& (avp_value.s.s==0 || avp_value.s.len==0))
-				return 1;
-			else if(avp_value.n==0)
+			if(ap->ops&AVPOPS_FLAG_ALL)
 				return 1;
+			if((ap->ops&AVPOPS_FLAG_CASTS && !(avp->flags&AVP_VAL_STR))
+					||(ap->ops&AVPOPS_FLAG_CASTN && avp->flags&AVP_VAL_STR))
+				return -1;
+			if(ap->ops&AVPOPS_FLAG_EMPTY)
+			{
+				if(avp->flags&AVP_VAL_STR)
+				{
+					if(avp_value.s.s==0 || avp_value.s.len==0)
+						return 1;
+					else
+						return -1;
+				} else {
+					if(avp_value.n==0)
+						return 1;
+					else
+						return -1;
+				}
+			}
+			return 1;
 		}
+		index--;
 	} while ((avp=search_first_avp(name_type, avp_name, &avp_value, avp))!=0);
 	
 	return -1;

