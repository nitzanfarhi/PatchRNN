commit 858c65f2390b1152918671378275d499f76454e4
Author: pancake <pancake@nopcode.org>
Date:   Mon Oct 22 10:43:10 2012 +0200

    Add sandbox-kill and disable reopen in sandbox mode

diff --git a/libr/core/file.c b/libr/core/file.c
index 48b8a644b..30b473c8f 100644
--- a/libr/core/file.c
+++ b/libr/core/file.c
@@ -12,8 +12,12 @@ R_API ut64 r_core_file_resize(struct r_core_t *core, ut64 newsize) {
 R_API int r_core_file_reopen(RCore *core, const char *args, int perm) {
 	char *path;
 	ut64 addr = 0; // XXX ? check file->map ?
-	RCoreFile *file;
+	RCoreFile *file, *ofile = core->file;
 	int newpid, ret = R_FALSE;
+	if (r_sandbox_enable (0)) {
+		eprintf ("Cannot reopen in sandbox\n");
+		return R_FALSE;
+	}
 	if (!core->file) {
 		eprintf ("No file opened to reopen\n");
 		return R_FALSE;
@@ -34,6 +38,7 @@ R_API int r_core_file_reopen(RCore *core, const char *args, int perm) {
 		core->file = file;
 	} else {
 		eprintf ("Oops. Cannot reopen file.\n");
+		core->file = ofile; // XXX: not necessary?
 	}
 	// TODO: in debugger must select new PID
 	if (r_config_get_i (core->config, "cfg.debug")) {
diff --git a/libr/include/r_util.h b/libr/include/r_util.h
index 7157c5105..bd7084b9a 100644
--- a/libr/include/r_util.h
+++ b/libr/include/r_util.h
@@ -570,6 +570,7 @@ R_API const char *r_constr_add (RConstr *c, const char *str);
 /* sandbox */
 R_API int r_sandbox_enable (int e);
 R_API int r_sandbox_system (const char *x, int fork);
+R_API int r_sandbox_creat (const char *path, int mode);
 R_API int r_sandbox_open (const char *path, int mode, int perm);
 R_API FILE *r_sandbox_fopen (const char *path, const char *mode);
 R_API int r_sandbox_chdir (const char *path);
diff --git a/libr/io/io.c b/libr/io/io.c
index bff392d84..3fbe03159 100644
--- a/libr/io/io.c
+++ b/libr/io/io.c
@@ -118,11 +118,12 @@ R_API RIODesc *r_io_open(RIO *io, const char *file, int flags, int mode) {
 		if (flags & R_IO_WRITE) {
 			fd = r_sandbox_open (uri, O_BINARY | 1, 0);
 			if (fd == -1)
-				creat (uri, O_BINARY);
+				r_sandbox_creat (uri, O_BINARY);
 			fd = r_sandbox_open (uri, O_BINARY | 1, 0);
 		} else fd = r_sandbox_open (uri, O_BINARY);
 #else
-		fd = r_sandbox_open (uri, (flags&R_IO_WRITE)?O_RDWR:O_RDONLY, mode);
+		fd = r_sandbox_open (uri, (flags&R_IO_WRITE)?
+			O_RDWR:O_RDONLY, mode);
 #endif
 	}
 	if (fd >= 0) {
@@ -473,5 +474,5 @@ R_API int r_io_create (RIO *io, const char *file, int mode, int type) {
 		return io->plugin->create (io, file, mode, type);
 	if (type == 'd'|| type == 1)
 		return r_sys_mkdir (file);
-	return creat (file, mode)? R_FALSE: R_TRUE;
+	return r_sandbox_creat (file, mode)? R_FALSE: R_TRUE;
 }
diff --git a/libr/util/sandbox.c b/libr/util/sandbox.c
index 66ca276c6..de6a86760 100644
--- a/libr/util/sandbox.c
+++ b/libr/util/sandbox.c
@@ -1,6 +1,7 @@
 /* radare - LGPL - Copyright 2012 - pancake */
 
 #include <r_util.h>
+#include <signal.h>
 
 static int enabled = 0;
 
@@ -29,11 +30,22 @@ R_API int r_sandbox_system (const char *x, int n) {
 	return -1;
 }
 
-R_API int r_sandbox_open (const char *path, int mode, int perm) {
+R_API int r_sandbox_creat (const char *path, int mode) {
 	if (enabled) {
 		// cannot create
-		if (perm & O_CREAT)
+		if (mode & O_CREAT) return -1;
+		if (mode & O_RDWR) return -1;
+		if (!r_sandbox_check_path (path))
 			return -1;
+	}
+	return creat (path, mode);
+}
+
+R_API int r_sandbox_open (const char *path, int mode, int perm) {
+	if (enabled) {
+		// cannot create
+		if (mode & O_CREAT) return -1;
+		if (mode & O_RDWR) return -1;
 		if (!r_sandbox_check_path (path))
 			return -1;
 	}
@@ -61,3 +73,9 @@ R_API int r_sandbox_chdir (const char *path) {
 	}
 	return chdir (path);
 }
+
+R_API int r_sandbox_kill(int pid, int sig) {
+	if (enabled) // XXX: fine-tune. maybe we want to enable kill for child?
+		return -1;
+	return kill (pid, sig);
+}

