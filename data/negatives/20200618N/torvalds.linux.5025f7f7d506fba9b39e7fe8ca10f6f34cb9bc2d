commit 5025f7f7d506fba9b39e7fe8ca10f6f34cb9bc2d
Author: Roopa Prabhu <roopa@cumulusnetworks.com>
Date:   Fri Jul 20 13:21:01 2018 -0700

    rtnetlink: add rtnl_link_state check in rtnl_configure_link
    
    rtnl_configure_link sets dev->rtnl_link_state to
    RTNL_LINK_INITIALIZED and unconditionally calls
    __dev_notify_flags to notify user-space of dev flags.
    
    current call sequence for rtnl_configure_link
    rtnetlink_newlink
        rtnl_link_ops->newlink
        rtnl_configure_link (unconditionally notifies userspace of
                             default and new dev flags)
    
    If a newlink handler wants to call rtnl_configure_link
    early, we will end up with duplicate notifications to
    user-space.
    
    This patch fixes rtnl_configure_link to check rtnl_link_state
    and call __dev_notify_flags with gchanges = 0 if already
    RTNL_LINK_INITIALIZED.
    
    Later in the series, this patch will help the following sequence
    where a driver implementing newlink can call rtnl_configure_link
    to initialize the link early.
    
    makes the following call sequence work:
    rtnetlink_newlink
        rtnl_link_ops->newlink (vxlan) -> rtnl_configure_link (initializes
                                                    link and notifies
                                                    user-space of default
                                                    dev flags)
        rtnl_configure_link (updates dev flags if requested by user ifm
                             and notifies user-space of new dev flags)
    
    Signed-off-by: Roopa Prabhu <roopa@cumulusnetworks.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

diff --git a/net/core/rtnetlink.c b/net/core/rtnetlink.c
index 5ef61222fdef..e3f743c141b3 100644
--- a/net/core/rtnetlink.c
+++ b/net/core/rtnetlink.c
@@ -2759,9 +2759,12 @@ int rtnl_configure_link(struct net_device *dev, const struct ifinfomsg *ifm)
 			return err;
 	}
 
-	dev->rtnl_link_state = RTNL_LINK_INITIALIZED;
-
-	__dev_notify_flags(dev, old_flags, ~0U);
+	if (dev->rtnl_link_state == RTNL_LINK_INITIALIZED) {
+		__dev_notify_flags(dev, old_flags, 0U);
+	} else {
+		dev->rtnl_link_state = RTNL_LINK_INITIALIZED;
+		__dev_notify_flags(dev, old_flags, ~0U);
+	}
 	return 0;
 }
 EXPORT_SYMBOL(rtnl_configure_link);

