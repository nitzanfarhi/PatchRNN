commit 738e84a15bb73ea7b7db84ee991e894cf67df824
Author: Sage Weil <sage@newdream.net>
Date:   Fri Mar 28 11:35:49 2008 -0700

    mds: only issue PIN caps on open directories; and fix lease revocation bug

diff --git a/src/client/Client.cc b/src/client/Client.cc
index 5dc3e559be..df6df26c3b 100644
--- a/src/client/Client.cc
+++ b/src/client/Client.cc
@@ -2715,7 +2715,7 @@ int Client::_open(const char *path, int flags, mode_t mode, Fh **fhp)
   req->head.args.open.flags = flags;
   req->head.args.open.mode = mode;
 
-  int cmode = req->get_open_file_mode();
+  int cmode = file_flags_to_mode(flags);
 
   // FIXME where does FUSE maintain user information
   req->set_caller_uid(getuid());
diff --git a/src/include/types.h b/src/include/types.h
index 2e7cbafa22..8f7b5486a5 100644
--- a/src/include/types.h
+++ b/src/include/types.h
@@ -150,10 +150,29 @@ namespace __gnu_cxx {
 }
 
 
+// these are bit masks
 #define FILE_MODE_R          1
 #define FILE_MODE_W          2
 #define FILE_MODE_RW         (1|2)
 #define FILE_MODE_LAZY       4
+#define FILE_MODE_PIN        8
+
+static inline int file_flags_to_mode(int flags) {
+  if (flags & O_DIRECTORY)
+    return FILE_MODE_PIN;
+  if (flags & O_LAZY) 
+    return FILE_MODE_LAZY;
+  if (flags & O_WRONLY) 
+    return FILE_MODE_W;
+  if (flags & O_RDWR) 
+    return FILE_MODE_RW;
+  if (flags & O_APPEND) 
+    return FILE_MODE_W;
+  return FILE_MODE_R;
+}
+static inline bool file_mode_is_readonly(int mode) {
+  return (mode & FILE_MODE_W) == 0;
+}
 
 
 inline int DT_TO_MODE(int dt) {
diff --git a/src/mds/Locker.cc b/src/mds/Locker.cc
index 79e70e5a07..1ffdbbe204 100644
--- a/src/mds/Locker.cc
+++ b/src/mds/Locker.cc
@@ -495,6 +495,7 @@ Capability* Locker::issue_new_caps(CInode *in,
   assert(session->inst.name.is_client());
   int my_client = session->inst.name.num();
   int my_want = 0;
+  if (mode & FILE_MODE_PIN) my_want |= CEPH_CAP_PIN;
   if (mode & FILE_MODE_R) my_want |= CEPH_CAP_RDCACHE  | CEPH_CAP_RD;
   if (mode & FILE_MODE_W) my_want |= CEPH_CAP_WRBUFFER | CEPH_CAP_WR | CEPH_CAP_EXCL;
 
@@ -1078,7 +1079,7 @@ void Locker::revoke_client_leases(SimpleLock *lock)
        p++) {
     ClientLease *l = p->second;
     
-    if (l->mask & lock->get_type() == 0)
+    if ((l->mask & lock->get_type()) == 0)
       continue;
     
     n++;
diff --git a/src/mds/Server.cc b/src/mds/Server.cc
index 6b5ff94fb8..0440e07ebd 100644
--- a/src/mds/Server.cc
+++ b/src/mds/Server.cc
@@ -3888,9 +3888,8 @@ void Server::handle_client_open(MDRequest *mdr)
   MClientRequest *req = mdr->client_request;
 
   int flags = req->head.args.open.flags;
-  int cmode = req->get_open_file_mode();
-  bool need_auth = ((cmode != FILE_MODE_R && cmode != FILE_MODE_LAZY) ||
-		    (flags & O_TRUNC));
+  int cmode = file_flags_to_mode(req->head.args.open.flags);
+  bool need_auth = !file_mode_is_readonly(cmode) || (flags & O_TRUNC);
   dout(10) << "open flags = " << flags
 	   << ", filemode = " << cmode
 	   << ", need_auth = " << need_auth
@@ -3905,8 +3904,8 @@ void Server::handle_client_open(MDRequest *mdr)
     reply_request(mdr, -EINVAL);                 // FIXME what error do we want?
     return;
   }
-  // can only open a dir rdonly, no flags.
-  if (cur->inode.is_dir() && (cmode != FILE_MODE_R || (flags | O_DIRECTORY) == 0)) {
+  // can only open a dir with mode FILE_MODE_PIN, at least for now.
+  if (cur->inode.is_dir() && cmode != FILE_MODE_PIN) {
     dout(10) << "bad open flags " << flags << " cmode " << cmode << " on dir " << *cur << dendl;
     reply_request(mdr, -EINVAL);
     return;
@@ -3939,7 +3938,7 @@ void Server::handle_client_open(MDRequest *mdr)
 void Server::_do_open(MDRequest *mdr, CInode *cur)
 {
   MClientRequest *req = mdr->client_request;
-  int cmode = req->get_open_file_mode();
+  int cmode = file_flags_to_mode(req->head.args.open.flags);
 
   // register new cap
   Capability *cap = mds->locker->issue_new_caps(cur, cmode, mdr->session);
diff --git a/src/messages/MClientRequest.h b/src/messages/MClientRequest.h
index 15a2897869..da60845bf0 100644
--- a/src/messages/MClientRequest.h
+++ b/src/messages/MClientRequest.h
@@ -95,19 +95,8 @@ public:
     return metareqid_t(head.client_inst.name, le64_to_cpu(head.tid)); 
   }
 
-  int get_open_file_mode() {
-    if (head.args.open.flags & O_LAZY) 
-      return FILE_MODE_LAZY;
-    if (head.args.open.flags & O_WRONLY) 
-      return FILE_MODE_W;
-    if (head.args.open.flags & O_RDWR) 
-      return FILE_MODE_RW;
-    if (head.args.open.flags & O_APPEND) 
-      return FILE_MODE_W;
-    return FILE_MODE_R;
-  }
   bool open_file_mode_is_readonly() {
-    return get_open_file_mode() == FILE_MODE_R;
+    return file_mode_is_readonly(file_flags_to_mode(head.args.open.flags));
   }
   bool is_idempotent() {
     if (head.op == CEPH_MDS_OP_OPEN) 

