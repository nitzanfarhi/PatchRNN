commit 68fa9f0ab1b61cfc7deee699da8b5b5cb12f7a58
Author: Viresh Kumar <viresh.kumar@linaro.org>
Date:   Mon Aug 17 19:20:20 2015 +0530

    PM / OPP: Fix static checker warning (broken 64bit big endian systems)
    
    Dan Carpenter reported (generated with static checker):
    
    drivers/base/power/opp.c:949 _opp_add_static_v2()
    warn: passing casted pointer '&new_opp->clock_latency_ns' to
    'of_property_read_u32()' 64 vs 32.
    
    This code will break on 64 bit, big endian machines.
    
    Fix this by reading the value in a u32 type variable first and then
    assigning it to the unsigned long variable.
    
    Reported-by: Dan Carpenter <dan.carpenter@oracle.com>
    Suggested-by: Stephen Boyd <sboyd@codeaurora.org>
    Signed-off-by: Viresh Kumar <viresh.kumar@linaro.org>
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>

diff --git a/drivers/base/power/opp.c b/drivers/base/power/opp.c
index 4d6c4576f7ae..803d8b7ced89 100644
--- a/drivers/base/power/opp.c
+++ b/drivers/base/power/opp.c
@@ -918,6 +918,7 @@ static int _opp_add_static_v2(struct device *dev, struct device_node *np)
 	struct device_opp *dev_opp;
 	struct dev_pm_opp *new_opp;
 	u64 rate;
+	u32 val;
 	int ret;
 
 	/* Hold our list modification lock here */
@@ -946,14 +947,16 @@ static int _opp_add_static_v2(struct device *dev, struct device_node *np)
 	new_opp->np = np;
 	new_opp->dynamic = false;
 	new_opp->available = true;
-	of_property_read_u32(np, "clock-latency-ns",
-			     (u32 *)&new_opp->clock_latency_ns);
+
+	if (!of_property_read_u32(np, "clock-latency-ns", &val))
+		new_opp->clock_latency_ns = val;
 
 	ret = opp_get_microvolt(new_opp, dev);
 	if (ret)
 		goto free_opp;
 
-	of_property_read_u32(np, "opp-microamp", (u32 *)&new_opp->u_amp);
+	if (!of_property_read_u32(new_opp->np, "opp-microamp", &val))
+		new_opp->u_amp = val;
 
 	ret = _opp_add(dev, new_opp, dev_opp);
 	if (ret)

