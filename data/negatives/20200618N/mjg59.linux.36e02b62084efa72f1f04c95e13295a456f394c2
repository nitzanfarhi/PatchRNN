commit 36e02b62084efa72f1f04c95e13295a456f394c2
Author: Rafael J. Wysocki <rjw@sisk.pl>
Date:   Tue Oct 16 23:31:06 2007 -0700

    PNP: make pnpacpi_suspend handle errors
    
    pnpacpi_suspend() doesn't check the result returned by
    acpi_pm_device_sleep_state() before passing it to acpi_bus_set_power(),
    which may not be desirable.  Â Make it select the target power state of the
    device using its second argument if acpi_pm_device_sleep_state() fails.
    
    Signed-off-by: Rafael J. Wysocki <rjw@sisk.pl>
    Looks-ok-to: Pavel Machek <pavel@ucw.cz>
    Cc: Adam Belay <ambx1@neo.rr.com>
    Cc: Bjorn Helgaas <bjorn.helgaas@hp.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

diff --git a/drivers/pnp/pnpacpi/core.c b/drivers/pnp/pnpacpi/core.c
index a5a372222d69..e6a2a9fc7f0a 100644
--- a/drivers/pnp/pnpacpi/core.c
+++ b/drivers/pnp/pnpacpi/core.c
@@ -130,11 +130,16 @@ static int pnpacpi_disable_resources(struct pnp_dev *dev)
 #ifdef CONFIG_ACPI_SLEEP
 static int pnpacpi_suspend(struct pnp_dev *dev, pm_message_t state)
 {
-	return acpi_bus_set_power((acpi_handle) dev->data,
-				  acpi_pm_device_sleep_state(&dev->dev,
-							     device_may_wakeup
-							     (&dev->dev),
-							     NULL));
+	int power_state;
+
+	power_state = acpi_pm_device_sleep_state(&dev->dev,
+						device_may_wakeup(&dev->dev),
+						NULL);
+	if (power_state < 0)
+		power_state = (state.event == PM_EVENT_ON) ?
+				ACPI_STATE_D0 : ACPI_STATE_D3;
+
+	return acpi_bus_set_power((acpi_handle) dev->data, power_state);
 }
 
 static int pnpacpi_resume(struct pnp_dev *dev)

