commit edde6c52896cc9b90242b212d65fe1617eb22a3d
Author: krw <krw@openbsd.org>
Date:   Sat Jan 23 15:05:52 2016 +0000

    Pass the disk sector size to open_partition_map(), eliminating it's
    internal need for DEV_BSIZE. Ditto create_partition_map().
    
    malloc((sizeof(struct [block0|dpme])) instead of malloc(DEV_BSIZE).
    
    Remove another #include <param.h>.

diff --git a/sbin/pdisk/partition_map.c b/sbin/pdisk/partition_map.c
index 2779db42665..23454ce084d 100644
--- a/sbin/pdisk/partition_map.c
+++ b/sbin/pdisk/partition_map.c
@@ -1,4 +1,4 @@
-/*	$OpenBSD: partition_map.c,v 1.57 2016/01/23 14:10:05 krw Exp $	*/
+/*	$OpenBSD: partition_map.c,v 1.58 2016/01/23 15:05:52 krw Exp $	*/
 
 /*
  * partition_map.c - partition map routines
@@ -27,7 +27,6 @@
  * WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
  */
 
-#include <sys/param.h>		/* DEV_BSIZE */
 #include <sys/stdint.h>
 
 #include <err.h>
@@ -73,7 +72,7 @@ void		remove_from_disk_order(struct partition_map *);
 void		renumber_disk_addresses(struct partition_map_header *);
 
 struct partition_map_header *
-open_partition_map(int fd, char *name, uint64_t mediasz)
+open_partition_map(int fd, char *name, uint64_t mediasz, uint32_t sectorsz)
 {
 	struct partition_map_header *map;
 	int ok;
@@ -90,8 +89,8 @@ open_partition_map(int fd, char *name, uint64_t mediasz)
 	map->changed = 0;
 	map->disk_order = NULL;
 	map->base_order = NULL;
-	map->physical_block = DEV_BSIZE;
-	map->logical_block = DEV_BSIZE;
+	map->physical_block = sectorsz;
+	map->logical_block = sectorsz;
 	map->blocks_in_map = 0;
 	map->maximum_in_map = -1;
 
@@ -100,7 +99,7 @@ open_partition_map(int fd, char *name, uint64_t mediasz)
 	else
 		map->media_size = mediasz;
 
-	map->block0 = malloc(DEV_BSIZE);
+	map->block0 = malloc(sizeof(struct block0));
 	if (map->block0 == NULL) {
 		warn("can't allocate memory for block zero buffer");
 		free(map);
@@ -124,7 +123,7 @@ open_partition_map(int fd, char *name, uint64_t mediasz)
 		flush_to_newline(0);
 		if (ok == 1) {
 			free_partition_map(map);
-			map = create_partition_map(fd, name, mediasz);
+			map = create_partition_map(fd, name, mediasz, sectorsz);
 			if (map)
 				return (map);
 		}
@@ -154,12 +153,12 @@ free_partition_map(struct partition_map_header * map)
 int
 read_partition_map(struct partition_map_header * map)
 {
-	struct dpme    *dpme;
+	struct dpme *dpme;
 	double d;
 	int ix, old_logical;
 	uint32_t limit;
 
-	dpme = malloc(DEV_BSIZE);
+	dpme = malloc(sizeof(struct dpme));
 	if (dpme == NULL) {
 		warn("can't allocate memory for disk buffers");
 		return -1;
@@ -206,7 +205,7 @@ read_partition_map(struct partition_map_header * map)
 			ix++;
 		}
 
-		dpme = malloc(DEV_BSIZE);
+		dpme = malloc(sizeof(struct dpme));
 		if (dpme == NULL) {
 			warn("can't allocate memory for disk buffers");
 			return -1;
@@ -282,7 +281,7 @@ add_data_to_map(struct dpme * dpme, long ix, struct partition_map_header * map)
 }
 
 struct partition_map_header *
-create_partition_map(int fd, char *name, u_int64_t mediasz)
+create_partition_map(int fd, char *name, u_int64_t mediasz, uint32_t sectorsz)
 {
 	struct partition_map_header *map;
 	struct dpme *dpme;
@@ -298,20 +297,20 @@ create_partition_map(int fd, char *name, u_int64_t mediasz)
 	map->disk_order = NULL;
 	map->base_order = NULL;
 
-	map->physical_block = DEV_BSIZE;
-	map->logical_block = DEV_BSIZE;
+	map->physical_block = sectorsz;
+	map->logical_block = sectorsz;
 
 	map->blocks_in_map = 0;
 	map->maximum_in_map = -1;
 	map->media_size = mediasz;
 
-	map->block0 = calloc(1, DEV_BSIZE);
+	map->block0 = calloc(1, sizeof(struct block0));
 	if (map->block0 == NULL) {
 		warn("can't allocate memory for block zero buffer");
 	} else {
 		coerce_block0(map);
 
-		dpme = calloc(1, DEV_BSIZE);
+		dpme = calloc(1, sizeof(struct dpme));
 		if (dpme == NULL) {
 			warn("can't allocate memory for disk buffers");
 		} else {
@@ -514,7 +513,7 @@ create_dpme(const char *name, const char *dptype, uint32_t base,
 {
 	struct dpme *dpme;
 
-	dpme = calloc(1, DEV_BSIZE);
+	dpme = calloc(1, sizeof(struct dpme));
 	if (dpme == NULL) {
 		warn("can't allocate memory for disk buffers");
 	} else {
diff --git a/sbin/pdisk/partition_map.h b/sbin/pdisk/partition_map.h
index 9f9b67847e2..25bcaf7ee53 100644
--- a/sbin/pdisk/partition_map.h
+++ b/sbin/pdisk/partition_map.h
@@ -1,4 +1,4 @@
-/*	$OpenBSD: partition_map.h,v 1.26 2016/01/22 18:57:42 krw Exp $	*/
+/*	$OpenBSD: partition_map.h,v 1.27 2016/01/23 15:05:52 krw Exp $	*/
 
 /*
  * partition_map.h - partition map routines
@@ -71,14 +71,16 @@ extern int rflag;
 
 int add_partition_to_map(const char *, const char *, uint32_t, uint32_t, struct partition_map_header *);
 void free_partition_map(struct partition_map_header *);
-struct partition_map_header* create_partition_map(int, char *, uint64_t);
+struct partition_map_header* create_partition_map(int, char *, uint64_t,
+    uint32_t);
 void delete_partition_from_map(struct partition_map *);
 struct partition_map* find_entry_by_disk_address(long, struct partition_map_header *);
 struct partition_map* find_entry_by_type(const char *, struct partition_map_header *);
 struct partition_map* find_entry_by_base(uint32_t, struct partition_map_header *);
 struct partition_map_header* init_partition_map(char *);
 void move_entry_in_map(long, long, struct partition_map_header *);
-struct partition_map_header* open_partition_map(int, char *, uint64_t);
+struct partition_map_header* open_partition_map(int, char *, uint64_t,
+    uint32_t);
 void resize_map(long new_size, struct partition_map_header *);
 void write_partition_map(struct partition_map_header *);
 void dpme_init_flags(struct dpme *);
diff --git a/sbin/pdisk/pdisk.c b/sbin/pdisk/pdisk.c
index b1287adeb67..6b50740eb9d 100644
--- a/sbin/pdisk/pdisk.c
+++ b/sbin/pdisk/pdisk.c
@@ -1,4 +1,4 @@
-/*	$OpenBSD: pdisk.c,v 1.61 2016/01/23 14:10:05 krw Exp $	*/
+/*	$OpenBSD: pdisk.c,v 1.62 2016/01/23 15:05:52 krw Exp $	*/
 
 /*
  * pdisk - an editor for Apple format partition tables
@@ -118,7 +118,7 @@ main(int argc, char **argv)
 		    dl.d_secsize);
 	}
 
-	map = open_partition_map(fd, *argv, DL_GETDSIZE(&dl));
+	map = open_partition_map(fd, *argv, DL_GETDSIZE(&dl), dl.d_secsize);
 	if (map != NULL) {
 		if (lflag)
 			dump_partition_map(map);
@@ -201,7 +201,8 @@ edit(struct partition_map_header **mapp)
 			if (get_okay("Discard current map? [n/y]: ", 0) == 1) {
 				oldmap = map;
 				map = create_partition_map(oldmap->fd,
-				    oldmap->name, oldmap->media_size);
+				    oldmap->name, oldmap->media_size,
+				    oldmap->physical_block);
 				if (map == NULL)
 					break;
 				*mapp = map;

