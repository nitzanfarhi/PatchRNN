commit d8545dbc7da37303ac66d100d559b1a72e21472f
Author: lav <>
Date:   Thu May 20 10:37:13 1999 +0000

    *** empty log message ***

diff --git a/src/ArgV.cc b/src/ArgV.cc
index a3477cc8..49e3d979 100644
--- a/src/ArgV.cc
+++ b/src/ArgV.cc
@@ -125,3 +125,11 @@ void ArgV::delarg(int n)
       c--;
    }
 }
+
+int ArgV::getopt_long(const char *opts,const struct option *lopts,int *lind)
+{
+   optind=ind;
+   int r=::getopt_long(c,v,opts,lopts,lind);
+   ind=optind;
+   return r;
+}
diff --git a/src/ArgV.h b/src/ArgV.h
index b9ce860c..e9721f41 100644
--- a/src/ArgV.h
+++ b/src/ArgV.h
@@ -23,8 +23,6 @@
 #ifndef ARGV_H
 #define ARGV_H
 
-#include "getopt.h"
-
 class ArgV
 {
    char **v;
@@ -44,10 +42,11 @@ public:
 
    char *Combine(int start_index=0);
 
+   int getopt_long(const char *opts,const struct option *lopts,int *lind);
    int getopt(const char *opts)
-      { optind=ind; int r=::getopt(c,v,opts); ind=optind; return r; }
-   int getopt_long(const char *opts,const struct option *lopts,int *lind)
-      { optind=ind; int r=::getopt_long(c,v,opts,lopts,lind); ind=optind; return r; }
+      {
+	 return getopt_long(opts,0,0);
+      }
 
    void rewind();
    char *getnext();
diff --git a/src/CatJob.h b/src/CatJob.h
index 81875da4..7aa7c18b 100644
--- a/src/CatJob.h
+++ b/src/CatJob.h
@@ -45,7 +45,7 @@ protected:
 
    void	 NextFile();
 
-   char	 *for_each;
+   const char *for_each;
 
 public:
    int	 Do();
diff --git a/src/CmdExec.cc b/src/CmdExec.cc
index e519b0d6..0cfb1add 100644
--- a/src/CmdExec.cc
+++ b/src/CmdExec.cc
@@ -33,9 +33,9 @@
 #include "misc.h"
 #include "ResMgr.h"
 #include "module.h"
-extern "C" {
-#include <readline/readline.h>
-}
+
+#define RL_PROMPT_START_IGNORE	'\001'
+#define RL_PROMPT_END_IGNORE	'\002'
 
 #define super SessionJob
 
@@ -500,7 +500,7 @@ try_get_cmd:
 	       last_bg=-1;
 	 }
 	 char *prompt=MakePrompt();
-	 char *cmd=feeder->NextCmd(this,prompt);
+	 const char *cmd=feeder->NextCmd(this,prompt);
 	 if(cmd==0)
 	 {
 	    if(next_cmd && *next_cmd && partial_cmd)
diff --git a/src/CmdExec.h b/src/CmdExec.h
index d59b4cfd..968b555d 100644
--- a/src/CmdExec.h
+++ b/src/CmdExec.h
@@ -44,7 +44,7 @@ class CmdFeeder
 public:
    char *saved_buf;
    CmdFeeder *prev;
-   virtual char *NextCmd(class CmdExec *exec,const char *prompt) = 0;
+   virtual const char *NextCmd(class CmdExec *exec,const char *prompt) = 0;
    virtual ~CmdFeeder() {}
 };
 
@@ -188,7 +188,7 @@ public:
    void print_cmd_help(const char *cmd);
    void print_cmd_index();
 
-   static const cmd_rec *CmdExec::CmdByIndex(int i);
+   static const cmd_rec *CmdByIndex(int i);
 
    int	 last_bg;
 };
diff --git a/src/FindJob.cc b/src/FindJob.cc
index be3b7a95..e224c396 100644
--- a/src/FindJob.cc
+++ b/src/FindJob.cc
@@ -28,7 +28,7 @@
 
 #define top (*stack[stack_ptr])
 
-int FindJob::Do()
+int FinderJob::Do()
 {
    int m=STALL;
    int res;
@@ -165,7 +165,7 @@ int FindJob::Do()
    return m;
 }
 
-void FindJob::Up()
+void FinderJob::Up()
 {
    if(stack_ptr==-1)
    {
@@ -181,7 +181,7 @@ void FindJob::Up()
    state=LOOP;
 }
 
-void FindJob::Push(FileSet *fset)
+void FinderJob::Push(FileSet *fset)
 {
    const char *old_path=0;
    if(stack_ptr>=0)
@@ -202,29 +202,29 @@ void FindJob::Push(FileSet *fset)
    stack[stack_ptr]=new place(new_path,fset);
 }
 
-FindJob::place::place(const char *p,FileSet *f)
+FinderJob::place::place(const char *p,FileSet *f)
 {
    path=xstrdup(p);
    fset=f;
 }
-FindJob::place::~place()
+FinderJob::place::~place()
 {
    xfree(path);
    if(fset) delete fset;
 }
 
-void FindJob::Down(const char *p)
+void FinderJob::Down(const char *p)
 {
    dir=p;
    state=INIT;
 }
 
-FindJob::prf_res FindJob::ProcessFile(const char *d,const FileInfo *f)
+FinderJob::prf_res FinderJob::ProcessFile(const char *d,const FileInfo *f)
 {
    return PRF_OK;
 }
 
-void FindJob::Init()
+void FinderJob::Init()
 {
    op="find";
    start_dir=0;
@@ -247,7 +247,7 @@ void FindJob::Init()
    state=INIT;
 }
 
-FindJob::FindJob(FileAccess *s,const char *d)
+FinderJob::FinderJob(FileAccess *s,const char *d)
    : SessionJob(s)
 {
    Init();
@@ -255,7 +255,7 @@ FindJob::FindJob(FileAccess *s,const char *d)
    NextDir(d);
 }
 
-void FindJob::NextDir(const char *d)
+void FinderJob::NextDir(const char *d)
 {
    session->Chdir(init_dir,false); // no verification
    xfree(start_dir);
@@ -263,7 +263,7 @@ void FindJob::NextDir(const char *d)
    Down(start_dir);
 }
 
-FindJob::~FindJob()
+FinderJob::~FinderJob()
 {
    while(stack_ptr>=0)
       Up();
@@ -273,7 +273,7 @@ FindJob::~FindJob()
    if(li) delete li;
 }
 
-void FindJob::ShowRunStatus(StatusLine *sl)
+void FinderJob::ShowRunStatus(StatusLine *sl)
 {
    if(!show_sl)
       return;
@@ -296,9 +296,9 @@ void FindJob::ShowRunStatus(StatusLine *sl)
    }
 }
 
-// FindJob_List implementation
+// FinderJob_List implementation
 // find files and write list to a stream
-FindJob::prf_res FindJob_List::ProcessFile(const char *d,const FileInfo *fi)
+FinderJob::prf_res FinderJob_List::ProcessFile(const char *d,const FileInfo *fi)
 {
    if(buf->Broken())
       return PRF_FATAL;
@@ -313,27 +313,27 @@ FindJob::prf_res FindJob_List::ProcessFile(const char *d,const FileInfo *fi)
       return PRF_WAIT;
    buf->Put(dir_file(d,fi->name));
    buf->Put("\n");
-   return FindJob::ProcessFile(d,fi);
+   return FinderJob::ProcessFile(d,fi);
 }
 
-FindJob_List::FindJob_List(FileAccess *s,const char *d,FDStream *o)
-   : FindJob(s,d)
+FinderJob_List::FinderJob_List(FileAccess *s,const char *d,FDStream *o)
+   : FinderJob(s,d)
 {
    show_sl = !o->usesfd(1);
    buf=new FileOutputBuffer(o);
 }
 
-FindJob_List::~FindJob_List()
+FinderJob_List::~FinderJob_List()
 {
    delete buf;
 }
 
 
-// FindJob_Cmd implementation
+// FinderJob_Cmd implementation
 // process directory tree
-#define super FindJob
+#define super FinderJob
 
-FindJob::prf_res FindJob_Cmd::ProcessFile(const char *d,const FileInfo *f)
+FinderJob::prf_res FinderJob_Cmd::ProcessFile(const char *d,const FileInfo *f)
 {
 #define ISDIR  ((f->defined&f->TYPE) && f->filetype==f->DIRECTORY)
 #define ISLINK ((f->defined&f->TYPE) && f->filetype==f->SYMLINK)
@@ -383,8 +383,8 @@ FindJob::prf_res FindJob_Cmd::ProcessFile(const char *d,const FileInfo *f)
 #undef ISLINK
 }
 
-FindJob_Cmd::FindJob_Cmd(FileAccess *s,ArgV *a,cmd_t c)
-   : FindJob(s,a->getcurr())
+FinderJob_Cmd::FinderJob_Cmd(FileAccess *s,ArgV *a,cmd_t c)
+   : FinderJob(s,a->getcurr())
 {
    cmd=c;
    args=a;
@@ -394,7 +394,7 @@ FindJob_Cmd::FindJob_Cmd(FileAccess *s,ArgV *a,cmd_t c)
    saved_cwd=xgetcwd();
    removing_last=false;
 }
-FindJob_Cmd::~FindJob_Cmd()
+FinderJob_Cmd::~FinderJob_Cmd()
 {
    xfree(saved_cwd);
    delete args;
@@ -406,7 +406,7 @@ FindJob_Cmd::~FindJob_Cmd()
    }
 }
 
-void FindJob_Cmd::Finish()
+void FinderJob_Cmd::Finish()
 {
    if(cmd==RM)
    {
@@ -431,10 +431,10 @@ void FindJob_Cmd::Finish()
    char *d=args->getnext();
    if(!d)
       return;
-   FindJob::NextDir(d);
+   FinderJob::NextDir(d);
 }
 
-int FindJob_Cmd::Done()
+int FinderJob_Cmd::Done()
 {
-   return FindJob::Done() && args->getcurr()==0;
+   return FinderJob::Done() && args->getcurr()==0;
 }
diff --git a/src/FindJob.h b/src/FindJob.h
index 305c844b..fa30debb 100644
--- a/src/FindJob.h
+++ b/src/FindJob.h
@@ -27,7 +27,7 @@
 #include "buffer.h"
 #include "ArgV.h"
 
-class FindJob : public SessionJob
+class FinderJob : public SessionJob
 {
    const char *dir;
    int errors;
@@ -35,7 +35,7 @@ class FindJob : public SessionJob
 
    class place
       {
-	 friend class FindJob;
+	 friend class FinderJob;
 
 	 char *path;
 	 FileSet *fset;
@@ -58,7 +58,7 @@ protected:
    enum state_t { INIT, CD, INFO, LOOP, WAIT, DONE };
    state_t state;
 
-   char *op;
+   const char *op;
    char *start_dir;
    char *init_dir;
 
@@ -79,13 +79,13 @@ public:
    int ExitCode() { return state!=DONE || errors; }
 
    void Init();
-   FindJob(FileAccess *s,const char *d);
-   ~FindJob();
+   FinderJob(FileAccess *s,const char *d);
+   ~FinderJob();
 
    void ShowRunStatus(StatusLine *sl);
 };
 
-class FindJob_List : public FindJob
+class FinderJob_List : public FinderJob
 {
    Buffer *buf;
 protected:
@@ -93,18 +93,18 @@ protected:
    void Finish() { buf->PutEOF(); }
 
 public:
-   FindJob_List(FileAccess *s,const char *d,FDStream *o);
-   ~FindJob_List();
+   FinderJob_List(FileAccess *s,const char *d,FDStream *o);
+   ~FinderJob_List();
 
-   int Done() { return FindJob::Done() && buf->Done(); }
+   int Done() { return FinderJob::Done() && buf->Done(); }
 };
 
-class FindJob_Cmd : public FindJob
+class FinderJob_Cmd : public FinderJob
 {
 public:
    enum cmd_t { GET, RM };
-   FindJob_Cmd(FileAccess *s,ArgV *a,cmd_t c);
-   ~FindJob_Cmd();
+   FinderJob_Cmd(FileAccess *s,ArgV *a,cmd_t c);
+   ~FinderJob_Cmd();
    int Done();
 protected:
    cmd_t cmd;
diff --git a/src/GetJob.cc b/src/GetJob.cc
index 33e2b699..2bee9e2f 100644
--- a/src/GetJob.cc
+++ b/src/GetJob.cc
@@ -36,7 +36,7 @@ int   GetJob::Do()
    RateDrain();
 
    int m=STALL;
-   int fd,res;
+   int res;
 
    if(!curr && args)
       NextFile();
@@ -78,7 +78,7 @@ int   GetJob::Do()
    {
       if(session->IsClosed())
       {
-	 if((fd=local->getfd())==-1)
+	 if(local->getfd()==-1)
 	 {
 	    if(!local->error())
 	    {
diff --git a/src/Http.cc b/src/Http.cc
index 8baa558c..241add74 100644
--- a/src/Http.cc
+++ b/src/Http.cc
@@ -28,12 +28,14 @@
 #include <assert.h>
 #include <errno.h>
 #include <stdarg.h>
-#include <ctype.h>
 #include <time.h>
 #include "Http.h"
 #include "ResMgr.h"
 #include "log.h"
 #include "url.h"
+#include "HttpDir.h"
+
+#include "ascii_ctype.h"
 
 #define super FileAccess
 
@@ -242,9 +244,9 @@ bool Http::ModeSupported()
    }
 }
 
-void Http::SendRequest(const char *connection)
+void Http::SendRequest(const char *connection,const char *f)
 {
-   char *efile=alloca_strdup(url::encode_string(file));
+   char *efile=alloca_strdup(url::encode_string(f));
    char *ecwd=alloca_strdup(url::encode_string(cwd));
    int efile_len;
 
@@ -295,6 +297,7 @@ void Http::SendRequest(const char *connection)
       abort(); // unsupported
 
    case RETRIEVE:
+   retrieve:
       SendMethod("GET",efile);
       if(pos>0)
 	 Send("Range: bytes=%ld-\r\n",pos);
@@ -318,7 +321,7 @@ void Http::SendRequest(const char *connection)
       if(mode==CHANGE_DIR)
 	 SendMethod("HEAD",efile);
       else if(mode==LONG_LIST)
-	 SendMethod("GET",efile);
+	 goto retrieve;
       else if(mode==MAKE_DIR)
 	 SendMethod("PUT",efile);   // hope it would work
       break;
@@ -545,13 +548,8 @@ int Http::Do()
       DebugPrint("---- ","Sending request...",9);
       if(mode==ARRAY_INFO)
       {
-	 xfree(file);
 	 for(int i=array_ptr; i<array_cnt; i++)
-	 {
-	    file=array_for_info[i].file;
-	    SendRequest(i==array_cnt-1 ? "close" : 0);
-	 }
-	 file=0;
+	    SendRequest(i==array_cnt-1 ? "close" : 0, array_for_info[i].file);
       }
       else
       {
@@ -564,6 +562,10 @@ int Http::Do()
    case RECEIVING_HEADER:
       if(send_buf->Error() || recv_buf->Error())
       {
+	 if(send_buf->Error())
+	    DebugPrint("**** ",send_buf->ErrorText());
+	 if(recv_buf->Error())
+	    DebugPrint("**** ",recv_buf->ErrorText());
 	 Disconnect();
 	 return MOVED;
       }
@@ -575,6 +577,7 @@ int Http::Do()
       if(!buf)
       {
 	 // eof
+	 DebugPrint("**** ","Hit EOF while fetching headers");
 	 Disconnect();
 	 return MOVED;
       }
@@ -737,6 +740,10 @@ int Http::Do()
       data_buf=recv_buf;
       if(recv_buf->Error() || send_buf->Error())
       {
+	 if(send_buf->Error())
+	    DebugPrint("**** ",send_buf->ErrorText());
+	 if(recv_buf->Error())
+	    DebugPrint("**** ",recv_buf->ErrorText());
 	 Disconnect();
 	 return MOVED;
       }
@@ -821,10 +828,7 @@ int Http::Read(void *buf,int size)
 	 return 0;
       }
       if(body_size>=0 && bytes_received>=body_size)
-      {
-	 Disconnect();
 	 return 0; // all received
-      }
       int bytes_allowed=BytesAllowed();
       if(size1>bytes_allowed)
 	 size1=bytes_allowed;
@@ -1052,6 +1056,23 @@ bool Http::SameLocationAs(FileAccess *fa)
    return true;
 }
 
+void Http::Connect(const char *new_host,const char *new_port)
+{
+   super::Connect(new_host,new_port);
+   Reconfig();
+   DontSleep();
+   state=DISCONNECTED;
+   xfree(peer);
+   peer=0;
+   try_time=0;
+}
+
+DirList *Http::MakeDirList(ArgV *args)
+{
+   return new HttpDirList(args,this);
+}
+
+
 /* Converts struct tm to time_t, assuming the data in tm is UTC rather
    than local timezone (mktime assumes the latter).
 
@@ -1070,8 +1091,8 @@ mktime_from_utc (struct tm *t)
 }
 
 /* The functions http_atotm and check_end are taken from wget */
-#define ISSPACE(c) isspace((unsigned char)(c))
-#define ISDIGIT(c) isdigit((unsigned char)(c))
+#define ISSPACE(c) is_ascii_space((c))
+#define ISDIGIT(c) is_ascii_digit((c))
 
 /* Check whether the result of strptime() indicates success.
    strptime() returns the pointer to how far it got to in the string.
diff --git a/src/Http.h b/src/Http.h
index 900d66e6..a978411e 100644
--- a/src/Http.h
+++ b/src/Http.h
@@ -61,7 +61,11 @@ class Http : public FileAccess
    FileInputBuffer *recv_buf;
    void SendMethod(const char *,const char *);
    void SendAuth();
-   void SendRequest(const char *connection=0);
+   void SendRequest(const char *connection,const char *f);
+   void SendRequest(const char *connection=0)
+      {
+	 SendRequest(connection,file);
+      }
    int status_code;
    void HandleHeaderLine(const char *name,const char *value);
 
@@ -120,6 +124,8 @@ public:
    int StoreStatus();
    int SendEOT();
 
+   void	 Connect(const char *h,const char *p);
+
    void Close();
    const char *CurrentStatus();
 
@@ -127,6 +133,8 @@ public:
 
    bool SameSiteAs(FileAccess *fa);
    bool SameLocationAs(FileAccess *fa);
+
+   DirList *MakeDirList(ArgV *a);
 };
 
 #endif//HTTP_H
diff --git a/src/MirrorJob.cc b/src/MirrorJob.cc
index e5351034..86501487 100644
--- a/src/MirrorJob.cc
+++ b/src/MirrorJob.cc
@@ -35,10 +35,11 @@
 #include "misc.h"
 #include "xalloca.h"
 #include "plural.h"
+#include "getopt.h"
 
 void  MirrorJob::PrintStatus(int v)
 {
-   char *tab="\t";
+   const char *tab="\t";
 
    if(v!=-1)
       SessionJob::PrintStatus(v);
@@ -122,7 +123,7 @@ void  MirrorJob::HandleFile(int how)
    {
       switch(file->filetype)
       {
-      case(file->NORMAL):
+      case(FileInfo::NORMAL):
       {
       try_get:
 	 bool cont_this=false;
@@ -180,7 +181,7 @@ void  MirrorJob::HandleFile(int how)
 	 sprintf(waiting->cmdline,"\\get %s",file->name);
 	 break;
       }
-      case(file->DIRECTORY):
+      case(FileInfo::DIRECTORY):
       {
       try_recurse:
 	 if(how!=1 || (flags&NO_RECURSION))
@@ -263,7 +264,7 @@ void  MirrorJob::HandleFile(int how)
 
 	 break;
       }
-      case(file->SYMLINK):
+      case(FileInfo::SYMLINK):
 	 if(how!=0)
 	    goto skip;
 	 if(flags&REVERSE)
diff --git a/src/ResMgr.cc b/src/ResMgr.cc
index e2cd7959..77533d78 100644
--- a/src/ResMgr.cc
+++ b/src/ResMgr.cc
@@ -158,10 +158,8 @@ const char *ResMgr::Set(const char *name,const char *cclosure,const char *cvalue
    return 0;
 }
 
-int ResMgr::ResourceCompare(const void *a,const void *b)
+int ResMgr::ResourceCompare(const Resource *ar,const Resource *br)
 {
-   const Resource *ar=*(const Resource*const*)a;
-   const Resource *br=*(const Resource*const*)b;
    int diff=strcmp(ar->type->name,br->type->name);
    if(diff)
       return diff;
@@ -174,6 +172,13 @@ int ResMgr::ResourceCompare(const void *a,const void *b)
    return strcmp(ar->closure,br->closure);
 }
 
+static int resource_compare(const void *a,const void *b)
+{
+   const ResMgr::Resource *ar=*(const ResMgr::Resource*const*)a;
+   const ResMgr::Resource *br=*(const ResMgr::Resource*const*)b;
+   return ResMgr::ResourceCompare(ar,br);
+}
+
 char *ResMgr::Format(bool with_defaults,bool only_defaults)
 {
    char *res;
@@ -238,7 +243,7 @@ char *ResMgr::Format(bool with_defaults,bool only_defaults)
 	 arr[n++]=created[i];
    }
 
-   qsort(arr,n,sizeof(*arr),ResourceCompare);
+   qsort(arr,n,sizeof(*arr),resource_compare);
 
    for(i=0; i<n; i++)
    {
diff --git a/src/ResMgr.h b/src/ResMgr.h
index ff9dc0a5..7eb0ec23 100644
--- a/src/ResMgr.h
+++ b/src/ResMgr.h
@@ -34,7 +34,13 @@ class ResValue;
 class ResMgr
 {
    friend class ResDecl;
+   class Resource;
 
+   static Resource *chain;
+   static ResDecl *type_chain;
+
+
+public:
    class Resource
    {
       friend class ResMgr;
@@ -62,12 +68,6 @@ class ResMgr
       }
    };
 
-   static Resource *chain;
-   static ResDecl *type_chain;
-
-   static int ResourceCompare(const void *a,const void *b);
-
-public:
    static const char *SimpleQuery(const char *name,const char *closure);
    static ResValue Query(const char *name,const char *closure);
 
@@ -86,6 +86,8 @@ public:
    static bool str2bool(const char *value);
 
    static void ClassInit();
+
+   static int ResourceCompare(const Resource *a,const Resource *b);
 };
 
 class ResDecl
diff --git a/src/buffer.cc b/src/buffer.cc
index d15d6c95..09692674 100644
--- a/src/buffer.cc
+++ b/src/buffer.cc
@@ -227,6 +227,8 @@ FileInputBuffer::~FileInputBuffer()
 {
    if(in)
       delete in;
+   if(in_FA)
+      in_FA->Close();
 }
 int FileInputBuffer::Do()
 {
diff --git a/src/commands.cc b/src/commands.cc
index 300457b2..436d03c7 100644
--- a/src/commands.cc
+++ b/src/commands.cc
@@ -64,6 +64,7 @@
 #include "bookmark.h"
 #include "log.h"
 #include "module.h"
+#include "getopt.h"
 
 #include "confpaths.h"
 
@@ -442,12 +443,13 @@ CmdFeeder *lftp_feeder=0;
 Job *CmdExec::builtin_lftp()
 {
    int c;
-   char *cmd=0;
+   const char *cmd=0;
+   char *acmd;
    static struct option lftp_options[]=
    {
       {"help",no_argument,0,'h'},
       {"version",no_argument,0,'v'},
-      {0}
+      {0,0,0,0}
    };
 
    args->rewind();
@@ -463,14 +465,16 @@ Job *CmdExec::builtin_lftp()
 	 cmd="version;";
 	 break;
       case('f'):
-	 cmd=(char*)alloca(20+2*strlen(optarg));
-	 strcpy(cmd,"source \"");
-	 unquote(cmd+strlen(cmd),optarg);
-	 strcat(cmd,"\";");
+	 acmd=(char*)alloca(20+2*strlen(optarg));
+	 strcpy(acmd,"source \"");
+	 unquote(acmd+strlen(acmd),optarg);
+	 strcat(acmd,"\";");
+	 cmd=acmd;
 	 break;
       case('c'):
-	 cmd=(char*)alloca(4+strlen(optarg));
-	 sprintf(cmd,"%s\n\n",optarg);
+	 acmd=(char*)alloca(4+strlen(optarg));
+	 sprintf(acmd,"%s\n\n",optarg);
+	 cmd=acmd;
 	 break;
       }
    }
@@ -705,12 +709,15 @@ CMD(ls)
    int mode=FA::LONG_LIST;
    if(strstr(args->a0(),"nlist"))
       mode=FA::LIST;
+#if 0
    if(mode==FA::LONG_LIST && args->count()==1)
       args->Append(parent->var_ls);
-   LsJob *j=new LsJob(Clone(),output,args->Combine(1),mode);
-   output=0;
+#endif
+   LsJob *j=new LsJob(Clone(),output,args,mode);
    if(!strncmp(args->a0(),"re",2))
       j->NoCache();
+   output=0;
+   args=0;
    return j;
 }
 
@@ -755,8 +762,8 @@ CMD(get)
    int opt;
    bool use_urls=false;
    bool cont=false;
-   char *opts="+ceu";
-   char *op=args->a0();
+   const char *opts="+ceu";
+   const char *op=args->a0();
    ArgV	 *get_args=new ArgV(op);
    int n_conn=0;
    bool del=false;
@@ -864,8 +871,8 @@ CMD(put)
 {
    int opt;
    bool cont=false;
-   char *opts="+c";
-   char *op=args->a0();
+   const char *opts="+c";
+   const char *op=args->a0();
    ArgV	 *get_args=new ArgV(op);
 
    args->rewind();
@@ -982,7 +989,7 @@ CMD(rm)
 
    if(recursive)
    {
-      Job *j=new FindJob_Cmd(Clone(),args,FindJob_Cmd::RM);
+      Job *j=new FinderJob_Cmd(Clone(),args,FinderJob_Cmd::RM);
       args=0;
       return j;
    }
@@ -1410,7 +1417,7 @@ CMD(mv)
    return j;
 }
 
-static char *const cache_subcmd[]={
+static const char *const cache_subcmd[]={
    "status","flush","on","off","size","expire",
    NULL
 };
@@ -1817,10 +1824,10 @@ CMD(at)
 
 CMD(find)
 {
-   char *path=".";
+   const char *path=".";
    if(args->count()>1)
       path=args->getarg(1);
-   Job *j=new class FindJob_List(Clone(),path,
+   Job *j=new class FinderJob_List(Clone(),path,
       output?output:new FDStream(1,"<stdout>"));
    output=0;
    return j;
diff --git a/src/history.cc b/src/history.cc
index f8d6d964..dfdec878 100644
--- a/src/history.cc
+++ b/src/history.cc
@@ -37,7 +37,7 @@ History::History()
    stamp=0;
    fd=-1;
 
-   char *home=getenv("HOME");
+   const char *home=getenv("HOME");
    if(home==0)
       home=".";
    int home_len=strlen(home);
diff --git a/src/keyvalue.cc b/src/keyvalue.cc
index 0d745e2e..cdff39a2 100644
--- a/src/keyvalue.cc
+++ b/src/keyvalue.cc
@@ -116,7 +116,7 @@ static int key_compare(const void *a,const void *b)
 {
    KeyValueDB::Pair *pa=*(KeyValueDB::Pair*const*)a;
    KeyValueDB::Pair *pb=*(KeyValueDB::Pair*const*)b;
-   return strcmp(pa->key,pb->key);
+   return KeyValueDB::KeyCompare(pa,pb);
 }
 
 void KeyValueDB::Sort()
diff --git a/src/keyvalue.h b/src/keyvalue.h
index 4025bc44..e1d8eac2 100644
--- a/src/keyvalue.h
+++ b/src/keyvalue.h
@@ -27,6 +27,7 @@
 
 class KeyValueDB
 {
+public:
    class Pair
    {
    public:
@@ -50,6 +51,7 @@ class KeyValueDB
 	 }
    };
 
+private:
    void Purge(Pair **p)
       {
 	 Pair *to_free=*p;
@@ -114,5 +116,10 @@ public:
       {
 	 Empty();
       }
+
+   static int KeyCompare(const Pair *a,const Pair *b)
+      {
+	 return strcmp(a->key,b->key);
+      }
 };
 #endif //KEYVALUE_H
diff --git a/src/pgetJob.cc b/src/pgetJob.cc
index 85f8f5eb..ef3e7e5c 100644
--- a/src/pgetJob.cc
+++ b/src/pgetJob.cc
@@ -132,7 +132,7 @@ void pgetJob::ShowRunStatus(StatusLine *s)
    int w=s->GetWidth()-40;
    if(w<=0)
       return;
-   char *n=curr;
+   const char *n=curr;
    if((int)strlen(n)>w)
       n=n+strlen(n)-w;
    // xgettext:c-format
@@ -199,8 +199,8 @@ void pgetJob::NextFile()
    total_xferred=0;
 }
 
-pgetJob::ChunkXfer::ChunkXfer(FileAccess *session,char *remote,FDStream *local,
-		     long start,long limit)
+pgetJob::ChunkXfer::ChunkXfer(FileAccess *session,const char *remote,
+      FDStream *local,long start,long limit)
    : XferJob(session)
 {
    this->curr=remote;
diff --git a/src/pgetJob.h b/src/pgetJob.h
index fce601a2..6b38fcde 100644
--- a/src/pgetJob.h
+++ b/src/pgetJob.h
@@ -39,7 +39,7 @@ class pgetJob : public GetJob
       bool no_parallel:1;
       FDStream *local;
 
-      ChunkXfer(FileAccess *session,char *remote,FDStream *local,
+      ChunkXfer(FileAccess *session,const char *remote,FDStream *local,
 	        long start,long limit);
       ~ChunkXfer();
 
diff --git a/src/xmalloc.cc b/src/xmalloc.cc
index 6811cf4f..d4c07bae 100644
--- a/src/xmalloc.cc
+++ b/src/xmalloc.cc
@@ -24,7 +24,7 @@
 #include <stdio.h>
 #include "xmalloc.h"
 
-static void memory_error_and_abort(char *fname,size_t size)
+static void memory_error_and_abort(const char *fname,size_t size)
 {
    fprintf(stderr,"%s: out of virtual memory when trying to get %lu bytes\n",
 	 fname,(long)size);

