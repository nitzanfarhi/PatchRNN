commit c0865653496e34f1609b0a758d9b40a6445ae4f8
Author: matyhtf <mikan.tenny@gmail.com>
Date:   Tue Feb 6 13:34:03 2018 +0800

    fixed redis_coro crash when server close.

diff --git a/swoole_redis_coro.c b/swoole_redis_coro.c
index d0de7b47..517e7b6f 100644
--- a/swoole_redis_coro.c
+++ b/swoole_redis_coro.c
@@ -54,11 +54,15 @@
 #define SW_REDIS_ZSET      4
 #define SW_REDIS_HASH      5
 /* the same errCode define with hiredis */
-#define SW_REDIS_ERR_IO 1 /* Error in read or write */
-#define SW_REDIS_ERR_EOF 3 /* End of file */
-#define SW_REDIS_ERR_PROTOCOL 4 /* Protocol error */
-#define SW_REDIS_ERR_OOM 5 /* Out of memory */
-#define SW_REDIS_ERR_OTHER 2 /* Everything else... */
+enum swRedisError
+{
+    SW_REDIS_ERR_IO = 1, /* Error in read or write */
+    SW_REDIS_ERR_EOF = 3,/* End of file */
+    SW_REDIS_ERR_PROTOCOL = 4,/* Protocol error */
+    SW_REDIS_ERR_OOM = 5,/* Out of memory */
+    SW_REDIS_ERR_OTHER = 2,/* Everything else... */
+    SW_REDIS_ERR_CLOSED = 6, /* Everything else... */
+};
 
 /* Extended SET argument detection */
 #define IS_EX_ARG(a) \
@@ -109,6 +113,12 @@ ZEND_END_ARG_INFO()
 #define IS_NX_XX_ARG(a) (IS_NX_ARG(a) || IS_XX_ARG(a))
 #define SW_REDIS_COMMAND_CHECK \
     swRedisClient *redis = swoole_get_object(getThis()); \
+    if (!redis)\
+    {\
+        zend_update_property_long(swoole_redis_coro_class_entry_ptr, getThis(), ZEND_STRL("errCode"), SW_REDIS_ERR_CLOSED TSRMLS_CC); \
+        zend_update_property_string(swoole_redis_coro_class_entry_ptr, getThis(), ZEND_STRL("errMsg"), "redis client is waiting for response." TSRMLS_CC); \
+        RETURN_FALSE;\
+    }\
 	if (redis->iowait == SW_REDIS_CORO_STATUS_WAIT) \
 	{ \
         zend_update_property_long(swoole_redis_coro_class_entry_ptr, redis->object, ZEND_STRL("errCode"), SW_REDIS_ERR_OTHER TSRMLS_CC); \
@@ -998,12 +1008,6 @@ void swoole_redis_coro_init(int module_number TSRMLS_DC)
 	REGISTER_LONG_CONSTANT("SWOOLE_REDIS_TYPE_HASH", SW_REDIS_HASH, CONST_CS | CONST_PERSISTENT);
 }
 
-static void redis_coro_free(void* data)
-{
-    swRedisClient *redis = (swRedisClient *) data;
-    efree(redis);
-}
-
 static void redis_coro_close(void* data)
 {
     redisAsyncContext *context = data;
@@ -1294,7 +1298,6 @@ static PHP_METHOD(swoole_redis_coro, __destruct)
     {
         return;
     }
-
     if (redis->state != SWOOLE_REDIS_CORO_STATE_CONNECT && redis->state != SWOOLE_REDIS_CORO_STATE_CLOSED)
     {
         swTraceLog(SW_TRACE_REDIS_CLIENT, "fd=%d", redis->context->c.fd);
@@ -1307,9 +1310,8 @@ static PHP_METHOD(swoole_redis_coro, __destruct)
             sw_zval_ptr_dtor(&retval);
         }
     }
+    swoole_set_object(redis->object, NULL);
     redis->object = NULL;
-    redis->state = SWOOLE_REDIS_CORO_STATE_RELEASED;
-    swoole_set_object(getThis(), NULL);
 }
 
 static PHP_METHOD(swoole_redis_coro, set)
@@ -3956,6 +3958,7 @@ static void swoole_redis_coro_onResult(redisAsyncContext *c, void *r, void *priv
 			redis->pipeline_result = NULL;
         }
         swoole_redis_coro_resume(result);
+        return;
     }
     else
     {
@@ -4073,18 +4076,6 @@ static void swoole_redis_coro_onClose(const redisAsyncContext *c, int status)
     redis->context = NULL;
     redis->connected = 0;
 
-    swConnection *_socket = swReactor_get(SwooleG.main_reactor, c->c.fd);
-    _socket->active = 0;
-
-    SwooleG.main_reactor->defer(SwooleG.main_reactor, redis_coro_free, redis);
-
-#if PHP_MAJOR_VERSION < 7
-    if (redis->object)
-    {
-        sw_zval_ptr_dtor(&redis->object);
-    }
-#endif
-
     if (redis->iowait == SW_REDIS_CORO_STATUS_WAIT && redis->object)
     {
         swTraceLog(SW_TRACE_REDIS_CLIENT, "resume, fd=%d, object_id=%d", redis->context->c.fd, sw_get_object_handle(redis->object));
@@ -4104,6 +4095,11 @@ static void swoole_redis_coro_onClose(const redisAsyncContext *c, int status)
         }
         sw_zval_ptr_dtor(&redis_result);
     }
+    if (redis->object)
+    {
+        swoole_set_object(redis->object, NULL);
+    }
+    efree(redis);
 }
 
 static void swoole_redis_coro_event_AddRead(void *privdata)

