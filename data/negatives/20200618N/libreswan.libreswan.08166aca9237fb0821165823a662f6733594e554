commit 08166aca9237fb0821165823a662f6733594e554
Author: Antony Antony <antony@phenome.org>
Date:   Sun Apr 20 16:45:05 2014 +0200

    ikev2: fix bug 143. send delete notification to the other end.

diff --git a/programs/pluto/ikev2.c b/programs/pluto/ikev2.c
index 3ebd7d429..4610e4c49 100644
--- a/programs/pluto/ikev2.c
+++ b/programs/pluto/ikev2.c
@@ -869,7 +869,8 @@ void ikev2_update_counters(struct msg_digest *md)
 	case INITIATOR:
 		/* update lastuse values */
 		pst->st_msgid_lastack = md->msgid_received;
-		pst->st_msgid_nextuse = pst->st_msgid_lastack + 1;
+		if(pst->st_msgid_lastack <= pst->st_msgid_nextuse) 
+			pst->st_msgid_nextuse = pst->st_msgid_lastack + 1;
 		break;
 
 	case RESPONDER:
@@ -1077,8 +1078,8 @@ static void success_v2_state_transition(struct msg_digest **mdp)
 		/* start liveness checks if set, making sure we only schedule once when moving
 		 * from I2->I3 or R1->R2
 		 */
-		if (dpd_active_locally(st) && IS_V2_ESTABLISHED(st->st_state) &&
-					      st->st_state != from_state) {
+		if (st->st_state != from_state && dpd_active_locally(st) && 
+				IS_V2_ESTABLISHED(st->st_state)) {
 			DBG(DBG_DPD,
 			    DBG_log("dpd enabled, scheduling ikev2 liveness checks"));
 			event_schedule(EVENT_v2_LIVENESS,
diff --git a/programs/pluto/ikev2.h b/programs/pluto/ikev2.h
index 97fc165ac..e1d27ddf8 100644
--- a/programs/pluto/ikev2.h
+++ b/programs/pluto/ikev2.h
@@ -21,6 +21,7 @@ extern stf_status ikev2parent_outI1(int whack_sock,
 				    );
 
 extern void ikev2_delete_out(struct state *st);
+extern void v2_delete_my_family(struct state *pst, enum phase1_role role);
 
 extern bool ikev2_out_sa(pb_stream *outs,
 			 unsigned int protoid,
diff --git a/programs/pluto/ikev2_parent.c b/programs/pluto/ikev2_parent.c
index fd328d639..f7de0cf3a 100644
--- a/programs/pluto/ikev2_parent.c
+++ b/programs/pluto/ikev2_parent.c
@@ -2710,7 +2710,7 @@ bool ship_v2N(unsigned int np, u_int8_t critical,
  *   <--  HDR, SK {[N,] [D,] [CP], ...}
  */
 
-static void v2_delete_my_family(struct state *pst)
+void v2_delete_my_family(struct state *pst, enum phase1_role role)
 {
 	/* We are a parent: delete our children and
 	 * then prepare to delete ourself.
@@ -2733,14 +2733,16 @@ static void v2_delete_my_family(struct state *pst)
 		struct state *next_st = st->st_hashchain_next;
 
 		if (st->st_clonedfrom == pst->st_serialno) {
-			change_state(st, STATE_CHILDSA_DEL);
+			if (role == RESPONDER)
+				change_state(st, STATE_CHILDSA_DEL);
 			delete_state(st);
 		}
 		st = next_st;
 	}
 
 	/* delete self */
-	change_state(pst, STATE_IKESA_DEL);
+	if (role == RESPONDER)
+		change_state(pst, STATE_IKESA_DEL);
 	delete_state(pst);
 }
 
@@ -3187,7 +3189,7 @@ stf_status process_informational_ikev2(struct msg_digest *md)
 					 * should be the only payload in the informational.
 					 * Now delete the IKE SA state and all its child states
 					 */
-					v2_delete_my_family(st);
+					v2_delete_my_family(st, RESPONDER);
 				}
 				break;
 
@@ -3269,7 +3271,7 @@ stf_status process_informational_ikev2(struct msg_digest *md)
 					 * should be the only payload in the informational.
 					 * Now delete the IKE SA state and all its child states
 					 */
-					v2_delete_my_family(st);
+					v2_delete_my_family(st, RESPONDER);
 				} else {
 					DBG(DBG_CONTROLMORE,
 					    DBG_log("Received an INFORMATIONAL response, "
@@ -3468,6 +3470,7 @@ void ikev2_delete_out(struct state *st)
 			r_hdr.isa_np = ISAKMP_NEXT_v2E;
 			r_hdr.isa_msgid = htonl(pst->st_msgid_nextuse);
 
+
 			/*set initiator bit if we are initiator*/
 			if (pst->st_state == STATE_PARENT_I2 ||
 			    pst->st_state == STATE_PARENT_I3) {
@@ -3583,6 +3586,9 @@ void ikev2_delete_out(struct state *st)
 
 		send_ike_msg(pst, __FUNCTION__);
 
+		/* delete messages may not be acknowledged.
+		 * increase message ID for next delete message */
+		pst->st_msgid_nextuse++;  
 		/* update state */
 		ikev2_update_counters(&md);
 	}
@@ -3604,7 +3610,7 @@ unhappy_ending:
 		 * Our children will be on the same hash chain
 		 * because we share IKE SPIs.
 		 */
-		v2_delete_my_family(st);
+		v2_delete_my_family(st, RESPONDER);
 	}
 }
 
diff --git a/programs/pluto/rcv_whack.c b/programs/pluto/rcv_whack.c
index b9d6e374e..021dbf5df 100644
--- a/programs/pluto/rcv_whack.c
+++ b/programs/pluto/rcv_whack.c
@@ -65,6 +65,7 @@
 #include "server.h"
 #include "fetch.h"
 #include "timer.h"
+#include "ikev2.h"
 
 #include "kernel_alg.h"
 #include "ike_alg.h"
@@ -398,9 +399,23 @@ void whack_process(int whackfd, const struct whack_message msg)
 
 		if (st == NULL) {
 			loglog(RC_UNKNOWN_NAME, "no state #%lu to delete",
-			       msg.whack_deletestateno);
+					msg.whack_deletestateno);
+
 		} else {
-			delete_state(st);
+			DBG_log("received whack to delete state %s #%lu %s ",
+				st->st_ikev2 ? "IKEv2" : "IKEv1", 
+				st->st_serialno,
+				enum_name(&state_names, st->st_state));
+
+			if ( st->st_ikev2 && !IS_CHILD_SA(st)) {
+				DBG_log("state #%lu in %s is not a CHILD_SA. "
+					"Could be an ISKAMP SA, also delete "
+					"its IPSEC/Child SAs", st->st_serialno,
+					enum_name(&state_names, st->st_state));
+				v2_delete_my_family(st, INITIATOR);
+			} else {
+				delete_state(st);
+			}
 		}
 	}
 

