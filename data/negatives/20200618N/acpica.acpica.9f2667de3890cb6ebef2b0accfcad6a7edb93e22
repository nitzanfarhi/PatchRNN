commit 9f2667de3890cb6ebef2b0accfcad6a7edb93e22
Author: aystarik <aystarik>
Date:   Wed Jun 29 18:17:45 2005 +0000

    Cleanup
    
    
    date    2001.11.15.19.00.00;    author rmoore1; state Exp;

diff --git a/source/components/namespace/nsaccess.c b/source/components/namespace/nsaccess.c
index 170752f29..6a0bd91aa 100644
--- a/source/components/namespace/nsaccess.c
+++ b/source/components/namespace/nsaccess.c
@@ -1,7 +1,7 @@
 /*******************************************************************************
  *
  * Module Name: nsaccess - Top-level functions for accessing ACPI namespace
- *              $Revision: 1.136 $
+ *              $Revision: 1.137 $
  *
  ******************************************************************************/
 
@@ -165,14 +165,12 @@ AcpiNsRootInitialize (void)
         goto UnlockAndExit;
     }
 
-
     /*
      * Tell the rest of the subsystem that the root is initialized
      * (This is OK because the namespace is locked)
      */
     AcpiGbl_RootNode = &AcpiGbl_RootNodeStruct;
 
-
     /* Enter the pre-defined names in the name table */
 
     ACPI_DEBUG_PRINT ((ACPI_DB_INFO, "Entering predefined entries into namespace\n"));
@@ -213,10 +211,8 @@ AcpiNsRootInitialize (void)
              * internal representation. Only types actually
              * used for initial values are implemented here.
              */
-
             switch (InitVal->Type)
             {
-
             case ACPI_TYPE_INTEGER:
 
                 ObjDesc->Integer.Value =
@@ -248,7 +244,6 @@ AcpiNsRootInitialize (void)
                      */
                     Status = AcpiOsCreateSemaphore (ACPI_NO_UNIT_LIMIT,
                                             1, &ObjDesc->Mutex.Semaphore);
-
                     if (ACPI_FAILURE (Status))
                     {
                         goto UnlockAndExit;
@@ -260,14 +255,12 @@ AcpiNsRootInitialize (void)
                      */
                     AcpiGbl_GlobalLockSemaphore = ObjDesc->Mutex.Semaphore;
                 }
-
                 else
                 {
                     /* Create a mutex */
 
                     Status = AcpiOsCreateSemaphore (1, 1,
                                         &ObjDesc->Mutex.Semaphore);
-
                     if (ACPI_FAILURE (Status))
                     {
                         goto UnlockAndExit;
@@ -385,7 +378,6 @@ AcpiNsLookup (
         PrefixNode = ScopeInfo->Scope.Node;
     }
 
-
     /*
      * This check is explicitly split to relax the TypeToCheckFor
      * conditions for BankFieldDefn.  Originally, both BankFieldDefn and
@@ -412,7 +404,6 @@ AcpiNsLookup (
         TypeToCheckFor = Type;
     }
 
-
     /* TBD: [Restructure] - Move the pathname stuff into a new procedure */
 
     /* Examine the name pointer */
@@ -470,7 +461,6 @@ AcpiNsLookup (
                 goto CheckForNewScopeAndExit;
             }
         }
-
         else
         {
             /* Pathname is relative to current scope, start there */
@@ -522,7 +512,6 @@ AcpiNsLookup (
             ACPI_DEBUG_PRINT ((ACPI_DB_NAMES,
                 "Dual Pathname (2 segments, Flags=%X)\n", Flags));
         }
-
         else if (*Pathname == AML_MULTI_NAME_PREFIX_OP)
         {
             NumSegments = (UINT32)* (UINT8 *) ++Pathname;
@@ -535,7 +524,6 @@ AcpiNsLookup (
                 "Multi Pathname (%d Segments, Flags=%X) \n",
                 NumSegments, Flags));
         }
-
         else
         {
             /*
@@ -564,7 +552,6 @@ AcpiNsLookup (
 #endif
     }
 
-
     /*
      * Search namespace for each segment of the name.
      * Loop through and verify/add each name segment.
@@ -594,7 +581,6 @@ AcpiNsLookup (
                                         CurrentNode, InterpreterMode,
                                         ThisSearchType, LocalFlags,
                                         &ThisNode);
-
         if (ACPI_FAILURE (Status))
         {
             if (Status == AE_NOT_FOUND)

