commit 27ef872f852833ab68fad3a0de523830320473fe
Author: Kevin Lin <klin@sourcefire.com>
Date:   Tue Dec 2 16:50:54 2014 -0500

    bb#11217 - fixed js normalization parsing of single-line comments

diff --git a/libclamav/htmlnorm.c b/libclamav/htmlnorm.c
index 7f13e0028..558b2afd5 100644
--- a/libclamav/htmlnorm.c
+++ b/libclamav/htmlnorm.c
@@ -758,7 +758,9 @@ static int cli_html_normalise(int fd, m_area_t *m_area, const char *dirname, tag
 			ptr++;
 		}
 		while (*ptr) {
-			if (!binary && *ptr == '\n') {
+			/* allow the javascript normalization to handle newlines: *
+			 * for finding the end of single-line comments (bb#11217) */
+			if (!in_script && !binary && *ptr == '\n') {
 				/* Convert it to a space and re-process */
 				*ptr = ' ';
 				continue;
diff --git a/libclamav/jsparse/js-norm.c b/libclamav/jsparse/js-norm.c
index 85eba72c2..113ad2352 100644
--- a/libclamav/jsparse/js-norm.c
+++ b/libclamav/jsparse/js-norm.c
@@ -525,7 +525,8 @@ static int replace_token_range(struct tokens *dst, size_t start, size_t end, con
 {
 	const size_t len = with ? with->cnt : 0;
 	size_t i;
-	cli_dbgmsg(MODULE "Replacing tokens %lu - %lu with %lu tokens\n",start, end, len);
+	cli_dbgmsg(MODULE "Replacing tokens %lu - %lu with %lu tokens\n", (long unsigned)start,
+                   (long unsigned)end, (long unsigned)len);
 	if(start >= dst->cnt || end > dst->cnt)
 		return -1;
 	for(i=start;i<end;i++) {
@@ -547,7 +548,7 @@ static int append_tokens(struct tokens *dst, const struct tokens *src)
 		return CL_ENULLARG;
 	if(tokens_ensure_capacity(dst, dst->cnt + src->cnt))
 		return CL_EMEM;
-	cli_dbgmsg(MODULE "Appending %lu tokens\n", src->cnt);
+	cli_dbgmsg(MODULE "Appending %lu tokens\n", (long unsigned)src->cnt);
 	memcpy(&dst->data[dst->cnt], src->data, src->cnt * sizeof(dst->data[0]));
 	dst->cnt += src->cnt;
 	return CL_SUCCESS;
@@ -1110,7 +1111,7 @@ void cli_js_process_buffer(struct parser_state *state, const char *buf, size_t n
 				TOKEN_SET(&val, scope, state->current);
 				break;
 			case TOK_StringLiteral:
-				if(state->tokens.cnt > 0 && state->tokens.data[state->tokens.cnt-1].type == TOK_PLUS) {
+				if(state->tokens.cnt > 1 && state->tokens.data[state->tokens.cnt-1].type == TOK_PLUS) {
 					/* see if can fold */
 					yystype *prev_string = &state->tokens.data[state->tokens.cnt-2];
 					if(prev_string->type == TOK_StringLiteral) {
@@ -1544,9 +1545,8 @@ static int yylex(YYSTYPE *lvalp, yyscan_t  scanner)
 				return parseNumber(lvalp, scanner);
 			case SinglelineComment:
 				while(scanner->pos < scanner->insize) {
-					/* htmlnorm converts \n to space, so
-					 * stop on space too */
-					if(in[scanner->pos] == '\n' || in[scanner->pos] == ' ')
+					/* htmlnorm no longer converts \n to space */
+					if(in[scanner->pos] == '\n')
 						break;
 					scanner->pos++;
 				}

