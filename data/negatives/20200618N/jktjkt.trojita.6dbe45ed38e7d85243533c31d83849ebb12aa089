commit 6dbe45ed38e7d85243533c31d83849ebb12aa089
Author: Pali Roh√°r <pali.rohar@gmail.com>
Date:   Fri Aug 30 11:57:58 2013 +0200

    Add Qt private file qsystemlibrary_p.h which is needed by qstandardpaths_win.cpp
    
    Not all Qt SDK packages contains qt private headers (specialy cross compiled
    env) and compilation without qsystemlibrary_p.h failing for windows platform.
    
    This is needed for mimetypes-qt4, the Qt4 port of Qt5's QMimeDatabase and
    friends. The bacported QStandardPaths::writableLocation makes use of the
    QSystemLibrary class from this header for resolving windows-specific paths. I
    don't know whether QDesktopServices could be used for this purpose, but even if
    that was possible, modifying the mimetypes library is not the thing to do
    anyway.
    
    REVIEW: 112373

diff --git a/src/mimetypes-qt4/io/qstandardpaths_win.cpp b/src/mimetypes-qt4/io/qstandardpaths_win.cpp
index f918e028..110f7c98 100644
--- a/src/mimetypes-qt4/io/qstandardpaths_win.cpp
+++ b/src/mimetypes-qt4/io/qstandardpaths_win.cpp
@@ -40,9 +40,9 @@
 ****************************************************************************/
 
 #include "qstandardpaths.h"
+#include "qsystemlibrary_p.h"
 
 #include <qdir.h>
-#include <private/qsystemlibrary_p.h>
 #include <qstringlist.h>
 #include <qcoreapplication.h>
 
diff --git a/src/mimetypes-qt4/io/qsystemlibrary_p.h b/src/mimetypes-qt4/io/qsystemlibrary_p.h
new file mode 100644
index 00000000..ee3ce00c
--- /dev/null
+++ b/src/mimetypes-qt4/io/qsystemlibrary_p.h
@@ -0,0 +1,112 @@
+/****************************************************************************
+**
+** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies).
+** Contact: http://www.qt-project.org/
+**
+** This file is part of the QtCore module of the Qt Toolkit.
+**
+** $QT_BEGIN_LICENSE:LGPL$
+** GNU Lesser General Public License Usage
+** This file may be used under the terms of the GNU Lesser General Public
+** License version 2.1 as published by the Free Software Foundation and
+** appearing in the file LICENSE.LGPL included in the packaging of this
+** file. Please review the following information to ensure the GNU Lesser
+** General Public License version 2.1 requirements will be met:
+** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
+**
+** In addition, as a special exception, Nokia gives you certain additional
+** rights. These rights are described in the Nokia Qt LGPL Exception
+** version 1.1, included in the file LGPL_EXCEPTION.txt in this package.
+**
+** GNU General Public License Usage
+** Alternatively, this file may be used under the terms of the GNU General
+** Public License version 3.0 as published by the Free Software Foundation
+** and appearing in the file LICENSE.GPL included in the packaging of this
+** file. Please review the following information to ensure the GNU General
+** Public License version 3.0 requirements will be met:
+** http://www.gnu.org/copyleft/gpl.html.
+**
+** Other Usage
+** Alternatively, this file may be used in accordance with the terms and
+** conditions contained in a signed written agreement between you and Nokia.
+**
+**
+**
+**
+**
+**
+** $QT_END_LICENSE$
+**
+****************************************************************************/
+
+#ifndef QSYSTEMLIBRARY_P_H
+#define QSYSTEMLIBRARY_P_H
+
+#include <QtCore/qglobal.h>
+#ifdef Q_OS_WIN
+#include <qt_windows.h>
+#include <QtCore/qstring.h>
+
+QT_BEGIN_NAMESPACE
+
+class QSystemLibrary
+{
+public:
+    explicit QSystemLibrary(const QString &libraryName)
+    {
+        m_libraryName = libraryName;
+        m_handle = 0;
+        m_didLoad = false;
+    }
+
+    explicit QSystemLibrary(const wchar_t *libraryName)
+    {
+        m_libraryName = QString::fromWCharArray(libraryName);
+        m_handle = 0;
+        m_didLoad = false;
+    }
+
+    bool load(bool onlySystemDirectory = true)
+    {
+        m_handle = load((const wchar_t *)m_libraryName.utf16(), onlySystemDirectory);
+        m_didLoad = true;
+        return (m_handle != 0);
+    }
+
+    bool isLoaded()
+    {
+        return (m_handle != 0);
+    }
+
+    void *resolve(const char *symbol)
+    {
+        if (!m_didLoad)
+            load();
+        if (!m_handle)
+            return 0;
+#ifdef Q_OS_WINCE
+        return (void*)GetProcAddress(m_handle, (const wchar_t*)QString::fromLatin1(symbol).utf16());
+#else
+        return (void*)GetProcAddress(m_handle, symbol);
+#endif
+    }
+
+    static void *resolve(const QString &libraryName, const char *symbol)
+    {
+        return QSystemLibrary(libraryName).resolve(symbol);
+    }
+
+    static Q_CORE_EXPORT HINSTANCE load(const wchar_t *lpFileName, bool onlySystemDirectory = true);
+
+private:
+    HINSTANCE m_handle;
+    QString m_libraryName;
+    bool m_didLoad;
+};
+
+QT_END_NAMESPACE
+
+#endif // Q_OS_WIN
+
+#endif // QSYSTEMLIBRARY_P_H
+

