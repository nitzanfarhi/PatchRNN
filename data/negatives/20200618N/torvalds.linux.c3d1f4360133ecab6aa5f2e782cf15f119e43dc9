commit c3d1f4360133ecab6aa5f2e782cf15f119e43dc9
Author: Matt Roper <matthew.d.roper@intel.com>
Date:   Mon Mar 9 10:19:23 2015 -0700

    drm/i915: Update intel_crtc_active() to use state values (v2)
    
    With the switch to atomic plumbing for planes, some of our commit-time
    work (e.g., watermarks) is done after the new atomic state is swapped
    into the relevant DRM object, but before the DRM core has a chance to
    update its legacy state values.  Switch intel_crtc_active() to look at
    the state objects rather than legacy fields to ensure we operate on the
    proper values.
    
    Note that we're continuing to use intel_crtc->active here for the time
    being since crtc->state isn't really hooked up yet.  Once CRTC states
    are wired up properly, we'll want to switch this over to use
    crtc->state->active instead.
    
    v2: Switch back to intel_crtc->active for now; when Ander's work on CRTC
        states is ready, we can flip this over to use crtc->state->active
        instead. (Ville)
    
    Cc: Ander Conselvan De Oliveira <conselvan2@gmail.com>
    Suggested-by: Ville Syrj채l채 <ville.syrjala@linux.intel.com>
    Signed-off-by: Matt Roper <matthew.d.roper@intel.com>
    Reviewed-by: Ville Syrj채l채 <ville.syrjala@linux.intel.com>
    Signed-off-by: Daniel Vetter <daniel.vetter@ffwll.ch>

diff --git a/drivers/gpu/drm/i915/intel_display.c b/drivers/gpu/drm/i915/intel_display.c
index 274ccc491855..c3a58886b32f 100644
--- a/drivers/gpu/drm/i915/intel_display.c
+++ b/drivers/gpu/drm/i915/intel_display.c
@@ -896,8 +896,12 @@ bool intel_crtc_active(struct drm_crtc *crtc)
 	 *
 	 * We can ditch the crtc->primary->fb check as soon as we can
 	 * properly reconstruct framebuffers.
+	 *
+	 * FIXME: The intel_crtc->active here should be switched to
+	 * crtc->state->active once we have proper CRTC states wired up
+	 * for atomic.
 	 */
-	return intel_crtc->active && crtc->primary->fb &&
+	return intel_crtc->active && crtc->primary->state->fb &&
 		intel_crtc->config->base.adjusted_mode.crtc_clock;
 }
 

