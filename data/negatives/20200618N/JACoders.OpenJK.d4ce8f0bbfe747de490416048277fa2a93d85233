commit d4ce8f0bbfe747de490416048277fa2a93d85233
Author: Razish <mrrazish@gmail.com>
Date:   Mon Jan 13 19:52:12 2014 +1100

    [MP] Clean up UI and bot code

diff --git a/codemp/game/ai_main.c b/codemp/game/ai_main.c
index 7852b99e..49e4bb5f 100644
--- a/codemp/game/ai_main.c
+++ b/codemp/game/ai_main.c
@@ -6138,14 +6138,14 @@ void StandardBotAI(bot_state_t *bs, float thinktime)
 	}
 
 	if (bs->revengeEnemy && bs->revengeEnemy->client &&
-		bs->revengeEnemy->client->pers.connected != CON_CONNECTED)
+		bs->revengeEnemy->client->pers.connected != CON_CONNECTED && bs->revengeEnemy->client->pers.connected != CON_CONNECTING)
 	{
 		bs->revengeEnemy = NULL;
 		bs->revengeHateLevel = 0;
 	}
 
 	if (bs->currentEnemy && bs->currentEnemy->client &&
-		bs->currentEnemy->client->pers.connected != CON_CONNECTED)
+		bs->currentEnemy->client->pers.connected != CON_CONNECTED && bs->currentEnemy->client->pers.connected != CON_CONNECTING)
 	{
 		bs->currentEnemy = NULL;
 	}
diff --git a/codemp/game/g_bot.c b/codemp/game/g_bot.c
index a3cbd562..589fa5b3 100644
--- a/codemp/game/g_bot.c
+++ b/codemp/game/g_bot.c
@@ -9,12 +9,10 @@
 
 #define BOT_SPAWN_QUEUE_DEPTH	16
 
-typedef struct botSpawnQueue_s {
+static struct botSpawnQueue_s {
 	int		clientNum;
 	int		spawnTime;
-} botSpawnQueue_t;
-
-static botSpawnQueue_t	botSpawnQueue[BOT_SPAWN_QUEUE_DEPTH];
+} botSpawnQueue[BOT_SPAWN_QUEUE_DEPTH];
 
 vmCvar_t bot_minplayers;
 
@@ -283,7 +281,6 @@ G_LoadArenas
 void G_LoadArenas( void ) {
 #if 0
 	int			numdirs;
-	char		filename[128];
 	char		filename[MAX_QPATH];
 	char		dirlist[1024];
 	char*		dirptr;
@@ -297,7 +294,6 @@ void G_LoadArenas( void ) {
 	dirptr  = dirlist;
 	for (i = 0; i < numdirs; i++, dirptr += dirlen+1) {
 		dirlen = strlen(dirptr);
-		strcpy(filename, "scripts/");
 		Q_strncpyz( filename, "scripts/", sizeof( filename ) );
 		strcat(filename, dirptr);
 		G_LoadArenasFromFile(filename);
diff --git a/codemp/ui/ui_atoms.c b/codemp/ui/ui_atoms.c
index fdae7523..1e2a1131 100644
--- a/codemp/ui/ui_atoms.c
+++ b/codemp/ui/ui_atoms.c
@@ -29,98 +29,6 @@ char *UI_Cvar_VariableString( const char *name ) {
 	return s;
 }
 
-void UI_SetBestScores(postGameInfo_t *newInfo, qboolean postGame) {
-	trap->Cvar_Set( "ui_scoreAccuracy",		va( "%i%%", newInfo->accuracy ) );
-	trap->Cvar_Set( "ui_scoreImpressives",	va( "%i", newInfo->impressives ) );
-	trap->Cvar_Set( "ui_scoreExcellents", 	va( "%i", newInfo->excellents ) );
-	trap->Cvar_Set( "ui_scoreDefends", 		va( "%i", newInfo->defends ) );
-	trap->Cvar_Set( "ui_scoreAssists", 		va( "%i", newInfo->assists ) );
-	trap->Cvar_Set( "ui_scoreGauntlets", 		va( "%i", newInfo->gauntlets ) );
-	trap->Cvar_Set( "ui_scoreScore", 			va( "%i", newInfo->score ) );
-	trap->Cvar_Set( "ui_scorePerfect",	 	va( "%i", newInfo->perfects ) );
-	trap->Cvar_Set( "ui_scoreTeam",			va( "%i to %i", newInfo->redScore, newInfo->blueScore ) );
-	trap->Cvar_Set( "ui_scoreBase",			va( "%i", newInfo->baseScore ) );
-	trap->Cvar_Set( "ui_scoreTimeBonus",		va( "%i", newInfo->timeBonus ) );
-	trap->Cvar_Set( "ui_scoreSkillBonus",		va( "%i", newInfo->skillBonus ) );
-	trap->Cvar_Set( "ui_scoreShutoutBonus",	va( "%i", newInfo->shutoutBonus ) );
-	trap->Cvar_Set( "ui_scoreTime",			va( "%02i:%02i", newInfo->time / 60, newInfo->time % 60 ) );
-	trap->Cvar_Set( "ui_scoreCaptures",		va( "%i", newInfo->captures ) );
-	if (postGame) {
-		trap->Cvar_Set( "ui_scoreAccuracy2",		va( "%i%%", newInfo->accuracy ) );
-		trap->Cvar_Set( "ui_scoreImpressives2",	va( "%i", newInfo->impressives ) );
-		trap->Cvar_Set( "ui_scoreExcellents2", 	va( "%i", newInfo->excellents ) );
-		trap->Cvar_Set( "ui_scoreDefends2", 		va( "%i", newInfo->defends ) );
-		trap->Cvar_Set( "ui_scoreAssists2", 		va( "%i", newInfo->assists ) );
-		trap->Cvar_Set( "ui_scoreGauntlets2", 	va( "%i", newInfo->gauntlets ) );
-		trap->Cvar_Set( "ui_scoreScore2", 		va( "%i", newInfo->score ) );
-		trap->Cvar_Set( "ui_scorePerfect2",	 	va( "%i", newInfo->perfects ) );
-		trap->Cvar_Set( "ui_scoreTeam2",			va( "%i to %i", newInfo->redScore, newInfo->blueScore ) );
-		trap->Cvar_Set( "ui_scoreBase2",			va( "%i", newInfo->baseScore ) );
-		trap->Cvar_Set( "ui_scoreTimeBonus2",		va( "%i", newInfo->timeBonus ) );
-		trap->Cvar_Set( "ui_scoreSkillBonus2",	va( "%i", newInfo->skillBonus ) );
-		trap->Cvar_Set( "ui_scoreShutoutBonus2",	va( "%i", newInfo->shutoutBonus ) );
-		trap->Cvar_Set( "ui_scoreTime2",			va( "%02i:%02i", newInfo->time / 60, newInfo->time % 60 ) );
-		trap->Cvar_Set( "ui_scoreCaptures2",		va( "%i", newInfo->captures ) );
-	}
-}
-
-void UI_LoadBestScores(const char *map, int game) {
-	char		fileName[MAX_QPATH];
-	fileHandle_t f;
-	postGameInfo_t newInfo;
-	memset(&newInfo, 0, sizeof(postGameInfo_t));
-	Com_sprintf(fileName, MAX_QPATH, "games/%s_%i.game", map, game);
-	if (trap->FS_Open(fileName, &f, FS_READ) >= 0) {
-		int size = 0;
-		trap->FS_Read(&size, sizeof(int), f);
-		if (size == sizeof(postGameInfo_t)) {
-			trap->FS_Read(&newInfo, sizeof(postGameInfo_t), f);
-		}
-		trap->FS_Close(f);
-	}
-	UI_SetBestScores(&newInfo, qfalse);
-
-	Com_sprintf(fileName, MAX_QPATH, "demos/%s_%d.dm_%d", map, game, (int)trap->Cvar_VariableValue("protocol"));
-	uiInfo.demoAvailable = qfalse;
-	if (trap->FS_Open(fileName, &f, FS_READ) >= 0) {
-		uiInfo.demoAvailable = qtrue;
-		trap->FS_Close(f);
-	} 
-}
-
-/*
-===============
-UI_ClearScores
-===============
-*/
-void UI_ClearScores( void ) {
-	char	gameList[4096];
-	char *gameFile;
-	int		i, len, count, size;
-	fileHandle_t f;
-	postGameInfo_t newInfo;
-
-	count = trap->FS_GetFileList( "games", "game", gameList, sizeof(gameList) );
-
-	size = sizeof(postGameInfo_t);
-	memset(&newInfo, 0, size);
-
-	if (count > 0) {
-		gameFile = gameList;
-		for ( i = 0; i < count; i++ ) {
-			len = strlen(gameFile);
-			if (trap->FS_Open(va("games/%s",gameFile), &f, FS_WRITE) >= 0) {
-				trap->FS_Write(&size, sizeof(int), f);
-				trap->FS_Write(&newInfo, size, f);
-				trap->FS_Close(f);
-			}
-			gameFile += len + 1;
-		}
-	}
-	
-	UI_SetBestScores(&newInfo, qfalse);
-}
-
 static void	UI_Cache_f( void ) {
 	Display_CacheAll();
 	if ( trap->Cmd_Argc() == 2 ) {
@@ -131,105 +39,6 @@ static void	UI_Cache_f( void ) {
 	}
 }
 
-/*
-=======================
-UI_CalcPostGameStats_f
-=======================
-*/
-static void UI_CalcPostGameStats_f( void ) {
-	char		map[MAX_QPATH];
-	char		fileName[MAX_QPATH];
-	char		info[MAX_INFO_STRING];
-	fileHandle_t f;
-	int size, game, time, adjustedTime;
-	postGameInfo_t oldInfo;
-	postGameInfo_t newInfo;
-	qboolean newHigh = qfalse;
-
-	trap->GetConfigString( CS_SERVERINFO, info, sizeof(info) );
-	Q_strncpyz( map, Info_ValueForKey( info, "mapname" ), sizeof(map) );
-	game = atoi(Info_ValueForKey(info, "g_gametype"));
-
-	// compose file name
-	Com_sprintf(fileName, MAX_QPATH, "games/%s_%i.game", map, game);
-	// see if we have one already
-	memset(&oldInfo, 0, sizeof(postGameInfo_t));
-	if (trap->FS_Open(fileName, &f, FS_READ) >= 0) {
-	// if so load it
-		size = 0;
-		trap->FS_Read(&size, sizeof(int), f);
-		if (size == sizeof(postGameInfo_t)) {
-			trap->FS_Read(&oldInfo, sizeof(postGameInfo_t), f);
-		}
-		trap->FS_Close(f);
-	}					 
-
-	newInfo.accuracy = atoi(UI_Argv(3));
-	newInfo.impressives = atoi(UI_Argv(4));
-	newInfo.excellents = atoi(UI_Argv(5));
-	newInfo.defends = atoi(UI_Argv(6));
-	newInfo.assists = atoi(UI_Argv(7));
-	newInfo.gauntlets = atoi(UI_Argv(8));
-	newInfo.baseScore = atoi(UI_Argv(9));
-	newInfo.perfects = atoi(UI_Argv(10));
-	newInfo.redScore = atoi(UI_Argv(11));
-	newInfo.blueScore = atoi(UI_Argv(12));
-	time = atoi(UI_Argv(13));
-	newInfo.captures = atoi(UI_Argv(14));
-
-	newInfo.time = (time - trap->Cvar_VariableValue("ui_matchStartTime")) / 1000;
-	adjustedTime = uiInfo.mapList[ui_currentMap.integer].timeToBeat[game];
-	if (newInfo.time < adjustedTime) { 
-		newInfo.timeBonus = (adjustedTime - newInfo.time) * 10;
-	} else {
-		newInfo.timeBonus = 0;
-	}
-
-	if (newInfo.redScore > newInfo.blueScore && newInfo.blueScore <= 0) {
-		newInfo.shutoutBonus = 100;
-	} else {
-		newInfo.shutoutBonus = 0;
-	}
-
-	newInfo.skillBonus = trap->Cvar_VariableValue("g_spSkill");
-	if (newInfo.skillBonus <= 0) {
-		newInfo.skillBonus = 1;
-	}
-	newInfo.score = newInfo.baseScore + newInfo.shutoutBonus + newInfo.timeBonus;
-	newInfo.score *= newInfo.skillBonus;
-
-	// see if the score is higher for this one
-	newHigh = (qboolean)(newInfo.redScore > newInfo.blueScore && newInfo.score > oldInfo.score);
-
-	if  (newHigh) {
-		// if so write out the new one
-		uiInfo.newHighScoreTime = uiInfo.uiDC.realTime + 20000;
-		if (trap->FS_Open(fileName, &f, FS_WRITE) >= 0) {
-			size = sizeof(postGameInfo_t);
-			trap->FS_Write(&size, sizeof(int), f);
-			trap->FS_Write(&newInfo, sizeof(postGameInfo_t), f);
-			trap->FS_Close(f);
-		}
-	}
-
-	if (newInfo.time < oldInfo.time) {
-		uiInfo.newBestTime = uiInfo.uiDC.realTime + 20000;
-	}
- 
-	// put back all the ui overrides
-	trap->Cvar_Set( "capturelimit",	UI_Cvar_VariableString( "ui_saveCaptureLimit" ) );
-	trap->Cvar_Set( "fraglimit",		UI_Cvar_VariableString( "ui_saveFragLimit" ) );
-	trap->Cvar_Set( "duel_fraglimit",	UI_Cvar_VariableString( "ui_saveDuelLimit" ) );
-	trap->Cvar_Set( "cg_drawTimer",	UI_Cvar_VariableString( "ui_drawTimer" ) );
-	trap->Cvar_Set( "g_doWarmup",		UI_Cvar_VariableString( "ui_doWarmup" ) );
-	trap->Cvar_Set( "g_Warmup",		UI_Cvar_VariableString( "ui_Warmup" ) );
-	trap->Cvar_Set( "sv_pure",		UI_Cvar_VariableString( "ui_pure" ) );
-	trap->Cvar_Set( "g_friendlyFire",	UI_Cvar_VariableString( "ui_friendlyFire" ) );
-
-	UI_SetBestScores(&newInfo, qtrue);
-	UI_ShowPostGame(newHigh);
-}
-
 static void UI_OpenMenu_f( void ) {
 	Menus_CloseAll();
 	if ( Menus_ActivateByName( UI_Argv( 1 ) ) )
@@ -244,10 +53,6 @@ static void UI_OpenSiegeMenu_f( void ) {
 	}
 }
 
-static void UI_Test_f( void ) {
-	UI_ShowPostGame(qtrue);
-}
-
 typedef struct consoleCommand_s {
 	const char	*cmd;
 	void		(*func)(void);
@@ -259,13 +64,11 @@ int cmdcmp( const void *a, const void *b ) {
 
 /* This array MUST be sorted correctly by alphabetical name field */
 static consoleCommand_t	commands[] = {
-	{ "postgame",			UI_CalcPostGameStats_f },
 	{ "ui_cache",			UI_Cache_f },
 	{ "ui_load",			UI_Load },
 	{ "ui_openmenu",		UI_OpenMenu_f },
 	{ "ui_opensiegemenu",	UI_OpenSiegeMenu_f },
 	{ "ui_report",			UI_Report },
-	{ "ui_test",			UI_Test_f },
 };
 
 static const size_t numCommands = ARRAY_LEN( commands );
diff --git a/codemp/ui/ui_local.h b/codemp/ui/ui_local.h
index e4b04a4b..37f767c2 100644
--- a/codemp/ui/ui_local.h
+++ b/codemp/ui/ui_local.h
@@ -253,11 +253,6 @@ typedef struct playerSpeciesInfo_s {
 
 typedef struct uiInfo_s {
 	displayContextDef_t		uiDC;
-	int						newHighScoreTime;
-	int						newBestTime;
-	qboolean				newHighScore;
-	qboolean				demoAvailable;
-	qboolean				soundHighScore;
 
 	int						characterCount;
 	int						botIndex;
@@ -345,8 +340,6 @@ typedef struct uiInfo_s {
 	int						forceConfigDarkIndexBegin; //mark the index number dark configs start at
 	int						forceConfigLightIndexBegin; //mark the index number light configs start at
 
-	int						effectsColor;
-
 	qboolean				inGameLoad;
 
 	int						playerSpeciesCount;
@@ -366,7 +359,6 @@ qboolean	UI_ConsoleCommand( int realTime );
 void		UI_DrawHandlePic( float x, float y, float w, float h, qhandle_t hShader ); 
 void		UI_FillRect( float x, float y, float width, float height, const float *color );
 char		*UI_Cvar_VariableString( const char *var_name );
-void		UI_LoadBestScores( const char *map, int game );
 
 
 //
@@ -388,24 +380,4 @@ qboolean UI_SaberTypeForSaber( const char *saberName, char *saberType );
 
 // new ui 
 
-// for tracking sp game info in Team Arena
-typedef struct postGameInfo_s {
-	int score;
-	int redScore;
-	int blueScore;
-	int perfects;
-	int accuracy;
-	int impressives;
-	int excellents;
-	int defends;
-	int assists;
-	int gauntlets;
-	int	captures;
-	int time;
-	int timeBonus;
-	int shutoutBonus;
-	int skillBonus;
-	int baseScore;
-} postGameInfo_t;
-
 extern uiImport_t *trap;
diff --git a/codemp/ui/ui_main.c b/codemp/ui/ui_main.c
index f3e8b843..0d5f146b 100644
--- a/codemp/ui/ui_main.c
+++ b/codemp/ui/ui_main.c
@@ -89,7 +89,7 @@ const char *datapadMoveTitleBaseAnims[MD_MOVE_TITLE_MAX] =
 
 #define MAX_MOVES 16
 
-typedef struct 
+typedef struct datpadmovedata_s
 {
 	const char	*title;	
 	const char	*desc;	
@@ -476,7 +476,7 @@ static const char *skillLevels[] = {
   "SKILL4",//"Hardcore",
   "SKILL5"//"Nightmare"
 };
-static const int numSkillLevels = ARRAY_LEN( skillLevels );
+static const size_t numSkillLevels = ARRAY_LEN( skillLevels );
 
 static const char *gameTypes[] = {
 	"FFA",
@@ -954,14 +954,6 @@ void UI_SetActiveMenu( uiMenuCommand_t menu ) {
 	}
 }
 
-void UI_ShowPostGame(qboolean newHigh) {
-	trap->Cvar_Set ("cg_cameraOrbit", "0");
-//	trap->Cvar_Set("cg_thirdPerson", "0");
-	trap->Cvar_Set( "sv_killserver", "1" );
-	uiInfo.soundHighScore = newHigh;
-	UI_SetActiveMenu( UIMENU_POSTGAME );
-}
-
 void UI_DrawCenteredPic(qhandle_t image, int w, int h) {
 	int x, y;
 	x = (SCREEN_WIDTH - w) / 2;
@@ -1985,11 +1977,6 @@ static void UI_DrawTeamMember(rectDef_t *rect, float scale, vec4_t color, qboole
 	Text_Paint(rect->x, rect->y, scale, finalColor, text, 0, 0, textStyle, iMenuFont);
 }
 
-static void UI_DrawEffects(rectDef_t *rect, float scale, vec4_t color) 
-{
-	UI_DrawHandlePic( rect->x, rect->y, rect->w, rect->h, uiSaberColorShaders[uiInfo.effectsColor]);
-}
-
 static void UI_DrawMapPreview(rectDef_t *rect, float scale, vec4_t color, qboolean net) {
 	int map = (net) ? ui_currentNetMap.integer : ui_currentMap.integer;
 	if (map < 0 || map > uiInfo.mapCount) {
@@ -2014,21 +2001,6 @@ static void UI_DrawMapPreview(rectDef_t *rect, float scale, vec4_t color, qboole
 	}
 }
 
-static void UI_DrawMapTimeToBeat(rectDef_t *rect, float scale, vec4_t color, int textStyle, int iMenuFont) {
-	int minutes, seconds, time;
-	if (ui_currentMap.integer < 0 || ui_currentMap.integer > uiInfo.mapCount) {
-		trap->Cvar_Set("ui_currentMap", "0");
-		trap->Cvar_Update(&ui_currentMap);
-	}
-
-	time = uiInfo.mapList[ui_currentMap.integer].timeToBeat[uiInfo.gameTypes[ui_gametype.integer].gtEnum];
-
-	minutes = time / 60;
-	seconds = time % 60;
-
-	Text_Paint(rect->x, rect->y, scale, color, va("%02i:%02i", minutes, seconds), 0, 0, textStyle, iMenuFont);
-}
-
 static void UI_DrawMapCinematic(rectDef_t *rect, float scale, vec4_t color, qboolean net) {
 	int map = (net) ? ui_currentNetMap.integer : ui_currentMap.integer;
 	if (map < 0 || map > uiInfo.mapCount) {
@@ -2258,11 +2230,9 @@ void UpdateForceStatus()
 		{
 		case TEAM_RED:
 			uiSkinColor = TEAM_RED;
-			uiInfo.effectsColor = SABER_RED;
 			break;
 		case TEAM_BLUE:
 			uiSkinColor = TEAM_BLUE;
-			uiInfo.effectsColor = SABER_BLUE;
 			break;
 		default:
 			trap->GetConfigString( CS_SERVERINFO, info, sizeof(info) );
@@ -3057,7 +3027,6 @@ static void UI_OwnerDraw(float x, float y, float w, float h, float text_x, float
 		UI_DrawForceStars(&rect, scale, color, textStyle, findex, drawRank, 0, NUM_FORCE_POWER_LEVELS-1);
 		break;
     case UI_EFFECTS:
-      UI_DrawEffects(&rect, scale, color);
       break;
     case UI_PLAYERMODEL:
       //UI_DrawPlayerModel(&rect);
@@ -3090,7 +3059,6 @@ static void UI_OwnerDraw(float x, float y, float w, float h, float text_x, float
       UI_DrawMapPreview(&rect, scale, color, qtrue);
       break;
     case UI_MAP_TIMETOBEAT:
-      UI_DrawMapTimeToBeat(&rect, scale, color, textStyle, iMenuFont);
       break;
     case UI_MAPCINEMATIC:
       UI_DrawMapCinematic(&rect, scale, color, qfalse);
@@ -3321,31 +3289,6 @@ static qboolean UI_OwnerDrawVisible(int flags) {
 				vis = qfalse;
 			}
 			flags &= ~UI_SHOW_NETANYNONTEAMGAME;
-		}
-		if (flags & UI_SHOW_NEWHIGHSCORE) {
-			if (uiInfo.newHighScoreTime < uiInfo.uiDC.realTime) {
-				vis = qfalse;
-			} else {
-				if (uiInfo.soundHighScore) {
-					if (trap->Cvar_VariableValue("sv_killserver") == 0) {
-						// wait on server to go down before playing sound
-						uiInfo.soundHighScore = qfalse;
-					}
-				}
-			}
-			flags &= ~UI_SHOW_NEWHIGHSCORE;
-		}
-		if (flags & UI_SHOW_NEWBESTTIME) {
-			if (uiInfo.newBestTime < uiInfo.uiDC.realTime) {
-				vis = qfalse;
-			}
-			flags &= ~UI_SHOW_NEWBESTTIME;
-		}
-		if (flags & UI_SHOW_DEMOAVAILABLE) {
-			if (!uiInfo.demoAvailable) {
-				vis = qfalse;
-			}
-			flags &= ~UI_SHOW_DEMOAVAILABLE;
 		} else {
 			flags = 0;
 		}
@@ -3373,37 +3316,6 @@ static qboolean UI_Handicap_HandleKey(int flags, float *special, int key) {
 	return qfalse;
 }
 
-static qboolean UI_Effects_HandleKey(int flags, float *special, int key) {
-	if (key == A_MOUSE1 || key == A_MOUSE2 || key == A_ENTER || key == A_KP_ENTER)
-	{
-		if ( !UI_TrueJediEnabled() )
-		{
-			int team = (int)(trap->Cvar_VariableValue("ui_myteam"));
-					
-			if (team == TEAM_RED || team==TEAM_BLUE)
-			{
-				return qfalse;
-			}
-		}
-				
-		if (key == A_MOUSE2) {
-			uiInfo.effectsColor--;
-		} else {
-			uiInfo.effectsColor++;
-		}
-		
-		if( uiInfo.effectsColor > 5 ) {
-			uiInfo.effectsColor = 0;
-		} else if (uiInfo.effectsColor < 0) {
-			uiInfo.effectsColor = 5;
-		}
-		
-		trap->Cvar_SetValue( "color1", uiInfo.effectsColor );
-		return qtrue;
-	}
-	return qfalse;
-}
-
 extern void	Item_RunScript(itemDef_t *item, const char *s);		//from ui_shared;
 
 // For hot keys on the chat main menu.
@@ -3749,7 +3661,6 @@ static qboolean UI_GameType_HandleKey(int flags, float *special, int key, qboole
 		trap->Cvar_Set("ui_gametype", va("%d", value));
 		trap->Cvar_Update(&ui_gametype);
 		UI_SetCapFragLimits(qtrue);
-		UI_LoadBestScores(uiInfo.mapList[ui_currentMap.integer].mapLoadName, uiInfo.gameTypes[ui_gametype.integer].gtEnum);
 		if (resetMap && oldCount != UI_MapCountByGameType(qtrue)) {
 			trap->Cvar_Set( "ui_currentMap", "0");
 			trap->Cvar_Update(&ui_currentMap);
@@ -4244,7 +4155,6 @@ static qboolean UI_OwnerDrawHandleKey(int ownerDraw, int flags, float *special,
 		return UI_ForcePowerRank_HandleKey(flags, special, key, uiForcePowersRank[findex], 0, NUM_FORCE_POWER_LEVELS-1, ownerDraw);
 		break;
     case UI_EFFECTS:
-      return UI_Effects_HandleKey(flags, special, key);
       break;
     case UI_GAMETYPE:
       return UI_GameType_HandleKey(flags, special, key, qtrue);
@@ -4339,7 +4249,7 @@ static qboolean UI_OwnerDrawHandleKey(int ownerDraw, int flags, float *special,
 }
 
 static float UI_GetValue(int ownerDraw) {
-  return 0;
+	return 0;
 }
 
 /*
@@ -6024,19 +5934,12 @@ static void UI_RunMenuScript(char **args)
 			trap->Cvar_Set("com_errorMessage", "");
 		} else if (Q_stricmp(name, "loadGameInfo") == 0) {
 			UI_ParseGameInfo("ui/jamp/gameinfo.txt");
-			UI_LoadBestScores(uiInfo.mapList[ui_currentMap.integer].mapLoadName, uiInfo.gameTypes[ui_gametype.integer].gtEnum);
-		} else if (Q_stricmp(name, "resetScores") == 0) {
-			UI_ClearScores();
 		} else if (Q_stricmp(name, "RefreshServers") == 0) {
 			UI_StartServerRefresh(qtrue);
 			UI_BuildServerDisplayList(qtrue);
 		} else if (Q_stricmp(name, "RefreshFilter") == 0) {
 			UI_StartServerRefresh(qfalse);
 			UI_BuildServerDisplayList(qtrue);
-		} else if (Q_stricmp(name, "RunSPDemo") == 0) {
-			if (uiInfo.demoAvailable) {
-				trap->Cmd_ExecuteText( EXEC_APPEND, va("demo %s_%i\n", uiInfo.mapList[ui_currentMap.integer].mapLoadName, uiInfo.gameTypes[ui_gametype.integer].gtEnum));
-			}
 		} else if (Q_stricmp(name, "LoadDemos") == 0) {
 			UI_LoadDemos();
 		} else if (Q_stricmp(name, "LoadMovies") == 0) {
@@ -7521,15 +7424,16 @@ UI_SortServerStatusInfo
 ==================
 */
 static void UI_SortServerStatusInfo( serverStatusInfo_t *info ) {
-	int i, j, index;
+	int i, j, index, numLines;
 	char *tmp1, *tmp2;
 
 	// FIXME: if "gamename" == "base" or "missionpack" then
 	// replace the gametype number by FFA, CTF etc.
 	//
 	index = 0;
+	numLines = Com_Clampi( 0, MAX_SERVERSTATUS_LINES, info->numLines );
 	for (i = 0; serverStatusCvars[i].name; i++) {
-		for (j = 0; j < info->numLines; j++) {
+		for (j = 0; j < numLines; j++) {
 			if ( !info->lines[j][1] || info->lines[j][1][0] ) {
 				continue;
 			}
@@ -7920,7 +7824,7 @@ static int UI_FeederCount(float feederID)
 			return uiInfo.serverStatus.numDisplayServers;
 	
 		case FEEDER_SERVERSTATUS:
-			return uiInfo.serverStatusInfo.numLines;
+			return Com_Clampi( 0, MAX_SERVERSTATUS_LINES, uiInfo.serverStatusInfo.numLines );
 	
 		case FEEDER_FINDPLAYER:
 			return uiInfo.numFoundPlayerServers;
@@ -8447,7 +8351,6 @@ static const char *UI_FeederItemText(float feederID, int index, int column,
 	return "";
 }
 
-
 static qhandle_t UI_FeederItemImage(float feederID, int index) {
 	int	validCnt,i;
 	static char info[MAX_STRING_CHARS];
@@ -8924,7 +8827,6 @@ qboolean UI_FeederSelection(float feederFloat, int index, itemDef_t *item)
 			trap->Cvar_Set("ui_currentMap", va("%d", actual));
 			trap->Cvar_Update(&ui_currentMap);
 			uiInfo.mapList[ui_currentMap.integer].cinematic = trap->CIN_PlayCinematic(va("%s.roq", uiInfo.mapList[ui_currentMap.integer].mapLoadName), 0, 0, 0, 0, (CIN_loop | CIN_silent) );
-			UI_LoadBestScores(uiInfo.mapList[ui_currentMap.integer].mapLoadName, uiInfo.gameTypes[ui_gametype.integer].gtEnum);
 			//trap->Cvar_Set("ui_opponentModel", uiInfo.mapList[ui_currentMap.integer].opponentName);
 			//updateOpponentModel = qtrue;
 		} else {
@@ -9146,9 +9048,6 @@ static qboolean MapList_Parse(char **p) {
 				token = COM_ParseExt((const char **)p, qtrue);
 				if (token[0] >= '0' && token[0] <= '9') {
 					uiInfo.mapList[uiInfo.mapCount].typeBits |= (1 << (token[0] - 0x030));
-					if (!Int_Parse(p, &uiInfo.mapList[uiInfo.mapCount].timeToBeat[token[0] - 0x30])) {
-						return qfalse;
-					}
 				} else {
 					break;
 				} 
@@ -9668,7 +9567,6 @@ static void UI_BuildPlayerModel_List( qboolean inGameLoad )
 								iSkinParts |= 1<<2;
 						}
 					}
-					
 				}
 			}
 			if (iSkinParts != 7)
@@ -9694,24 +9592,20 @@ static void UI_BuildPlayerModel_List( qboolean inGameLoad )
 				return;
 			}
 		}
-	}	
+	}
 }
 
-static qhandle_t UI_RegisterShaderNoMip ( const char *name )
-{
-	if (name[0] == '*')
-	{
-		char buf[1024];
+static qhandle_t UI_RegisterShaderNoMip( const char *name ) {
+	if ( *name == '*' ) {
+		char buf[MAX_CVAR_VALUE_STRING];
 
-		trap->Cvar_VariableStringBuffer (name + 1, buf, sizeof (buf));
+		trap->Cvar_VariableStringBuffer( name+1, buf, sizeof( buf ) );
 
 		if ( buf[0] )
-		{
-			return trap->R_RegisterShaderNoMip (buf);
-		}
+			return trap->R_RegisterShaderNoMip( buf );
 	}
 
-	return trap->R_RegisterShaderNoMip (name);
+	return trap->R_RegisterShaderNoMip( name );
 }
 
 /*
@@ -9722,17 +9616,13 @@ UI_Init
 void UI_Init( qboolean inGameLoad ) {
 	const char *menuSet;
 
-	//register this freakin thing now
-//	vmCvar_t siegeTeamSwitch;
-//	trap->Cvar_Register(&siegeTeamSwitch, "g_siegeTeamSwitch", "1", CVAR_SERVERINFO|CVAR_ARCHIVE);
-
 	// Get the list of possible languages
 	uiInfo.languageCount = trap->SE_GetNumLanguages();	// this does a dir scan, so use carefully
 
 	uiInfo.inGameLoad = inGameLoad;
 
 	//initialize all these cvars to "0"
-	UI_SiegeSetCvarsForClass(NULL);
+	UI_SiegeSetCvarsForClass( NULL );
 
 	UI_SiegeInit();
 
@@ -9858,11 +9748,9 @@ void UI_Init( qboolean inGameLoad ) {
 		trap->Cvar_Register( NULL, "ui_Name", buf, CVAR_INTERNAL );
 	}
 
-
 	Menus_CloseAll();
 
 	trap->LAN_LoadCachedServers();
-	UI_LoadBestScores(uiInfo.mapList[ui_currentMap.integer].mapLoadName, uiInfo.gameTypes[ui_gametype.integer].gtEnum);
 
 	UI_BuildQ3Model_List();
 	UI_LoadBots();
@@ -9872,7 +9760,6 @@ void UI_Init( qboolean inGameLoad ) {
 	UI_InitForceShaders();
 
 	// sets defaults for ui temp cvars
-	uiInfo.effectsColor = (int)trap->Cvar_VariableValue("color1");
 	uiInfo.currentCrosshair = (int)trap->Cvar_VariableValue("cg_drawCrosshair");
 	trap->Cvar_Set("ui_mousePitch", (trap->Cvar_VariableValue("m_pitch") >= 0) ? "0" : "1");
 	trap->Cvar_Set("ui_mousePitchVeh", (trap->Cvar_VariableValue("m_pitchVeh") >= 0) ? "0" : "1");

