commit 527c366c79f19fa669ad275bbfa65725f565a45f
Author: mandlebro <fcasal@users.noreply.github.com>
Date:   Fri Jul 27 01:14:08 2018 +0100

    Added esil break on invalid instruction variable

diff --git a/libr/core/cconfig.c b/libr/core/cconfig.c
index dcfcb479f..906836333 100644
--- a/libr/core/cconfig.c
+++ b/libr/core/cconfig.c
@@ -2435,6 +2435,7 @@ R_API int r_core_config_init(RCore *core) {
 	SETI ("esil.stack.addr", 0x100000, "Number of elements that can be pushed on the esilstack");
 	SETPREF ("esil.stack.pattern", "0", "Specify fill pattern to initialize the stack (0, w, d, i)");
 	SETI ("esil.addr.size", 64, "Maximum address size in accessed by the ESIL VM");
+	SETPREF ("esil.breakoninvalid", "false", "Break esil execution when instruction is invalid");
 
 	/* asm */
 	//asm.os needs to be first, since other asm.* depend on it
diff --git a/libr/core/cmd_anal.c b/libr/core/cmd_anal.c
index 0bedc7cbe..d04d51193 100644
--- a/libr/core/cmd_anal.c
+++ b/libr/core/cmd_anal.c
@@ -3236,6 +3236,7 @@ R_API int r_core_esil_step(RCore *core, ut64 until_addr, const char *until_expr,
 	RAnalOp op = {0};
 	RAnalEsil *esil = core->anal->esil;
 	const char *name = r_reg_get_name (core->anal->reg, R_REG_NAME_PC);
+	int breakoninvalid = r_config_get_i (core->config, "esil.breakoninvalid");
 	if (!esil) {
 // TODO		inititalizeEsil (core);
 
@@ -3310,6 +3311,10 @@ repeat:
 	// update the esil pointer because RAnal.op() can change it
 	esil = core->anal->esil;
 	if (op.size < 1 || ret < 0) {
+		if (breakoninvalid) {
+			r_cons_printf ("[ESIL] Stopped execution in an invalid instruction\n");
+			return_tail (0);
+		}
 		if (esil->cmd && esil->cmd_todo) {
 			esil->cmd (esil, esil->cmd_todo, addr, 0);
 		}

