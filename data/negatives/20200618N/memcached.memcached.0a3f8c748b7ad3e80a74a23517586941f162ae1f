commit 0a3f8c748b7ad3e80a74a23517586941f162ae1f
Author: Dustin Sallings <dustin@spy.net>
Date:   Mon Feb 25 07:55:36 2008 +0000

    Print the listening protocol in debug.
    
    git-svn-id: http://code.sixapart.com/svn/memcached/branches/binary@720 b0b603af-a30f-0410-a34e-baf09ae79d0b

diff --git a/memcached.c b/memcached.c
index 0fc30bc..bb99cf4 100644
--- a/memcached.c
+++ b/memcached.c
@@ -294,6 +294,22 @@ bool do_conn_add_to_freelist(conn *c) {
     return true;
 }
 
+static char *prot_text(const int prot) {
+    char *rv="unknown";
+    switch(prot) {
+        case ascii_prot:
+            rv="ascii";
+            break;
+        case binary_prot:
+            rv="binary";
+            break;
+        case ascii_udp_prot:
+            rv="ascii-udp";
+            break;
+    }
+    return rv;
+}
+
 conn *conn_new(const int sfd, const int init_state, const int event_flags,
                 const int read_buffer_size, const int prot,
                 struct event_base *base) {
@@ -355,7 +371,8 @@ conn *conn_new(const int sfd, const int init_state, const int event_flags,
 
     if (settings.verbose > 1) {
         if (init_state == conn_listening) {
-            fprintf(stderr, "<%d server listening\n", sfd);
+            fprintf(stderr, "<%d server listening (%s)\n", sfd,
+                prot_text(prot));
         } else if (IS_UDP(prot)) {
             fprintf(stderr, "<%d server listening (udp)\n", sfd);
         } else if (prot == binary_prot) {
@@ -3563,7 +3580,7 @@ int main (int argc, char **argv) {
     if (settings.udpport > 0 && settings.socketpath == NULL) {
         /* create the UDP listening socket and bind it */
         u_socket = server_socket(settings.udpport, ascii_udp_prot,
-			&u_socket_count);
+            &u_socket_count);
         if (u_socket == NULL) {
             fprintf(stderr, "failed to listen on UDP port %d\n", settings.udpport);
             exit(EXIT_FAILURE);

