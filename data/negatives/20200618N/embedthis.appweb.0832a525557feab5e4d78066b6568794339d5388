commit 0832a525557feab5e4d78066b6568794339d5388
Author: Embedthis Software <dev@embedthis.com>
Date:   Thu Nov 17 20:24:09 2011 -0800

    Debug windows manager

diff --git a/src/deps/mpr/manager.c b/src/deps/mpr/manager.c
index 8ffb92270..30cd66873 100644
--- a/src/deps/mpr/manager.c
+++ b/src/deps/mpr/manager.c
@@ -19,12 +19,15 @@
 
 #include    "mpr.h"
 
+#if 0
 #define SERVICE_PROGRAM BLD_BIN_PREFIX "/" BLD_PRODUCT
 #define SERVICE_NAME BLD_PRODUCT
+#define SERVICE_HOME BLD_BIN_PREFIX
 
-#if UNUSED
-#define SERVICE_PROGRAM "/home/mob/git/appweb/out/bin/appweb"
+#else
+#define SERVICE_PROGRAM "C:/cygwin/home/mob/appweb/out/bin/appweb"
 #define SERVICE_NAME "appweb"
+#define SERVICE_HOME "C:/cygwin/home/mob/appweb/src/server"
 #endif
 
 #if BLD_UNIX_LIKE
@@ -63,7 +66,7 @@ static void manageApp(void *unused, int flags);
 static int  readPid();
 static bool  process(cchar *operation, bool quiet);
 static void runService();
-static void setAppDefaults(Mpr *mpr);
+static void setAppDefaults();
 static void terminating(int how, int status);
 static int  writePid(int pid);
 
@@ -81,7 +84,7 @@ int main(int argc, char *argv[])
     mprAddRoot(app);
     mprAddTerminator(terminating);
     mprAddStandardSignals();
-    setAppDefaults(mpr);
+    setAppDefaults();
 
     for (nextArg = 1; nextArg < argc && !err; nextArg++) {
         argp = argv[nextArg];
@@ -229,7 +232,7 @@ static void manageApp(void *ptr, int flags)
 }
 
 
-static void setAppDefaults(Mpr *mpr)
+static void setAppDefaults()
 {
     app->appName = mprGetAppName();
     app->serviceProgram = sclone(SERVICE_PROGRAM);
@@ -722,6 +725,7 @@ typedef struct App {
     cchar        *appTitle;          /* Manager title */
     int          createConsole;      /* Display service console */
     int          exiting;            /* Program should exit */
+    char         *logSpec;           /* Log directive for service */
     int          heartBeatPeriod;    /* Service heart beat interval */
     HANDLE       heartBeatEvent;     /* Heart beat event event to sleep on */
     HWND         otherHwnd;          /* Existing instance window handle */
@@ -748,19 +752,22 @@ static SERVICE_TABLE_ENTRY      svcTable[] = {
 };
 
 static void     WINAPI serviceCallback(ulong code);
-static void     initService();
-static int      installService();
+static bool     enableService(int enable);
+static void     setAppDefaults();
+static bool     installService();
 static void     logHandler(int flags, int level, cchar *msg);
 static int      registerService();
 static int      removeService(int removeFromScmDb);
 static void     gracefulShutdown(MprTime timeout);
+static bool     process(cchar *operation);
+static void     run();
 static int      startDispatcher(LPSERVICE_MAIN_FUNCTION svcMain);
-static int      startService();
-static int      stopService(int cmd);
+static bool     startService();
+static bool     stopService(int cmd);
 static int      tellSCM(long state, long exitCode, long wait);
+static void     terminating(int how, int status);
 static void     updateStatus(int status, int exitCode);
 static void     writeToOsLog(cchar *message);
-static void     run();
 
 /***************************** Forward Declarations ***************************/
 
@@ -775,19 +782,18 @@ static void WINAPI serviceMain(ulong argc, char **argv);
 int APIENTRY WinMain(HINSTANCE inst, HINSTANCE junk, char *args, int junk2)
 {
     char    **argv, *argp;
-    int     argc, err, nextArg, installFlag;
+    int     argc, err, nextArg;
 
-    mpr = mprCreate(0, NULL, 0);
+    mpr = mprCreate(0, NULL, MPR_USER_EVENTS_THREAD);
     app = mprAllocObj(App, manageApp);
     mprAddRoot(app);
-    mprAddStandardSignals();
+    mprAddTerminator(terminating);
 
     err = 0;
-    installFlag = 0;
     app->appInst = inst;
     app->heartBeatPeriod = HEART_BEAT_PERIOD;
 
-    initService();
+    setAppDefaults();
 
     mprSetAppName(BLD_PRODUCT "Manager", BLD_NAME "Manager", BLD_VERSION);
     app->appName = mprGetAppName();
@@ -842,6 +848,18 @@ int APIENTRY WinMain(HINSTANCE inst, HINSTANCE junk, char *args, int junk2)
                 app->serviceHome = sclone(argv[++nextArg]);
             }
 
+        } else if (strcmp(argp, "--log") == 0) {
+            /*
+                Pass the log directive through to the service
+             */
+            if (nextArg >= argc) {
+                err++;
+            } else {
+                app->logSpec = sclone(argv[++nextArg]);
+                mprStartLogging(app->logSpec, 0);
+                mprSetCmdlineLogging(1);
+            }
+
         } else if (strcmp(argp, "--program") == 0) {
             if (nextArg >= argc) {
                 err++;
@@ -849,11 +867,8 @@ int APIENTRY WinMain(HINSTANCE inst, HINSTANCE junk, char *args, int junk2)
                 app->serviceProgram = sclone(argv[++nextArg]);
             }
 
-        } else if (strcmp(argp, "--install") == 0) {
-            installFlag++;
-
+#if UNUSED
         } else if (strcmp(argp, "--start") == 0) {
-//  MOB - use same operation style 
             /*
                 Start the manager
              */
@@ -877,6 +892,7 @@ int APIENTRY WinMain(HINSTANCE inst, HINSTANCE junk, char *args, int junk2)
             if (removeService(1) < 0) {
                 return FALSE;
             }
+#endif
 
         } else if (strcmp(argp, "--verbose") == 0 || strcmp(argp, "-v") == 0) {
             mprSetLogLevel(1);
@@ -884,6 +900,7 @@ int APIENTRY WinMain(HINSTANCE inst, HINSTANCE junk, char *args, int junk2)
         } else {
             err++;
         }
+
         if (err) {
             mprUserError("Bad command line: %s\n"
                 "  Usage: %s [options] [program args]\n"
@@ -892,36 +909,36 @@ int APIENTRY WinMain(HINSTANCE inst, HINSTANCE junk, char *args, int junk2)
                 "    --console            # Display the service console\n"
                 "    --heartBeat interval # Heart beat interval period (secs)\n"
                 "    --home path          # Home directory for service\n"
-                "    --install            # Install the service\n"
+                "    --log logFile:level  # Log directive for service\n"
                 "    --program            # Service program to start\n"
-                "    --start              # Start the service\n"
-                "    --stop               # Stop the service\n"
-                "    --uninstall          # Uninstall the service\n",
-                "    --verbose            # Show command feedback\n",
+                "    --verbose            # Show command feedback\n"
+                "  Commands:\n"
+                "    disable              # Disable the service\n"
+                "    enable               # Enable the service\n"
+                "    start                # Start the service\n"
+                "    stop                 # Start the service\n"
+                "    run                  # Run and watch over the service\n",
                 args, app->appName);
             return -1;
         }
     }
-    //  MOB - operation style
-    if (installFlag) {
-        /*
-            Install the manager
-         */
-        if (installService(app->serviceArgs) < 0) {
-            return FALSE;
+    if (mprStart() < 0) {
+        mprUserError("Can't start MPR for %s", mprGetAppName());                                           
+    } else {
+        mprStartEventsThread();
+        if (nextArg >= argc) {
+            return process("run");
+
+        } else for (; nextArg < argc; nextArg++) {
+            if (!process(argv[nextArg])) {
+                return FALSE;
+            }
         }
     }
-    if (argc <= 1) {
-        /*
-            This will block if we are a service and are being started by the
-            service control manager. While blocked, the svcMain will be called
-            which becomes the effective main program. 
-         */
-        startDispatcher(serviceMain);
-    }
-    return 0;
+    return TRUE;
 }
 
+
 static void manageApp(void *ptr, int flags)
 {
     if (flags & MPR_MANAGE_MARK) {
@@ -932,9 +949,53 @@ static void manageApp(void *ptr, int flags)
         mprMark(app->serviceProgram);
         mprMark(app->serviceTitle);
         mprMark(app->serviceArgs);
+        mprMark(app->logSpec);
+    }
+}
+
+
+static bool process(cchar *operation)
+{
+    bool    rc;
+
+    rc = 1;
+
+    if (smatch(operation, "install")) {
+        rc = installService(app->serviceArgs);
+
+    } else if (smatch(operation, "uninstall")) {
+        rc = removeService(1);
+
+    } else if (smatch(operation, "enable")) {
+        rc = enableService(1);
+
+    } else if (smatch(operation, "disable")) {
+        rc = enableService(0);
+
+    } else if (smatch(operation, "start")) {
+        rc = startService();
+
+    } else if (smatch(operation, "stop")) {
+        rc = removeService(0);
+
+    } else if (smatch(operation, "reload")) {
+        rc = process("restart");
+
+    } else if (smatch(operation, "restart")) {
+        process("stop");
+        return process("start");
+
+    } else if (smatch(operation, "run")) {
+        /*
+            This thread will block if being started by SCM. While blocked, the serviceMain 
+            will be called which becomes the effective main program. 
+         */
+        startDispatcher(serviceMain);
     }
+    return rc;
 }
 
+
 /*
     Secondary entry point when started by the service control manager. Remember 
     that the main program thread is blocked in the startDispatcher called from
@@ -944,6 +1005,8 @@ static void WINAPI serviceMain(ulong argc, char **argv)
 {
     int     threadId;
 
+    mprLog(1, "%s: Watching over %s", app->appName, app->serviceProgram);
+
     app->serviceThreadEvent = CreateEvent(0, TRUE, FALSE, 0);
     app->heartBeatEvent = CreateEvent(0, TRUE, FALSE, 0);
 
@@ -998,7 +1061,7 @@ static void run()
 
     createFlags = 0;
 
-#if USEFUL_FOR_DEBUG
+#if USEFUL_FOR_DEBUG || 1
     DebugBreak();
 #endif
 
@@ -1101,7 +1164,7 @@ static int startDispatcher(LPSERVICE_MAIN_FUNCTION svcMain)
      */
     svcTable[0].lpServiceProc = svcMain;
     if (StartServiceCtrlDispatcher(svcTable) == 0) {
-        mprError("Could not start the service control dispatcher");
+        mprError("Could not start the service control dispatcher: 0x%x", GetLastError());
         return MPR_ERR_CANT_INITIALIZE;
     }
     return 0;
@@ -1116,7 +1179,7 @@ static int registerService()
 {
     svcHandle = RegisterServiceCtrlHandler(app->serviceName, serviceCallback);
     if (svcHandle == 0) {
-        mprError("Can't register handler: %x", GetLastError());
+        mprError("Can't register handler: 0x%x", GetLastError());
         return MPR_ERR_CANT_INITIALIZE;
     }
     /*
@@ -1175,7 +1238,7 @@ static void WINAPI serviceCallback(ulong cmd)
 }
 
 
-static int installService()
+static bool installService()
 {
     SC_HANDLE   svc, mgr;
     char        cmd[MPR_MAX_FNAME], key[MPR_MAX_FNAME];
@@ -1184,7 +1247,7 @@ static int installService()
     mgr = OpenSCManager(NULL, NULL, SC_MANAGER_ALL_ACCESS);
     if (! mgr) {
         mprUserError("Can't open service manager");
-        return MPR_ERR_CANT_ACCESS;
+        return 0;
     }
     /*
         Install this app as a service
@@ -1201,7 +1264,7 @@ static int installService()
         if (! svc) {
             mprUserError("Can't create service: 0x%x == %d", GetLastError(), GetLastError());
             CloseServiceHandle(mgr);
-            return MPR_ERR_CANT_CREATE;
+            return 0;
         }
     }
     CloseServiceHandle(svc);
@@ -1213,7 +1276,7 @@ static int installService()
     mprSprintf(key, sizeof(key), "HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\" "Services\\%s", app->serviceName);
 
     if (mprWriteRegistry(key, "Description", SERVICE_DESCRIPTION) < 0) {
-        return MPR_ERR_CANT_WRITE;
+        return 0;
     }
 
     /*
@@ -1223,7 +1286,7 @@ static int installService()
         app->serviceHome = mprGetPathParent(mprGetAppDir());
     }
     if (mprWriteRegistry(key, "HomeDir", app->serviceHome) < 0) {
-        return MPR_ERR_CANT_WRITE;
+        return 0;
     }
 
     /*
@@ -1231,17 +1294,17 @@ static int installService()
      */
     if (app->serviceArgs && *app->serviceArgs) {
         if (mprWriteRegistry(key, "Args", app->serviceArgs) < 0) {
-            return MPR_ERR_CANT_WRITE;
+            return 0;
         }
     }
-    return 0;
+    return 1;
 }
 
 
 /*
     Remove the application service
  */ 
-static int removeService(int removeFromScmDb)
+static bool removeService(int removeFromScmDb)
 {
     SC_HANDLE   svc, mgr;
 
@@ -1250,13 +1313,13 @@ static int removeService(int removeFromScmDb)
     mgr = OpenSCManager(NULL, NULL, SC_MANAGER_ALL_ACCESS);
     if (! mgr) {
         mprError("Can't open service manager");
-        return MPR_ERR_CANT_ACCESS;
+        return 0;
     }
     svc = OpenService(mgr, app->serviceName, SERVICE_ALL_ACCESS);
     if (! svc) {
         CloseServiceHandle(mgr);
         mprError("Can't open service");
-        return MPR_ERR_CANT_OPEN;
+        return 0;
     }
     gracefulShutdown(0);
 
@@ -1271,22 +1334,50 @@ static int removeService(int removeFromScmDb)
             }
         }
         if (svcStatus.dwCurrentState != SERVICE_STOPPED) {
-            mprError("Can't stop service: %x", GetLastError());
+            mprError("Can't stop service: 0x%x", GetLastError());
         }
     }
     if (removeFromScmDb && !DeleteService(svc)) {
-        mprError("Can't delete service: %x", GetLastError());
+        if (GetLastError() != ERROR_SERVICE_MARKED_FOR_DELETE) {
+            mprError("Can't delete service: 0x%x", GetLastError());
+        }
     }
     CloseServiceHandle(svc);
     CloseServiceHandle(mgr);
-    return 0;
+    return 1;
 }
 
 
-/*
-    Start the window's service
- */ 
-static int startService()
+static bool enableService(int enable)
+{
+    SC_HANDLE   svc, mgr;
+    int         flag;
+
+    mgr = OpenSCManager(NULL, NULL, SC_MANAGER_ALL_ACCESS);
+    if (! mgr) {
+        mprUserError("Can't open service manager");
+        return 0;
+    }
+    svc = OpenService(mgr, app->serviceName, SERVICE_ALL_ACCESS);
+    if (svc == NULL) {
+        mprUserError("Can't access service");
+        CloseServiceHandle(mgr);
+        return 0;
+    }
+    flag = (enable) ? SERVICE_AUTO_START : SERVICE_DISABLED;
+    if (!ChangeServiceConfig(svc, SERVICE_NO_CHANGE, flag, SERVICE_NO_CHANGE, NULL, NULL, NULL, NULL, NULL, NULL, NULL)) {
+        mprUserError("Can't change service: 0x%x == %d", GetLastError(), GetLastError());
+        CloseServiceHandle(svc);
+        CloseServiceHandle(mgr);
+        return 0;
+    }
+    CloseServiceHandle(svc);
+    CloseServiceHandle(mgr);
+    return 1;
+}
+
+
+static bool startService()
 {
     SC_HANDLE   svc, mgr;
     int         rc;
@@ -1296,29 +1387,27 @@ static int startService()
     mgr = OpenSCManager(NULL, NULL, SC_MANAGER_ALL_ACCESS);
     if (! mgr) {
         mprError("Can't open service manager");
-        return MPR_ERR_CANT_ACCESS;
+        return 0;
     }
     svc = OpenService(mgr, app->serviceName, SERVICE_ALL_ACCESS);
     if (! svc) {
         mprError("Can't open service");
         CloseServiceHandle(mgr);
-        return MPR_ERR_CANT_OPEN;
+        return 0;
     }
     rc = StartService(svc, 0, NULL);
-    if (rc == 0) {
-        mprError("Can't start %s service: %d", app->serviceName, GetLastError());
-        return MPR_ERR_CANT_INITIALIZE;
-    }
     CloseServiceHandle(svc);
     CloseServiceHandle(mgr);
-    return 0;
+
+    if (rc == 0) {
+        mprError("Can't start %s service: 0x%x", app->serviceName, GetLastError());
+        return 0;
+    }
+    return 1;
 }
 
 
-/*
-    Stop the service in the current process. 
- */ 
-static int stopService(int cmd)
+static bool stopService(int cmd)
 {
     int     exitCode;
 
@@ -1327,7 +1416,7 @@ static int stopService(int cmd)
 
     gracefulShutdown(10 * 1000);
     if (cmd == SERVICE_CONTROL_SHUTDOWN) {
-        return 0;
+        return 1;
     }
 
     /*
@@ -1348,7 +1437,7 @@ static int stopService(int cmd)
     }
     svcStatus.dwCurrentState = SERVICE_STOPPED;
     tellSCM(svcStatus.dwCurrentState, exitCode, 0);
-    return 0;
+    return 1;
 }
 
 
@@ -1381,10 +1470,11 @@ static int tellSCM(long state, long exitCode, long wait)
 }
 
 
-static void initService()
+static void setAppDefaults()
 {
-    app->serviceName = BLD_COMPANY "-" BLD_PRODUCT;
-    app->serviceTitle = BLD_NAME;
+    app->serviceName = sclone(BLD_COMPANY "-" BLD_PRODUCT);
+    app->serviceHome = mprGetNativePath(SERVICE_HOME);
+    app->serviceTitle = sclone(BLD_NAME);
     app->serviceStopped = 0;
     app->serviceProgram = sjoin(mprGetAppDir(), "/", BLD_PRODUCT, ".exe", NULL);
 }
@@ -1442,12 +1532,17 @@ static void gracefulShutdown(MprTime timeout)
         }
     }
     if (app->servicePid) {
-        TerminateProcess((HANDLE) app->servicePid, 2);
+        TerminateProcess((HANDLE) app->servicePid, MPR_EXIT_GRACEFUL);
         app->servicePid = 0;
     }
 }
 
 
+static void terminating(int how, int status)
+{
+}
+
+
 #else
 void stubManager() {
     fprintf(stderr, "Manager not supported on this architecture");

