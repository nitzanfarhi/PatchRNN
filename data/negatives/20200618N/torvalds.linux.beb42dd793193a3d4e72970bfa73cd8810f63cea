commit beb42dd793193a3d4e72970bfa73cd8810f63cea
Author: Josef Bacik <josef@redhat.com>
Date:   Wed May 30 15:35:17 2012 -0400

    Btrfs: pass locked_page into extent_clear_unlock_delalloc if theres an error
    
    While doing my enospc work I got a transaction abortion that resulted in a
    panic when we tried to unlock_page() an already unlocked page.  This is
    because we aren't calling extent_clear_unlock_delalloc with the locked page
    so it was unlocking all the pages in the range.  This is wrong since
    __extent_writepage expects to have the page locked still unless we return
    *page_started as 1.  This should keep us from panicing.  Thanks,
    
    Signed-off-by: Josef Bacik <josef@redhat.com>

diff --git a/fs/btrfs/inode.c b/fs/btrfs/inode.c
index 92df0a5d1d94..ccd6355af73f 100644
--- a/fs/btrfs/inode.c
+++ b/fs/btrfs/inode.c
@@ -830,7 +830,7 @@ static noinline int cow_file_range(struct inode *inode,
 	if (IS_ERR(trans)) {
 		extent_clear_unlock_delalloc(inode,
 			     &BTRFS_I(inode)->io_tree,
-			     start, end, NULL,
+			     start, end, locked_page,
 			     EXTENT_CLEAR_UNLOCK_PAGE |
 			     EXTENT_CLEAR_UNLOCK |
 			     EXTENT_CLEAR_DELALLOC |
@@ -963,7 +963,7 @@ static noinline int cow_file_range(struct inode *inode,
 out_unlock:
 	extent_clear_unlock_delalloc(inode,
 		     &BTRFS_I(inode)->io_tree,
-		     start, end, NULL,
+		     start, end, locked_page,
 		     EXTENT_CLEAR_UNLOCK_PAGE |
 		     EXTENT_CLEAR_UNLOCK |
 		     EXTENT_CLEAR_DELALLOC |

