commit 0d728bba69cad02531c628dad8b1365aab91780a
Author: Moe Jette <jette1@llnl.gov>
Date:   Fri Oct 12 18:50:38 2007 +0000

    Note force termination of job step in case that happens before
         the job force termination (looking for SIGTERM or SIGKILL
         termination). Diable the logging if it happens after the
         job's force termination is logged.

diff --git a/src/api/step_launch.c b/src/api/step_launch.c
index dcbcf2d779..1841ee96aa 100644
--- a/src/api/step_launch.c
+++ b/src/api/step_launch.c
@@ -83,6 +83,8 @@ static void _print_launch_msg(launch_tasks_request_msg_t *msg,
  **********************************************************************/
 static pid_t  srun_ppid = (pid_t) 0;
 static uid_t  slurm_uid;
+static bool   force_terminated_job = false;
+static int    task_exit_signal = 0;
 static void _exec_prog(slurm_msg_t *msg);
 static int  _msg_thr_create(struct step_launch_state *sls, int num_nodes);
 static void _handle_msg(struct step_launch_state *sls, slurm_msg_t *msg);
@@ -414,6 +416,9 @@ void slurm_step_launch_wait_finish(slurm_step_ctx_t *ctx)
 		}
 	}
 
+	if (!force_terminated_job && task_exit_signal)
+		info("Force Terminated job step");
+
 	/* Then shutdown the message handler thread */
 	eio_signal_shutdown(sls->msg_handle);
 	pthread_join(sls->msg_thread, NULL);
@@ -753,6 +758,14 @@ _exit_handler(struct step_launch_state *sls, slurm_msg_t *exit_msg)
 	task_exit_msg_t *msg = (task_exit_msg_t *) exit_msg->data;
 	int i;
 
+	/* Record SIGTERM and SIGKILL termination codes to 
+	 * recognize abnormal termination */
+	if (WIFSIGNALED(msg->return_code)) {
+		i = WTERMSIG(msg->return_code);
+		if ((i == SIGKILL) || (i == SIGTERM))
+			task_exit_signal = i;
+	}
+
 	pthread_mutex_lock(&sls->lock);
 
 	for (i = 0; i < msg->num_tasks; i++) {
@@ -935,6 +948,7 @@ _handle_msg(struct step_launch_state *sls, slurm_msg_t *msg)
 		break;
 	case SRUN_JOB_COMPLETE:
 		debug2("received job step complete message");
+		force_terminated_job = true;
 		_job_complete_handler(sls, msg);
 		slurm_free_srun_job_complete_msg(msg->data);
 		break;

