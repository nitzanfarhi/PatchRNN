commit f557474ca3a23800dffb790846bcb121fa046c71
Author: Peter Hurley <peter@hurleysoftware.com>
Date:   Sat Jan 9 21:45:10 2016 -0800

    tty: Add fasync() hung up file operation
    
    VFS uses a two-stage check-and-call method for invoking file_operations
    methods, without explicitly snapshotting either the file_operations ptr
    or the function ptr. Since the tty core is one of the few VFS users that
    changes the f_op file_operations ptr of the file descriptor (when the
    tty has been hung up), and since the likelihood of the compiler generating
    a reload of either f_op or the function ptr is basically nil, just define
    a hung up fasync() file operation that returns an error.
    
    Signed-off-by: Peter Hurley <peter@hurleysoftware.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/tty/tty_io.c b/drivers/tty/tty_io.c
index 7533ab1abe72..0140c8669ada 100644
--- a/drivers/tty/tty_io.c
+++ b/drivers/tty/tty_io.c
@@ -468,6 +468,11 @@ static long hung_up_tty_compat_ioctl(struct file *file,
 	return cmd == TIOCSPGRP ? -ENOTTY : -EIO;
 }
 
+static int hung_up_tty_fasync(int fd, struct file *file, int on)
+{
+	return -ENOTTY;
+}
+
 static const struct file_operations tty_fops = {
 	.llseek		= no_llseek,
 	.read		= tty_read,
@@ -500,6 +505,7 @@ static const struct file_operations hung_up_tty_fops = {
 	.unlocked_ioctl	= hung_up_tty_ioctl,
 	.compat_ioctl	= hung_up_tty_compat_ioctl,
 	.release	= tty_release,
+	.fasync		= hung_up_tty_fasync,
 };
 
 static DEFINE_SPINLOCK(redirect_lock);

