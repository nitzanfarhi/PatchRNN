commit 2be72a8b0f76749cf754949b04a253e4fa43d89e
Author: gilles <gilles@openbsd.org>
Date:   Wed Jan 28 13:29:40 2009 +0000

    bring loop detection support. we handle this with a qmail-like approach which
    consists of checking headers for a custom header, but we also count how many
    hops the mail went through and use a hard limit (currently set to 100 as was
    recommanded by RFC) as a safe-guard.
    
    idea discussed with jacekm@, qmail approach suggested by claudio@ a long time
    ago

diff --git a/usr.sbin/smtpd/mta.c b/usr.sbin/smtpd/mta.c
index febbd17c2bd..27ef4f33ac2 100644
--- a/usr.sbin/smtpd/mta.c
+++ b/usr.sbin/smtpd/mta.c
@@ -1,4 +1,4 @@
-/*	$OpenBSD: mta.c,v 1.14 2009/01/28 11:27:57 gilles Exp $	*/
+/*	$OpenBSD: mta.c,v 1.15 2009/01/28 13:29:40 gilles Exp $	*/
 
 /*
  * Copyright (c) 2008 Pierre-Yves Ritschard <pyr@openbsd.org>
@@ -668,7 +668,7 @@ mta_reply_handler(struct bufferevent *bev, void *arg)
 		    "", batchp->message_id);
 
 		TAILQ_FOREACH(messagep, &batchp->messages, entry) {
-			evbuffer_add_printf(batchp->bev->output, "X-Delivered-To: %s@%s\r\n",
+			evbuffer_add_printf(batchp->bev->output, "X-OpenSMTPD-Loop: %s@%s\r\n",
 			    messagep->session_rcpt.user, messagep->session_rcpt.domain);
 		}
 
diff --git a/usr.sbin/smtpd/runner.c b/usr.sbin/smtpd/runner.c
index ba4f6891094..be3c4554614 100644
--- a/usr.sbin/smtpd/runner.c
+++ b/usr.sbin/smtpd/runner.c
@@ -1,4 +1,4 @@
-/*	$OpenBSD: runner.c,v 1.23 2009/01/27 22:48:29 gilles Exp $	*/
+/*	$OpenBSD: runner.c,v 1.24 2009/01/28 13:29:40 gilles Exp $	*/
 
 /*
  * Copyright (c) 2008 Gilles Chehade <gilles@openbsd.org>
@@ -28,7 +28,9 @@
 #include <netinet/in.h>
 #include <arpa/inet.h>
 
+#include <ctype.h>
 #include <dirent.h>
+#include <err.h>
 #include <errno.h>
 #include <event.h>
 #include <fcntl.h>
@@ -72,6 +74,8 @@ int		runner_message_schedule(struct message *, time_t);
 void		runner_purge_run(void);
 void		runner_purge_message(char *);
 
+int		runner_check_loop(struct message *);
+
 struct batch	*batch_record(struct smtpd *, struct message *);
 struct batch	*batch_lookup(struct smtpd *, struct message *);
 
@@ -491,6 +495,8 @@ runner_process_envelope(struct message *messagep)
 	if (! runner_message_schedule(messagep, time(NULL)))
 		return;
 
+	runner_check_loop(messagep);
+
 	messagep->flags |= F_MESSAGE_SCHEDULED;
 	queue_update_envelope(messagep);
 
@@ -995,4 +1001,64 @@ batch_cmp(struct batch *s1, struct batch *s2)
 	return (0);
 }
 
+int
+runner_check_loop(struct message *messagep)
+{
+	int fd;
+	FILE *fp;
+	char *buf, *lbuf;
+	size_t len;
+	struct path chkpath;
+	int ret = 0;
+	int rcvcount = 0;
+
+	fd = queue_open_message_file(messagep->message_id);
+	if ((fp = fdopen(fd, "r")) == NULL)
+		fatal("fdopen");
+
+	lbuf = NULL;
+	while ((buf = fgetln(fp, &len))) {
+		if (buf[len - 1] == '\n')
+			buf[len - 1] = '\0';
+		else {
+			/* EOF without EOL, copy and add the NUL */
+			if ((lbuf = malloc(len + 1)) == NULL)
+				err(1, NULL);
+			memcpy(lbuf, buf, len);
+			lbuf[len] = '\0';
+			buf = lbuf;
+		}
+
+		if (strchr(buf, ':') == NULL && !isspace(*buf))
+			break;
+
+		if (strncasecmp("Received: ", buf, 10) == 0) {
+			rcvcount++;
+			if (rcvcount == MAX_HOPS_COUNT) {
+				log_debug("LOOP DETECTED THROUGH RECEIVED LINES COUNT");
+				ret = 1;
+				break;
+			}
+		}
+
+		else if (strncasecmp("X-OpenSMTPD-Loop: ", buf, 18) == 0) {
+			bzero(&chkpath, sizeof (struct path));
+			if (! recipient_to_path(&chkpath, buf + 18))
+				continue;
+
+			if (strcasecmp(chkpath.user, messagep->recipient.user) == 0 &&
+			    strcasecmp(chkpath.domain, messagep->recipient.domain) == 0) {
+				log_debug("LOOP DETECTED THROUGH X-OPENSMTPD-LOOP HEADER: %s@%s",
+				    chkpath.user, chkpath.domain);
+				ret = 1;
+				break;
+			}
+		}
+	}
+	free(lbuf);
+
+	fclose(fp);
+	return ret;
+}
+
 SPLAY_GENERATE(batchtree, batch, b_nodes, batch_cmp);
diff --git a/usr.sbin/smtpd/smtpd.h b/usr.sbin/smtpd/smtpd.h
index 3426031190d..81a152a4dae 100644
--- a/usr.sbin/smtpd/smtpd.h
+++ b/usr.sbin/smtpd/smtpd.h
@@ -1,4 +1,4 @@
-/*	$OpenBSD: smtpd.h,v 1.50 2009/01/28 12:58:17 gilles Exp $	*/
+/*	$OpenBSD: smtpd.h,v 1.51 2009/01/28 13:29:40 gilles Exp $	*/
 
 /*
  * Copyright (c) 2008 Gilles Chehade <gilles@openbsd.org>
@@ -23,6 +23,8 @@
 #define READ_BUF_SIZE		 32768
 #define MAX_NAME_SIZE		 64
 
+#define MAX_HOPS_COUNT		 100
+
 /* sizes include the tailing '\0' */
 #define MAX_LINE_SIZE		 1024
 #define MAX_LOCALPART_SIZE	 65

