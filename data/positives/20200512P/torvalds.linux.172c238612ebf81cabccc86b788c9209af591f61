commit 172c238612ebf81cabccc86b788c9209af591f61
Author: Mike Snitzer <snitzer@redhat.com>
Date:   Fri Nov 6 10:53:01 2015 -0500

    dm thin: restore requested 'error_if_no_space' setting on OODS to WRITE transition
    
    A thin-pool that is in out-of-data-space (OODS) mode may transition back
    to write mode -- without the admin adding more space to the thin-pool --
    if/when blocks are released (either by deleting thin devices or
    discarding provisioned blocks).
    
    But as part of the thin-pool's earlier transition to out-of-data-space
    mode the thin-pool may have set the 'error_if_no_space' flag to true if
    the no_space_timeout expires without more space having been made
    available.  That implementation detail, of changing the pool's
    error_if_no_space setting, needs to be reset back to the default that
    the user specified when the thin-pool's table was loaded.
    
    Otherwise we'll drop the user requested behaviour on the floor when this
    out-of-data-space to write mode transition occurs.
    
    Reported-by: Vivek Goyal <vgoyal@redhat.com>
    Signed-off-by: Mike Snitzer <snitzer@redhat.com>
    Acked-by: Joe Thornber <ejt@redhat.com>
    Fixes: 2c43fd26e4 ("dm thin: fix missing out-of-data-space to write mode transition if blocks are released")
    Cc: stable@vger.kernel.org

diff --git a/drivers/md/dm-thin.c b/drivers/md/dm-thin.c
index 3897b90bd462..9f0b94fad361 100644
--- a/drivers/md/dm-thin.c
+++ b/drivers/md/dm-thin.c
@@ -2432,6 +2432,7 @@ static void set_pool_mode(struct pool *pool, enum pool_mode new_mode)
 	case PM_WRITE:
 		if (old_mode != new_mode)
 			notify_of_pool_mode_change(pool, "write");
+		pool->pf.error_if_no_space = pt->requested_pf.error_if_no_space;
 		dm_pool_metadata_read_write(pool->pmd);
 		pool->process_bio = process_bio;
 		pool->process_discard = process_discard_bio;

