commit 9c9db36825d04a83f9f9e60f4ae66d4acc5e546e
Author: Gerald Combs <gerald@wireshark.org>
Date:   Wed Apr 15 21:35:51 2009 +0000

    size_t fixes.
    
    svn path=/trunk/; revision=28059

diff --git a/gtk/dfilter_expr_dlg.c b/gtk/dfilter_expr_dlg.c
index 3d8c7c4ea1..7f655ff7ab 100644
--- a/gtk/dfilter_expr_dlg.c
+++ b/gtk/dfilter_expr_dlg.c
@@ -802,18 +802,18 @@ dfilter_expr_dlg_accept_cb(GtkWidget *w, gpointer filter_te_arg)
     g_free(chars);
 
     gtk_editable_insert_text(GTK_EDITABLE(filter_te), hfinfo->abbrev,
-                             strlen(hfinfo->abbrev), &pos);
+                             (gint) strlen(hfinfo->abbrev), &pos);
     if (range_str != NULL) {
         gtk_editable_insert_text(GTK_EDITABLE(filter_te), "[", 1, &pos);
         gtk_editable_insert_text(GTK_EDITABLE(filter_te),
-                                 stripped_range_str, strlen(stripped_range_str), &pos);
+                                 stripped_range_str, (gint) strlen(stripped_range_str), &pos);
         gtk_editable_insert_text(GTK_EDITABLE(filter_te), "]", 1, &pos);
         g_free(range_str);
     }
     if (item_str != NULL && !relation_is_presence_test(item_str)) {
         gtk_editable_insert_text(GTK_EDITABLE(filter_te), " ", 1, &pos);
         gtk_editable_insert_text(GTK_EDITABLE(filter_te), item_str,
-                                 strlen(item_str), &pos);
+                                 (gint) strlen(item_str), &pos);
     }
     if (value_str != NULL) {
         gtk_editable_insert_text(GTK_EDITABLE(filter_te), " ", 1, &pos);
@@ -849,7 +849,7 @@ dfilter_expr_dlg_accept_cb(GtkWidget *w, gpointer filter_te_arg)
                                      1, &pos);
         }
         gtk_editable_insert_text(GTK_EDITABLE(filter_te),
-                                 stripped_value_str, strlen(stripped_value_str), &pos);
+                                 stripped_value_str, (gint) strlen(stripped_value_str), &pos);
         if (quote_it) {
             /*
              * Put quotes around the string.
diff --git a/gtk/file_dlg.c b/gtk/file_dlg.c
index 6a283cda2f..50afaa6d0c 100644
--- a/gtk/file_dlg.c
+++ b/gtk/file_dlg.c
@@ -121,7 +121,7 @@ gboolean
 file_selection_set_current_folder(GtkWidget *fs, const gchar *filename)
 {
     gboolean ret;
-    int filename_len = strlen(filename);
+    size_t filename_len = strlen(filename);
     gchar *new_filename;
 
     /* trim filename, so gtk_file_chooser_set_current_folder() likes it, see below */
@@ -224,7 +224,7 @@ file_selection_browse_destroy_cb(GtkWidget *win, GtkWidget* parent_te)
 void
 set_last_open_dir(char *dirname)
 {
-	int len;
+	size_t len;
 	gchar *new_last_open_dir;
 
 	if (dirname) {
diff --git a/gtk/fileset_dlg.c b/gtk/fileset_dlg.c
index b3cc0aaaef..5636f8bf87 100644
--- a/gtk/fileset_dlg.c
+++ b/gtk/fileset_dlg.c
@@ -121,7 +121,7 @@ static char *
 fileset_dlg_name2date_dup(const char * name) {
     char        *pfx;
     char        *filename;
-    int         pos;
+    size_t       pos;
 
 
     /* just to be sure ... */
diff --git a/gtk/filter_autocomplete.c b/gtk/filter_autocomplete.c
index 08b1c89f41..f014e42c0d 100644
--- a/gtk/filter_autocomplete.c
+++ b/gtk/filter_autocomplete.c
@@ -84,7 +84,7 @@ is_protocol_name_being_typed(GtkWidget *filter_te, int str_len)
   if(!(cursor_pos = gtk_editable_get_position(GTK_EDITABLE(filter_te))))
     return TRUE;
   
-  start = gtk_editable_get_chars(GTK_EDITABLE(filter_te), 0, cursor_pos);
+  start = gtk_editable_get_chars(GTK_EDITABLE(filter_te), 0, (gint) cursor_pos);
   
   /* Point to one char before the current string in the filter editable text */
   pos = start + (cursor_pos - str_len);
@@ -94,7 +94,7 @@ is_protocol_name_being_typed(GtkWidget *filter_te, int str_len)
     if(*pos != ' ' && *pos != '(') {
       /* Check if we have one of the logical operations */
       for(i = 0; i < (sizeof(logic_ops)/sizeof(logic_ops[0])); i++) {
-        op_len = strlen(logic_ops[i]);
+        op_len = (int) strlen(logic_ops[i]);
         
         if(pos-start+1 < op_len)
           continue;
@@ -145,14 +145,14 @@ autocomplete_protocol_string(GtkWidget *filter_te, gchar *selected_str)
   }
 
   if(strncmp(pch, selected_str, pos-(pch-filter_str))) {
-    gtk_editable_delete_text(GTK_EDITABLE(filter_te), pch-filter_str, pos);
-    pos = pch-filter_str;
+    gtk_editable_delete_text(GTK_EDITABLE(filter_te), (gint) (pch-filter_str), pos);
+    pos = (int) (pch-filter_str);
     pch = selected_str;
   } else {
     pch = (selected_str + strlen(pch));
   }
 
-  gtk_editable_insert_text(GTK_EDITABLE(filter_te), pch, strlen(pch), &pos);
+  gtk_editable_insert_text(GTK_EDITABLE(filter_te), pch, (gint) strlen(pch), &pos);
   gtk_editable_set_position(GTK_EDITABLE(filter_te), pos);
   g_free (filter_str);
 }
@@ -209,7 +209,7 @@ check_select_region (GtkWidget *filter_te, GtkWidget *popup_win,
                      const gchar *string, unsigned int str_len)
 {
   gint pos1 = gtk_editable_get_position(GTK_EDITABLE(filter_te));
-  gint pos2 = pos1 + strlen(string) - str_len;
+  gint pos2 = pos1 + (gint) strlen(string) - str_len;
   gint pos3 = pos1;
 
   if (pos2 > pos1) {
@@ -265,7 +265,7 @@ autocompletion_list_lookup(GtkWidget *filter_te, GtkWidget *popup_win, GtkWidget
   GtkTreeIter iter;
   GtkTreeSelection *selection;
   gchar *curr_str;
-  unsigned int str_len = strlen(str);
+  unsigned int str_len = (unsigned int) strlen(str);
   gchar *first = NULL;
   gint count = 0;
   gboolean loop = TRUE;
@@ -429,7 +429,7 @@ filter_string_te_key_pressed_cb(GtkWidget *filter_te, GdkEventKey *event)
       if(strchr(prefix, '.')) {
         popup_win = filter_autocomplete_new(filter_te, prefix, FALSE, NULL);
         g_object_set_data(G_OBJECT(w_toplevel), E_FILT_AUTOCOMP_PTR_KEY, popup_win);
-      } else if(strlen(prefix) && is_protocol_name_being_typed(filter_te, strlen(prefix)+2)) {
+      } else if(strlen(prefix) && is_protocol_name_being_typed(filter_te, (int) strlen(prefix)+2)) {
         popup_win = filter_autocomplete_new(filter_te, prefix, TRUE, NULL);
         g_object_set_data(G_OBJECT(w_toplevel), E_FILT_AUTOCOMP_PTR_KEY, popup_win);
       }
@@ -441,7 +441,7 @@ filter_string_te_key_pressed_cb(GtkWidget *filter_te, GdkEventKey *event)
   } else if(g_ascii_isalnum(ckey) && !popup_win) {
     gchar *name = g_strconcat(prefix, event->string, NULL);
 
-    if( !strchr(name, '.') && is_protocol_name_being_typed(filter_te, strlen(name)) ) {
+    if( !strchr(name, '.') && is_protocol_name_being_typed(filter_te, (int) strlen(name)) ) {
       popup_win = filter_autocomplete_new(filter_te, name, TRUE, &stop_propagation);
       g_object_set_data(G_OBJECT(w_toplevel), E_FILT_AUTOCOMP_PTR_KEY, popup_win);
     }
@@ -619,7 +619,7 @@ build_autocompletion_list(GtkWidget *filter_te, GtkWidget *treeview, GtkWidget *
   const gchar *first = NULL;
   int i;
 
-  protocol_name_len = strlen(protocol_name);
+  protocol_name_len = (unsigned int) strlen(protocol_name);
 
   /* Walk protocols list */
   for (i = proto_get_first_protocol(&cookie); i != -1; i = proto_get_next_protocol(&cookie)) {
@@ -755,7 +755,7 @@ filter_autocomplete_handle_backspace(GtkWidget *filter_te, GtkWidget *list, GtkW
 {
   GtkListStore *store;
   GtkRequisition requisition;
-  gint prefix_len;
+  size_t prefix_len;
   gboolean protocols_only = FALSE;
 
   /* Delete the last character in the prefix string */
diff --git a/gtk/firewall_dlg.c b/gtk/firewall_dlg.c
index f74ecbe1cd..7ff2b6657f 100644
--- a/gtk/firewall_dlg.c
+++ b/gtk/firewall_dlg.c
@@ -517,7 +517,7 @@ set_rule_text(rule_info_t *rule_info) {
         g_string_append_printf(rtxt, "ERROR: Unable to create rule");
     }
 
-    gtk_text_buffer_set_text(buf, rtxt->str, rtxt->len);
+    gtk_text_buffer_set_text(buf, rtxt->str, (gint) rtxt->len);
 
     g_string_free(rtxt, TRUE);
 }

