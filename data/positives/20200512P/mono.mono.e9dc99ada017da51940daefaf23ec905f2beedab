commit e9dc99ada017da51940daefaf23ec905f2beedab
Author: Zoltan Varga <vargaz@gmail.com>
Date:   Thu Nov 17 05:45:06 2011 -0500

    Add an explicit initialization function to io-layer, and use it to avoid calling shared_init () from a lot of places on demand.

diff --git a/mono/io-layer/handles.c b/mono/io-layer/handles.c
index baadb3b62a9..99830cf7958 100644
--- a/mono/io-layer/handles.c
+++ b/mono/io-layer/handles.c
@@ -157,7 +157,6 @@ gboolean _wapi_has_shut_down = FALSE;
 static pid_t _wapi_pid;
 static mono_once_t pid_init_once = MONO_ONCE_INIT;
 
-static gpointer _wapi_handle_real_new (WapiHandleType type, gpointer handle_specific);
 static void _wapi_handle_unref_full (gpointer handle, gboolean ignore_private_busy_handles);
 
 static void pid_init (void)
@@ -234,19 +233,13 @@ static void handle_cleanup (void)
 		g_free (_wapi_private_handles [i]);
 }
 
-void _wapi_cleanup ()
-{
-	g_assert (_wapi_has_shut_down == FALSE);
-	
-	_wapi_has_shut_down = TRUE;
-
-	_wapi_critical_section_cleanup ();
-	_wapi_error_cleanup ();
-	_wapi_thread_cleanup ();
-}
-
-static mono_once_t shared_init_once = MONO_ONCE_INIT;
-static void shared_init (void)
+/*
+ * wapi_init:
+ *
+ *   Initialize the io-layer.
+ */
+void
+wapi_init (void)
 {
 	g_assert ((sizeof (handle_ops) / sizeof (handle_ops[0]))
 		  == WAPI_HANDLE_COUNT);
@@ -286,8 +279,7 @@ static void shared_init (void)
 		_wapi_collection_init ();
 #endif
 
-	/* Can't call wapi_handle_new as it calls us recursively */
-	_wapi_global_signal_handle = _wapi_handle_real_new (WAPI_HANDLE_EVENT, NULL);
+	_wapi_global_signal_handle = _wapi_handle_new (WAPI_HANDLE_EVENT, NULL);
 
 	_wapi_global_signal_cond = &_WAPI_PRIVATE_HANDLES (GPOINTER_TO_UINT (_wapi_global_signal_handle)).signal_cond;
 	_wapi_global_signal_mutex = &_WAPI_PRIVATE_HANDLES (GPOINTER_TO_UINT (_wapi_global_signal_handle)).signal_mutex;
@@ -300,6 +292,18 @@ static void shared_init (void)
 	g_atexit (handle_cleanup);
 }
 
+void
+wapi_cleanup (void)
+{
+	g_assert (_wapi_has_shut_down == FALSE);
+	
+	_wapi_has_shut_down = TRUE;
+
+	_wapi_critical_section_cleanup ();
+	_wapi_error_cleanup ();
+	_wapi_thread_cleanup ();
+}
+
 static void _wapi_handle_init_shared (struct _WapiHandleShared *handle,
 				      WapiHandleType type,
 				      gpointer handle_specific)
@@ -448,12 +452,15 @@ again:
 	return(0);
 }
 
-static gpointer _wapi_handle_real_new (WapiHandleType type, gpointer handle_specific)
+gpointer 
+_wapi_handle_new (WapiHandleType type, gpointer handle_specific)
 {
 	guint32 handle_idx = 0;
 	gpointer handle;
 	int thr_ret;
-	
+
+	g_assert (_wapi_has_shut_down == FALSE);
+		
 	DEBUG ("%s: Creating new handle of type %s", __func__,
 		   _wapi_handle_typename[type]);
 
@@ -519,15 +526,6 @@ done:
 	return(handle);
 }
 
-gpointer _wapi_handle_new (WapiHandleType type, gpointer handle_specific)
-{
-	g_assert (_wapi_has_shut_down == FALSE);
-	
-	mono_once (&shared_init_once, shared_init);
-
-	return _wapi_handle_real_new (type, handle_specific);
-}
-
 gpointer _wapi_handle_new_from_offset (WapiHandleType type, guint32 offset,
 				       gboolean timestamp)
 {
@@ -538,8 +536,6 @@ gpointer _wapi_handle_new_from_offset (WapiHandleType type, guint32 offset,
 	
 	g_assert (_wapi_has_shut_down == FALSE);
 	
-	mono_once (&shared_init_once, shared_init);
-
 	DEBUG ("%s: Creating new handle of type %s to offset %d", __func__,
 		   _wapi_handle_typename[type], offset);
 
@@ -668,8 +664,6 @@ gpointer _wapi_handle_new_fd (WapiHandleType type, int fd,
 	
 	g_assert (_wapi_has_shut_down == FALSE);
 	
-	mono_once (&shared_init_once, shared_init);
-	
 	DEBUG ("%s: Creating new handle of type %s", __func__,
 		   _wapi_handle_typename[type]);
 	
diff --git a/mono/io-layer/handles.h b/mono/io-layer/handles.h
index 7089c97d264..04444d0ae82 100644
--- a/mono/io-layer/handles.h
+++ b/mono/io-layer/handles.h
@@ -17,8 +17,8 @@ G_BEGIN_DECLS
 extern gboolean CloseHandle (gpointer handle);
 extern gboolean DuplicateHandle (gpointer srcprocess, gpointer src, gpointer targetprocess, gpointer *target, guint32 access, gboolean inherit, guint32 options);
 
-/* Another kludge alert! Visible non-w32 API is broken! */
-extern void _wapi_cleanup (void);
+extern void wapi_init (void);
+extern void wapi_cleanup (void);
 
 G_END_DECLS
 
diff --git a/mono/metadata/domain.c b/mono/metadata/domain.c
index 58f19283cc2..3e068353b63 100644
--- a/mono/metadata/domain.c
+++ b/mono/metadata/domain.c
@@ -1237,6 +1237,10 @@ mono_init_internal (const char *filename, const char *exe_filename, const char *
 	SetErrorMode (SEM_FAILCRITICALERRORS | SEM_NOOPENFILEERRORBOX);
 #endif
 
+#ifndef HOST_WIN32
+	wapi_init ();
+#endif
+
 	mono_perfcounters_init ();
 
 	mono_counters_register ("Max native code in a domain", MONO_COUNTER_INT|MONO_COUNTER_JIT, &max_domain_code_size);
@@ -1715,7 +1719,7 @@ mono_cleanup (void)
 	DeleteCriticalSection (&appdomains_mutex);
 
 #ifndef HOST_WIN32
-	_wapi_cleanup ();
+	wapi_cleanup ();
 #endif
 }
 

