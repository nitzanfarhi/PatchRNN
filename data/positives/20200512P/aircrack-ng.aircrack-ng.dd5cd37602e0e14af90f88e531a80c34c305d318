commit dd5cd37602e0e14af90f88e531a80c34c305d318
Author: Martin Beck <hirte@aircrack-ng.org>
Date:   Sat Apr 14 21:37:53 2007 +0000

    Bufferoverflow prevention, fixed wrong array size, added power levels in 0.9-dev (Closes #166).
    
    git-svn-id: http://svn.aircrack-ng.org/trunk@293 28c6078b-6c39-48e3-add9-af49d547ecab

diff --git a/src/aireplay-ng.c b/src/aireplay-ng.c
index 0dc0b8fa..ba5c87af 100644
--- a/src/aireplay-ng.c
+++ b/src/aireplay-ng.c
@@ -290,6 +290,8 @@ int send_packet( void *buf, size_t count )
     unsigned char maddr[6];
     int ret;
 
+    if((unsigned) count > sizeof(tmpbuf)-22) return -1;
+
     if( dev.is_wlanng && count >= 24 )
     {
         /* for some reason, wlan-ng requires a special header */
@@ -741,7 +743,7 @@ void wait_for_beacon(uchar *bssid, uchar *capa)
 
     while (1) {
 		len = 0;
-		while (len < 22) len = read_packet(pkt_sniff, 4096);
+		while (len < 22) len = read_packet(pkt_sniff, sizeof(pkt_sniff));
 		if (! memcmp(pkt_sniff, "\x80", 1))
 		{
 		    if (! memcmp(bssid, pkt_sniff+10, 6)) break;
@@ -812,7 +814,8 @@ int fake_ska_auth_1( void )
     //Waiting for response packet containing the challenge
     while (1)
     {
-        caplen = read_packet(sniff, 4096);
+        caplen = read_packet(sniff, sizeof(sniff));
+        if((unsigned)caplen > sizeof(h80211)) continue;
         if (sniff[0] == '\xb0' && sniff[26] == 2)
         {
             got_one = 1;
@@ -852,6 +855,8 @@ int fake_ska_auth_2(uchar *ph80211, int caplen, uchar *prga, uchar *iv)
     uchar packet[4096];
     uchar ack[14] = "\xd4";
 
+    if((unsigned) caplen > sizeof(ska_auth3)) return -1;
+
     ret = 0;
     memset(ack+1, 0, 13);
 
@@ -884,7 +889,7 @@ int fake_ska_auth_2(uchar *ph80211, int caplen, uchar *prga, uchar *iv)
     //Waiting for successful authentication
     while (1)
     {
-        caplen = read_packet(packet, 4096);
+        caplen = read_packet(packet, sizeof(packet));
         if (packet[0] == 0xb0 && (caplen < 60) && packet[26] == 4) break;
 
         gettimeofday(&tv2, NULL);
@@ -943,6 +948,7 @@ int fake_asso()
 
     //Getting ESSID length
     slen = strlen(opt.r_essid);
+    if((unsigned)(slen+46) > sizeof(assoc)) return -1;
 
     //Set tag length
     assoc[29] = (uchar) slen;
@@ -964,7 +970,7 @@ int fake_asso()
     gettimeofday(&tv2, NULL);
     while (1)
     {
-        caplen = read_packet(packet, 4096);
+        caplen = read_packet(packet, sizeof(packet));
 
         if (packet[0] == 0x10) break;
 
@@ -998,10 +1004,10 @@ int fake_ska(uchar* prga)
 	caplen = i = 0;
 	ret = -1;
 
-    while(caplen <= 0)
+    while(caplen <= 0 || (unsigned)caplen > sizeof(tmpbuf) )
     {
         caplen = fake_ska_auth_1();
-        if(caplen <=0)
+        if(caplen <=0 || (unsigned)caplen > sizeof(tmpbuf) )
         {
         	PCT; printf("Retrying 1. auth sequence!\n");
         }
@@ -1575,7 +1581,7 @@ int capture_ask_packet( int *caplen )
 
             n = *caplen = pkh.caplen;
 
-            if( n <= 0 || n > (int) sizeof( h80211 ) )
+            if( n <= 0 || n > (int) sizeof( h80211 ) || n > (int) sizeof( tmpbuf ) )
             {
                 printf( "\r\33[KInvalid packet length %d.\n", n );
                 return( 1 );
@@ -2087,7 +2093,7 @@ int do_attack_arp_resend( void )
 
             n = caplen = pkh.caplen;
 
-            if( n <= 0 || n > (int) sizeof( h80211 ) )
+            if( n <= 0 || n > (int) sizeof( h80211 ) || n > (int) sizeof( tmpbuf ) )
             {
                 printf( "\r\33[KInvalid packet length %d.\n", n );
                 opt.s_file = NULL;
@@ -2197,6 +2203,8 @@ add_arp:
             if( i < nb_arp )
                 continue;
 
+            if( caplen > 128)
+                continue;
             /* add the ARP request in the ring buffer */
 
             nb_arp_tot++;
@@ -2278,6 +2286,9 @@ int do_attack_chopchop( void )
     if( capture_ask_packet( &caplen ) != 0 )
         return( 1 );
 
+    if( (unsigned)caplen > sizeof(srcbuf) || (unsigned)caplen > sizeof(h80211) )
+        return( 1 );
+
     /* Special handling for spanning-tree packets */
     if ( memcmp( h80211 +  4, SPANTREE, 6 ) == 0 ||
         memcmp( h80211 + 16, SPANTREE, 6 ) == 0 )
@@ -2491,7 +2502,7 @@ int do_attack_chopchop( void )
             printf( "\n\nThe AP appears to drop packets shorter "
                     "than %d bytes.\n",data_end );
 
-			data_end = 40;
+            data_end = 40;
 
             z = ( ( h80211[1] & 3 ) != 3 ) ? 24 : 30;
 
@@ -2894,7 +2905,7 @@ void send_fragments(uchar *packet, int packet_len, uchar *iv, uchar *keystream,
 {
     int t, u;
     int data_size;
-    uchar frag[30+fragsize];
+    uchar frag[32+fragsize];
     int pack_size;
 
     data_size = packet_len - 24;
@@ -2983,10 +2994,10 @@ int do_attack_fragment()
     int length;
     int ret;
 
-	uchar *snap_header = (unsigned char*)"\xAA\xAA\x03\x00\x00\x00\x08\x00";
+    uchar *snap_header = (unsigned char*)"\xAA\xAA\x03\x00\x00\x00\x08\x00";
 
-	done = caplen = caplen2 = arplen = round = 0;
-	prga_len = isrelay = gotit = again = length = 0;
+    done = caplen = caplen2 = arplen = round = 0;
+    prga_len = isrelay = gotit = again = length = 0;
 
     if( memcmp( opt.f_bssid, NULL_MAC, 6 ) == 0 )
     {
@@ -3025,6 +3036,9 @@ int do_attack_fragment()
         if( capture_ask_packet( &caplen ) != 0 )
             return -1;
 
+        if((unsigned)caplen > sizeof(packet) || (unsigned)caplen > sizeof(packet2))
+            continue;
+
         memcpy( packet2, h80211, caplen );
         caplen2 = caplen;
         PCT; printf("Data packet found!\n");
@@ -3072,7 +3086,7 @@ int do_attack_fragment()
 
             while (!gotit)  //waiting for relayed packet
             {
-                caplen = read_packet(packet, 4096);
+                caplen = read_packet(packet, sizeof(packet));
 
                 if (packet[0] == 0x08 && (( packet[1] & 0x40 ) == 0x40) ) //Is data frame && encrypted
                 {
@@ -3204,7 +3218,7 @@ int do_attack_fragment()
             gotit=0;
             while (!gotit)  //waiting for relayed packet
             {
-                caplen = read_packet(packet, 4096);
+                caplen = read_packet(packet, sizeof(packet));
 
                 if (packet[0] == 0x08 && (( packet[1] & 0x40 ) == 0x40) ) //Is data frame && encrypted
                 {
@@ -3303,7 +3317,7 @@ int do_attack_fragment()
             gotit=0;
             while (!gotit)  //waiting for relayed packet
             {
-                caplen = read_packet(packet, 4096);
+                caplen = read_packet(packet, sizeof(packet));
 
                 if (packet[0] == 0x08 && (( packet[1] & 0x40 ) == 0x40) ) //Is data frame && encrypted
                 {

