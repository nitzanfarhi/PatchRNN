commit 9d1852ce11c888e3ad5096be505d14045d8b49ae
Author: Michael Roth <mdroth@linux.vnet.ibm.com>
Date:   Thu Sep 10 16:11:03 2015 -0500

    spapr_drc: don't allow 'empty' DRCs to be unisolated or allocated
    
    Logical resources start with allocation-state:UNUSABLE /
    isolation-state:ISOLATED. During hotplug, guests will transition
    them to allocation-state:USABLE, and then to
    isolation-state:UNISOLATED.
    
    For cases where we cannot transition to allocation-state:USABLE,
    in this case due to no device/resource being association with
    the logical DRC, we should return an error -3.
    
    For physical DRCs, we default to allocation-state:USABLE and stay
    there, so in this case we should report an error -3 when the guest
    attempts to make the isolation-state:ISOLATED transition for a DRC
    with no device associated.
    
    These are as documented in PAPR 2.7, 13.5.3.4.
    
    We also ensure allocation-state:USABLE when the guest attempts
    transition to isolation-state:UNISOLATED to deal with misbehaving
    guests attempting to bring online an unallocated logical resource.
    
    This is as documented in PAPR 2.7, 13.7.
    
    Currently we implement no such error logic. Fix this by handling
    these error cases as PAPR defines.
    
    Cc: Bharata B Rao <bharata@linux.vnet.ibm.com>
    Signed-off-by: Michael Roth <mdroth@linux.vnet.ibm.com>
    Reviewed-by: David Gibson <david@gibson.dropbear.id.au>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>

diff --git a/hw/ppc/spapr_drc.c b/hw/ppc/spapr_drc.c
index 9ce844ab1e..faf8760d2e 100644
--- a/hw/ppc/spapr_drc.c
+++ b/hw/ppc/spapr_drc.c
@@ -66,6 +66,16 @@ static int set_isolation_state(sPAPRDRConnector *drc,
 
     DPRINTFN("drc: %x, set_isolation_state: %x", get_index(drc), state);
 
+    if (state == SPAPR_DR_ISOLATION_STATE_UNISOLATED) {
+        /* cannot unisolate a non-existant resource, and, or resources
+         * which are in an 'UNUSABLE' allocation state. (PAPR 2.7, 13.5.3.5)
+         */
+        if (!drc->dev ||
+            drc->allocation_state == SPAPR_DR_ALLOCATION_STATE_UNUSABLE) {
+            return RTAS_OUT_NO_SUCH_INDICATOR;
+        }
+    }
+
     drc->isolation_state = state;
 
     if (drc->isolation_state == SPAPR_DR_ISOLATION_STATE_ISOLATED) {
@@ -107,6 +117,17 @@ static int set_allocation_state(sPAPRDRConnector *drc,
 
     DPRINTFN("drc: %x, set_allocation_state: %x", get_index(drc), state);
 
+    if (state == SPAPR_DR_ALLOCATION_STATE_USABLE) {
+        /* if there's no resource/device associated with the DRC, there's
+         * no way for us to put it in an allocation state consistent with
+         * being 'USABLE'. PAPR 2.7, 13.5.3.4 documents that this should
+         * result in an RTAS return code of -3 / "no such indicator"
+         */
+        if (!drc->dev) {
+            return RTAS_OUT_NO_SUCH_INDICATOR;
+        }
+    }
+
     if (drc->type != SPAPR_DR_CONNECTOR_TYPE_PCI) {
         drc->allocation_state = state;
         if (drc->awaiting_release &&
diff --git a/include/hw/ppc/spapr.h b/include/hw/ppc/spapr.h
index cbe3463e32..8a0a74d5d9 100644
--- a/include/hw/ppc/spapr.h
+++ b/include/hw/ppc/spapr.h
@@ -409,6 +409,7 @@ int spapr_allocate_irq_block(int num, bool lsi, bool msi);
 #define RTAS_OUT_BUSY               -2
 #define RTAS_OUT_PARAM_ERROR        -3
 #define RTAS_OUT_NOT_SUPPORTED      -3
+#define RTAS_OUT_NO_SUCH_INDICATOR  -3
 #define RTAS_OUT_NOT_AUTHORIZED     -9002
 
 /* RTAS tokens */

