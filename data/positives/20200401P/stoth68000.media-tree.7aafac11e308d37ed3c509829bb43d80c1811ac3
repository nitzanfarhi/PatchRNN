commit 7aafac11e308d37ed3c509829bb43d80c1811ac3
Author: Alexey Kardashevskiy <aik@ozlabs.ru>
Date:   Wed Feb 22 15:43:59 2017 +1100

    powerpc/powernv/ioda2: Gracefully fail if too many TCE levels requested
    
    The IODA2 specification says that a 64 DMA address cannot use top 4 bits
    (3 are reserved and one is a "TVE select"); bottom page_shift bits
    cannot be used for multilevel table addressing either.
    
    The existing IODA2 table allocation code aligns the minimum TCE table
    size to PAGE_SIZE so in the case of 64K system pages and 4K IOMMU pages,
    we have 64-4-12=48 bits. Since 64K page stores 8192 TCEs, i.e. needs
    13 bits, the maximum number of levels is 48/13 = 3 so we physically
    cannot address more and EEH happens on DMA accesses.
    
    This adds a check that too many levels were requested.
    
    It is still possible to have 5 levels in the case of 4K system page size.
    
    Signed-off-by: Alexey Kardashevskiy <aik@ozlabs.ru>
    Acked-by: Gavin Shan <gwshan@linux.vnet.ibm.com>
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>

diff --git a/arch/powerpc/platforms/powernv/pci-ioda.c b/arch/powerpc/platforms/powernv/pci-ioda.c
index 6901a06da2f9..957a57a6c812 100644
--- a/arch/powerpc/platforms/powernv/pci-ioda.c
+++ b/arch/powerpc/platforms/powernv/pci-ioda.c
@@ -2624,6 +2624,9 @@ static long pnv_pci_ioda2_table_alloc_pages(int nid, __u64 bus_offset,
 	level_shift = entries_shift + 3;
 	level_shift = max_t(unsigned, level_shift, PAGE_SHIFT);
 
+	if ((level_shift - 3) * levels + page_shift >= 60)
+		return -EINVAL;
+
 	/* Allocate TCE table */
 	addr = pnv_pci_ioda2_table_do_alloc_pages(nid, level_shift,
 			levels, tce_table_size, &offset, &total_allocated);

