commit f9ee9f9ac28d6964772c08d5d428b713d58a3aca
Author: Alexey Kardashevskiy <aik@ozlabs.ru>
Date:   Thu Jan 30 23:03:50 2014 +1100

    exec: fix ram_list dirty map optimization
    
    The ae2810c4bb3b383176e8e1b33931b16c01483aab patch introduced
    optimization for ram_list.dirty_memory update. However it can only
    work correctly if hpratio is 1 as the @bitmap parameter stores 1 bits
    per system page size (may vary, 4K or 64K on PPC64) and
    ram_list.dirty_memory stores 1 bit per TARGET_PAGE_SIZE
    (which is hardcoded to 4K).
    
    This fixes hpratio!=1 case to fall back to the slow path.
    
    Signed-off-by: Alexey Kardashevskiy <aik@ozlabs.ru>
    Signed-off-by: Juan Quintela <quintela@redhat.com>

diff --git a/include/exec/ram_addr.h b/include/exec/ram_addr.h
index 481a447417..2edfa96c6d 100644
--- a/include/exec/ram_addr.h
+++ b/include/exec/ram_addr.h
@@ -93,7 +93,8 @@ static inline void cpu_physical_memory_set_dirty_lebitmap(unsigned long *bitmap,
     unsigned long page = BIT_WORD(start >> TARGET_PAGE_BITS);
 
     /* start address is aligned at the start of a word? */
-    if (((page * BITS_PER_LONG) << TARGET_PAGE_BITS) == start) {
+    if ((((page * BITS_PER_LONG) << TARGET_PAGE_BITS) == start) &&
+        (hpratio == 1)) {
         long k;
         long nr = BITS_TO_LONGS(pages);
 

