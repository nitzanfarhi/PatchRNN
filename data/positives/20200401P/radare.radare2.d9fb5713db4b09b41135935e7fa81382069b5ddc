commit d9fb5713db4b09b41135935e7fa81382069b5ddc
Author: pancake <pancake@nopcode.org>
Date:   Tue Jan 24 13:57:17 2017 +0100

    Fix racy set of asm.cpu and asm.arch

diff --git a/libr/asm/p/asm_arm_cs.c b/libr/asm/p/asm_arm_cs.c
index 562ce4c38..e270fcf13 100644
--- a/libr/asm/p/asm_arm_cs.c
+++ b/libr/asm/p/asm_arm_cs.c
@@ -141,7 +141,7 @@ static int assemble(RAsm *a, RAsmOp *op, const char *buf) {
 RAsmPlugin r_asm_plugin_arm_cs = {
 	.name = "arm",
 	.desc = "Capstone ARM disassembler",
-	.cpus = "v8,cortex-m",
+	.cpus = "v8,cortex",
 	.license = "BSD",
 	.arch = "arm",
 	.bits = 16 | 32 | 64,
@@ -149,7 +149,7 @@ RAsmPlugin r_asm_plugin_arm_cs = {
 	.disassemble = &disassemble,
 	.mnemonics = mnemonics,
 	.assemble = &assemble,
-	.features = "no-mclass,v8"
+	.features = "v8"
 #if 0
 	// arm32 and arm64
 	"crypto,databarrier,divide,fparmv8,multpro,neon,t2extractpack,"
diff --git a/libr/core/cconfig.c b/libr/core/cconfig.c
index 4f5afd453..306f69af9 100755
--- a/libr/core/cconfig.c
+++ b/libr/core/cconfig.c
@@ -268,6 +268,7 @@ static int cb_asmarch(void *user, void *data) {
 		eprintf ("asm.arch: cannot find (%s)\n", node->value);
 		return false;
 	}
+	const char *asm_cpu = r_config_get (core->config, "asm.cpu");
 	if (core->assembler->cur) {
 		const char *newAsmCPU = core->assembler->cur->cpus;
 		if (newAsmCPU) {
@@ -349,6 +350,7 @@ static int cb_asmarch(void *user, void *data) {
 		// set endian of display to match binary
 		core->print->big_endian = bigbin;
 	}
+	r_asm_set_cpu (core->assembler, asm_cpu);
 	/* reload types and cc info */
 	r_core_anal_type_init (core);
 	r_core_anal_cc_init (core);
@@ -1838,9 +1840,9 @@ R_API int r_core_config_init(RCore *core) {
 	SETI("asm.symbol.col", 40, "Columns width to show asm.section");
 	SETCB("asm.assembler", "", &cb_asmassembler, "Set the plugin name to use when assembling");
 	SETPREF("asm.minicols", "false", "Only show the instruction in the column disasm");
+	SETCB("asm.cpu", R_SYS_ARCH, &cb_asmcpu, "Set the kind of asm.arch cpu");
 	SETCB("asm.arch", R_SYS_ARCH, &cb_asmarch, "Set the arch to be used by asm");
 	SETCB("asm.features", "", &cb_asmfeatures, "Specify supported features by the target CPU (=? for help)");
-	SETCB("asm.cpu", R_SYS_ARCH, &cb_asmcpu, "Set the kind of asm.arch cpu");
 	SETCB("asm.parser", "x86.pseudo", &cb_asmparser, "Set the asm parser to use");
 	SETCB("asm.segoff", "false", &cb_segoff, "Show segmented address in prompt (x86-16)");
 	SETCB("asm.decoff", "false", &cb_decoff, "Show segmented address in prompt (x86-16)");
diff --git a/libr/core/disasm.c b/libr/core/disasm.c
index 423933883..e284ed60e 100644
--- a/libr/core/disasm.c
+++ b/libr/core/disasm.c
@@ -2951,7 +2951,7 @@ static void delete_last_comment(RDisasmState *ds) {
 		if (ll) {
 			const char *begin = r_str_nstr (ll, "; ", len);
 			if (begin) {
-				const int cstrlen = begin + len - ll;
+				// const int cstrlen = begin + len - ll;
 				// r_cons_drop (cstrlen - (int)(begin - ll));
 				r_cons_newline();
 			}

