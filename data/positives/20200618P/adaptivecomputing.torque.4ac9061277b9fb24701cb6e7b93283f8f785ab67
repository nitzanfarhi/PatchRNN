commit 4ac9061277b9fb24701cb6e7b93283f8f785ab67
Author: Elizabeth Chan <echan@adaptivecomputing.com>
Date:   Fri Jul 19 18:03:12 2013 -0600

    Merge fix for TRQ-2067 - crash on startup around failed malloc. Added unit test.

diff --git a/src/server/node_func.c b/src/server/node_func.c
index 7a76c5152..a5db3fa6e 100644
--- a/src/server/node_func.c
+++ b/src/server/node_func.c
@@ -1934,6 +1934,8 @@ int create_pbs_node(
     return(rc);
     }
 
+  try
+  {
   /* All nodes have at least one execution slot */
   add_execution_slot(pnode);
 
@@ -1953,7 +1955,14 @@ int create_pbs_node(
     
     return(rc);
     }
-
+  }
+  catch(...)
+  {
+  free(pul);
+  free(pname);
+  free(pnode);
+  return -1;
+  }
   for (i = 0; pul[i]; i++)
     {
     if (LOGLEVEL >= 6)
diff --git a/src/server/test/node_func/test_node_func.c b/src/server/test/node_func/test_node_func.c
index d89786486..334c8ef6b 100644
--- a/src/server/test/node_func/test_node_func.c
+++ b/src/server/test/node_func/test_node_func.c
@@ -4,8 +4,13 @@
 #include "pbs_error.h"
 #include <stdlib.h>
 #include <stdio.h>
+#include <unistd.h>
+
 #include "pbs_nodes.h" /* pbs_nodes, node_check_info, node_iterator, all_nodes */
 #include "attribute.h" /* svrattrl, struct  */
+#include "svr_task.h"
+
+#define HOST_NAME_MAX 255
 
 int login_encode_jobs(struct pbsnode *pnode, tlist_head *phead);
 int cray_enabled;
@@ -448,7 +453,6 @@ START_TEST(create_pbs_node_test)
   result = create_pbs_node(name, &attributes, 0, NULL);
   fail_unless(result != PBSE_NONE, "NULL input mask fail");
 
-  /*TODO: mock properly in order to success*/
   result = create_pbs_node(name, &attributes, 0, &mask);
   fail_unless(result != PBSE_NONE, "create_pbs_node fail");
   }
@@ -886,6 +890,27 @@ START_TEST(remove_hello_test)
   }
 END_TEST
 
+#if 0
+START_TEST(create_pbs_node_real_test)
+  {
+  char hostname[HOST_NAME_MAX+1];
+  int mask = 0;
+  fail_unless(gethostname(hostname, sizeof(hostname)) == 0, 
+    "failed calling gethostname api");
+
+  svrattrl *pal = (svrattrl *)attrlist_create((char *)ATTR_NODE_np, 0, 2);
+  fail_unless(pal != 0, "failed to allocate svrattrl in test_create_pbs_node");
+  strcpy((char *)pal->al_value, "6");
+  pal->al_flags = SET;
+  tlist_head      atrlist;
+  CLEAR_HEAD(atrlist);
+  append_link(&atrlist, &pal->al_link, pal);
+  fail_unless(create_pbs_node (hostname, pal, 48, &mask) == PBSE_NONE, "create_pbs_node should have succeeded");
+  free(pal);
+  }
+END_TEST
+#endif
+
 Suite *node_func_suite(void)
   {
   Suite *s = suite_create("node_func_suite methods");
@@ -1040,11 +1065,17 @@ Suite *node_func_suite(void)
   tc_core = tcase_create("pop_hello_test");
   tcase_add_test(tc_core, pop_hello_test);
   suite_add_tcase(s, tc_core);
-
   tc_core = tcase_create("remove_hello_test");
   tcase_add_test(tc_core, remove_hello_test);
   suite_add_tcase(s, tc_core);
 
+#if 0
+  /* Will uncoment this test once we use the real, append_link, etc */
+  tc_core = tcase_create("create_pbs_node_real_test");
+  tcase_add_test(tc_core, create_pbs_node_real_test);
+  suite_add_tcase(s, tc_core);
+#endif
+
   return s;
   }
 

