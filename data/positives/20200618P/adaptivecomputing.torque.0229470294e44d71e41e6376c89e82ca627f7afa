commit 0229470294e44d71e41e6376c89e82ca627f7afa
Author: jrosenquist <jrosenquist@8f940c70-5916-0410-ac46-d1fa2fa6ea29>
Date:   Wed Oct 5 20:57:09 2011 +0000

    Fixed bug in parse variable list where empty declarations of env vars would not be accepted.
    Fixed -v submission

diff --git a/src/cmds/common_cmds.c b/src/cmds/common_cmds.c
index af287804c..27cbd6fac 100644
--- a/src/cmds/common_cmds.c
+++ b/src/cmds/common_cmds.c
@@ -134,6 +134,7 @@ void parse_variable_list(
   char *e = NULL;
   char *delim = NULL;
   char *name = NULL;
+  char *tmp_name = NULL;
   char *val = NULL;
   job_data *hash_var = NULL;
   s = the_list;
@@ -152,20 +153,29 @@ void parse_variable_list(
     if (!e)
       e = strchr(delim+1, '\0');
 
+    /* Get the variable from the src hash */
+    /* Set the variable from the incoming data */
+    alloc_size = delim - s;
+    /* the +8 is for prepending the value of pbs_var_ to the value
+     * This is used and removed in build_var_list later */
+    calloc_or_fail(mm, &name, alloc_size+8, "parse_variable_list name");
+    memcpy(name, "pbs_var_", 8);
+    memcpy(name+8, s, alloc_size);
     if ((e - delim) == 1)
       {
-      /* Get the variable from the src hash */
-      alloc_size = delim - s;
-      calloc_or_fail(mm, &name, alloc_size, "parse_variable_list name");
-      if (hash_find(user_env, name, &hash_var))
+      calloc_or_fail(mm, &tmp_name, alloc_size, "parse_variable_list name");
+      memcpy(tmp_name, s, alloc_size);
+      if (hash_find(user_env, tmp_name, &hash_var))
+        {
         hash_add_or_exit(mm, dest_hash, name, hash_var->value, hash_var->var_type);
+        }
+      else
+        {
+        hash_add_or_exit(mm, dest_hash, name, "", CMDLINE_DATA);
+        }
       }
     else
       {
-      /* Set the variable from the incoming data */
-      alloc_size = delim - s;
-      calloc_or_fail(mm, &name, alloc_size, "parse_variable_list name");
-      strncpy(name, s, alloc_size);
       delim++; /* Move past the = */
       alloc_size = e - delim;
       calloc_or_fail(mm, &val, alloc_size, "parse_variable_list val");
diff --git a/src/lib/Libifl/enc_attropl_hash.c b/src/lib/Libifl/enc_attropl_hash.c
index 785ef1000..3c9007029 100644
--- a/src/lib/Libifl/enc_attropl_hash.c
+++ b/src/lib/Libifl/enc_attropl_hash.c
@@ -117,7 +117,7 @@
 int build_var_list(
     memmgr **mm,
     char **var_list,
-    job_data *attrs)
+    job_data **attrs)
   {
   job_data *atr, *tmp;
   int current_len = 0;
@@ -127,7 +127,7 @@ int build_var_list(
   int offset = 0;
   char *tmp_var_list = NULL;
   char *workdir_val = NULL;
-  HASH_ITER(hh, attrs, atr, tmp)
+  HASH_ITER(hh, *attrs, atr, tmp)
     {
     if (strncmp(atr->name, "pbs_o", 5) == 0)
       {
@@ -158,6 +158,27 @@ int build_var_list(
         workdir_val = atr->value;
       item_count++;
       }
+    else if (strncmp(atr->name, "pbs_var_", 8) == 0)
+      {
+      name_len = strlen(atr->name)-8; /* name= */
+      value_len = strlen(atr->value); /* value\0 */
+      *var_list = memmgr_realloc(mm, *var_list,
+          current_len + 1 + name_len + 1 + value_len + 1);
+      if (current_len != 0)
+        {
+        (*var_list)[current_len] = ',';
+        current_len++;
+        }
+      memcpy((*var_list) + current_len, (atr->name)+8, name_len);
+      current_len += name_len;
+      (*var_list)[current_len] = '=';
+      current_len++;
+      memcpy((*var_list) + current_len, atr->value, value_len);
+      current_len += value_len;
+      (*var_list)[current_len] = '\0';
+      item_count++;
+      hash_del_item(mm, attrs, atr->name);
+      }
     }
   /* This a temporary work around until the server code has been changed */
   if (workdir_val)
@@ -240,7 +261,7 @@ int encode_DIS_attropl_hash(
   memmgr *var_mm;
   if ((rc = memmgr_init(&var_mm, 0)) == PBSE_NONE)
     {
-    var_list_count = build_var_list(&var_mm, &var_list, job_attr);
+    var_list_count = build_var_list(&var_mm, &var_list, &job_attr);
     ct = hash_count(job_attr) - var_list_count;
     ct += hash_count(res_attr);
     ct++; /* var_list */

