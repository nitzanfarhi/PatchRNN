commit 1a2bf2eefb63a267aea7f3f80d6ac59160e20810
Author: Jesper Juhl <jesper.juhl@gmail.com>
Date:   Thu Jul 19 00:27:43 2007 +0200

    [DLM] Fix memory leak in dlm_add_member() when dlm_node_weight() returns less than zero
    
    There's a memory leak in fs/dlm/member.c::dlm_add_member().
    
    If "dlm_node_weight(ls->ls_name, nodeid)" returns < 0, then
    we'll return without freeing the memory allocated to the (at
    that point yet unused) 'memb'.
    This patch frees the allocated memory in that case and thus
    avoids the leak.
    
    Signed-off-by: Jesper Juhl <jesper.juhl@gmail.com>
    Signed-off-by: David Teigland <teigland@redhat.com>
    Signed-off-by: Steven Whitehouse <swhiteho@redhat.com>

diff --git a/fs/dlm/member.c b/fs/dlm/member.c
index 073599dced2a..d09977528f69 100644
--- a/fs/dlm/member.c
+++ b/fs/dlm/member.c
@@ -56,8 +56,10 @@ static int dlm_add_member(struct dlm_ls *ls, int nodeid)
 		return -ENOMEM;
 
 	w = dlm_node_weight(ls->ls_name, nodeid);
-	if (w < 0)
+	if (w < 0) {
+		kfree(memb);
 		return w;
+	}
 
 	memb->nodeid = nodeid;
 	memb->weight = w;

