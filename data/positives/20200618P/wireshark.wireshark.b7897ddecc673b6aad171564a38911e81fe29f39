commit b7897ddecc673b6aad171564a38911e81fe29f39
Author: Peter Wu <peter@lekensteyn.nl>
Date:   Thu Mar 31 23:20:26 2016 +0200

    Qt: prevent input to the capture filter field during initialization
    
    Mark the capture filter field as readonly until initialization is
    completed. This avoids useless entries in the recent capture filters
    list and fixes a use-after-free when typing during startup.
    
    (This use-after free occurred when a new item is added to the recent
    filters list which invalidates the previously retrieved list).
    
    Change-Id: Ifae9444986436a60781bf5f83a6e650501ccc4d5
    Reviewed-on: https://code.wireshark.org/review/14740
    Petri-Dish: Peter Wu <peter@lekensteyn.nl>
    Tested-by: Petri Dish Buildbot <buildbot-no-reply@wireshark.org>
    Reviewed-by: Michael Mann <mmann78@netscape.net>

diff --git a/ui/qt/capture_filter_combo.cpp b/ui/qt/capture_filter_combo.cpp
index 267e4d362d..d3f98ca74b 100644
--- a/ui/qt/capture_filter_combo.cpp
+++ b/ui/qt/capture_filter_combo.cpp
@@ -83,11 +83,11 @@ CaptureFilterCombo::CaptureFilterCombo(QWidget *parent, bool plain) :
     connect(cf_edit_, SIGNAL(captureFilterSyntaxChanged(bool)),
             this, SIGNAL(captureFilterSyntaxChanged(bool)));
     connect(cf_edit_, SIGNAL(startCapture()), this, SIGNAL(startCapture()));
-    connect(cf_edit_, SIGNAL(startCapture()), this, SLOT(rebuildFilterList()));
+    connect(cf_edit_, SIGNAL(startCapture()), this, SLOT(saveAndRebuildFilterList()));
     connect(wsApp, SIGNAL(appInitialized()), this, SLOT(rebuildFilterList()));
     connect(wsApp, SIGNAL(preferencesChanged()), this, SLOT(rebuildFilterList()));
 
-    rebuildFilterList(false);
+    lineEdit()->setReadOnly(true);
     clearEditText();
 }
 
@@ -102,22 +102,23 @@ void CaptureFilterCombo::writeRecent(FILE *rf) {
     }
 }
 
-void CaptureFilterCombo::rebuildFilterList(bool insert_edit_text)
+void CaptureFilterCombo::saveAndRebuildFilterList()
 {
-    GList *cfilter_list = recent_get_cfilter_list(NULL);
-    QString cur_filter = currentText();
-
-    if (insert_edit_text && !currentText().isEmpty()) {
+    if (!currentText().isEmpty()) {
         recent_add_cfilter(NULL, currentText().toUtf8().constData());
     }
-
+    rebuildFilterList();
+}
+void CaptureFilterCombo::rebuildFilterList()
+{
     lineEdit()->blockSignals(true);
+    GList *cfilter_list = recent_get_cfilter_list(NULL);
     clear();
     for (GList *li = g_list_first(cfilter_list); li != NULL; li = g_list_next(li)) {
         insertItem(0, (const gchar *) li->data);
     }
-    lineEdit()->setText(cur_filter);
     lineEdit()->blockSignals(false);
+    lineEdit()->setReadOnly(false);
 }
 
 /*
diff --git a/ui/qt/capture_filter_combo.h b/ui/qt/capture_filter_combo.h
index 785b6ad36c..cc90a534f8 100644
--- a/ui/qt/capture_filter_combo.h
+++ b/ui/qt/capture_filter_combo.h
@@ -49,7 +49,8 @@ private:
     CaptureFilterEdit *cf_edit_;
 
 private slots:
-    void rebuildFilterList(bool insert_edit_text = true);
+    void saveAndRebuildFilterList();
+    void rebuildFilterList();
 };
 
 #endif // CAPTURE_FILTER_COMBO_H

