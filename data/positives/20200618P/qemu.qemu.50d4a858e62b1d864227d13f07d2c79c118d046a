commit 50d4a858e62b1d864227d13f07d2c79c118d046a
Author: Kevin Wolf <kwolf@redhat.com>
Date:   Wed May 21 18:02:42 2014 +0200

    raw-posix: Handle failure for potentially large allocations
    
    Some code in the block layer makes potentially huge allocations. Failure
    is not completely unexpected there, so avoid aborting qemu and handle
    out-of-memory situations gracefully.
    
    This patch addresses the allocations in the raw-posix block driver.
    
    Signed-off-by: Kevin Wolf <kwolf@redhat.com>
    Reviewed-by: Stefan Hajnoczi <stefanha@redhat.com>

diff --git a/block/raw-posix.c b/block/raw-posix.c
index 8e9758e920..1194eb00ad 100644
--- a/block/raw-posix.c
+++ b/block/raw-posix.c
@@ -798,7 +798,11 @@ static ssize_t handle_aiocb_rw(RawPosixAIOData *aiocb)
      * Ok, we have to do it the hard way, copy all segments into
      * a single aligned buffer.
      */
-    buf = qemu_blockalign(aiocb->bs, aiocb->aio_nbytes);
+    buf = qemu_try_blockalign(aiocb->bs, aiocb->aio_nbytes);
+    if (buf == NULL) {
+        return -ENOMEM;
+    }
+
     if (aiocb->aio_type & QEMU_AIO_WRITE) {
         char *p = buf;
         int i;

