commit 0e94d87fcfc81883b72574a5cc4638bd87adbb10
Author: John Fastabend <john.fastabend@gmail.com>
Date:   Mon Apr 2 12:50:52 2018 -0700

    bpf: sockmap, duplicates release calls may NULL sk_prot
    
    It is possible to have multiple ULP tcp_release call paths in flight
    if a sock is closed and simultaneously being removed from the sockmap
    control path. The result would be setting the sk_prot to the saved
    values on the first iteration and then on the second iteration setting
    the value to NULL.
    
    This patch resolves this by ensuring we only reset the sk_prot pointer
    if we have a valid saved state to set.
    
    Fixes: 4f738adba30a7 ("bpf: create tcp_bpf_ulp allowing BPF to monitor socket TX/RX data")
    Signed-off-by: John Fastabend <john.fastabend@gmail.com>
    Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>

diff --git a/kernel/bpf/sockmap.c b/kernel/bpf/sockmap.c
index 8ddf326b3ade..8dd9210d7db7 100644
--- a/kernel/bpf/sockmap.c
+++ b/kernel/bpf/sockmap.c
@@ -182,8 +182,10 @@ static void bpf_tcp_release(struct sock *sk)
 		psock->cork = NULL;
 	}
 
-	sk->sk_prot = psock->sk_proto;
-	psock->sk_proto = NULL;
+	if (psock->sk_proto) {
+		sk->sk_prot = psock->sk_proto;
+		psock->sk_proto = NULL;
+	}
 out:
 	rcu_read_unlock();
 }

