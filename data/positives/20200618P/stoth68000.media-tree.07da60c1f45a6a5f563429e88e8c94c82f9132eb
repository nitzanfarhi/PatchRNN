commit 07da60c1f45a6a5f563429e88e8c94c82f9132eb
Author: Anton Blanchard <anton@samba.org>
Date:   Wed Mar 21 08:41:47 2007 -0500

    [SCSI] lpfc: fix oops when parsing dodgy VPD
    
    We have seen two cases where VPD on an emulex card has been incorrect
    and we end up walking off the end of memory. It looks like someone made
    an update (increased the length of a string) without increasing the
    Length field. Then we do:
    
            Length -= (3+i);
    
    And since Length is unsigned it becomes very large and we loop forever
    in the encapsulating:
    
            while (Length > 0) {
    
    If we make Length signed then we fall out of the loop and proceed on.
    
    Its important to note we have only seen this in the lab and it may be
    the only two cases of this in existence, but since the rest of the code
    has been written to be resilient against bad VPD we may as well fix this
    too.
    
    Signed-off-by: Anton Blanchard <anton@samba.org>
    Acked-by: James Smart <James.Smart@Emulex.Com>
    Signed-off-by: James Bottomley <James.Bottomley@SteelEye.com>

diff --git a/drivers/scsi/lpfc/lpfc_init.c b/drivers/scsi/lpfc/lpfc_init.c
index 9d014e5a81c4..09a9c8ab2eae 100644
--- a/drivers/scsi/lpfc/lpfc_init.c
+++ b/drivers/scsi/lpfc/lpfc_init.c
@@ -671,7 +671,7 @@ static int
 lpfc_parse_vpd(struct lpfc_hba * phba, uint8_t * vpd, int len)
 {
 	uint8_t lenlo, lenhi;
-	uint32_t Length;
+	int Length;
 	int i, j;
 	int finished = 0;
 	int index = 0;

