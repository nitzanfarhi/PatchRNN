commit d18481971eec261b6423198fb8e5a9b627569624
Author: pancake <pancake@nopcode.org>
Date:   Thu Oct 9 18:43:57 2014 +0200

    Fix infinite loop in analysis

diff --git a/libr/anal/fcn.c b/libr/anal/fcn.c
index 5c897d7db..a141c288a 100644
--- a/libr/anal/fcn.c
+++ b/libr/anal/fcn.c
@@ -4,7 +4,7 @@
 #include <r_util.h>
 #include <r_list.h>
 
-#define FCN_DEPTH 32
+#define FCN_DEPTH 16
 
 #define JMP_IS_EOB 1
 #define JMP_IS_EOB_RANGE 512
@@ -146,10 +146,14 @@ static RAnalBlock *bbget(RAnalFunction *fcn, ut64 addr) {
 	RListIter *iter;
 	RAnalBlock *bb;
 	r_list_foreach (fcn->bbs, iter, bb) {
-		if (bb->addr == addr)
-			return bb;
-		if (addr >= bb->addr && (addr < bb->addr+bb->size))
+		ut64 eaddr = bb->addr + bb->size;
+		if (bb->addr >= eaddr) {
+			if (addr == bb->addr)
+				return bb;
+		}
+		if ((addr >= bb->addr) && (addr < eaddr)) {
 			return bb;
+		}
 	}
 	return NULL;
 }
@@ -167,7 +171,17 @@ static int bbsum(RAnalFunction *fcn) {
 #endif
 
 static RAnalBlock* appendBasicBlock (RAnalFunction *fcn, ut64 addr) {
-	RAnalBlock *bb = r_anal_bb_new();
+	RListIter *iter;
+	RAnalBlock *bb;
+#if 0
+	r_list_foreach (fcn->bbs, iter, bb) {
+		if (bb->addr == addr)
+			return bb;
+	}
+#endif
+	// TODO: echeck if its already there
+	bb = r_anal_bb_new();
+	if (!bb) return NULL;
 	bb->addr = addr;
 	bb->size = 0;
 	bb->jump = UT64_MAX;
@@ -178,8 +192,8 @@ static RAnalBlock* appendBasicBlock (RAnalFunction *fcn, ut64 addr) {
 }
 
 #define FITFCNSZ() {st64 n=bb->addr+bb->size-fcn->addr; \
-	if(n<0) { fcn->addr += n; fcn->size = -n; } else \
-	if(fcn->size<n)fcn->size=n; } \
+	if (n<0) { fcn->addr += n; fcn->size = -n; } else \
+	if (fcn->size<n)fcn->size=n; } \
 	if (fcn->size > MAX_FCN_SIZE) { \
 		eprintf ("Function too big at 0x%"PFMT64x"\n", bb->addr); \
 		fcn->size = 0; \
@@ -209,13 +223,17 @@ static int fcn_recurse(RAnal *anal, RAnalFunction *fcn, ut64 addr, ut8 *buf, ut6
 	if (depth<1) {
 		return R_ANAL_RET_ERROR; // MUST BE TOO DEEP
 	}
+	if (r_anal_get_fcn_at (anal, addr, 0)) {
+		return R_ANAL_RET_ERROR; // MUST BE NOT FOUND
+	}
 	if (bbget (fcn, addr)) {
-		return R_ANAL_RET_ERROR; // MUST BE DUP
+		return R_ANAL_RET_ERROR; // MUST BE NOT DUP
 	}
 
 	bb = appendBasicBlock (fcn, addr);
 
-	VERBOSE_ANAL eprintf ("Append bb at 0x%08"PFMT64x" (fcn)\n", addr);
+	VERBOSE_ANAL eprintf ("Append bb at 0x%08"PFMT64x
+		" (fcn 0x%08llx)\n", addr, fcn->addr);
 
 	while (idx < len) {
 repeat:
diff --git a/libr/core/config.c b/libr/core/config.c
index 41ed5b547..c50fa7bfc 100644
--- a/libr/core/config.c
+++ b/libr/core/config.c
@@ -757,7 +757,7 @@ R_API int r_core_config_init(RCore *core) {
 	cfg->num = core->num;
 
 	/* anal */
-	SETI("anal.depth", 50, "Max depth at code analysis"); // XXX: warn if depth is > 50 .. can be problematic
+	SETI("anal.depth", 16, "Max depth at code analysis"); // XXX: warn if depth is > 50 .. can be problematic
 	SETPREF("anal.hasnext", "true", "Continue analysis after each function");
 	SETPREF("anal.esil", "false", "Use the new ESIL code analysis");
 	SETCB("anal.nopskip", "false", &cb_analnopskip, "Skip nops at the begining of functions");

