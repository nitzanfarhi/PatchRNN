commit fecac12d50f41feb1de56de9af6b1d45e2f11282
Author: Alfredo Cardigliano <cardigliano@ntop.org>
Date:   Wed Nov 23 22:19:52 2016 +0100

    max packet len safety check fix

diff --git a/include/ntop_defines.h b/include/ntop_defines.h
index 1e5473ee..82657cc1 100644
--- a/include/ntop_defines.h
+++ b/include/ntop_defines.h
@@ -406,7 +406,7 @@
 #define CONST_MAX_IDLE_FLOW_TIME       10*CONST_MAX_IDLE_INTERARRIVAL_TIME
 #define CONST_MAX_SSL_IDLE_TIME        46000 /* 46 sec */
 #define CONST_EPP_MAX_CMD_NUM          34
-#define CONST_DEFAULT_MTU              1514
+#define CONST_DEFAULT_MAX_PACKET_SIZE  1518
 
 #define HTTPBL_DOMAIN                  "dnsbl.httpbl.org"
 #define NULL_BL                        "''"
diff --git a/src/NetworkInterface.cpp b/src/NetworkInterface.cpp
index 71af64f2..dfb20199 100644
--- a/src/NetworkInterface.cpp
+++ b/src/NetworkInterface.cpp
@@ -225,7 +225,7 @@ void NetworkInterface::init() {
   dump_max_pkts_file = CONST_MAX_NUM_PACKETS_PER_DUMP;
   dump_max_duration = CONST_MAX_DUMP_DURATION;
   dump_max_files = CONST_MAX_DUMP;
-  ifMTU = CONST_DEFAULT_MTU, mtuWarningShown = false;
+  ifMTU = CONST_DEFAULT_MAX_PACKET_SIZE, mtuWarningShown = false;
 #ifdef NTOPNG_PRO
   flow_profiles = NULL;
 #endif
@@ -1255,7 +1255,7 @@ bool NetworkInterface::dissectPacket(const struct pcap_pkthdr *h,
 
   if(h->len > ifMTU) {
     if(!mtuWarningShown) {
-      ntop->getTrace()->traceEvent(TRACE_NORMAL, "Invalid packet received [len: %u][MTU: %u].", h->len, ifMTU);
+      ntop->getTrace()->traceEvent(TRACE_NORMAL, "Invalid packet received [len: %u][max-len: %u].", h->len, ifMTU);
       ntop->getTrace()->traceEvent(TRACE_WARNING, "If you have TSO/GRO enabled, please disable it");
 #ifdef linux
       ntop->getTrace()->traceEvent(TRACE_WARNING, "Use: sudo ethtool -K %s gro off gso off tso off", ifname);
diff --git a/src/Utils.cpp b/src/Utils.cpp
index 57f122e0..4b1d3d0d 100755
--- a/src/Utils.cpp
+++ b/src/Utils.cpp
@@ -1395,10 +1395,10 @@ void Utils::readMac(char *ifname, dump_mac_t mac_addr) {
 
 u_int16_t Utils::getIfMTU(const char *ifname) {
 #ifdef WIN32
-  return(CONST_DEFAULT_MTU);
+  return(CONST_DEFAULT_MAX_PACKET_SIZE);
 #else
   struct ifreq ifr;
-  u_int32_t mtu = CONST_DEFAULT_MTU; /* Default MTU */
+  u_int32_t max_packet_size = CONST_DEFAULT_MAX_PACKET_SIZE; /* default */
   int fd;
 
   memset(&ifr, 0, sizeof(ifr));
@@ -1411,16 +1411,16 @@ u_int16_t Utils::getIfMTU(const char *ifname) {
     if(ioctl(fd, SIOCGIFMTU, &ifr) == -1)
       ntop->getTrace()->traceEvent(TRACE_INFO, "Unable to read MTU for device %s", ifname);
     else {
-      mtu = ifr.ifr_mtu + sizeof(struct ndpi_ethhdr) + sizeof(Ether80211q);
+      max_packet_size = ifr.ifr_mtu + sizeof(struct ndpi_ethhdr) + sizeof(Ether80211q);
 
-      if(mtu > ((u_int16_t)-1))
-	mtu = ((u_int16_t)-1);
+      if(max_packet_size > ((u_int16_t)-1))
+	max_packet_size = ((u_int16_t)-1);
     }
 
     closesocket(fd);
   }
 
-  return((u_int16_t)mtu);
+  return((u_int16_t) max_packet_size);
 #endif
 }
 

