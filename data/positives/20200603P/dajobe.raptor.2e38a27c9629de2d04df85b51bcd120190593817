commit 2e38a27c9629de2d04df85b51bcd120190593817
Author: Dave Beckett <dave@dajobe.org>
Date:   Sun May 16 13:42:32 2010 -0700

    Initialize raptor_term length fields
    
    (raptor_new_term_from_literal, raptor_new_term_from_blank): init the
    fields.
    
    (raptor_term_equals): Use lengths as short cut for difference.

diff --git a/src/raptor_statement.c b/src/raptor_statement.c
index d525174d..5f34d542 100644
--- a/src/raptor_statement.c
+++ b/src/raptor_statement.c
@@ -181,7 +181,9 @@ raptor_free_statement(raptor_statement *statement)
   if(is_dynamic && --statement->usage)
     return;
   
-  /* free contained terms for both statically and dynamically allodated statements */
+  /* free contained terms for both statically and dynamically
+   * allocated statements 
+   */
   if(statement->subject) {
     raptor_free_term(statement->subject);
     statement->subject = NULL;
@@ -646,7 +648,8 @@ raptor_new_term_from_literal(raptor_world* world,
   raptor_term *t;
   unsigned char* new_literal = NULL;
   unsigned char* new_language = NULL;
-  size_t literal_len = 0;
+  unsigned int literal_len = 0;
+  unsigned char language_len = 0;
 
   RAPTOR_ASSERT_OBJECT_POINTER_RETURN_VALUE(world, raptor_world, NULL);
 
@@ -673,7 +676,7 @@ raptor_new_term_from_literal(raptor_world* world,
   
 
   if(language) {
-    size_t language_len = strlen((const char*)language);
+    language_len = strlen((const char*)language);
 
     new_language = (unsigned char*)RAPTOR_MALLOC(cstring, language_len + 1);
     if(!new_language) {
@@ -700,7 +703,9 @@ raptor_new_term_from_literal(raptor_world* world,
   t->world = world;
   t->type = RAPTOR_TERM_TYPE_LITERAL;
   t->value.literal.string = new_literal;
+  t->value.literal.string_len = literal_len;
   t->value.literal.language = new_language;
+  t->value.literal.string_len = language_len;
   t->value.literal.datatype = datatype;
 
   return t;
@@ -747,6 +752,7 @@ raptor_new_term_from_blank(raptor_world* world, const unsigned char* blank)
   t->world = world;
   t->type = RAPTOR_TERM_TYPE_BLANK;
   t->value.blank.string = new_id;
+  t->value.blank.string_len = len;
 
   return t;
 }
@@ -778,11 +784,19 @@ raptor_term_equals(raptor_term* t1, raptor_term* t2)
       break;
 
     case RAPTOR_TERM_TYPE_BLANK:
+      d = (t1->value.blank.string_len != t2->value.blank.string_len);
+      if(d)
+        break;
+
       d = !strcmp((const char*)t1->value.blank.string, 
                   (const char*)t2->value.blank.string);
       break;
 
     case RAPTOR_TERM_TYPE_LITERAL:
+      d = (t1->value.literal.string_len != t2->value.literal.string_len);
+      if(d)
+        break;
+
       d = !strcmp((const char*)t1->value.literal.string,
                   (const char*)t2->value.literal.string);
       if(!d)

