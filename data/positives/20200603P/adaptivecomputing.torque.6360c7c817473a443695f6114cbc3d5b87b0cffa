commit 6360c7c817473a443695f6114cbc3d5b87b0cffa
Author: knielson <knielson@adaptivecomputing.com>
Date:   Mon Oct 12 15:27:49 2015 -0600

     trq-3342.
     Fixed memory leak from TMomFinalizeJob1. Freeing pwdp and buf pointers.

diff --git a/src/resmom/requests.c b/src/resmom/requests.c
index ceba297c3..6dc175aa5 100644
--- a/src/resmom/requests.c
+++ b/src/resmom/requests.c
@@ -1127,6 +1127,7 @@ void req_deletejob(
      */
     if (TMOMJobGetStartInfo(pjob, &TJE) == SUCCESS)
       {
+      free_pwnam(static_cast<struct passwd *>(TJE->pwdp), TJE->buf);
       memset(TJE, 0, sizeof(pjobexec_t));
       }
 
diff --git a/src/resmom/start_exec.c b/src/resmom/start_exec.c
index 1d14e0903..6f60e6972 100644
--- a/src/resmom/start_exec.c
+++ b/src/resmom/start_exec.c
@@ -2250,6 +2250,8 @@ int TMomFinalizeJob1(
     return(FAILURE);
     }
 
+  /* TJE->buf and TJE->pwdp at the end of exec_job_on_ms when
+     the job starts successfully */
   if ((TJE->pwdp = getpwnam_ext(&TJE->buf, pjob->ji_wattr[JOB_ATR_euser].at_val.at_str)) == NULL)
 #if IBM_SP2==2        /* IBM SP with PSSP 3.1 */
 
@@ -2722,13 +2724,14 @@ int determine_umask(
     {
     if (!strcasecmp(DEFAULT_UMASK, "userdefault"))
       {
+      char *buf;
       /* apply user default */
 
       /* do we inherit umask when we do setuid(), NO */
       /* we want to try and determine what the users umask is */
       /* then we return its value so it can be set correctly */
 
-      if ((pwdp = getpwuid(uid)) == NULL)
+      if ((pwdp = get_password_entry_by_uid(&buf, uid)) == NULL)
         {
         sprintf(log_buffer, "FAILED to get password structure for uid %d",
                 uid);
@@ -2749,6 +2752,7 @@ int determine_umask(
           pclose(fp);
           }
         }
+      free_pwnam(pwdp, buf);
       }
     else
       {
@@ -9204,8 +9208,7 @@ int exec_job_on_ms(
 
     if (SC != 0)
       {
-      if (TJE->pwdp)
-        free(TJE->pwdp);
+      free_pwnam(static_cast<struct passwd *>(TJE->pwdp), TJE->buf);
       memset(TJE, 0, sizeof(pjobexec_t));
       sprintf(log_buffer, "job %s failed after TMomFinalizeJob1", pjob->ji_qs.ji_jobid);
       log_event(PBSEVENT_ERROR, PBS_EVENTCLASS_JOB, __func__, log_buffer);
@@ -9222,8 +9225,7 @@ int exec_job_on_ms(
     {
     if (SC != 0)
       {
-      if (TJE->pwdp)
-        free(TJE->pwdp);
+      free_pwnam(static_cast<struct passwd *>(TJE->pwdp), TJE->buf);
       memset(TJE, 0, sizeof(pjobexec_t));
 
       sprintf(log_buffer, "job %s failed after TMomFinalizeJob2", pjob->ji_qs.ji_jobid);
@@ -9253,8 +9255,7 @@ int exec_job_on_ms(
 
   if (TMomFinalizeJob3(TJE, Count, RC, &SC) == FAILURE)
     {
-    if (TJE->pwdp)
-      free(TJE->pwdp);
+    free_pwnam(static_cast<struct passwd *>(TJE->pwdp), TJE->buf);
 
     sprintf(log_buffer, "ALERT:  job failed phase 3 start - jobid %s", pjob->ji_qs.ji_jobid);
 
@@ -9270,8 +9271,7 @@ int exec_job_on_ms(
 
   /* SUCCESS:  MOM returns */
 
-  if (TJE->pwdp)
-    free(TJE->pwdp);
+    free_pwnam(static_cast<struct passwd *>(TJE->pwdp), TJE->buf);
   memset(TJE, 0, sizeof(pjobexec_t));
 
   if (LOGLEVEL >= 3)

