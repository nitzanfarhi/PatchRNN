commit b4e76f7e6d3200462c6354a6ad4ae167459e61f8
Author: Daniel Borkmann <daniel@iogearbox.net>
Date:   Thu Jul 14 13:57:55 2016 +0200

    bpf, mips: fix off-by-one in ctx offset allocation
    
    Dan Carpenter reported [1] a static checker warning that ctx->offsets[]
    may be accessed off by one from build_body(), since it's allocated with
    fp->len * sizeof(*ctx.offsets) as length. The cBPF arm and ppc code
    doesn't have this issue as claimed, so only mips seems to be affected and
    should like most other JITs allocate with fp->len + 1. A few number of
    JITs (x86, sparc, arm64) handle this differently, where they only require
    fp->len array elements.
    
      [1] http://www.spinics.net/lists/mips/msg64193.html
    
    Fixes: c6610de353da ("MIPS: net: Add BPF JIT")
    Reported-by: Dan Carpenter <dan.carpenter@oracle.com>
    Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
    Cc: Alexei Starovoitov <ast@kernel.org>
    Cc: ast@kernel.org
    Cc: linux-mips@linux-mips.org
    Cc: linux-mips@linux-mips.org
    Patchwork: https://patchwork.linux-mips.org/patch/13814/
    Signed-off-by: Ralf Baechle <ralf@linux-mips.org>

diff --git a/arch/mips/net/bpf_jit.c b/arch/mips/net/bpf_jit.c
index 1a8c96035716..a04c393a751a 100644
--- a/arch/mips/net/bpf_jit.c
+++ b/arch/mips/net/bpf_jit.c
@@ -1199,7 +1199,7 @@ void bpf_jit_compile(struct bpf_prog *fp)
 
 	memset(&ctx, 0, sizeof(ctx));
 
-	ctx.offsets = kcalloc(fp->len, sizeof(*ctx.offsets), GFP_KERNEL);
+	ctx.offsets = kcalloc(fp->len + 1, sizeof(*ctx.offsets), GFP_KERNEL);
 	if (ctx.offsets == NULL)
 		return;
 

