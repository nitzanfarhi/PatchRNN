commit 6c12ab6393fbb745a64d8fc2274713df22bcdc30
Author: Even Rouault <even.rouault@mines-paris.org>
Date:   Fri Oct 29 20:48:15 2010 +0000

    Fix memory leaks found by valgrind on wfs_misc.map and wfs_simple.map
    
    git-svn-id: http://svn.osgeo.org/mapserver/trunk@10689 7532c77e-422f-0410-93f4-f0b67bdd69e2

diff --git a/mapgml.c b/mapgml.c
index 717a9e2a..5470d0dc 100644
--- a/mapgml.c
+++ b/mapgml.c
@@ -779,6 +779,7 @@ void msGMLFreeGeometries(gmlGeometryListObj *geometryList)
     msFree(geometryList->geometries[i].name);
     msFree(geometryList->geometries[i].type);
   }
+  free(geometryList->geometries);
 
   free(geometryList);
 }
diff --git a/mapwfs.c b/mapwfs.c
index 5d3fce5d..57ff2c1b 100644
--- a/mapwfs.c
+++ b/mapwfs.c
@@ -669,7 +669,7 @@ int msWFSGetCapabilities(mapObj *map, wfsParamsObj *wfsparams, cgiRequestObj *re
     return msWFSGetCapabilities11( map, wfsparams, req );
 
   /* Decide which version we're going to return... only 1.0.0 for now */
-  wmtver = strdup("1.0.0");
+  wmtver = "1.0.0";
 
   /* We need this server's onlineresource. */
   if ((script_url=msOWSGetOnlineResource(map, "FO", "onlineresource", req)) == NULL ||
@@ -678,6 +678,8 @@ int msWFSGetCapabilities(mapObj *map, wfsParamsObj *wfsparams, cgiRequestObj *re
       msSetError(MS_WFSERR, "Server URL not found", "msWFSGetCapabilities()");
       return msWFSException(map, "mapserv", "NoApplicableCode", wmtver);
   }
+  free(script_url);
+  script_url = NULL;
 
   updatesequence = msOWSLookupMetadata(&(map->web.metadata), "FO", "updatesequence");
 
@@ -688,10 +690,12 @@ int msWFSGetCapabilities(mapObj *map, wfsParamsObj *wfsparams, cgiRequestObj *re
       i = msOWSNegotiateUpdateSequence(wfsparams->pszUpdateSequence, updatesequence);
       if (i == 0) { /* current */
           msSetError(MS_WFSERR, "UPDATESEQUENCE parameter (%s) is equal to server (%s)", "msWFSGetCapabilities()", wfsparams->pszUpdateSequence, updatesequence);
+          free(script_url_encoded);
           return msWFSException(map, "updatesequence", "CurrentUpdateSequence", wmtver);
       }
       if (i > 0) { /* invalid */
           msSetError(MS_WFSERR, "UPDATESEQUENCE parameter (%s) is higher than server (%s)", "msWFSGetCapabilities()", wfsparams->pszUpdateSequence, updatesequence);
+          free(script_url_encoded);
           return msWFSException(map, "updatesequence", "InvalidUpdateSequence", wmtver);
       }
   }
@@ -845,7 +849,6 @@ int msWFSGetCapabilities(mapObj *map, wfsParamsObj *wfsparams, cgiRequestObj *re
   */
   msIO_printf("</WFS_Capabilities>\n");
 
-  free(script_url);
   free(script_url_encoded);
 
   return MS_SUCCESS;
@@ -2869,28 +2872,19 @@ void msWFSFreeParamsObj(wfsParamsObj *wfsparams)
 {
     if (wfsparams)
     {
-        if (wfsparams->pszVersion)
-          free(wfsparams->pszVersion);
-        if (wfsparams->pszUpdateSequence)
-          free(wfsparams->pszUpdateSequence);
-        if (wfsparams->pszRequest)
-          free(wfsparams->pszRequest);
-        if (wfsparams->pszService)
-          free(wfsparams->pszService);
-        if (wfsparams->pszTypeName)
-          free(wfsparams->pszTypeName);
-        if (wfsparams->pszFilter)
-          free(wfsparams->pszFilter);
-        if (wfsparams->pszFeatureId)
-          free(wfsparams->pszFeatureId);
-        if (wfsparams->pszOutputFormat)
-          free(wfsparams->pszOutputFormat);
-        if (wfsparams->pszSrs)
-          free(wfsparams->pszSrs);
-        if (wfsparams->pszResultType)
-          free(wfsparams->pszResultType);
-        if (wfsparams->pszAcceptVersions)
-          free(wfsparams->pszAcceptVersions);
+        free(wfsparams->pszVersion);
+        free(wfsparams->pszUpdateSequence);
+        free(wfsparams->pszRequest);
+        free(wfsparams->pszService);
+        free(wfsparams->pszTypeName);
+        free(wfsparams->pszFilter);
+        free(wfsparams->pszBbox);
+        free(wfsparams->pszOutputFormat);
+        free(wfsparams->pszFeatureId);
+        free(wfsparams->pszSrs);
+        free(wfsparams->pszResultType);
+        free(wfsparams->pszPropertyName);
+        free(wfsparams->pszAcceptVersions);
     }
 }
 
diff --git a/mapwfs11.c b/mapwfs11.c
index 3354c648..72704ba6 100644
--- a/mapwfs11.c
+++ b/mapwfs11.c
@@ -109,6 +109,7 @@ static xmlNodePtr msWFSDumpLayer11(mapObj *map, layerObj *lp, xmlNsPtr psNsOws)
     const char *value    = NULL;
     const char *encoding = NULL;
     char *encoded=NULL;
+    char *valueToFree;
     char **tokens;
     int n=0,i=0;      
 
@@ -156,13 +157,13 @@ static xmlNodePtr msWFSDumpLayer11(mapObj *map, layerObj *lp, xmlNsPtr psNsOws)
 	msFree(encoded);
     }
       /*support DefaultSRS and OtherSRS*/
-    value = msOWSGetProjURN(&(map->projection),&(map->web.metadata),"FO",MS_FALSE);
-    if (!value)
-      value = msOWSGetProjURN(&(lp->projection), &(lp->metadata), "FO", MS_FALSE);
+    valueToFree = msOWSGetProjURN(&(map->projection),&(map->web.metadata),"FO",MS_FALSE);
+    if (!valueToFree)
+      valueToFree = msOWSGetProjURN(&(lp->projection), &(lp->metadata), "FO", MS_FALSE);
 
-    if (value)
+    if (valueToFree)
     {
-        tokens = msStringSplit(value, ' ', &n);
+        tokens = msStringSplit(valueToFree, ' ', &n);
         if (tokens && n > 0)
         {
             psNode = xmlNewChild(psRootNode, NULL, BAD_CAST "DefaultSRS", BAD_CAST tokens[0]);
@@ -176,6 +177,9 @@ static xmlNodePtr msWFSDumpLayer11(mapObj *map, layerObj *lp, xmlNsPtr psNsOws)
       xmlAddSibling(psNode,
                     xmlNewComment(BAD_CAST "WARNING: Mandatory mapfile parameter: (at least one of) MAP.PROJECTION, LAYER.PROJECTION or wfs/ows_srs metadata was missing in this context."));
 
+    free(valueToFree);
+    valueToFree = NULL;
+
     /*TODO: adevertize only gml3?*/
     psNode = xmlNewNode(NULL, BAD_CAST "OutputFormats");
     xmlAddChild(psRootNode, psNode);

