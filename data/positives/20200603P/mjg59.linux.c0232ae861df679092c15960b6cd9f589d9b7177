commit c0232ae861df679092c15960b6cd9f589d9b7177
Author: Lin Feng <linfeng@cn.fujitsu.com>
Date:   Fri Jan 11 14:31:44 2013 -0800

    mm: memblock: fix wrong memmove size in memblock_merge_regions()
    
    The memmove span covers from (next+1) to the end of the array, and the
    index of next is (i+1), so the index of (next+1) is (i+2).  So the size
    of remaining array elements is (type->cnt - (i + 2)).
    
    Since the remaining elements of the memblock array are move forward by
    one element and there is only one additional element caused by this bug.
    So there won't be any write overflow here but read overflow.  It may
    read one more element out of the array address if the array happens to
    be full.  Commonly it doesn't matter at all but if the array happens to
    be located at the end a memblock, it may cause a invalid read operation
    for the physical address doesn't exist.
    
    There are 2 *happens to be* here, so I think the probability is quite
    low, I don't know if any guy is haunted by this bug before.
    
    Mostly I think it's user-invisible.
    
    Signed-off-by: Lin Feng <linfeng@cn.fujitsu.com>
    Acked-by: Tejun Heo <tj@kernel.org>
    Reviewed-by: Wanpeng Li <liwanp@linux.vnet.ibm.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

diff --git a/mm/memblock.c b/mm/memblock.c
index 625905523c2a..88adc8afb610 100644
--- a/mm/memblock.c
+++ b/mm/memblock.c
@@ -314,7 +314,8 @@ static void __init_memblock memblock_merge_regions(struct memblock_type *type)
 		}
 
 		this->size += next->size;
-		memmove(next, next + 1, (type->cnt - (i + 1)) * sizeof(*next));
+		/* move forward from next + 1, index of which is i + 2 */
+		memmove(next, next + 1, (type->cnt - (i + 2)) * sizeof(*next));
 		type->cnt--;
 	}
 }

