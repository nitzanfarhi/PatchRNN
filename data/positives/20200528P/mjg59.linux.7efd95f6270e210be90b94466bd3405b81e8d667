commit 7efd95f6270e210be90b94466bd3405b81e8d667
Author: Jesper Juhl <jj@chaosbits.net>
Date:   Sun Jan 23 18:56:36 2011 +1100

    crypto: aesni-intel - Don't leak memory in rfc4106_set_hash_subkey
    
    There's a small memory leak in
    arch/x86/crypto/aesni-intel_glue.c::rfc4106_set_hash_subkey(). If the call
    to kmalloc() fails and returns NULL then the memory allocated previously
    by ablkcipher_request_alloc() is not freed when we leave the function.
    
    I could have just added a call to ablkcipher_request_free() before we
    return -ENOMEM, but that started to look too much like the code we
    already had at the end of the function, so I chose instead to rework the
    code a bit so that there are now a few labels at the end that we goto when
    various allocations fail, so we don't have to repeat the same blocks of
    code (this also reduces the object code size slightly).
    
    Signed-off-by: Jesper Juhl <jj@chaosbits.net>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>

diff --git a/arch/x86/crypto/aesni-intel_glue.c b/arch/x86/crypto/aesni-intel_glue.c
index e1e60c7d5813..e0135526345d 100644
--- a/arch/x86/crypto/aesni-intel_glue.c
+++ b/arch/x86/crypto/aesni-intel_glue.c
@@ -873,21 +873,19 @@ rfc4106_set_hash_subkey(u8 *hash_subkey, const u8 *key, unsigned int key_len)
 	crypto_ablkcipher_clear_flags(ctr_tfm, ~0);
 
 	ret = crypto_ablkcipher_setkey(ctr_tfm, key, key_len);
-	if (ret) {
-		crypto_free_ablkcipher(ctr_tfm);
-		return ret;
-	}
+	if (ret)
+		goto out;
 
 	req = ablkcipher_request_alloc(ctr_tfm, GFP_KERNEL);
 	if (!req) {
-		crypto_free_ablkcipher(ctr_tfm);
-		return -EINVAL;
+		ret = -EINVAL;
+		goto out_free_ablkcipher;
 	}
 
 	req_data = kmalloc(sizeof(*req_data), GFP_KERNEL);
 	if (!req_data) {
-		crypto_free_ablkcipher(ctr_tfm);
-		return -ENOMEM;
+		ret = -ENOMEM;
+		goto out_free_request;
 	}
 	memset(req_data->iv, 0, sizeof(req_data->iv));
 
@@ -913,9 +911,12 @@ rfc4106_set_hash_subkey(u8 *hash_subkey, const u8 *key, unsigned int key_len)
 		if (!ret)
 			ret = req_data->result.err;
 	}
+out_free_request:
 	ablkcipher_request_free(req);
 	kfree(req_data);
+out_free_ablkcipher:
 	crypto_free_ablkcipher(ctr_tfm);
+out:
 	return ret;
 }
 

