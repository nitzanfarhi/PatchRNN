commit 8469c40c2bd75d782bc0f06ecf72b0bf9edf6e76
Author: Jun Woong <woong.jun@gmail.com>
Date:   Wed Dec 10 15:26:29 2014 +0900

    Stop LCC from warning about null pointer conversion to function pointer
    
    Fixed LCC to correctly diagnose expressions with NPC. It no longer reports messages such as
    
        warning: conversion from `pointer to void' to `pointer to void function(void)' is compiler dependent

diff --git a/code/tools/lcc/src/c.h b/code/tools/lcc/src/c.h
index 68c8f629..43bec083 100644
--- a/code/tools/lcc/src/c.h
+++ b/code/tools/lcc/src/c.h
@@ -577,6 +577,7 @@ extern Tree cnsttree(Type, ...);
 extern Tree consttree(unsigned int, Type);
 extern Tree eqtree(int, Tree, Tree);
 extern int iscallb(Tree);
+extern int isnullptr(Tree);
 extern Tree shtree(int, Tree, Tree);
 extern void typeerror(int, Tree, Tree);
 
diff --git a/code/tools/lcc/src/enode.c b/code/tools/lcc/src/enode.c
index 760096de..4a37618c 100644
--- a/code/tools/lcc/src/enode.c
+++ b/code/tools/lcc/src/enode.c
@@ -5,7 +5,6 @@ static Tree addtree(int, Tree, Tree);
 static Tree andtree(int, Tree, Tree);
 static Tree cmptree(int, Tree, Tree);
 static int compatible(Type, Type);
-static int isnullptr(Tree e);
 static Tree multree(int, Tree, Tree);
 static Tree subtree(int, Tree, Tree);
 #define isvoidptr(ty) \
@@ -220,7 +219,7 @@ static int compatible(Type ty1, Type ty2) {
 	    && isptr(ty2) && !isfunc(ty2->type)
 	    && eqtype(unqual(ty1->type), unqual(ty2->type), 0);
 }
-static int isnullptr(Tree e) {
+int isnullptr(Tree e) {
 	Type ty = unqual(e->type);
 
 	return generic(e->op) == CNST
diff --git a/code/tools/lcc/src/expr.c b/code/tools/lcc/src/expr.c
index b8cb08b6..96eec217 100644
--- a/code/tools/lcc/src/expr.c
+++ b/code/tools/lcc/src/expr.c
@@ -621,7 +621,7 @@ Tree cast(Tree p, Type type) {
 			p = simplify(CVP, dst, p, NULL);
 		else {
 			if ((isfunc(src->type) && !isfunc(dst->type))
-			|| (!isfunc(src->type) &&  isfunc(dst->type)))
+			|| (!isnullptr(p) && !isfunc(src->type) && isfunc(dst->type)))
 				warning("conversion from `%t' to `%t' is compiler dependent\n", p->type, type);
 
 			if (src->size != dst->size)

