commit afa2db2fb6f15f860069de94a1257db57589fe95
Author: Josef Bacik <jbacik@fb.com>
Date:   Wed Jun 24 16:58:45 2015 -0700

    tmpfs: truncate prealloc blocks past i_size
    
    One of the rocksdb people noticed that when you do something like this
    
        fallocate(fd, FALLOC_FL_KEEP_SIZE, 0, 10M)
        pwrite(fd, buf, 5M, 0)
        ftruncate(5M)
    
    on tmpfs, the file would still take up 10M: which led to super fun
    issues because we were getting ENOSPC before we thought we should be
    getting ENOSPC.  This patch fixes the problem, and mirrors what all the
    other fs'es do (and was agreed to be the correct behaviour at LSF).
    
    I tested it locally to make sure it worked properly with the following
    
        xfs_io -f -c "falloc -k 0 10M" -c "pwrite 0 5M" -c "truncate 5M" file
    
    Without the patch we have "Blocks: 20480", with the patch we have the
    correct value of "Blocks: 10240".
    
    Signed-off-by: Josef Bacik <jbacik@fb.com>
    Signed-off-by: Hugh Dickins <hughd@google.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

diff --git a/mm/shmem.c b/mm/shmem.c
index 3759099d8ce4..4caf8ed24d65 100644
--- a/mm/shmem.c
+++ b/mm/shmem.c
@@ -569,7 +569,7 @@ static int shmem_setattr(struct dentry *dentry, struct iattr *attr)
 			i_size_write(inode, newsize);
 			inode->i_ctime = inode->i_mtime = CURRENT_TIME;
 		}
-		if (newsize < oldsize) {
+		if (newsize <= oldsize) {
 			loff_t holebegin = round_up(newsize, PAGE_SIZE);
 			unmap_mapping_range(inode->i_mapping, holebegin, 0, 1);
 			shmem_truncate_range(inode, newsize, (loff_t)-1);

