commit 5a2342111c68e623e27ee7ea3d0492d8dad6bda0
Author: Tommi Rantala <tommi.t.rantala@nokia.com>
Date:   Wed Mar 22 15:06:20 2017 +0200

    perf buildid: Do not assume that readlink() returns a null terminated string
    
    Valgrind was complaining:
    
      $ valgrind ./perf list >/dev/null
      ==11643== Memcheck, a memory error detector
      ==11643== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
      ==11643== Using Valgrind-3.12.0 and LibVEX; rerun with -h for copyright info
      ==11643== Command: ./perf list
      ==11643==
      ==11643== Conditional jump or move depends on uninitialised value(s)
      ==11643==    at 0x4C30620: rindex (vg_replace_strmem.c:199)
      ==11643==    by 0x49DAA9: build_id_cache__origname (build-id.c:198)
      ==11643==    by 0x49E1C7: build_id_cache__valid_id (build-id.c:222)
      ==11643==    by 0x49E1C7: build_id_cache__list_all (build-id.c:507)
      ==11643==    by 0x4B9C8F: print_sdt_events (parse-events.c:2067)
      ==11643==    by 0x4BB0B3: print_events (parse-events.c:2313)
      ==11643==    by 0x439501: cmd_list (builtin-list.c:53)
      ==11643==    by 0x497150: run_builtin (perf.c:359)
      ==11643==    by 0x428CE0: handle_internal_command (perf.c:421)
      ==11643==    by 0x428CE0: run_argv (perf.c:467)
      ==11643==    by 0x428CE0: main (perf.c:614)
      [...]
    
    Additionally, a zero length result from readlink() is not very interesting.
    
    Signed-off-by: Tommi Rantala <tommi.t.rantala@nokia.com>
    Cc: Alexander Shishkin <alexander.shishkin@linux.intel.com>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Link: http://lkml.kernel.org/r/20170322130624.21881-3-tommi.t.rantala@nokia.com
    Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>

diff --git a/tools/perf/util/build-id.c b/tools/perf/util/build-id.c
index 234859f756c4..33af67530d30 100644
--- a/tools/perf/util/build-id.c
+++ b/tools/perf/util/build-id.c
@@ -182,13 +182,17 @@ char *build_id_cache__origname(const char *sbuild_id)
 	char buf[PATH_MAX];
 	char *ret = NULL, *p;
 	size_t offs = 5;	/* == strlen("../..") */
+	ssize_t len;
 
 	linkname = build_id_cache__linkname(sbuild_id, NULL, 0);
 	if (!linkname)
 		return NULL;
 
-	if (readlink(linkname, buf, PATH_MAX) < 0)
+	len = readlink(linkname, buf, sizeof(buf) - 1);
+	if (len <= 0)
 		goto out;
+	buf[len] = '\0';
+
 	/* The link should be "../..<origpath>/<sbuild_id>" */
 	p = strrchr(buf, '/');	/* Cut off the "/<sbuild_id>" */
 	if (p && (p > buf + offs)) {

