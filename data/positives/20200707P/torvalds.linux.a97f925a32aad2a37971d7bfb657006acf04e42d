commit a97f925a32aad2a37971d7bfb657006acf04e42d
Author: Mikulas Patocka <mpatocka@redhat.com>
Date:   Sat Mar 6 02:32:29 2010 +0000

    dm: free dm_io before bio_endio not after
    
    Free the dm_io structure before calling bio_endio() instead of after it,
    to ensure that the io_pool containing it is not referenced after it is
    freed.
    
    This partially fixes a problem described here
      https://www.redhat.com/archives/dm-devel/2010-February/msg00109.html
    
    thread 1:
    bio_endio(bio, io_error);
    /* scheduling happens */
                                            thread 2:
                                            close the device
                                            remove the device
    thread 1:
    free_io(md, io);
    
    Thread 2, when removing the device, sees non-empty md->io_pool (because the
    io hasn't been freed by thread 1 yet) and may crash with BUG in mempool_free.
    Thread 1 may also crash, when freeing into a nonexisting mempool.
    
    To fix this we must make sure that bio_endio() is the last call and
    the md structure is not accessed afterwards.
    
    There is another bio_endio in process_barrier, but it is called from the thread
    and the thread is destroyed prior to freeing the mempools, so this call is
    not affected by the bug.
    
    A similar bug exists with module unloads - the module may be unloaded
    immediately after bio_endio - but that is more difficult to fix.
    
    Signed-off-by: Mikulas Patocka <mpatocka@redhat.com>
    Cc: stable@kernel.org
    Signed-off-by: Alasdair G Kergon <agk@redhat.com>

diff --git a/drivers/md/dm.c b/drivers/md/dm.c
index 21222f5193fb..7199846364e9 100644
--- a/drivers/md/dm.c
+++ b/drivers/md/dm.c
@@ -635,8 +635,10 @@ static void dec_pending(struct dm_io *io, int error)
 			if (!md->barrier_error && io_error != -EOPNOTSUPP)
 				md->barrier_error = io_error;
 			end_io_acct(io);
+			free_io(md, io);
 		} else {
 			end_io_acct(io);
+			free_io(md, io);
 
 			if (io_error != DM_ENDIO_REQUEUE) {
 				trace_block_bio_complete(md->queue, bio);
@@ -644,8 +646,6 @@ static void dec_pending(struct dm_io *io, int error)
 				bio_endio(bio, io_error);
 			}
 		}
-
-		free_io(md, io);
 	}
 }
 

