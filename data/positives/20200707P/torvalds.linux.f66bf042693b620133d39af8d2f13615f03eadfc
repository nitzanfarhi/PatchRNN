commit f66bf042693b620133d39af8d2f13615f03eadfc
Author: Brian Foster <bfoster@redhat.com>
Date:   Tue Jun 23 08:47:20 2015 +1000

    xfs: don't truncate attribute extents if no extents exist
    
    The xfs_attr3_root_inactive() call from xfs_attr_inactive() assumes that
    attribute blocks exist to invalidate. It is possible to have an
    attribute fork without extents, however. Consider the case where the
    attribute fork is created towards the beginning of xfs_attr_set() but
    some part of the subsequent attribute set fails.
    
    If an inode in such a state hits xfs_attr_inactive(), it eventually
    calls xfs_dabuf_map() and possibly xfs_bmapi_read(). The former emits a
    filesystem corruption warning, returns an error that bubbles back up to
    xfs_attr_inactive(), and leads to destruction of the in-core attribute
    fork without an on-disk reset. If the inode happens to make it back
    through xfs_inactive() in this state (e.g., via a concurrent bulkstat
    that cycles the inode from the reclaim state and releases it), i_afp
    might not exist when xfs_bmapi_read() is called and causes a NULL
    dereference panic.
    
    A '-p 2' fsstress run to ENOSPC on a relatively small fs (1GB)
    reproduces these problems. The behavior is a regression caused by:
    
    6dfe5a0 xfs: xfs_attr_inactive leaves inconsistent attr fork state behind
    
    ... which removed logic that avoided the attribute extent truncate when
    no extents exist. Restore this logic to ensure the attribute fork is
    destroyed and reset correctly if it exists without any allocated
    extents.
    
    cc: stable@vger.kernel.org # 3.12 to 4.0.x
    Signed-off-by: Brian Foster <bfoster@redhat.com>
    Reviewed-by: Dave Chinner <dchinner@redhat.com>
    Signed-off-by: Dave Chinner <david@fromorbit.com>

diff --git a/fs/xfs/xfs_attr_inactive.c b/fs/xfs/xfs_attr_inactive.c
index 3fbf167cfb4c..73e75a87af50 100644
--- a/fs/xfs/xfs_attr_inactive.c
+++ b/fs/xfs/xfs_attr_inactive.c
@@ -435,8 +435,14 @@ xfs_attr_inactive(
 	 */
 	xfs_trans_ijoin(trans, dp, 0);
 
-	/* invalidate and truncate the attribute fork extents */
-	if (dp->i_d.di_aformat != XFS_DINODE_FMT_LOCAL) {
+	/*
+	 * Invalidate and truncate the attribute fork extents. Make sure the
+	 * fork actually has attributes as otherwise the invalidation has no
+	 * blocks to read and returns an error. In this case, just do the fork
+	 * removal below.
+	 */
+	if (xfs_inode_hasattr(dp) &&
+	    dp->i_d.di_aformat != XFS_DINODE_FMT_LOCAL) {
 		error = xfs_attr3_root_inactive(&trans, dp);
 		if (error)
 			goto out_cancel;

