commit f6bd7de2a4770b9c11db986639967f9f0fd6e84f
Author: Shane Hathaway <shane@hathawaymix.org>
Date:   Thu Aug 22 16:55:53 2002 +0000

    Fixed a segfault bug in the repr of extension class methods.
    If self->meth is something other than a PyFunction,
    for example an ExtensionClass Method object, the blind cast breaks.  The
    new code uses the string "(?)" if self->meth is not a function.

diff --git a/lib/Components/ExtensionClass/src/ExtensionClass.c b/lib/Components/ExtensionClass/src/ExtensionClass.c
index 8272ca3bb..a9ed38888 100644
--- a/lib/Components/ExtensionClass/src/ExtensionClass.c
+++ b/lib/Components/ExtensionClass/src/ExtensionClass.c
@@ -21,7 +21,7 @@ static char ExtensionClass_module_documentation[] =
 "  - They provide access to unbound methods,\n"
 "  - They can be called to create instances.\n"
 "\n"
-"$Id: ExtensionClass.c,v 1.56 2002/06/18 23:19:02 jeremy Exp $\n"
+"$Id: ExtensionClass.c,v 1.57 2002/08/22 16:55:53 shane Exp $\n"
 ;
 
 #include <stdio.h>
@@ -826,7 +826,15 @@ PMethod_repr(PMethod *self)
     char *func_name, buf[8192];
     int n;
 
-    func_name = PyString_AS_STRING(((PyFunctionObject*)self->meth)->func_name);
+    if (PyFunction_Check(self->meth)) {
+	func_name = PyString_AS_STRING(
+		((PyFunctionObject*)self->meth)->func_name);
+    }
+    else {
+	/* self->meth is some other kind of object */
+	func_name = "(?)";
+    }
+    
     if (self->self) {
 	PyObject *repr = PyObject_Repr(self->self);
 	if (!repr)

