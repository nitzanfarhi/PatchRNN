commit 983d39db1f71d8be7f68d283650e6c1fc0413f90
Author: Lorenzo Castelli <lcastelli@gmail.com>
Date:   Thu Feb 17 16:14:48 2011 -0800

    Fix possible crash in case jemalloc is used without stats support
    
    Summary:
    From Hyves:
    
    This modifies the memory manager to avoid crashing in case jemalloc is
    used but it was not built with stats gathering support. It also makes
    it use weak references to the mallctl* functions, for uniformity with
    what is done elsewhere in the code.
    
    Test Plan:
    Built hphp
    check stats still works
    
    DiffCamp Revision: 214279
    Reviewed By: mwilliams
    Reviewers: ps, mwilliams
    CC: mwilliams, hphp-diffs@lists
    Revert Plan:
    Ok

diff --git a/src/runtime/base/memory/memory_manager.cpp b/src/runtime/base/memory/memory_manager.cpp
index ebf9686a25..0503a63e8d 100644
--- a/src/runtime/base/memory/memory_manager.cpp
+++ b/src/runtime/base/memory/memory_manager.cpp
@@ -18,30 +18,33 @@
 #include <runtime/base/memory/leak_detectable.h>
 #include <runtime/base/memory/sweepable.h>
 #include <runtime/base/runtime_option.h>
-#ifdef USE_JEMALLOC
-#include <jemalloc/jemalloc.h>
-#endif
+#include <util/alloc.h>
 
 namespace HPHP {
 ///////////////////////////////////////////////////////////////////////////////
 
 #ifdef USE_JEMALLOC
+bool MemoryManager::s_stats_enabled = false;
+
 static size_t threadAllocatedpMib[2];
 static size_t threadDeallocatedpMib[2];
 static pthread_once_t mibOnce = PTHREAD_ONCE_INIT;
 static void mibInit() {
+  if (!mallctlnametomib) return;
   size_t miblen = sizeof(threadAllocatedpMib) / sizeof(size_t);
   if (mallctlnametomib("thread.allocatedp", threadAllocatedpMib, &miblen)) {
-    assert(false);
+    return;
   }
   miblen = sizeof(threadDeallocatedpMib) / sizeof(size_t);
   if (mallctlnametomib("thread.deallocatedp", threadDeallocatedpMib, &miblen)) {
-    assert(false);
+    return;
   }
+  MemoryManager::s_stats_enabled = true;
 }
 
 static inline void thread_stats(uint64*& allocated, uint64*& deallocated) {
   pthread_once(&mibOnce, mibInit);
+  if (!MemoryManager::s_stats_enabled) return;
 
   size_t len = sizeof(allocated);
   if (mallctlbymib(threadAllocatedpMib,
@@ -82,7 +85,9 @@ void MemoryManager::resetStats() {
   m_stats.peakUsage = 0;
   m_stats.peakAlloc = 0;
 #ifdef USE_JEMALLOC
-  m_delta = int64(*m_allocated) - int64(*m_deallocated);
+  if (s_stats_enabled) {
+    m_delta = int64(*m_allocated) - int64(*m_deallocated);
+  }
 #endif
 }
 
diff --git a/src/runtime/base/memory/memory_manager.h b/src/runtime/base/memory/memory_manager.h
index 5c3fd31046..968aff89b2 100644
--- a/src/runtime/base/memory/memory_manager.h
+++ b/src/runtime/base/memory/memory_manager.h
@@ -148,9 +148,11 @@ public:
     // calls malloc(), so that later smart allocations that adjust m_stats.usage
     // don't double-count memory.  Thus musage in the example code may well
     // substantially exceed m_stats.usage.
-    int64 delta = int64(*m_allocated) - int64(*m_deallocated);
-    m_stats.usage += delta - m_delta;
-    m_delta = delta;
+    if (s_stats_enabled) {
+      int64 delta = int64(*m_allocated) - int64(*m_deallocated);
+      m_stats.usage += delta - m_delta;
+      m_delta = delta;
+    }
 #endif
     if (m_stats.usage > m_stats.peakUsage) {
       // NOTE: the peak memory usage monotonically increases, so there cannot
@@ -173,7 +175,9 @@ public:
     ~MaskAlloc() {
 #ifdef USE_JEMALLOC
       // exclude mallocs and frees since construction
-      m_mm->m_delta = int64(*m_mm->m_allocated) - int64(*m_mm->m_deallocated);
+      if (s_stats_enabled) {
+        m_mm->m_delta = int64(*m_mm->m_allocated) - int64(*m_mm->m_deallocated);
+      }
 #endif
     }
   };
@@ -195,6 +199,9 @@ private:
   uint64* m_allocated;
   uint64* m_deallocated;
   int64  m_delta;
+
+public:
+  static bool s_stats_enabled;
 #endif
 };
 

