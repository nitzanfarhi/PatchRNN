commit 62a041a4f58f32989460e37cb4f9aed5183f357f
Author: Dmitry Torokhov <dtor@chromium.org>
Date:   Tue Dec 16 15:09:39 2014 -0800

    cpufreq-dt: defer probing if OPP table is not ready
    
    cpufreq-dt driver supports mode when OPP table is provided by platform
    code and not device tree. However on certain platforms code that fills
    OPP table may run after cpufreq driver tries to initialize, so let's
    report -EPROBE_DEFER if we do not find any entires in OPP table for the
    CPU.
    
    Signed-off-by: Dmitry Torokhov <dtor@chromium.org>
    Acked-by: Viresh Kumar <viresh.kumar@linaro.org>
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>

diff --git a/drivers/cpufreq/cpufreq-dt.c b/drivers/cpufreq/cpufreq-dt.c
index 9bc2720628a4..538abd50b77c 100644
--- a/drivers/cpufreq/cpufreq-dt.c
+++ b/drivers/cpufreq/cpufreq-dt.c
@@ -211,6 +211,17 @@ static int cpufreq_init(struct cpufreq_policy *policy)
 	/* OPPs might be populated at runtime, don't check for error here */
 	of_init_opp_table(cpu_dev);
 
+	/*
+	 * But we need OPP table to function so if it is not there let's
+	 * give platform code chance to provide it for us.
+	 */
+	ret = dev_pm_opp_get_opp_count(cpu_dev);
+	if (ret <= 0) {
+		pr_debug("OPP table is not ready, deferring probe\n");
+		ret = -EPROBE_DEFER;
+		goto out_free_opp;
+	}
+
 	priv = kzalloc(sizeof(*priv), GFP_KERNEL);
 	if (!priv) {
 		ret = -ENOMEM;

