commit 76970580f8821a436e3efd59987b75ac523fb64e
Author: Joerg Sonnenberger <joerg.sonnenberger@gmail.com>
Date:   Sun May 11 05:32:51 2008 -0400

    Fix the extraction of archives where hardlinks and the main file
    disagree on permissions.  This can be observed with base.tgz of
    an unprivileged NetBSD build.
    After the change permissions are restored only for files that
    have content attached.  This works for almost ustar.  For pax
    archives with optional data in the second entry and cpio this
    will fail for unprivileged user if the first entry doesn't allow
    writing for the current user.
    
    SVN-Revision: 39

diff --git a/libarchive/archive_write_disk.c b/libarchive/archive_write_disk.c
index 58a7fd22..b67903ad 100644
--- a/libarchive/archive_write_disk.c
+++ b/libarchive/archive_write_disk.c
@@ -868,8 +868,18 @@ create_filesystem_object(struct archive_write_disk *a)
 		 * New cpio and pax formats allow hardlink entries
 		 * to carry data, so we may have to open the file
 		 * for hardlink entries.
+		 *
+		 * If the hardlink was successfully created and
+		 * the archive doesn't have carry data for it,
+		 * consider it to be non-authoritive for meta data.
+		 * This is consistent with GNU tar and BSD pax.
+		 * If the hardlink does carry data, let the last
+		 * archive entry decide ownership.
 		 */
-		if (r == 0 && a->filesize > 0) {
+		if (r == 0 && a->filesize == 0) {
+			a->todo = 0;
+			a->deferred = 0;
+		} if (r == 0 && a->filesize > 0) {
 			a->fd = open(a->name, O_WRONLY | O_TRUNC | O_BINARY);
 			if (a->fd < 0)
 				r = errno;
diff --git a/libarchive/test/test_write_disk_hardlink.c b/libarchive/test/test_write_disk_hardlink.c
index b21c44b2..0367521c 100644
--- a/libarchive/test/test_write_disk_hardlink.c
+++ b/libarchive/test/test_write_disk_hardlink.c
@@ -29,6 +29,10 @@ __FBSDID("$FreeBSD: src/lib/libarchive/test/test_write_disk_hardlink.c,v 1.1 200
 
 /*
  * Exercise hardlink recreation.
+ *
+ * File permissions are chosen so that the authoritive entry
+ * has the correct permission and the non-authoritive versions
+ * are just writeable files.
  */
 DEFINE_TEST(test_write_disk_hardlink)
 {
@@ -64,7 +68,7 @@ DEFINE_TEST(test_write_disk_hardlink)
 	/* Link. */
 	assert((ae = archive_entry_new()) != NULL);
 	archive_entry_copy_pathname(ae, "link1b");
-	archive_entry_set_mode(ae, S_IFREG | 0755);
+	archive_entry_set_mode(ae, S_IFREG | 0600);
 	archive_entry_set_size(ae, 0);
 	archive_entry_copy_hardlink(ae, "link1a");
 	assertEqualIntA(ad, 0, archive_write_header(ad, ae));
@@ -80,7 +84,7 @@ DEFINE_TEST(test_write_disk_hardlink)
 	/* Regular file. */
 	assert((ae = archive_entry_new()) != NULL);
 	archive_entry_copy_pathname(ae, "link2a");
-	archive_entry_set_mode(ae, S_IFREG | 0755);
+	archive_entry_set_mode(ae, S_IFREG | 0600);
 	archive_entry_set_size(ae, sizeof(data));
 	assertEqualIntA(ad, 0, archive_write_header(ad, ae));
 	assertEqualInt(sizeof(data), archive_write_data(ad, data, sizeof(data)));
@@ -106,7 +110,7 @@ DEFINE_TEST(test_write_disk_hardlink)
 	/* Regular file. */
 	assert((ae = archive_entry_new()) != NULL);
 	archive_entry_copy_pathname(ae, "link3a");
-	archive_entry_set_mode(ae, S_IFREG | 0755);
+	archive_entry_set_mode(ae, S_IFREG | 0600);
 	archive_entry_set_size(ae, 0);
 	assertEqualIntA(ad, 0, archive_write_header(ad, ae));
 	assertEqualInt(0, archive_write_data(ad, data, sizeof(data)));

