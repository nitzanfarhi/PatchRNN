commit ae386404b74925d98b0ace0300e75077b2e6830e
Author: Bruce Pascoe <fatcerberus@icloud.com>
Date:   Tue Aug 29 11:15:40 2017 -0400

    Add support for JS module fetch callback
    
    The module loader doesn't seem to work correctly at all with the fetch
    callback: instead of syntax errors, I get a segfault due to a null
    pointer access.  I know I must be doing something wrong here...

diff --git a/src/minisphere/pegasus.c b/src/minisphere/pegasus.c
index 73719491..a3d2f89e 100644
--- a/src/minisphere/pegasus.c
+++ b/src/minisphere/pegasus.c
@@ -423,6 +423,7 @@ static bool js_Transform_translate           (js_ref_t* me, int num_args, bool i
 static bool js_new_VertexList                (js_ref_t* me, int num_args, bool is_ctor, int magic);
 static bool js_VertexList_finalize           (js_ref_t* me, int num_args, bool is_ctor, int magic);
 
+static void      jsal_fetch_module           (void);
 static void      jsal_pegasus_push_color     (color_t color);
 static void      jsal_pegasus_push_job_token (int64_t token);
 static void      jsal_pegasus_push_require   (const char* module_id);
@@ -444,6 +445,7 @@ initialize_pegasus_api(void)
 	console_log(1, "initializing Sphere v%d L%d API", API_VERSION, API_LEVEL);
 
 	s_def_mixer = mixer_new(44100, 16, 2);
+	jsal_on_fetch_module(jsal_fetch_module);
 
 	// initialize CommonJS cache and global require()
 	jsal_push_hidden_stash();
@@ -776,6 +778,40 @@ pegasus_run(void)
 	}
 }
 
+static void
+jsal_fetch_module(void)
+{
+	const char* const PATHS[] =
+	{
+		"@/lib",
+		"#/game_modules",
+		"#/runtime",
+	};
+
+	const char* caller_id;
+	path_t*     path;
+	const char* source;
+	size_t      source_len;
+	const char* specifier;
+
+	int i;
+
+	specifier = jsal_require_string(0);
+	caller_id = jsal_require_string(1);
+
+	if (caller_id == NULL && (strncmp(specifier, "./", 2) == 0 || strncmp(specifier, "../", 3) == 0))
+		jsal_error_blame(-1, JS_TYPE_ERROR, "relative require not allowed in global code");
+	for (i = 0; i < sizeof PATHS / sizeof PATHS[0]; ++i) {
+		if (path = find_module(specifier, caller_id, PATHS[i]))
+			break;  // short-circuit
+	}
+	if (path == NULL)
+		jsal_error_blame(-1, JS_REF_ERROR, "module not found `%s`", specifier);
+	source = game_read_file(g_game, path_cstr(path), &source_len);
+	jsal_push_string(path_cstr(path));
+	jsal_push_lstring(source, source_len);
+}
+
 bool
 jsal_pegasus_eval_module(const char* filename)
 {
@@ -833,13 +869,13 @@ jsal_pegasus_eval_module(const char* filename)
 	jsal_put_prop_string(-2, "require");  // module.require
 
 	// evaluate .mjs scripts as ES6 modules
-	if (path_has_extension(file_path, ".mjs")) {
+	/*if (path_has_extension(file_path, ".mjs")) {
 		jsal_push_lstring_t(code_string);
 		if (!jsal_try_eval_module(filename))
 			goto on_error;
 		jsal_remove(-2);
 		return true;
-	}
+	}*/
 
 	// cache the module object in advance
 	jsal_push_hidden_stash();
@@ -993,7 +1029,7 @@ find_module(const char* id, const char* origin, const char* sys_origin)
 	const char* const filenames[] =
 	{
 		"%s",
-		"%s.mjs",
+		//"%s.mjs",
 		"%s.js",
 		"%s.json",
 		"%s/package.json",
diff --git a/src/shared/api.c b/src/shared/api.c
index 305f657a..81793797 100644
--- a/src/shared/api.c
+++ b/src/shared/api.c
@@ -10,8 +10,8 @@
 
 struct class_info
 {
-	jsal_callback_t finalizer;
-	char*           name;
+	js_callback_t finalizer;
+	char*         name;
 };
 
 static vector_t* s_classes;
@@ -95,7 +95,7 @@ api_define_const(const char* enum_name, const char* name, double value)
 }
 
 void
-api_define_class(const char* name, jsal_callback_t constructor, jsal_callback_t finalizer)
+api_define_class(const char* name, js_callback_t constructor, js_callback_t finalizer)
 {
 	// note: if no constructor function is given, a constructor binding will not be created.
 	//       this is useful for types which can only be created via factory methods.
@@ -142,7 +142,7 @@ api_define_class(const char* name, jsal_callback_t constructor, jsal_callback_t
 }
 
 void
-api_define_function(const char* namespace_name, const char* name, jsal_callback_t callback)
+api_define_function(const char* namespace_name, const char* name, js_callback_t callback)
 {
 	jsal_push_global_object();
 
@@ -169,7 +169,7 @@ api_define_function(const char* namespace_name, const char* name, jsal_callback_
 }
 
 void
-api_define_method(const char* class_name, const char* name, jsal_callback_t callback)
+api_define_method(const char* class_name, const char* name, js_callback_t callback)
 {
 	jsal_push_global_object();
 	if (class_name != NULL) {
@@ -216,7 +216,7 @@ api_define_object(const char* namespace_name, const char* name, const char* clas
 }
 
 void
-api_define_property(const char* class_name, const char* name, jsal_callback_t getter, jsal_callback_t setter)
+api_define_property(const char* class_name, const char* name, js_callback_t getter, js_callback_t setter)
 {
 	jsal_push_global_object();
 	if (class_name != NULL) {
@@ -243,7 +243,7 @@ api_define_property(const char* class_name, const char* name, jsal_callback_t ge
 }
 
 void
-api_define_static_prop(const char* namespace_name, const char* name, jsal_callback_t getter, jsal_callback_t setter)
+api_define_static_prop(const char* namespace_name, const char* name, js_callback_t getter, js_callback_t setter)
 {
 	jsal_push_global_object();
 
@@ -334,7 +334,7 @@ int
 jsal_push_class_obj(const char* class_name, void* udata)
 {
 	struct class_info* class_info;
-	jsal_callback_t    finalizer = NULL;
+	js_callback_t    finalizer = NULL;
 	int                index;
 	
 	iter_t iter;
diff --git a/src/shared/api.h b/src/shared/api.h
index d7379c4d..50f234bc 100644
--- a/src/shared/api.h
+++ b/src/shared/api.h
@@ -7,12 +7,12 @@
 
 void   api_init               (void);
 void   api_define_const       (const char* enum_name, const char* name, double value);
-void   api_define_class       (const char* name, jsal_callback_t constructor, jsal_callback_t finalizer);
-void   api_define_function    (const char* namespace_name, const char* name, jsal_callback_t fn);
-void   api_define_method      (const char* class_name, const char* name, jsal_callback_t fn);
+void   api_define_class       (const char* name, js_callback_t constructor, js_callback_t finalizer);
+void   api_define_function    (const char* namespace_name, const char* name, js_callback_t fn);
+void   api_define_method      (const char* class_name, const char* name, js_callback_t fn);
 void   api_define_object      (const char* namespace_name, const char* name, const char* class_name, void* udata);
-void   api_define_property    (const char* class_name, const char* name, jsal_callback_t getter, jsal_callback_t setter);
-void   api_define_static_prop (const char* namespace_name, const char* name, jsal_callback_t getter, jsal_callback_t setter);
+void   api_define_property    (const char* class_name, const char* name, js_callback_t getter, js_callback_t setter);
+void   api_define_static_prop (const char* namespace_name, const char* name, js_callback_t getter, js_callback_t setter);
 
 void  jsal_error_blame          (int blame_offset, js_error_type_t type, const char* format, ...);
 bool  jsal_is_class_obj         (int index, const char* class_name);
diff --git a/src/shared/jsal.c b/src/shared/jsal.c
index 3332625b..fdb8b3ee 100644
--- a/src/shared/jsal.c
+++ b/src/shared/jsal.c
@@ -56,17 +56,17 @@ struct js_ref
 
 struct function
 {
-	jsal_callback_t callback;
-	bool            ctor_only;
-	int             magic;
-	int             min_args;
+	js_callback_t callback;
+	bool          ctor_only;
+	int           magic;
+	int           min_args;
 };
 
 struct object
 {
-	void*           data;
-	jsal_callback_t finalizer;
-	JsValueRef      object;
+	void*         data;
+	js_callback_t finalizer;
+	JsValueRef    object;
 };
 
 #if defined(_WIN32)
@@ -74,25 +74,27 @@ int asprintf  (char* *out, const char* format, ...);
 int vasprintf (char* *out, const char* format, va_list ap);
 #endif
 
-static JsValueRef CHAKRA_CALLBACK do_native_call   (JsValueRef callee, bool is_ctor, JsValueRef argv[], unsigned short argc, void* userdata);
-static void CHAKRA_CALLBACK       finalize_object  (void* userdata);
-static void                       free_ref         (js_ref_t* ref);
-static JsValueRef                 get_value        (int stack_index);
-static JsPropertyIdRef            make_property_id (JsValueRef key_value);
-static js_ref_t*                make_ref         (JsValueRef value);
-static JsValueRef                 pop_value        (void);
-static int                        push_value       (JsValueRef value);
-static void                       resize_stack     (int new_size);
-static void                       throw_if_error   (void);
-static void                       throw_value      (JsValueRef value);
-
-static vector_t*       s_catch_stack;
-static JsContextRef    s_js_context;
-static JsRuntimeHandle s_js_runtime = NULL;
-static JsValueRef      s_stash;
-static vector_t*       s_stack;
-static int             s_stack_base;
-static JsValueRef      s_this_value = JS_INVALID_REFERENCE;
+static JsValueRef CHAKRA_CALLBACK  do_native_call   (JsValueRef callee, bool is_ctor, JsValueRef argv[], unsigned short argc, void* userdata);
+static JsErrorCode CHAKRA_CALLBACK fetch_module     (JsModuleRecord sourceModule, JsValueRef specifier, JsModuleRecord *out_module);
+static void CHAKRA_CALLBACK        finalize_object  (void* userdata);
+static void                        free_ref         (js_ref_t* ref);
+static JsValueRef                  get_value        (int stack_index);
+static JsPropertyIdRef             make_property_id (JsValueRef key_value);
+static js_ref_t*                   make_ref         (JsValueRef value);
+static JsValueRef                  pop_value        (void);
+static int                         push_value       (JsValueRef value);
+static void                        resize_stack     (int new_size);
+static void                        throw_if_error   (void);
+static void                        throw_value      (JsValueRef value);
+
+static vector_t*           s_catch_stack;
+static JsContextRef        s_js_context;
+static JsRuntimeHandle     s_js_runtime = NULL;
+static js_module_fetch_t s_fetch_callback = NULL;
+static JsValueRef          s_stash;
+static vector_t*           s_stack;
+static int                 s_stack_base;
+static JsValueRef          s_this_value = JS_INVALID_REFERENCE;
 
 bool
 jsal_init(void)
@@ -140,6 +142,12 @@ jsal_uninit(void)
 	vector_free(s_catch_stack);
 }
 
+void
+jsal_on_fetch_module(js_module_fetch_t callback)
+{
+	s_fetch_callback = callback;
+}
+
 void
 jsal_call(int num_args)
 {
@@ -325,18 +333,17 @@ jsal_eval_module(const char* filename)
 	JsValueRef     exception;
 	JsModuleRecord module;
 	JsValueRef     result;
-	JsValueRef     source;
+	const char*    source;
 	size_t         source_len;
-	const wchar_t* source_ptr;
 	JsValueRef     url_string;
 
-	source = pop_value();
-	JsStringToPointer(source, &source_ptr, &source_len);
+	source = jsal_require_lstring(-1, &source_len);
 	JsCreateString(filename, strlen(filename), &url_string);
 	JsInitializeModuleRecord(NULL, url_string, &module);
+	JsSetModuleHostInfo(module, JsModuleHostInfo_FetchImportedModuleCallback, fetch_module);
 	error_code = JsParseModuleSource(module,
-		JS_SOURCE_CONTEXT_NONE, (BYTE*)source_ptr, (unsigned int)source_len,
-		JsParseModuleSourceFlags_DataIsUTF16LE, &exception);
+		JS_SOURCE_CONTEXT_NONE, (BYTE*)source, (unsigned int)source_len,
+		JsParseModuleSourceFlags_DataIsUTF8, &exception);
 	if (error_code = JsErrorScriptCompile)
 		throw_value(exception);
 	JsModuleEvaluation(module, &result);
@@ -780,7 +787,7 @@ jsal_push_boolean(bool value)
 }
 
 int
-jsal_push_constructor(jsal_callback_t callback, const char* name, int min_args, int magic)
+jsal_push_constructor(js_callback_t callback, const char* name, int min_args, int magic)
 {
 	JsValueRef       function;
 	struct function* function_data;
@@ -811,7 +818,7 @@ jsal_push_eval(const char* source)
 }
 
 int
-jsal_push_function(jsal_callback_t callback, const char* name, int min_args, int magic)
+jsal_push_function(js_callback_t callback, const char* name, int min_args, int magic)
 {
 	JsValueRef       function;
 	struct function* function_data;
@@ -941,7 +948,7 @@ jsal_push_new_error_va(js_error_type_t type, const char* format, va_list ap)
 }
 
 int
-jsal_push_new_host_object(void* data, jsal_callback_t finalizer)
+jsal_push_new_host_object(void* data, js_callback_t finalizer)
 {
 	JsValueRef     object;
 	struct object* object_info;
@@ -1282,7 +1289,7 @@ jsal_require_undefined(int at_index)
 }
 
 void
-jsal_set_finalizer(int at_index, jsal_callback_t callback)
+jsal_set_finalizer(int at_index, js_callback_t callback)
 {
 	JsValueRef     object;
 	struct object* object_info;
@@ -1417,7 +1424,7 @@ jsal_to_string(int at_index)
 }
 
 bool
-jsal_try(jsal_callback_t callback, int num_args)
+jsal_try(js_callback_t callback, int num_args)
 {
 	/* [ ... arg1..argN ] -> [ .. retval ] */
 
@@ -1690,7 +1697,7 @@ throw_value(JsValueRef value)
 static JsValueRef CHAKRA_CALLBACK
 do_native_call(JsValueRef callee, bool is_ctor, JsValueRef argv[], unsigned short argc, void* userdata)
 {
-	js_ref_t*      callee_ref;
+	js_ref_t*        callee_ref;
 	JsValueRef       exception;
 	struct function* function_data;
 	bool             has_return;
@@ -1741,6 +1748,56 @@ do_native_call(JsValueRef callee, bool is_ctor, JsValueRef argv[], unsigned shor
 	return retval;
 }
 
+static JsErrorCode CHAKRA_CALLBACK
+fetch_module(JsModuleRecord sourceModule, JsValueRef specifier, JsModuleRecord *out_module)
+{
+	JsErrorCode    error_code;
+	JsValueRef     exception;
+	JsValueRef     exports;
+	JsValueRef     full_specifier;
+	jmp_buf        label;
+	int            last_stack_base;
+	JsModuleRecord module;
+	const char*    source;
+	size_t         source_len;
+	
+	if (s_fetch_callback == NULL)
+		return JsErrorInvalidArgument;
+	
+	last_stack_base = s_stack_base;
+	s_stack_base = vector_len(s_stack);
+	push_value(specifier);
+	jsal_push_string("@/bin/main.mjs");
+	if (setjmp(label) == 0) {
+		vector_push(s_catch_stack, label);
+		s_fetch_callback();
+		if (jsal_get_top() < 2)
+			jsal_error(JS_TYPE_ERROR, "internal error in module callback");
+		source = jsal_require_lstring(-1, &source_len);
+		full_specifier = get_value(-2);
+		JsInitializeModuleRecord(sourceModule, full_specifier, &module);
+		JsSetModuleHostInfo(module, JsModuleHostInfo_FetchImportedModuleCallback, fetch_module);
+		error_code = JsParseModuleSource(module, JS_SOURCE_CONTEXT_NONE, (BYTE*)source, (unsigned int)source_len,
+			JsParseModuleSourceFlags_DataIsUTF8, &exception);
+		if (error_code == JsErrorScriptCompile)
+			throw_value(exception);
+		JsModuleEvaluation(module, &exports);
+		throw_if_error();
+		vector_pop(s_catch_stack, 1);
+	}
+	else {
+		exception = pop_value();
+		JsSetException(exception);
+		resize_stack(s_stack_base);
+		s_stack_base = last_stack_base;
+		return JsErrorScriptCompile;
+	}
+	resize_stack(s_stack_base);
+	s_stack_base = last_stack_base;
+	*out_module = module;
+	return JsNoError;
+}
+
 static void CHAKRA_CALLBACK
 finalize_object(void* userdata)
 {
diff --git a/src/shared/jsal.h b/src/shared/jsal.h
index 27bb0254..d4f874c8 100644
--- a/src/shared/jsal.h
+++ b/src/shared/jsal.h
@@ -36,8 +36,7 @@
 #include <stdarg.h>
 #include <stdbool.h>
 
-typedef struct js_module js_module_t;
-typedef struct js_ref    js_ref_t;
+typedef struct js_ref js_ref_t;
 
 typedef
 enum js_buffer_type
@@ -65,10 +64,12 @@ enum js_error_type
 	JS_URI_ERROR,
 } js_error_type_t;
 
-typedef bool (* jsal_callback_t) (js_ref_t* me, int num_args, bool is_ctor, int magic);
+typedef bool (* js_callback_t)     (js_ref_t* me, int num_args, bool is_ctor, int magic);
+typedef void (* js_module_fetch_t) (void);
 
 bool        jsal_init                     (void);
 void        jsal_uninit                   (void);
+void        jsal_on_fetch_module          (js_module_fetch_t callback);
 void        jsal_call                     (int num_args);
 void        jsal_call_method              (int num_args);
 void        jsal_compile                  (const char* filename);
@@ -119,9 +120,9 @@ int         jsal_normalize_index          (int index);
 void        jsal_parse                    (int at_index);
 void        jsal_pop                      (int num_values);
 int         jsal_push_boolean             (bool value);
-int         jsal_push_constructor         (jsal_callback_t callback, const char* name, int min_args, int magic);
+int         jsal_push_constructor         (js_callback_t callback, const char* name, int min_args, int magic);
 int         jsal_push_eval                (const char* source);
-int         jsal_push_function            (jsal_callback_t callback, const char* name, int min_args, int magic);
+int         jsal_push_function            (js_callback_t callback, const char* name, int min_args, int magic);
 int         jsal_push_global_object       (void);
 int         jsal_push_hidden_stash        (void);
 int         jsal_push_int                 (int value);
@@ -132,7 +133,7 @@ int         jsal_push_new_bare_object     (void);
 int         jsal_push_new_buffer          (js_buffer_type_t type, size_t length);
 int         jsal_push_new_error           (js_error_type_t type, const char* format, ...);
 int         jsal_push_new_error_va        (js_error_type_t type, const char* format, va_list ap);
-int         jsal_push_new_host_object     (void* data_ptr, jsal_callback_t finalizer);
+int         jsal_push_new_host_object     (void* data_ptr, js_callback_t finalizer);
 int         jsal_push_new_object          (void);
 int         jsal_push_new_symbol          (const char* description);
 int         jsal_push_null                (void);
@@ -162,7 +163,7 @@ void        jsal_require_object_coercible (int at_index);
 const char* jsal_require_string           (int at_index);
 void        jsal_require_symbol           (int at_index);
 void        jsal_require_undefined        (int at_index);
-void        jsal_set_finalizer            (int at_index, jsal_callback_t callback);
+void        jsal_set_finalizer            (int at_index, js_callback_t callback);
 void        jsal_set_host_data            (int at_index, void* ptr);
 void        jsal_set_prototype            (int object_index);
 void        jsal_set_top                  (int new_top);
@@ -173,7 +174,7 @@ int         jsal_to_int                   (int at_index);
 double      jsal_to_number                (int at_index);
 void        jsal_to_object                (int at_index);
 const char* jsal_to_string                (int at_index);
-bool        jsal_try                      (jsal_callback_t callback, int num_args);
+bool        jsal_try                      (js_callback_t callback, int num_args);
 bool        jsal_try_call                 (int num_args);
 bool        jsal_try_call_method          (int num_args);
 bool        jsal_try_compile              (const char* filename);

