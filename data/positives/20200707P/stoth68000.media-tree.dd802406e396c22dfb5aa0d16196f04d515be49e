commit dd802406e396c22dfb5aa0d16196f04d515be49e
Author: Jaegeuk Kim <jaegeuk@kernel.org>
Date:   Thu Dec 18 19:32:36 2014 -0800

    f2fs: avoid double lock for cp_rwsem
    
    The __f2fs_add_link is covered by cp_rwsem all the time.
    This calls init_inode_metadata, which conducts some acl operations including
    memory allocation with GFP_KERNEL previously.
    But, under memory pressure, f2fs_write_data_page can be called, which also
    grabs cp_rwsem too.
    
    In this case, this incurs a deadlock pointed by Chao.
    Thread #1        Thread #2
     down_read
                     down_write
      down_read
     -> here down_read should wait forever.
    
    Reviewed-by: Chao Yu <chao2.yu@samsung.com>
    Signed-off-by: Jaegeuk Kim <jaegeuk@kernel.org>

diff --git a/fs/f2fs/acl.c b/fs/f2fs/acl.c
index 1ccb26bc2a0b..7f12d28ad94c 100644
--- a/fs/f2fs/acl.c
+++ b/fs/f2fs/acl.c
@@ -62,7 +62,7 @@ static struct posix_acl *f2fs_acl_from_disk(const char *value, size_t size)
 	if (count == 0)
 		return NULL;
 
-	acl = posix_acl_alloc(count, GFP_KERNEL);
+	acl = posix_acl_alloc(count, GFP_NOFS);
 	if (!acl)
 		return ERR_PTR(-ENOMEM);
 
@@ -116,7 +116,7 @@ static void *f2fs_acl_to_disk(const struct posix_acl *acl, size_t *size)
 	int i;
 
 	f2fs_acl = kmalloc(sizeof(struct f2fs_acl_header) + acl->a_count *
-			sizeof(struct f2fs_acl_entry), GFP_KERNEL);
+			sizeof(struct f2fs_acl_entry), GFP_NOFS);
 	if (!f2fs_acl)
 		return ERR_PTR(-ENOMEM);
 

