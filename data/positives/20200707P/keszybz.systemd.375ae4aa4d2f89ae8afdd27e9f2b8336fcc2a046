commit 375ae4aa4d2f89ae8afdd27e9f2b8336fcc2a046
Author: Uoti Urpala <uoti.urpala@pp1.inet.fi>
Date:   Mon Jun 23 16:50:03 2014 +0300

    core/transaction: fix cycle break attempts outside transaction
    
    Patch fixes some incorrect-looking code in transaction.c.
    It could fix cases where Debian users with bad package configurations
    had systemd go into an infinite loop printing messages about breaking an
    ordering cycle, though I have not reproduced that problem myself.
    
    transaction_verify_order_one() considers jobs/units outside current
    transaction when checking whether ordering dependencies cause cycles.
    It would also incorrectly try to break cycles at these jobs; this
    cannot work, as the break action is to remove the job from the
    transaction, which is a no-op if the job isn't part of the transaction
    to begin with. The unit_matters_to_anchor() test also looks like it
    would not work correctly for non-transaction jobs. Add a check to
    verify that the unit is part of the transaction before considering a
    job a candidate for deletion.
    
    https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=752259

diff --git a/src/core/transaction.c b/src/core/transaction.c
index d23a45c3f..805d40ae6 100644
--- a/src/core/transaction.c
+++ b/src/core/transaction.c
@@ -381,7 +381,7 @@ static int transaction_verify_order_one(Transaction *tr, Job *j, Job *from, unsi
                                       "Found dependency on %s/%s",
                                       k->unit->id, job_type_to_string(k->type));
 
-                        if (!delete &&
+                        if (!delete && hashmap_get(tr->jobs, k->unit) &&
                             !unit_matters_to_anchor(k->unit, k)) {
                                 /* Ok, we can drop this one, so let's
                                  * do so. */

