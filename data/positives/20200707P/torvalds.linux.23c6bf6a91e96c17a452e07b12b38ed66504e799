commit 23c6bf6a91e96c17a452e07b12b38ed66504e799
Author: Filipe David Borba Manana <fdmanana@gmail.com>
Date:   Sat Jan 11 21:28:54 2014 +0000

    Btrfs: fix btrfs_search_slot_for_read backwards iteration
    
    If the current path's leaf slot is 0, we do search for the previous
    leaf (via btrfs_prev_leaf) and set the new path's leaf slot to a
    value corresponding to the number of items - 1 of the former leaf.
    Fix this by using the slot set by btrfs_prev_leaf, decrementing it
    by 1 if it's equal to the leaf's number of items.
    
    Use of btrfs_search_slot_for_read() for backward iteration is used in
    particular by the send feature, which could miss items when the input
    leaf has less items than its previous leaf.
    
    This could be reproduced by running btrfs/007 from xfstests in a loop.
    
    Signed-off-by: Filipe David Borba Manana <fdmanana@gmail.com>
    Signed-off-by: Chris Mason <clm@fb.com>

diff --git a/fs/btrfs/ctree.c b/fs/btrfs/ctree.c
index 30f5b11d7dd3..cbd3a7d6fa68 100644
--- a/fs/btrfs/ctree.c
+++ b/fs/btrfs/ctree.c
@@ -3142,7 +3142,9 @@ int btrfs_search_slot_for_read(struct btrfs_root *root,
 			if (ret < 0)
 				return ret;
 			if (!ret) {
-				p->slots[0] = btrfs_header_nritems(leaf) - 1;
+				leaf = p->nodes[0];
+				if (p->slots[0] == btrfs_header_nritems(leaf))
+					p->slots[0]--;
 				return 0;
 			}
 			if (!return_any)

