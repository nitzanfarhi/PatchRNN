commit b5566adff63e7def8f60fe1ea4bd805726efc407
Author: Richard Russon <rich@flatcap.org>
Date:   Wed Sep 27 19:04:39 2017 +0100

    fix: overflow in mutt_mktime()
    
    mutt_mktime() can overflow when used on 32-bit arches.
    This was due to a bogus comparision.
    
    Now, extreme future dates will be interpreted as 2038-01-19.
    
    Fixes #794

diff --git a/lib/date.c b/lib/date.c
index 5cce4b3f9..c6cd619c8 100644
--- a/lib/date.c
+++ b/lib/date.c
@@ -54,8 +54,10 @@
 
 /* theoretically time_t can be float but it is integer on most (if not all) systems */
 #define TIME_T_MAX ((((time_t) 1 << (sizeof(time_t) * 8 - 2)) - 1) * 2 + 1)
+#define TIME_T_MIN (-TIME_T_MAX - 1)
 #define TM_YEAR_MAX                                                            \
   (1970 + (((((TIME_T_MAX - 59) / 60) - 59) / 60) - 23) / 24 / 366)
+#define TM_YEAR_MIN (1970 - (TM_YEAR_MAX - 1970) - 1)
 
 /**
  * Weekdays - Day of the week (abbreviated)
@@ -247,8 +249,10 @@ time_t mutt_mktime(struct tm *t, int local)
 
   /* Prevent an integer overflow.
    * The time_t cast is an attempt to silence a clang range warning. */
-  if ((time_t) t->tm_year > TM_YEAR_MAX)
+  if ((time_t) t->tm_year > (TM_YEAR_MAX - 1900))
     return TIME_T_MAX;
+  if ((time_t) t->tm_year < (TM_YEAR_MIN - 1900))
+    return TIME_T_MIN;
 
   /* Compute the number of days since January 1 in the same year */
   g = AccumDaysPerMonth[t->tm_mon % 12];

