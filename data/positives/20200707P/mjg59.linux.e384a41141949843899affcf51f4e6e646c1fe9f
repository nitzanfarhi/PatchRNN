commit e384a41141949843899affcf51f4e6e646c1fe9f
Author: Dan Carpenter <dan.carpenter@oracle.com>
Date:   Fri Nov 4 21:20:43 2011 +0300

    Staging: comedi: integer overflow in do_insnlist_ioctl()
    
    There is an integer overflow here that could cause memory corruption
    on 32 bit systems.
    
    insnlist.n_insns could be a very high value size calculation for
    kmalloc() could overflow resulting in a smaller "insns" than
    expected.  In the for (i = 0; i < insnlist.n_insns; i++) {... loop
    we would read past the end of the buffer, possibly corrupting memory
    as well.
    
    Signed-off-by: Dan Carpenter <dan.carpenter@oracle.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>

diff --git a/drivers/staging/comedi/comedi_fops.c b/drivers/staging/comedi/comedi_fops.c
index ebdcecda3583..ed4853f194c4 100644
--- a/drivers/staging/comedi/comedi_fops.c
+++ b/drivers/staging/comedi/comedi_fops.c
@@ -670,6 +670,11 @@ static int do_insnlist_ioctl(struct comedi_device *dev,
 		goto error;
 	}
 
+	if (sizeof(struct comedi_insn) * insnlist.n_insns < insnlist.n_insns) {
+		ret = -EINVAL;
+		goto error;
+	}
+
 	insns =
 	    kmalloc(sizeof(struct comedi_insn) * insnlist.n_insns, GFP_KERNEL);
 	if (!insns) {

