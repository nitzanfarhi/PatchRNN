commit 5bebf82fff53a96f330c0879ffe870bdf3aaeab6
Author: Paul Walmsley <paul@booyaka.com>
Date:   Wed May 9 10:47:16 2007 -0600

    Fix hang on IBM Token Ring PCMCIA card ejection
    
    Ejecting a PCMCIA IBM Token Ring card that has not had its dev->open()
    called will reliably trigger an uninitialized spinlock oops when
    spinlock debugging is enabled. The system then hangs, occasionally
    softlockup oopsing.  Apparently ibmtr.c:tok_interrupt() doesn't expect
    to be called before tok_open(), but tok_interrupt() gets called anyway
    when the card is ejected.  So, set an already-existing flag which
    causes tok_interrupt() to bail out early upon card ejection. Tested by
    inserting and removing the PCMCIA card several times.
    
    Signed-off-by: Paul Walmsley <paul@booyaka.com>
    Signed-off-by: Jeff Garzik <jeff@garzik.org>

diff --git a/drivers/net/pcmcia/ibmtr_cs.c b/drivers/net/pcmcia/ibmtr_cs.c
index 1060154ae750..4ecb8ca5a992 100644
--- a/drivers/net/pcmcia/ibmtr_cs.c
+++ b/drivers/net/pcmcia/ibmtr_cs.c
@@ -189,16 +189,20 @@ static void ibmtr_detach(struct pcmcia_device *link)
 {
     struct ibmtr_dev_t *info = link->priv;
     struct net_device *dev = info->dev;
+     struct tok_info *ti = netdev_priv(dev);
 
     DEBUG(0, "ibmtr_detach(0x%p)\n", link);
+    
+    /* 
+     * When the card removal interrupt hits tok_interrupt(), 
+     * bail out early, so we don't crash the machine 
+     */
+    ti->sram_phys |= 1;
 
     if (link->dev_node)
 	unregister_netdev(dev);
-
-    {
-	struct tok_info *ti = netdev_priv(dev);
-	del_timer_sync(&(ti->tr_timer));
-    }
+    
+    del_timer_sync(&(ti->tr_timer));
 
     ibmtr_release(link);
 

