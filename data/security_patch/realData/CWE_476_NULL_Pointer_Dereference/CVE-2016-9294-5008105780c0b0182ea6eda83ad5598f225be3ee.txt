From 5008105780c0b0182ea6eda83ad5598f225be3ee Mon Sep 17 00:00:00 2001
From: Tor Andersson <tor.andersson@artifex.com>
Date: Wed, 26 Oct 2016 14:31:53 +0200
Subject: [PATCH] Fix 697172: degenerate labeled break/continue statement.

A labeled break statement will look for a matching label through
its chain of parent statements. We start looking at the break statement
though, so if the label is attached to the break, we'll return the break
statement itself as a break target.

Start looking for targets one level up instead.
---
 jscompile.c | 10 +++++-----
 1 file changed, 5 insertions(+), 5 deletions(-)

diff --git a/jscompile.c b/jscompile.c
index ee1d22f..e7055fc 100644
--- a/jscompile.c
+++ b/jscompile.c
@@ -1102,11 +1102,11 @@ static void cstm(JF, js_Ast *stm)
 
 	case STM_BREAK:
 		if (stm->a) {
-			target = breaktarget(J, F, stm, stm->a->string);
+			target = breaktarget(J, F, stm->parent, stm->a->string);
 			if (!target)
 				jsC_error(J, stm, "break label '%s' not found", stm->a->string);
 		} else {
-			target = breaktarget(J, F, stm, NULL);
+			target = breaktarget(J, F, stm->parent, NULL);
 			if (!target)
 				jsC_error(J, stm, "unlabelled break must be inside loop or switch");
 		}
@@ -1116,11 +1116,11 @@ static void cstm(JF, js_Ast *stm)
 
 	case STM_CONTINUE:
 		if (stm->a) {
-			target = continuetarget(J, F, stm, stm->a->string);
+			target = continuetarget(J, F, stm->parent, stm->a->string);
 			if (!target)
 				jsC_error(J, stm, "continue label '%s' not found", stm->a->string);
 		} else {
-			target = continuetarget(J, F, stm, NULL);
+			target = continuetarget(J, F, stm->parent, NULL);
 			if (!target)
 				jsC_error(J, stm, "continue must be inside loop");
 		}
@@ -1133,7 +1133,7 @@ static void cstm(JF, js_Ast *stm)
 			cexp(J, F, stm->a);
 		else
 			emit(J, F, OP_UNDEF);
-		target = returntarget(J, F, stm);
+		target = returntarget(J, F, stm->parent);
 		if (!target)
 			jsC_error(J, stm, "return not in function");
 		cexit(J, F, STM_RETURN, stm, target);
-- 
2.9.1

