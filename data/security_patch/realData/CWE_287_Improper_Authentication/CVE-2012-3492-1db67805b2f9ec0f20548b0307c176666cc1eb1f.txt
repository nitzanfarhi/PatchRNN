From 1db67805b2f9ec0f20548b0307c176666cc1eb1f Mon Sep 17 00:00:00 2001
From: Matthew Farrellee <matt@redhat.com>
Date: Mon, 30 Jul 2012 15:31:37 -0700
Subject: [PATCH] FS authentication requires authentication directory to be
 mode=0700, #3166

Signed-off-by: Zach Miller <zmiller@cs.wisc.edu>
---
 src/condor_io/condor_auth_fs.cpp | 15 ++++++++++++++-
 1 file changed, 14 insertions(+), 1 deletion(-)

diff --git a/src/condor_io/condor_auth_fs.cpp b/src/condor_io/condor_auth_fs.cpp
index c246f24..b055a17 100644
--- a/src/condor_io/condor_auth_fs.cpp
+++ b/src/condor_io/condor_auth_fs.cpp
@@ -332,12 +332,25 @@ int Condor_Auth_FS::authenticate(const char * /* remoteHost */, CondorError* err
 				// making a conservative change in 7.6.5 that allows
 				// the link count to be 1 or 2.  -Dan 11/11
 
+				// The CREATE_LOCKS_ON_LOCAL_DISK code relies on
+				// creating directories with mode=0777 that may be
+				// owned by any user who happens to need a lock. This
+				// is especially true for users with running
+				// jobs. Because local lock code uses a tree of these
+				// directories, it is possibly for a malicious user to
+				// satify FS authentication requirements by renamed a
+				// target user's lock directory into /tmp. To avoid
+				// this attack, the server side must also fail
+				// authentication for any directories whose mode is
+				// not 0700. -matt July 2012
+
 				// assume it is wrong until we see otherwise
 				bool stat_is_okay = false;
 
 				if ((stat_buf.st_nlink == 1 || stat_buf.st_nlink == 2) &&
 					(!S_ISLNK(stat_buf.st_mode)) && // check for soft link
-					(S_ISDIR(stat_buf.st_mode)) )   // check for directory
+					(S_ISDIR(stat_buf.st_mode)) &&      // check for directory
+					((stat_buf.st_mode & 07777) == 0700)) // check for mode=0700
 				{
 					// client created a directory as instructed
 					stat_is_okay = true;
-- 
1.7.12.4

